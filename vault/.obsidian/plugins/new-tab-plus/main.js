/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NewTabPlusPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  CheckFileCurrentTabs: true,
  Delay: 30
};
var NewTabPlusPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.previousFrameOpenLeaves = Array();
    this.previousFrameFilePaths = Array();
    this.nextFrameOpenLeaves = Array();
    this.nextFrameFilePaths = Array();
    this.fileHandled = false;
    this.onClickEvent = async () => {
      this.fileHandled = false;
      this.previousFrameOpenLeaves = this.getCurrentTabs();
      this.previousFrameFilePaths = await this.getCurrentElementsInTabs(this.previousFrameOpenLeaves);
    };
    this.getCurrentTabs = () => {
      const leaves = [];
      this.app.workspace.iterateAllLeaves((leaf) => {
        if (leaf.view.getViewType() == "markdown" || leaf.view.getViewType() == "graph" || leaf.view.getViewType() == "canvas" || leaf.view.getViewType() == "image") {
          leaves.push(leaf);
        }
      });
      return leaves;
    };
    this.getCurrentElementsInTabs = (leaves) => {
      return leaves.map((leaf) => {
        if (leaf.view instanceof import_obsidian.FileView) {
          return leaf.view.file.path;
        }
        return leaf.view;
      });
    };
    this.deleteFile = async () => {
      this.fileHandled = true;
    };
    this.fileHandler = () => {
      var _a;
      if (this.fileHandled)
        return;
      if (this.previousFrameOpenLeaves.length === 0)
        return;
      this.fileHandled = true;
      this.nextFrameOpenLeaves = this.getCurrentTabs();
      this.nextFrameFilePaths = this.getCurrentElementsInTabs(this.nextFrameOpenLeaves);
      if (this.nextFrameFilePaths.length !== this.previousFrameFilePaths.length)
        return;
      for (let leaf in this.nextFrameOpenLeaves) {
        if (this.previousFrameFilePaths[leaf] !== this.nextFrameFilePaths[leaf]) {
          this.oldLeaf = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.View)) == null ? void 0 : _a.leaf;
          if (this.previousFrameFilePaths.contains(this.nextFrameFilePaths[leaf]) && this.settings.CheckFileCurrentTabs) {
            const index = this.previousFrameFilePaths.indexOf(this.nextFrameFilePaths[leaf]);
            setTimeout(() => {
              this.openOldFile(this.previousFrameFilePaths[leaf]);
              this.app.workspace.revealLeaf(this.previousFrameOpenLeaves[index]);
              this.resetVariables();
              this.app.workspace.setActiveLeaf(this.previousFrameOpenLeaves[index], { focus: true });
            }, this.settings.Delay);
            return;
          }
          setTimeout(() => {
            this.openOldFile(this.previousFrameFilePaths[leaf]);
            this.openNewFile(this.nextFrameFilePaths[leaf]);
          }, this.settings.Delay);
          break;
        }
      }
    };
    this.openOldFile = (element) => {
      if (element instanceof import_obsidian.View) {
        this.oldLeaf.open(element);
        this.oldLeaf.setViewState({ type: element.getViewType() });
      } else {
        const file = this.app.vault.getAbstractFileByPath(element);
        this.oldLeaf.openFile(file, { active: true });
      }
    };
    this.openNewFile = async (element) => {
      let newLeaf = this.app.workspace.getLeaf(true);
      this.app.workspace.revealLeaf(newLeaf);
      if (element instanceof import_obsidian.View) {
        newLeaf.open(element);
        newLeaf.setViewState({ type: element.getViewType() });
      } else {
        const file = this.app.vault.getAbstractFileByPath(element);
        newLeaf.openFile(file);
        this.app.workspace.setActiveLeaf(newLeaf, { focus: true });
      }
      this.app.workspace.revealLeaf(newLeaf);
    };
    this.resetVariables = () => {
      this.previousFrameOpenLeaves = [];
      this.previousFrameFilePaths = [];
      this.nextFrameOpenLeaves = [];
      this.nextFrameFilePaths = [];
    };
  }
  async onload() {
    await this.loadSettings();
    this.registerDomEvent(window, "click", this.onClickEvent, {
      capture: true
    });
    this.registerEvent(this.app.vault.on("delete", this.deleteFile));
    this.registerEvent(this.app.workspace.on("file-open", this.fileHandler));
    this.addSettingTab(new NewTabPlusSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var NewTabPlusSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Check if file already open").setDesc("This will check if the file is already open among the tabs and will switch to it if it is.").addToggle(
      (bool) => bool.setValue(this.plugin.settings.CheckFileCurrentTabs).onChange(async (value) => {
        this.plugin.settings.CheckFileCurrentTabs = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delay to execute (ms)").setDesc("Default value: 30. You might want to cramp it up a little if you experience misbehaviors").addSlider((slider) => {
      slider.setLimits(10, 100, 10);
      slider.setValue(this.plugin.settings.Delay).onChange(async (value) => {
        this.plugin.settings.Delay = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
