{"path":"sem2/AuW/VRL/slides/AuW-L15-chernoff.pdf","text":"Al gor i thm e n und Wa h r s c h e i n l i c h k e i t A n g e l i ka S t e g e r E m o W e l zl I n st i t u t f ü r T h e o r e t i sch e I n f o r m a t i k Wahrscheinlichkeit Kapitel 2.7 Die Ungleichung von Chernoff Abschätzen von Wahrscheinlichkeiten ∀ X, ∀ t > 0 Chebyshev: Markov: ∀ X ≥ 0, ∀ t > 0 Pr[X\u0000t]E[X]t <latexit sha1_base64=\"U2NyiaDBV+fvkXwi2iQflASA+RU=\">AAAD5HichVJLb9NAEJ7UPNrySuHIxaJC4hTZPdBUqFJVKOKCCBJpI8VRtXbWqZX1Q+tNabD8D7gBV34IV/gBXDnxRzjw7SQpDynKWuuZ/Wbmm8duWKikNJ73o7HmXLl67fr6xuaNm7du32lu3T0u84mOZDfKVa57oSilSjLZNYlRsldoKdJQyZNw/NTaT86lLpM8e2OmhRykYpQlcRIJA+i02QqMvDBVR9f9XjCSrhkETwIl8Yu1iKogFeYsDN2jfm9QV6Y+bW57Lc/zfN93reLvPvag7O21d/y261sT1vZB++d3l4g6+VbjFQU0pJwimlBKkjIy0BUJKvH1ySePCmADqoBpaAnbJdW0idgJvCQ8BNAx/iOc+nM0w9lylhwdIYvC1oh06SH2c2YM4W2zSugl5C/sd4yNlmaomNlWOIUMwbjBjC+BGzqDx6rIdO65qGV1pO3KUExt7iZBfQUjts/okucZLBrYmC0uHbHnCBwhn88xgQyyiwrslBcMLnc8hBQsJbNkc0YBPg1pp2/rsTXO7JLe8mRT7shGVrDF3GWCDFPmijmTQnzN9hLI//jyvkucBN/5kPbxImz/dlIK3cgVsX/72Tib+c/sbZxkq+abnOH7lzXaF714tu5y5Xin5Xst/zWe9iHN1jrdpwf0CNXu0gG9oA4mHtFH+kJf6ZsTO++dD86nmetaYx5zj/5ZzuffV+jSUA==</latexit><latexit sha1_base64=\"5/M0IaIY126655V4zfIb4VlXZ9U=\">AAAD5HichVJLb9NAEJ7UPNrySssBIS4WFRKnyO6BpkKVKqCICyJIpI0UR9XaWbtW/NJ60xIs/wNuwJUfwhV+AFe4cOVHcODbSVIeUpS11jP7zcw3j12/SOJSO863xop14eKly6tr61euXrt+o7mxeVjmYxXIbpAnuer5opRJnMmujnUie4WSIvUTeeSPHhv70alUZZxnr/SkkINURFkcxoHQgI6bLU/L17rqqLrf8yJp64H30EskfqESQeWlQp/4vn3Q7w3qStfHzS2n5TiO67q2UdydBw6U3d32ttu2XWPC2tpv//h66/vP2518o/GCPBpSTgGNKSVJGWnoCQkq8fXJJYcKYAOqgCloMdsl1bSO2DG8JDwE0BH+EU79GZrhbDhLjg6QJcFWiLTpHvZTZvThbbJK6CXkL+w3jEULM1TMbCqcQPpgXGPG58A1ncBjWWQ685zXsjzSdKUppDZ3E6O+ghHTZ3DO8wQWBWzEFpsO2DMCh8/nU0wgg+yiAjPlOYPNHQ8hBUvJLNmMUYBPQZrpm3pMjVO7pDOebModmcgKtpC7jJFhwlwhZ0oQX7O9BPI/vrjvEifBdz6kPbwI07+ZVIJu5JLYv/1MnMn8Z/YmTrJV8U1O8b3zGs2Lnj9be7FyuN1ynZb7Ek/7EU3XKt2hu3Qf1e7QPj2jDiYe0Hv6RJ/pixVab6131oep60pjFnOT/lnWx98Op9Qi</latexit><latexit sha1_base64=\"5/M0IaIY126655V4zfIb4VlXZ9U=\">AAAD5HichVJLb9NAEJ7UPNrySssBIS4WFRKnyO6BpkKVKqCICyJIpI0UR9XaWbtW/NJ60xIs/wNuwJUfwhV+AFe4cOVHcODbSVIeUpS11jP7zcw3j12/SOJSO863xop14eKly6tr61euXrt+o7mxeVjmYxXIbpAnuer5opRJnMmujnUie4WSIvUTeeSPHhv70alUZZxnr/SkkINURFkcxoHQgI6bLU/L17rqqLrf8yJp64H30EskfqESQeWlQp/4vn3Q7w3qStfHzS2n5TiO67q2UdydBw6U3d32ttu2XWPC2tpv//h66/vP2518o/GCPBpSTgGNKSVJGWnoCQkq8fXJJYcKYAOqgCloMdsl1bSO2DG8JDwE0BH+EU79GZrhbDhLjg6QJcFWiLTpHvZTZvThbbJK6CXkL+w3jEULM1TMbCqcQPpgXGPG58A1ncBjWWQ685zXsjzSdKUppDZ3E6O+ghHTZ3DO8wQWBWzEFpsO2DMCh8/nU0wgg+yiAjPlOYPNHQ8hBUvJLNmMUYBPQZrpm3pMjVO7pDOebModmcgKtpC7jJFhwlwhZ0oQX7O9BPI/vrjvEifBdz6kPbwI07+ZVIJu5JLYv/1MnMn8Z/YmTrJV8U1O8b3zGs2Lnj9be7FyuN1ynZb7Ek/7EU3XKt2hu3Qf1e7QPj2jDiYe0Hv6RJ/pixVab6131oep60pjFnOT/lnWx98Op9Qi</latexit><latexit sha1_base64=\"X0qPqlV93hZ7jXoRzTkYUzyPEdM=\">AAAD5HichVJLb9NAEJ7UPNrySuHIxSJC4hTZPdBUqFJVKOKCCBJpI8VRtXbWrhW/tN6UBsv/gBtw5YdwhT/Bf+HAtxOnPKQoa61n9puZbx67fpHEpXacn60N69r1Gzc3t7Zv3b5z91575/5Jmc9UIAdBnuRq6ItSJnEmBzrWiRwWSorUT+SpP31u7KcXUpVxnr3T80KOUxFlcRgHQgM6a3c9LS911Vf1aOhF0tZj75mXSPxCJYLKS4U+9337eDQc15Wuz9odp+s4juu6tlHcvacOlP393q7bs11jwupQs/r5TusNeTShnAKaUUqSMtLQExJU4huRSw4VwMZUAVPQYrZLqmkbsTN4SXgIoFP8I5xGDZrhbDhLjg6QJcFWiLTpMfZLZvThbbJK6CXkL+wPjEUrM1TMbCqcQ/pg3GLG18A1ncNjXWTaeC5rWR9putIUUo+7iVFfwYjpM7jieQGLAjZli03H7BmBw+fzBSaQQQ5QgZnyksHmjieQgqVklqxhFOBTkGb6ph5T48Iu6T1PNuWOTGQFW8hdxsgwZ66QMyWIr9leAvkfX913iZPgO5/QAV6E6d9MKkE3ck3s334mzmT+M3sTJ9mq+CYX+MFVjeZFL5+tvVo52e26Ttd963QOj5q3vUkP6RE9QbV7dEivqI+JB/SZvtF3+mGF1kfrk/Vl4brRamIe0D/L+vobKgbQCQ==</latexit> Pr[|X\u0000E[X]|\u0000t]Var[X]t 2 <latexit sha1_base64=\"EOCMxsN1gDYU2UzryMNPnka2/o8=\">AAAD9nichVJLb9NAEJ7UPNrySuHIxSJC4kJkR4imQpWiQhEXRJBIGikO1dpZp1b8iNabtsHNX+EGXPkhXEHiv3Dg24lTHlKUtdYz+83MN49dfxJHuXacn5UN68rVa9c3t7Zv3Lx1+0515243z6YqkJ0gizPV80Uu4yiVHR3pWPYmSorEj+WRP35u7EenUuVRlr7Ts4kcJGKURmEUCA3ouNrytDzXRVvN+xe9x14i9Inv24f93uDCG0lbD7xnXizxC5UIioVzV8C7N5gX+n1jflytOXXHcVzXtY3i7j51oOztNRtu03aNCatG5WpnO5U35NGQMgpoSglJSklDj0lQjq9PLjk0ATagApiCFrFd0py2ETuFl4SHADrGf4RTv0RTnA1nztEBssTYCpE2PcR+yYw+vE1WCT2H/IX9gbHRygwFM5sKZ5A+GLeY8TVwTSfwWBeZlJ7LWtZHmq40hdTkbiLUN2HE9Blc8ryARQEbs8WmQ/YcgcPn8ykmkEJ2UIGZ8pLB5o6HkIKlZJa0ZBTgU5Bm+qYeU+PCLumMJ5twRyaygC3kLiNkmDFXyJlixM/ZngP5H1/dd46T4Dsf0j5ehOnfTCpGN3JN7N9+Js5k/jN7EyfZqvgmF/j+ZY3mRS+frb1a6TbqrlN33z6ptQ7Kt71J9+kBPUK1u9SiV9TGxAP6TN/oO/2wzq2P1ifry8J1o1LG3KN/lvX1N7GU18g=</latexit><latexit sha1_base64=\"EOCMxsN1gDYU2UzryMNPnka2/o8=\">AAAD9nichVJLb9NAEJ7UPNrySuHIxSJC4kJkR4imQpWiQhEXRJBIGikO1dpZp1b8iNabtsHNX+EGXPkhXEHiv3Dg24lTHlKUtdYz+83MN49dfxJHuXacn5UN68rVa9c3t7Zv3Lx1+0515243z6YqkJ0gizPV80Uu4yiVHR3pWPYmSorEj+WRP35u7EenUuVRlr7Ts4kcJGKURmEUCA3ouNrytDzXRVvN+xe9x14i9Inv24f93uDCG0lbD7xnXizxC5UIioVzV8C7N5gX+n1jflytOXXHcVzXtY3i7j51oOztNRtu03aNCatG5WpnO5U35NGQMgpoSglJSklDj0lQjq9PLjk0ATagApiCFrFd0py2ETuFl4SHADrGf4RTv0RTnA1nztEBssTYCpE2PcR+yYw+vE1WCT2H/IX9gbHRygwFM5sKZ5A+GLeY8TVwTSfwWBeZlJ7LWtZHmq40hdTkbiLUN2HE9Blc8ryARQEbs8WmQ/YcgcPn8ykmkEJ2UIGZ8pLB5o6HkIKlZJa0ZBTgU5Bm+qYeU+PCLumMJ5twRyaygC3kLiNkmDFXyJlixM/ZngP5H1/dd46T4Dsf0j5ehOnfTCpGN3JN7N9+Js5k/jN7EyfZqvgmF/j+ZY3mRS+frb1a6TbqrlN33z6ptQ7Kt71J9+kBPUK1u9SiV9TGxAP6TN/oO/2wzq2P1ifry8J1o1LG3KN/lvX1N7GU18g=</latexit><latexit sha1_base64=\"EOCMxsN1gDYU2UzryMNPnka2/o8=\">AAAD9nichVJLb9NAEJ7UPNrySuHIxSJC4kJkR4imQpWiQhEXRJBIGikO1dpZp1b8iNabtsHNX+EGXPkhXEHiv3Dg24lTHlKUtdYz+83MN49dfxJHuXacn5UN68rVa9c3t7Zv3Lx1+0515243z6YqkJ0gizPV80Uu4yiVHR3pWPYmSorEj+WRP35u7EenUuVRlr7Ts4kcJGKURmEUCA3ouNrytDzXRVvN+xe9x14i9Inv24f93uDCG0lbD7xnXizxC5UIioVzV8C7N5gX+n1jflytOXXHcVzXtY3i7j51oOztNRtu03aNCatG5WpnO5U35NGQMgpoSglJSklDj0lQjq9PLjk0ATagApiCFrFd0py2ETuFl4SHADrGf4RTv0RTnA1nztEBssTYCpE2PcR+yYw+vE1WCT2H/IX9gbHRygwFM5sKZ5A+GLeY8TVwTSfwWBeZlJ7LWtZHmq40hdTkbiLUN2HE9Blc8ryARQEbs8WmQ/YcgcPn8ykmkEJ2UIGZ8pLB5o6HkIKlZJa0ZBTgU5Bm+qYeU+PCLumMJ5twRyaygC3kLiNkmDFXyJlixM/ZngP5H1/dd46T4Dsf0j5ehOnfTCpGN3JN7N9+Js5k/jN7EyfZqvgmF/j+ZY3mRS+frb1a6TbqrlN33z6ptQ7Kt71J9+kBPUK1u9SiV9TGxAP6TN/oO/2wzq2P1ifry8J1o1LG3KN/lvX1N7GU18g=</latexit><latexit sha1_base64=\"EOCMxsN1gDYU2UzryMNPnka2/o8=\">AAAD9nichVJLb9NAEJ7UPNrySuHIxSJC4kJkR4imQpWiQhEXRJBIGikO1dpZp1b8iNabtsHNX+EGXPkhXEHiv3Dg24lTHlKUtdYz+83MN49dfxJHuXacn5UN68rVa9c3t7Zv3Lx1+0515243z6YqkJ0gizPV80Uu4yiVHR3pWPYmSorEj+WRP35u7EenUuVRlr7Ts4kcJGKURmEUCA3ouNrytDzXRVvN+xe9x14i9Inv24f93uDCG0lbD7xnXizxC5UIioVzV8C7N5gX+n1jflytOXXHcVzXtY3i7j51oOztNRtu03aNCatG5WpnO5U35NGQMgpoSglJSklDj0lQjq9PLjk0ATagApiCFrFd0py2ETuFl4SHADrGf4RTv0RTnA1nztEBssTYCpE2PcR+yYw+vE1WCT2H/IX9gbHRygwFM5sKZ5A+GLeY8TVwTSfwWBeZlJ7LWtZHmq40hdTkbiLUN2HE9Blc8ryARQEbs8WmQ/YcgcPn8ykmkEJ2UIGZ8pLB5o6HkIKlZJa0ZBTgU5Bm+qYeU+PCLumMJ5twRyaygC3kLiNkmDFXyJlixM/ZngP5H1/dd46T4Dsf0j5ehOnfTCpGN3JN7N9+Js5k/jN7EyfZqvgmF/j+ZY3mRS+frb1a6TbqrlN33z6ptQ7Kt71J9+kBPUK1u9SiV9TGxAP6TN/oO/2wzq2P1ifry8J1o1LG3KN/lvX1N7GU18g=</latexit> Chernoff: Pr[X\u0000(1+\u0000)E[X]]e \u0000 13 \u0000 2 E[X] <latexit sha1_base64=\"4OGIlwpC2HinUlOP0DCgYCO8qWc=\">AAAEDnichVLLbtNAFL2pebTl0RSWbEZESEWIyA6IpqoqVUARG0SQSBspTquxM0mt+BGNJ4UQ5R/4GnbAll9gzxa+gAVnbpxSkKJMNLkz595z7sMTDOMoN677vbTiXLp85erq2vq16zdubpQ3bx3m2UiHqhlmcaZbgcxVHKWqaSITq9ZQK5kEsToKBs+s/+hM6TzK0rdmPFSdRPbTqBeF0gA6KbeEb9R7M2noabvl95XwE2lOg0BseQ/8roqNvD9HDtqtTkf4u36s/F11PHno97QMvUezsOOauBg4PSlX3Krrup7nCXvwtp+4OOzs1GteXXjWhVWhYjWyzdJr8qlLGYU0ooQUpWRwjklSjl+bPHJpCKxDE2Aap4j9iqa0Du4IUQoREugA/33c2gWa4m41c2aHyBJjazAF3cN+wYoBom1WhXMO+xv7A2P9hRkmrGwrHMMGUFxjxVfADZ0iYhkzKSLntSxn2q4M9ajO3USob8iI7TM813kOjwY2YI+gA47sQyPg+xkmkMI2UYGd8lxBcMddWMlWsUpaKEroaVg7fVuPrXHmV/SOJ5twR5Y5ga/HXUbIMGatHmeKwZ+yPwfyP7647xw3yd+8S3t4EbZ/O6kY3agl3Itxlmcz/5295Sn2av6SM3zvvEb7oufPViw+HNaqnlv13jyu7D8t3vYq3aG7tIVqt2mfXlIDEw/pC/2gn/TL+eh8cj47X2ehK6WCc5v+Wc63P4aW3rc=</latexit><latexit sha1_base64=\"4OGIlwpC2HinUlOP0DCgYCO8qWc=\">AAAEDnichVLLbtNAFL2pebTl0RSWbEZESEWIyA6IpqoqVUARG0SQSBspTquxM0mt+BGNJ4UQ5R/4GnbAll9gzxa+gAVnbpxSkKJMNLkz595z7sMTDOMoN677vbTiXLp85erq2vq16zdubpQ3bx3m2UiHqhlmcaZbgcxVHKWqaSITq9ZQK5kEsToKBs+s/+hM6TzK0rdmPFSdRPbTqBeF0gA6KbeEb9R7M2noabvl95XwE2lOg0BseQ/8roqNvD9HDtqtTkf4u36s/F11PHno97QMvUezsOOauBg4PSlX3Krrup7nCXvwtp+4OOzs1GteXXjWhVWhYjWyzdJr8qlLGYU0ooQUpWRwjklSjl+bPHJpCKxDE2Aap4j9iqa0Du4IUQoREugA/33c2gWa4m41c2aHyBJjazAF3cN+wYoBom1WhXMO+xv7A2P9hRkmrGwrHMMGUFxjxVfADZ0iYhkzKSLntSxn2q4M9ajO3USob8iI7TM813kOjwY2YI+gA47sQyPg+xkmkMI2UYGd8lxBcMddWMlWsUpaKEroaVg7fVuPrXHmV/SOJ5twR5Y5ga/HXUbIMGatHmeKwZ+yPwfyP7647xw3yd+8S3t4EbZ/O6kY3agl3Itxlmcz/5295Sn2av6SM3zvvEb7oufPViw+HNaqnlv13jyu7D8t3vYq3aG7tIVqt2mfXlIDEw/pC/2gn/TL+eh8cj47X2ehK6WCc5v+Wc63P4aW3rc=</latexit><latexit sha1_base64=\"4OGIlwpC2HinUlOP0DCgYCO8qWc=\">AAAEDnichVLLbtNAFL2pebTl0RSWbEZESEWIyA6IpqoqVUARG0SQSBspTquxM0mt+BGNJ4UQ5R/4GnbAll9gzxa+gAVnbpxSkKJMNLkz595z7sMTDOMoN677vbTiXLp85erq2vq16zdubpQ3bx3m2UiHqhlmcaZbgcxVHKWqaSITq9ZQK5kEsToKBs+s/+hM6TzK0rdmPFSdRPbTqBeF0gA6KbeEb9R7M2noabvl95XwE2lOg0BseQ/8roqNvD9HDtqtTkf4u36s/F11PHno97QMvUezsOOauBg4PSlX3Krrup7nCXvwtp+4OOzs1GteXXjWhVWhYjWyzdJr8qlLGYU0ooQUpWRwjklSjl+bPHJpCKxDE2Aap4j9iqa0Du4IUQoREugA/33c2gWa4m41c2aHyBJjazAF3cN+wYoBom1WhXMO+xv7A2P9hRkmrGwrHMMGUFxjxVfADZ0iYhkzKSLntSxn2q4M9ajO3USob8iI7TM813kOjwY2YI+gA47sQyPg+xkmkMI2UYGd8lxBcMddWMlWsUpaKEroaVg7fVuPrXHmV/SOJ5twR5Y5ga/HXUbIMGatHmeKwZ+yPwfyP7647xw3yd+8S3t4EbZ/O6kY3agl3Itxlmcz/5295Sn2av6SM3zvvEb7oufPViw+HNaqnlv13jyu7D8t3vYq3aG7tIVqt2mfXlIDEw/pC/2gn/TL+eh8cj47X2ehK6WCc5v+Wc63P4aW3rc=</latexit><latexit sha1_base64=\"4OGIlwpC2HinUlOP0DCgYCO8qWc=\">AAAEDnichVLLbtNAFL2pebTl0RSWbEZESEWIyA6IpqoqVUARG0SQSBspTquxM0mt+BGNJ4UQ5R/4GnbAll9gzxa+gAVnbpxSkKJMNLkz595z7sMTDOMoN677vbTiXLp85erq2vq16zdubpQ3bx3m2UiHqhlmcaZbgcxVHKWqaSITq9ZQK5kEsToKBs+s/+hM6TzK0rdmPFSdRPbTqBeF0gA6KbeEb9R7M2noabvl95XwE2lOg0BseQ/8roqNvD9HDtqtTkf4u36s/F11PHno97QMvUezsOOauBg4PSlX3Krrup7nCXvwtp+4OOzs1GteXXjWhVWhYjWyzdJr8qlLGYU0ooQUpWRwjklSjl+bPHJpCKxDE2Aap4j9iqa0Du4IUQoREugA/33c2gWa4m41c2aHyBJjazAF3cN+wYoBom1WhXMO+xv7A2P9hRkmrGwrHMMGUFxjxVfADZ0iYhkzKSLntSxn2q4M9ajO3USob8iI7TM813kOjwY2YI+gA47sQyPg+xkmkMI2UYGd8lxBcMddWMlWsUpaKEroaVg7fVuPrXHmV/SOJ5twR5Y5ga/HXUbIMGatHmeKwZ+yPwfyP7647xw3yd+8S3t4EbZ/O6kY3agl3Itxlmcz/5295Sn2av6SM3zvvEb7oufPViw+HNaqnlv13jyu7D8t3vYq3aG7tIVqt2mfXlIDEw/pC/2gn/TL+eh8cj47X2ehK6WCc5v+Wc63P4aW3rc=</latexit> ∀ X ∼ Bin(n,p), ∀ 0 < 𝛅 < 1 Chernoff Schranken Pr[X ≥ (1+𝜹) ] für 𝜹 = 0.1: E[X]=0 Kapitel 2.8 Randomisierte Algorithmen Algorithmen Klassischer Algorithmus: Algorithmus A Eingabe I Ausgabe A(I) Wir beweisen: (1) Korrektheit: für alle Eingaben I gilt: A(I) ist korrekt (d.h. was es sein soll) (2) Laufzeit: für alle Eingaben I mit Länge |I|=n: Laufzeit = O(f(n)) Randomisierte Algorithmen Algorithmus A Eingabe I Ausgabe A(I,R) zufällige Bits / Zufallszahlen Eigenschaften: Ausgabe A(I,R) hängt von Eingabe I und Zufallszahlen R ab. Insbesondere: Ergebnis lässt sich i.A. nicht reproduzieren .. ! Randomisierte Algorithmen Algorithmus A Eingabe I Ausgabe A(I,R) zufällige Bits / Zufallszahlen R Wir beweisen: (1) Korrektheit: für alle Eingaben I gilt: Pr[A(I,R) ist korrekt] ≥ … (2) Laufzeit: für alle Eingaben I mit Länge |I|=n: [Laufzeit] = O(f(n)) und/oder Pr[Laufzeit ≦ f(n)] ≥ … 𝔼 W’keit ist bzgl Wahl der Zufallszahlen R Randomisierte Algorithmen Algorithmus A Eingabe I Ausgabe A(I,R) zufällige Bits / Zufallszahlen R Wir beweisen: (1) Korrektheit: für alle Eingaben I gilt: Pr[A(I,R) ist korrekt] ≥ … (2) Laufzeit: für alle Eingaben I mit Länge |I|=n: [Laufzeit] = O(f(n)) und/oder Pr[Laufzeit ≦ f(n)] ≥ … 𝔼 Idealer Weise: W’keit „praktisch“ Eins Randomisierte Algorithmen Algorithmus A Eingabe I Ausgabe A(I,R) Zufallszahlengenerator Wir beweisen: (1) Korrektheit: für alle Eingaben I gilt: Pr[A(I,R) ist korrekt] ≥ … (2) Laufzeit: für alle Eingaben I mit Länge |I|=n: [Laufzeit] = O(f(n)) und/oder Pr[Laufzeit ≦ O(f(n))] ≥ … 𝔼 Idealer Weise: W’keit „praktisch“ Eins Anfragen der Form: liefere einen Wert für X, wobei X verteilt ist wie … Annahme: alle Werte, die der Zufallszahlengenerator erzeugt sind unabhängig Las-Vegas und Monte-Carlo Algorithmen Las-Vegas Algorithmen: - geben nie eine falsche Antwort, aber - Laufzeit ist eine Zufallsvariable Monte-Carlo Algorithmen: - Laufzeit immer polynomiell, aber - geben zuweilen eine falsche Antwort Ziel: [Laufzeit] = „polynomiell“ (in Eingabelänge) 𝔼 Ziel: Pr[Antwort falsch] = „winzig“ Beispiele Las-Vegas Algorithmen: - QuickSort Monte-Carlo Algorithmen: QuickSort Satz: - QuickSort bestimmt immer das richtige Ergebnis - 𝐄[Laufzeit] = O(n ln n) Aufgabe: sortiere Elemente Selektieren Aufgabe: ﬁnde das k-te kleinste Element aus einem unsortierten Array Select( [12, 3, 22, 67, 8, 15, 19, 13] , 4): 13 SelektierenSelektieren Satz: - QuickSelect bestimmt immer das richtige Ergebnis - 𝐄[Laufzeit] = O(n) Sortieren und Selektieren O(n) Selektieren: erwartete Laufzeit: Frage: Was bedeutet dies für die Praxis? Gedankenexperiment t n := erwartete Laufzeit von Quickselect bei n Elementen Wir deﬁnieren einen neuen Algorithmus wie folgt: SuperQuickSelect(A,1,n,k) rufe quickselect(A,1,n,k) auf, sobald Laufzeit grösser als 2t n : breche Ausführung ab und gebe ??? aus Dies ist ein randomisierter Algorithmus mit - Laufzeit ≦ 2t n - Wahrscheinlichkeit für ??? ≦ 1/2 wg. Markov Ungleichung Gedankenexperiment t n := erwartete Laufzeit von Quickselect bei n Elementen SuperQuickSelect(A,1,n,k) rufe QuickSelect(A,1,n,k) auf, sobald Laufzeit grösser als 2t n : breche Ausführung ab und gebe ??? aus SuperSuperQuickSelect(A,1,n,k) wiederhole maximal 100 mal: rufe SuperQuickSelect(A,1,n,k) auf, terminiere, falls dieser Ergebnis ﬁndet (also nicht ??? ausgibt) gebe ??? aus Dies ist ein randomisierter Algorithmus mit - Laufzeit ≦ 200t n - Wahrscheinlichkeit für ??? ≦ 2 -100 Las-Vegas Algorithmen Las-Vegas Algorithmen: - geben nie eine falsche Antwort, aber - Laufzeit ist eine Zufallsvariable T - Laufzeit immer polynomiell, aber - zuweilen Antwort „???“ mit: [T] = „polynomiell (in Eingabelänge) “ 𝔼⟹ stoppe Alg nach Schritten 2𝔼[T ] Pr[Antwort „???“] ≤ 1/2 (wg Markov Ungleichung) … wdh 100 Mal ( ) 100 Las-Vegas Algorithmen Las-Vegas Algorithmen: - geben nie eine falsche Antwort, aber - Laufzeit ist eine Zufallsvariable T - Laufzeit immer polynomiell, aber - zuweilen Antwort „???“⟹ while Antwort „???“: repeat mit: Pr[Antwort „???“] = δ poly 𝔼[T] = 1 1 − δ ⋅ (Anzahl Versuche: Geo(1- )) δ Las-Vegas Algorithmen Las-Vegas Algorithmen: - geben nie eine falsche Antwort, aber - Laufzeit ist eine Zufallsvariable T alternative Deﬁnition: - Laufzeit immer polynomiell, aber - geben zuweilen eine Antwort „???“ Ziel: [T] = „polynomiell“ (in Eingabelänge) 𝔼 Ziel: Pr[Antwort „???“] = „winzig“ Beispiele Las-Vegas Algorithmen: - QuickSort, QuickSelect Monte-Carlo Algorithmen: - Testen einer Münze: fair (Kopf/Zahl) vs. fake (Kopf/Kopf) Algorithmus: werfe Münze ein Mal, falls Zahl: return „fair“ falls Kopf: return „fake“ Fehlerw’lichkeit: 0, falls Münze fake 1/2, falls Münze fair Beispiele Las-Vegas Algorithmen: - QuickSort Monte-Carlo Algorithmen: - Testen einer Münze: fair (Kopf/Zahl) vs. fake (Kopf/Kopf) Algorithmus: werfe Münze ein Mal, falls 1 mal Zahl: return „fair“ ansonsten: return „fake“ ≥ Fehlerw’lichkeit: 0, falls Münze fake (1/2 , falls Münze fair ) 100 100 Fehlerkorrektur Angenommen wir haben einen Algorithmus mit Pr[Alg antwortet „nein“] = 0 Ja-Instanzen Pr[Alg antwortet „ja“ ] ≦ 1-ε Nein-Instanzen ∀ ∀ (Antwort „nein“: wenn mind. ein Aufruf „nein“ ausgibt, Antwort „ja“: wenn alle Wdh “ja“ ausgeben) Monte-Carlo Algorithmen für Entscheidungsprobleme Dann gilt: ε -1 ln δ -1 Wiederholungen reduzieren Fehler auf δ Pr[Alg gibt falsche Antwort] ≦ (1-ε) ≦.. ≦ ϵ −1 ln δ −1 δ entscheide: Ist Antwort „ja“ oder „nein“ einseitigem Fehler: Fehlerkorrektur Einseitiger Fehler: Zweiseitiger Fehler: ε -1 ln δ -1 Wiederholungen reduzieren Fehler auf Pr[Antwort falsch] ≦ δ Pr[Antwort falsch] ≦ 1/2-ε Instanzen 4 ε -2 ln δ -1 Wiederholungen reduzieren Fehler Pr[Antwort falsch] ≦ δ ∀ (Antwort: Mehrheit der gesehenen Antworten) Monte-Carlo Algorithmen für Entscheidungsprobleme Pr[Alg antwortet „nein“] = 0 Ja-Instanzen Pr[Alg antwortet „ja“ ] ≦ 1-ε Nein-Instanzen ∀ ∀ (Antwort „nein“: wenn mind. ein Aufruf „nein“ ausgibt, Antwort „ja“: wenn alle Wdh “ja“ ausgeben) Ich wüsste so gerne, wie gross 𝝅 ist …. Target-Shooting Gegeben: zwei Mengen S ⊆ U Aufgabe: bestimme |S| / |U| Beispiel: U = [-1,1] x [-1,1] S = {(x,y) ∈ U : x 2 + y 2 ≦ 1} |S| / |U| = 𝝿 / 4 Target-Shooting Gegeben: zwei Mengen S ⊆ U Aufgabe: bestimme |S| / |U| Annahmen: - wir können ein Element aus U efﬁzient zufällig gleichverteilt wählen - es gibt eine efﬁzient berechenbare Funktion I S (u):= (1fallsu2S 0sonst Beispiel: U = [-1,1] x [-1,1] S = {(x,y) ∈ U : x 2 + y 2 ≦ 1} |S| / |U| = 𝝿 / 4 Target-Shooting Gegeben: zwei Mengen S ⊆ U Aufgabe: bestimme |S| / |U| Annahmen: - wir können ein Element aus U efﬁzient zufällig gleichverteilt wählen - es gibt eine efﬁzient berechenbare Funktion I S (u):= (1fallsu2S 0sonst Target-Shooting Notation: für alle i=1,…,N Dann gilt: … Target-Shooting „gross“ Beweis: Chernoff-Schranke … Analyse WirdeﬁnierenIndikatorvariablen Y i :=I S (u i )füri=1,...,N. unddieZufallsvariableYfürdieAusgabedesAlgorithmus: Y:=1N N X i=1 Y i . Y i ...unabhängigeBernoulli-VariablenmitPr[Y i =1]=p:= |S||U| . E[Y]=1NNp=pundVar[Y]=1N 2 Np(1\u0000p)=1N(p\u0000p 2 ) 3/7 Analyse E[Y]=|S||U| Wirwollen,dass \u0000\u0000\u0000\u0000Y\u0000|S||U| \u0000\u0000\u0000\u0000=|Y\u0000E[Y]| mitgrosserWahrscheinlichkeitkleinist. Konkreter,fürgegebene\u0000,\">0,wollenwir Pr\u0000\u0000\u0000\u0000Y\u0000|S||U| \u0000\u0000\u0000\u0000\"|S||U| \u0000\u00001\u0000\u0000 EsergibtsicheineAnforderunganN,abhängigvom\u0000,\"und |S||U| . 4/7 Analyse E[Y]=|S||U| Wirwollen,dass \u0000\u0000\u0000\u0000Y\u0000|S||U| \u0000\u0000\u0000\u0000=|Y\u0000E[Y]| mitgrosserWahrscheinlichkeitkleinist.Konkreter,fürgegebene\u0000,\">0,wollenwir Pr \u0000\u0000\u0000\u0000Y\u0000|S||U| \u0000\u0000\u0000\u0000\"|S||U| \u0000 \u00001\u0000\u0000 EsergibtsicheineAnforderunganN,abhängigvom\u0000,\"und |S||U| . 4/7 Analyse Satz Seien\u0000,\">0.FallsN\u00003 |U||S| ·\" \u00002 ·ln(2/\u0000),istdieAusgabeYvonTarget-ShootingmitWahrscheinlichkeitmindestens1\u0000\u0000im Intervallh |S||U| ±\" |S||U| i(multiplikativerFehlervon1±\"). Oder,äquivalent, Pr\u0000\u0000\u0000\u0000Y\u0000|S||U| \u0000\u0000\u0000\u0000>\"|S||U| \u0000=Pr[|Y\u0000E[Y]|>\"E[Y]] =Pr[|NY\u0000E[NY]|>\"E[NY]]\u0000 DaNY=Y 1 +···+Y N eineSummevonNunabhängigenBernoulli-Variablenist,kanndiesnunleichtmitHilfederunsbekanntenChernoﬀSchrankenhergeleitetwerden. 5/7 HerleitungderSchrankemittelsChernoﬀ FürwelcheNgilt Pr[|NY\u0000E[NY]|>\"E[NY]]\u0000? NY=Y 1 +···+Y N | {z } :=Z ,SummevonNunabh.Bernoulli-Variablen. NachbekanntenChernoﬀSchrankenerhältman Pr[|Z\u0000E[Z]|>\"E[Z]]2e \u0000\" 2 E[Z]/3 =2e \u0000\" 2 N|S|/(3|U|) Nungilt2e \u0000\" 2 N|S|/(3|U|) \u0000genaudannwenn N\u00003 |U||S| ·\" \u00002 ·ln(2/\u0000). Satz Seien\u0000,\">0.FallsN\u00003 |U||S| ·\" \u00002 ·ln(2/\u0000),istdieAusgabeYvonTarget-ShootingmitWahrscheinlichkeitmindestens1\u0000\u0000imIntervallh |S||U| ±\" |S||U| i(multiplikativerFehlervon1±\"). 6/7 Randomisierte Algorithmen - Beispiele Las-Vegas-Algorithmen QuickSort, QuickSelect: immer korrekt, erwartete Laufzeit O(n log n) bzw O(n) Monte-Carlo-Algorithmen Primzahltest: Fehlerw’keit „klein“, Laufzeit O(poly(log n)) Optimierungsalgorithmen stabile Menge, Target-Shooting: Ausgabe „nahe“ am Erwartungswert","libVersion":"0.3.1","langs":""}