{"path":"sem2/AuW/VRL/slides/AuW-L07-coloring.pdf","text":"Kapitel 1.5 F√§rbungen k-F√§rbung, chromatische Zahl Eine (Knoten-)F√§rbung eines Graphen G = (V, E) mit k Farben ist eine Abbildung c : V ‚Üí [k], so dass gilt c(u) ‚â† c(v) f√ºr alle Kanten {u, v} ‚àà E. k-F√§rbung, chromatische Zahl Eine (Knoten-)F√§rbung eines Graphen G = (V, E) mit k Farben ist eine Abbildung c : V ‚Üí [k], so dass gilt c(u) ‚â† c(v) f√ºr alle Kanten {u, v} ‚àà E. Graphf√§rbung - Pr√ºfungsplan Math Eng Geo Che Bio Hist Fr Graphf√§rbung - Speicherallokation Graphf√§rbung - Funknetzwerke Graphf√§rbung - Beispiele 4-Farben-Theorem k-F√§rbung, chromatische Zahl Eine (Knoten-)F√§rbung eines Graphen G = (V, E) mit k Farben ist eine Abbildung c : V ‚Üí [k], so dass gilt c(u) ‚â† c(v) f√ºr alle Kanten {u, v} ‚àà E. Die chromatische Zahl œá(G) ist die minimale Anzahl Farben, die f√ºr eine Knotenf√§rbung von G ben√∂tigt wird. √Ñquivalente Formulierung: œá(G) ‚â¶ k gdw. G k-partit stabile Mengen = independent sets = keine Kanten im Innern Spezialfall: œá(G) ‚â¶ 2 gdw. G bipartit ‚ÄúIst G bipartit?‚Äù kann man in Zeit O(|E|) mit Breiten- oder Tiefensuche beantworten. F√§rbbarkeit ist sehr schwer Satz: F√ºr jedes k ‚â• 3 ist das Problem ‚ÄûGegeben ein Graph G = (V, E), gilt œá(G) ‚â¶ k ?‚Äú NP-vollst√§ndig. Alternativen? Exponentieller Algorithmus? Approximationen? Ja, mit Inklusion/Exklusion. (Polynomieller Speicher und Zeit O(2.3 n )) Nein. F√ºr jedes …õ > 0 ist es NP-schwer, eine n 1-…õ -Approximation zu Ô¨Ånden. Spezialf√§lle? Ja. Wir werden einige Arten von Graphen sehen, f√ºr die es gute Algorithmen gibt. Beobachtung: F√ºr jede Reihenfolge der Knoten ben√∂tigt der Greedy- Algorithmus h√∂chstens ùûì(G)+1 viele Farben. Greedy-Algorithmus 1 4 2 3 11 12 9 10 6 8 5 7 14 15 13 16 Notation: ùûì(G) := maximaler Grad in G Beobachtung: Es gibt eine Reihenfolge der Knoten, f√ºr die der Greedy-Algorithmus nur ùûÜ(G) viele Farben ben√∂tigt. Greedy-Algorithmus Beobachtung: Es gibt bipartite Graphen und eine Reihenfolge der Knoten, f√ºr die der Greedy- Algorithmus |V|/2 viele Farben ben√∂tigt. vollst√§ndig bipartiter Graph ohne ein perfektes Matching 1 7 6 5 4 3 2 10 8 9 Greedy-Algorithmus Heuristik: v n := Knoten vom kleinsten Grad. L√∂sche v n . v n-1 := Knoten vom kleinsten Grad im Restgraph. L√∂sche v n-1 . Iteriere. Beobachtung: Gilt f√ºr die (gew√§hlte) Reihenfolge |N(v i ) ‚à© {v 1 ,‚Ä¶, v i-1 }| ‚â§ k ‚àÄ 2 ‚â§ i ‚â§ n, dann ben√∂tigt der Greedy-Algorithmus h√∂chstens k+1 viele Farben. Falls G=(V,E) erf√ºllt: In jedem Subgraphen gibt es einen Knoten mit Grad ‚â§ k Heuristik liefert Reihenfolge v 1 ,‚Ä¶,v n f√ºr die der Greedy- Algorithmus h√∂chstens k+1 Farben ben√∂tigt Greedy-Algorithmus Satz: (ohne Beweis) Ist ein Graph planar (kann √ºberkreuzungsfrei in der Ebene gezeichnet werden), so gibt es immer einen Knoten vom Grad ‚â§ 5. Korollar: Die Heuristik Ô¨Åndet eine F√§rbung mit ‚â§ 6 Farben f√ºr planare Graphen. Korollar: Die Heuristik Ô¨Åndet immer eine F√§rbung mit 2 Farben f√ºr B√§ume. Falls G=(V,E) erf√ºllt: In jedem Subgraphen gibt es einen Knoten mit Grad ‚â§ k Heuristik liefert Reihenfolge v 1 ,‚Ä¶,v n f√ºr die der Greedy- Algorithmus h√∂chstens k+1 Farben ben√∂tigt Greedy-Algorithmus Heuristik: v n := Knoten vom kleinsten Grad. L√∂sche v n . v n-1 := Knoten vom kleinsten Grad im Restgraph. L√∂sche v n-1 . Iteriere. Beobachtung: Gilt f√ºr die (gew√§hlte) Reihenfolge |N(v i ) ‚à© {v 1 ,‚Ä¶, v i-1 }| ‚â§ k ‚àÄ 2 ‚â§ i ‚â§ n, dann ben√∂tigt der Greedy-Algorithmus h√∂chstens k+1 viele Farben. G=(V,E) zshgd. und es gibt v ‚àà V mit deg(v) < ùõ•(G) Heuristik (oder Breiten-/Tiefensuche) liefert Reihenfolge, f√ºr die der Greedy-Algorithmus h√∂chstens ùõ•(G) Farben ben√∂tigt Korollar: Greedy-Algorithmus Satz: Einen 3-f√§rbbaren Graphen kann man ‚Ä® in Zeit mit Farben f√§rben. Algorithmus: While es gibt Knoten v, der ungef√§rbte Nachbarn hat: F√§rbe v mit neuer Farbe und seine Nachbarn mit 2 weiteren neuen Farben. L√∂sche alle gef√§rbten Knoten. Der Restgraph hat Maximalgrad . F√§rbe verbleibende Knoten mit Greedy-Algorithmus mit neuen Farben. <latexit sha1_base64=\"bTxyWNv3rjsAmEqEKNVg4Ltd/9Y=\">AAACBnicbVC7SgNBFJ31bXytWgZhMAjahF0LFQsRbCwjmAckIczO3pghsw9n7oph3crGX7GxUMTWb7Cz8hP8BSebFL4OXDicc+/cuceLpdDoOO/WxOTU9Mzs3HxhYXFpecVeXavpKFEcqjySkWp4TIMUIVRRoIRGrIAFnoS61z8Z+vUrUFpE4TkOYmgH7CIUXcEZGqljb7QQrjF/J1XgZ+kRbelLhelN7SbLOnbJKTs56F/ijknpuLjzsao+Fyod+63lRzwJIEQumdZN14mxnTKFgkvICq1EQ8x4n11A09CQBaDbab4+o1tG8Wk3UqZCpLn6fSJlgdaDwDOdAcOe/u0Nxf+8ZoLdg3YqwjhBCPloUTeRFCM6zIT6QgFHOTCEcSXMXynvMcU4muQKJgT398l/SW237O6VnTOTxiEZYY4UySbZJi7ZJ8fklFRIlXByS+7JI3my7qwH69l6GbVOWOOZdfID1usXu7+c2w==</latexit> >p|V| <latexit sha1_base64=\"GF6Ieop9ajYhhPaULiigBAUXDG4=\">AAACEHicbVC5TgMxEPVyhoQjgTKNRYSAJtqlAEQVCQrKIJFDykaR15mAhfeIPYuINvsJNPwKDQUI0VLSUfEJ/ALOUXA9aaSn92bsmedFUmi07XdrZnZufmExs5TNLa+sruUL63UdxopDjYcyVE2PaZAigBoKlNCMFDDfk9Dwro5HfuMalBZhcI6DCNo+uwhET3CGRurkt12EGxy/kyjopol7AhIZdSX0qav7CpNhfZimnXzJLttj0L/EmZJSpbj7UVCfuWon/+Z2Qx77ECCXTOuWY0fYTphCwSWkWTfWEDF+xS6gZWjAfNDtZLxISreM0qW9UJkKkI7V7xMJ87Ue+J7p9Ble6t/eSPzPa8XYO2wnIohihIBPPurFkmJIR+nQrlDAUQ4MYVwJsyvll0wxjibDrAnB+X3yX1LfKzv7ZfvMpHFEJsiQItkkO8QhB6RCTkmV1Agnt+SePJIn6856sJ6tl0nrjDWd2SA/YL1+AW8RoQU=</latexit> \u0000Ô£øp|V| <latexit sha1_base64=\"OoesSGOwdvDVRUCt2osxc/Y6d9o=\">AAACAnicbVDJSgNBEO2JW4zbqCfxMhgEQQgzHlRyCijoMYJZIDOEnk5N0qRnobtGDEPw4t2v8OJBEa9+hTf/xs5y0MQHBY/3qrq6np8IrtC2v43cwuLS8kp+tbC2vrG5ZW7v1FWcSgY1FotYNn2qQPAIashRQDORQENfQMPvX4z8xh1IxePoFgcJeCHtRjzgjKKW2uaei3CP43cyCZ1h5l6CQHrsDNtm0S7ZY1jzxJmSYiXXfrqyK+Vq2/xyOzFLQ4iQCapUy7ET9DIqkTMBw4KbKkgo69MutDSNaAjKy8arh9ahVjpWEEtdEVpj9fdERkOlBqGvO0OKPTXrjcT/vFaKwbmX8ShJESI2WRSkwsLYGuVhdbgEhmKgCWWS679arEclZahTK+gQnNmT50n9pOScluwbnUaZTJAn++SAHBGHnJEKuSZVUiOMPJBn8krejEfjxXg3PiatOWM6s0v+wPj8AbcZmcw=</latexit> \u0000+1 <latexit sha1_base64=\"ybXhW30VdvFQTGV6nth1TCtx6Ow=\">AAACB3icbVC7SgNBFJ31GRMfiZYBWQxC0oRdCxWrgI2dEcwDkhBmJzfJkNmHM3fFsNnOxl+xsVDE1l+ws/IT/AUnj0ITD1w4nHPv3LnHCQRXaFmfxtLyyuraemIjmdrc2t5JZ3aryg8lgwrzhS/rDlUguAcV5CigHkigriOg5gzOx37tFqTivneNwwBaLu15vMsZRS210/tNhDucvBNJ6MTRZb6pbiRGo+ooLsTtdM4qWhOYi8SekVwpW/jKyO9UuZ3+aHZ8FrrgIRNUqYZtBdiKqETOBMTJZqggoGxAe9DQ1KMuqFY02R+bh1rpmF1f6vLQnKi/JyLqKjV0Hd3pUuyreW8s/uc1QuyetiLuBSGCx6aLuqEw0TfHoZgdLoGhGGpCmeT6rybrU0kZ6uiSOgR7/uRFUj0q2sdF60qncUamSJAsOSB5YpMTUiIXpEwqhJF78kieyYvxYDwZr8bbtHXJmM3skT8w3n8AUi+dJw==</latexit> O(p|V|) <latexit sha1_base64=\"SS0tV5My24q8o98IntcfDTp/bNk=\">AAACBHicbVDJSgNBEO2JW4xb1Ju5DAYhIoQZDyqeAiJ4ESOYBZIQejqVpEnPQneNGCZBPOivePGgiNd8hDd/xLOd5aCJDwoe71V1dT0nEFyhZX0Zsbn5hcWl+HJiZXVtfSO5uVVUfigZFJgvfFl2qALBPSggRwHlQAJ1HQElp3M29Eu3IBX3vRvsBlBzacvjTc4oaqmeTFUR7nD0TiSh0Y+uMr1i76B33tvv15NpK2uNYM4Se0LSuZ3H9Pf95SBfT35WGz4LXfCQCapUxbYCrEVUImcC+olqqCCgrENbUNHUoy6oWjRa3jf3tNIwm77U5aE5Un9PRNRVqus6utOl2FbT3lD8z6uE2DypRdwLQgSPjRc1Q2Gibw4TMRtcAkPR1YQyyfVfTdamkjLUuSV0CPb0ybOkeJi1j7LWtU7jlIwRJymySzLEJsckRy5InhQIIw/kmbySN+PJeDHejY9xa8yYzGyTPzAGP/6Mm/U=</latexit> O(|V|+|E|) Warum ist F√§rbbarkeit so schwer? Satz: ‚àÄ k ‚àà N, ‚àÄ r ‚àà N : Es gibt Graphen ohne einen Kreis mit L√§nge ‚â§ k, aber mit chromatischer Zahl ‚â• r. (Beweis im Skript f√ºr k=3) Lokal sieht der Graph aus wie ein Baum (alle Knoten, die man von einem v aus in k/2 Schritten erreichen kann). Block-Graphen Farbklassen tauschen Ist G ein Graph, in dem man jeden Block mit k Farben f√§rben kann. Dann kann man auch G mit k Farben f√§rben. Abh√§ngigkeit vom maximalen Grad Jeder Graph kann in Zeit O(|E|) mit Œî(G)+1 Farben gef√§rbt werden Satz von Brooks G ‚â† K n , G ‚â† C 2n+1, G zshgd: G kann in Zeit O(|E|) mit Œî(G) Farben gef√§rbt werden Satz von Brooks Satz von Brooks G ‚â† K n , G ‚â† C 2n+1, G zshgd: G kann in Zeit O(|E|) mit Œî(G) Farben gef√§rbt werden Algorithmus: Falls Œî(G)=2: f√§rbe G mit zwei Farben (da G zshgd und kein ungerader Kreis, ist G ein Pfad oder ein gerader Kreis) Falls ‚àÉ v ‚àà V mit deg(v) < Œî(G): f√§rbe G mit Greedy-Algorithms + Heuristik (ben√∂tigt nur Œî(G) Farben) Falls es einen Artikulationsknoten v gibt: f√§rbe alle Bl√∂cke (jeweils inkl. Knoten v) mit Heuristik; ggf. Farbtausch, damit v in allen Graphen einheitlich gef√§rbt (in allen diesen Bl√∂cken hat v Grad < Œî(G), Heuristik funktioniert also wie oben argumentiert) Bestimme Knoten v,x,y ‚àà V mit x,y ‚àà N(v) und {x,y} ‚àâ E (diese existieren, da G zshgd und kein vollst√§ndiger Graph) Betrachte G‚Äô := G[V ‚àñ {x,y}]: Falls G‚Äô zshgd: f√§rbe G mit Greedy-Alg: Erst x und y, danach Heuristik f√ºr G‚Äô Falls G‚Äô nicht zshgd: ‚Ä¶","libVersion":"0.3.1","langs":""}