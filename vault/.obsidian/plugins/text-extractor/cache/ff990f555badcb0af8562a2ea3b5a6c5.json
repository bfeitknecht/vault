{"path":"sem2/AuW/UE/pg/s/AuW-u01-pg-s.pdf","text":"ETH Z¨urich Institute of Theoretical Computer Science Prof. Angelika Steger, Prof. Emo Welzl Dr. Anders Martinsson, Charlotte Knierim FS 2022 Algorithmen und Wahrscheinlichkeit Peer-Aufgaben 1 — L¨osung Aufgabe 1 – Touren (a) Wir f¨uhren den Algorithmus von Kruskal (siehe Kapitel 1.2.2 im Skript) aus um einen minimalen Spannbaum zu ﬁnden. Wir wollen die Kanten die zum minimalen Spannbaum geh¨oren in die Menge T einf¨ugen. Zu Beginn sei T = ∅. Nun sortieren wir die Kanten aufsteigend nach ihrem Gewicht. In dieser Reihenfolge gehen wir durch die Kanten durch und f¨uhren wie folgt f¨ur die Kante e = {u, v} einen von zwei m¨oglichen Schritten aus. – Falls es einen u-v-Pfad mit Kanten aus T gibt, verwerfen wir e. – Ansonsten f¨ugen wir e zu T dazu. Nun bilden die Kanten in T einen minimalen Spannbaum. (Siehe Skript.) Angewandt auf den gegeben Graphen G bedeutet dies, dass wir zum Beispiel die Kanten {A, D}, {A, B}, {C, G}, {B, C}, {E, F }, {F, G} (in dieser Reihenfolge) zum Spannbaum hin- zuf¨ugen. Der Algorithmus von Kruskal ist sicherlich korrekt (siehe Skript). Da der Graph G konstante Gr¨osse hat, interessiert uns hier die asymptotische Laufzeit nicht wirklich. Sogar ein Brute- Force-Algorithmus, der alle m¨oglichen Kantenmengen der Kardinalit¨at 6 auf Zusammenhang und Kreisfreiheit testet und schliesslich die Menge mit dem kleinsten Gewicht ausgibt, hat f¨ur diese Eingabe konstante Laufzeit. (b) Variante 1 (Einfacher Existenzbeweis): Wir betrachten den (Multi-)Graph T2 der jede Kante von T zweimal enth¨alt. Der Grad jedes Knoten in T2 ist zweimal der Grad dieses Knotens in T , insbesondere ist jeder Grad in T2 gerade. Ausserdem ist G2 zusammenh¨angend. Laut einem Satz aus der Vorlesung enth¨alt T2 eine Eulertour – also einen Zyklus der jede Kante aus T2 enth¨alt. Dieser Zyklus besucht oﬀensichtlich jeden Knoten und hat Gewicht 2C. Da der Spannbaum aus (a) ein Pfad ist, ist es besonders leicht, T2 in einen Kreis umzuwan- deln: Wir k¨onnen zum Beispiel folgenden Zyklus verwenden: (A,B,C,G,F,E,F,G,C,B,A,D,A) Variante 2: Ein solcher Weg Z ist gegeben durch den Weg, den die Tiefensuche benutzt um den Spannbaum T abzusuchen. Immer wenn wir einen Knoten v betrachten, laufen wir zu einem unbesuchten Nachbarn u von v, falls es keinen solchen Nachbarn gibt, laufen wir zum Vorg¨anger von v. Um genau zu sein, benutzen wir folgende Implementation der Tiefensuche mit Startknoten s = A in T . Wir speichern den Weg der Tiefensuche als x1, x2, . . . ab. t ← 1 v ← s while v ̸= s oder v hat einen unbesuchten Nachbarn do xt ← v t ← t + 1 if v hat unbesuchten Nachbarn u then v ← u pred(u) ← v else v ← pred(v) Der gesuchte Weg Z ist durch Z = (x1, x2, . . .) gegeben. Wir zeigen die Korrektheit des Algo- rithmus. Z ist sicherlich ein Weg, da xt+1 jeweils ein Nachbar von xt ist (auch der Vorg¨anger von v ist immer mit v benachbart). Aufgrund der while-Bedingung endet der Algorithmus in s, somit ist Z ein Zyklus. Da T zusammenh¨angend ist, besucht die Tiefensuche und somit Z jeden Knoten mindestens einmal. Desweiteren zeigen wir, dass jede Kante {u, v} aus T genau zweimal in Z vorkommt, woraus folgt, dass das Gewicht von Z gleich 2C ist. O.B.d.A. wird u vor v besucht, dann wird e einmal beim Vorw¨artsgehen benutzt (v ist ein unbe- suchter Nachbar von u), einmal beim R¨uckw¨artsgehen benutzt (sobald v keine unbesuchten Nachbarn mehr hat) und danach nicht mehr benutzt, da v bereits besucht wurde. F¨ur das Beispiel von G k¨onnte man zum Beispiel folgenden Zyklus ﬁnden: (D,A,B,C,G,F,E,F,G,C,B,A,D). Beachte, dass dieser Spannbaum vom Startknoten der Tie- fensuche abh¨angt und dass die Reihenfolge in der die Tiefensuche die Nachbarn besucht davon abh¨angen kann, wie der Graph abgespeichert ist (bzw. in welcher Reihenfolge die Knoten in der Adjazenzliste vorkommen). (c) Sei V die Knotenmenge von G und sei Z ein geschlossener Weg, der jeden Knoten min- destens einmal besucht. Sei E die Menge der Kanten, die in Z benutzt werden (falls eine Kante mehrmals benutzt wird, kommt sie nur einmal in der Menge E vor). Solange es einen Kreis mit Kanten aus E gibt, entfernen wir eine Kante des Kreises aus E. Die resultierende Kantenmenge bezeichnen wir mit E′. Der Graph (V, E′) ist ein Spannbaum. Er ist zusam- menh¨angend, weil der Graph (V, E) zusammenh¨angend ist und der Graph durch l¨oschen einer Kante eines Kreises jeweils zusammenh¨angend bleibt, und er ist kreisfrei, da aus je- dem Kreis ein Kante gel¨oscht wurde. Deshalb ist das Gewicht C des minimalen Spannbaums kleiner als das Gewicht der Kanten in E′. Es folgt C ≤ ∑ e∈E′ ℓ(e) ≤ ∑ e∈E ℓ(e) ≤ ℓ(Z).","libVersion":"0.3.1","langs":""}