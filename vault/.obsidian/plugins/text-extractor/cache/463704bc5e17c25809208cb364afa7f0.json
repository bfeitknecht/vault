{"path":"sem1/AuD/UE/s/AuD-u00-s.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 25 September 2023 Johannes Lengler, David Steurer Lucas Slot, Manuel Wiedmer, Hongjie Chen, Ding Jingqiu Algorithms & Data Structures Exercise sheet 0 HS 23 ‚e solutions for this sheet do not have to be submi‰ed. ‚e sheet will be solved in the ﬁrst exercise session on 25.09.2023. Exercises that are marked by ∗ are challenge exercises. Exercise 0.1 Induction. a) Prove by mathematical induction that for any positive integer n, 1 + 2 + · · · + n = n(n + 1) 2 . • Base Case. Let n = 1. ‚en: 1 = 1 · 2 2 . • Induction Hypothesis. Assume that the property holds for some positive integer k. ‚at is: 1 + 2 + · · · + k = k(k + 1) 2 . • Inductive Step. We must show that the property holds for k + 1 summands. 1 + 2 + · · · + k + k + 1 = k(k + 1) 2 + k + 1 = k(k + 1) + 2(k + 1) 2 = (k + 1)(k + 2) 2 . By the principle of mathematical induction, this is true for any positive integer n. b) (⁄is subtask is from August 2019 exam). Let T : N → R be a function that satisﬁes the following two conditions: T (n) ≥ 4 · T ( n 2 ) + 3n whenever n is divisible by 2; T (1) = 4. Prove by mathematical induction that T (n) ≥ 6n2 − 2n holds whenever n is a power of 2, i.e., n = 2k with k ∈ N0. • Base Case. Let k = 0, n = 20 = 1. ‚en: T (1) = 4 ≥ 6 · 1 2 − 2 · 1 • Induction Hypothesis. Assume that the property holds for some positive integer m = 2k. ‚at is: T (m) ≥ 6m 2 − 2m • Inductive Step. We must show that the property holds for 2m = 2k+1. T (2m) ≥ 4 · T (m) + 3 · 2 · m ≥ 24m 2 − 8m + 6m = 24m2 − 2m ≥ 24m2 − 4m = 6 · (2m) 2 − 2 · (2m) . By the principle of mathematical induction, this is true for any integer n that is a power of 2. Asymptotic Growth When we estimate the number of elementary operations executed by algorithms, it is o›en useful to ignore smaller order terms, and instead focus on the asymptotic growth deﬁned below. We denote by R+ the set of all (strictly) positive real numbers and by R+ 0 the set of nonnegative real numbers. Deﬁnition 1. Let f, g : N → R+ be two functions. We say that f grows asymptotically faster than g if lim n→∞ g(n) f (n) = 0. ‚is deﬁnition is also valid for functions deﬁned on R+ instead of N. In general, lim n→∞ g(n) f (n) is the same as lim x→∞ g(x) f (x) if the second limit exists. Exercise 0.2 Comparison of functions part 1. Show that a) f (n) := n log n grows asymptotically faster than g(n) := n. Solution: lim n→∞ n n log n = lim n→∞ 1 log n = 0 , hence by Deﬁnition 1, f (n) := n log n grows asymptotically faster than g(n) := n. b) f (n) := n3 grows asymptotically faster than g(n) := 10n2 + 100n + 1000. Solution: lim n→∞ 10n2 + 100n + 1000 n3 = lim n→∞ ( 10 n + 100 n2 + 1000 n3 ) = 0 , hence by Deﬁnition 1, f (n) := n3 grows asymptotically faster than g(n) := 10n2 + 100n + 1000. 2 c) f (n) := 3n grows asymptotically faster than g(n) := 2n. Solution: lim n→∞ 2n 3n = lim n→∞ ( 2 3 )n = 0 , hence by Deﬁnition 1, f (n) := 3n grows asymptotically faster than g(n) := 2n. ‚e following theorem can be useful to compute some limits. ⁄eorem 1 (L’Hˆopital’s rule). Assume that functions f : R+ → R+ and g : R+ → R+ are diﬀerentiable, lim x→∞f (x) = lim x→∞g(x) = ∞ and for all x ∈ R+, g′(x) ̸= 0. If lim x→∞ f ′(x) g′(x) = C ∈ R+ 0 or lim x→∞ f ′(x) g′(x) = ∞, then lim x→∞ f (x) g(x) = lim x→∞ f ′(x) g′(x) . Exercise 0.3 Comparison of functions part 2. Show that a) f (n) := n1.01 grows asymptotically faster than g(n) := n ln n. Solution: We apply ‚eorem 1 to compute lim x→∞ x ln x x1.01 = lim x→∞ ln x x0.01 = lim x→∞ (ln x)′ (x0.01)′ = lim x→∞ 1/x 0.01x−0.99 = lim x→∞ 1 0.01x0.01 = 0 . Hence by Deﬁnition 1, f (n) := n1.01 grows asymptotically faster than g(n) := n ln n. b) f (n) := en grows asymptotically faster than g(n) := n. Solution: We apply ‚eorem 1 to compute lim x→∞ x ex = lim x→∞ x′ (ex)′ = lim x→∞ 1 ex = 0 . Hence by Deﬁnition 1, f (n) := en grows asymptotically faster than g(n) := n. c) f (n) := en grows asymptotically faster than g(n) := n2. Solution: We apply ‚eorem 1 to compute lim x→∞ x2 ex = lim x→∞ (x2)′ (ex)′ = lim x→∞ 2x ex = 2 lim x→∞ x′ (ex)′ = 2 lim x→∞ 1 ex = 0 . Hence by Deﬁnition 1, f (n) := en grows asymptotically faster than g(n) := n2. d)∗ f (n) := 1.01n grows asymptotically faster than g(n) := n100. Solution: Note that we can rewrite g(x) f (x) as x100 (1.01)x = e100 ln x ex ln(1.01) = e100 ln x−ln(1.01)x. 3 We have lim x→∞ (100 ln x − ln(1.01)x) = lim x→∞ x (100 ln x x − ln(1.01) ) = −∞, and therefore lim x→∞ x100 (1.01)x = 0. Hence by Deﬁnition 1, f (n) := 1.01n grows asymptotically faster than g(n) := n100. e)∗ f (n) := log2 n grows asymptotically faster than g(n) := log2 log2 n. Solution: Deﬁne y := log2 x. ‚en y → ∞ as x → ∞, and therefore lim x→∞ g(x) f (x) = lim y→∞ log2 y y . Remembering that log2 y = ln y/ ln 2, we can apply ‚eorem 1 to compute lim y→∞ log2 y y = 1 ln 2 lim y→∞ ln y y = 1 ln 2 lim y→∞ (ln y)′ y′ = 1 ln 2 lim y→∞ 1/y 1 = 0. Hence by Deﬁnition 1, f (n) := log2 n grows asymptotically faster than g(n) := log2 log2 n. f)∗ f (n) := 2 √log2 n grows asymptotically faster than g(n) := log100 2 n. Solution: lim n→∞ log100 2 n 2√log2 n = lim n→∞ 2log2(log100 2 n) 2 √log2 n = lim n→∞ 2100 log2 log2 n 2√log2 n = lim n→∞ 2100 log2 log2 n− √log2 n Notice that lim n→∞ (100 log2 log2 n − √ log2 n) = lim n→∞ ( − √ log2 n(1 − 100 log2 log2 n √ log2 n )) = −∞ . Hence lim n→∞ log100 2 n 2√log2 n = lim n→∞ 2100 log2 log2 n−√log2 n = 0 . ‚erefore, by Deﬁnition 1, f (n) := 2√ log2 n grows asymptotically faster than g(n) := log100 2 n. g)∗ f (n) := n0.01 grows asymptotically faster than g(n) := 2 √log2 n. Solution: lim n→∞ 2 √log2 n n0.01 = lim n→∞ 2√log2 n 2log(n0.01) = lim n→∞ 2 √log2 n 20.01 log2 n = lim n→∞ 2 √log2 n−0.01 log2 n Notice that lim n→∞ (√ log2 n − 0.01 log2 n) = lim n→∞ ( − 0.01 log2 n(1 − √ log2 n 0.01 log2 n )) = −∞ . Hence lim n→∞ 2 √log2 n n0.01 = lim n→∞ 2√log2 n−0.01 log2 n = 0 . ‚erefore, by Deﬁnition 1, f (n) := n0.01 grows asymptotically faster than g(n) := 2 √log2 n. 4 Exercise 0.4 Simplifying expressions. Simplify the following expressions as much as possible without changing their asymptotic growth rates. Concretely, for each expression f (n) in the following list, ﬁnd an expression g(n) that is as simple as possible and that satisﬁes lim n→∞ f (n) g(n) ∈ R+. It is guaranteed that all functions in this exercise take values in R+ (you don’t have to prove it). a) f (n) := 5n3 + 40n2 + 100 Solution: Let g(n) := n3. ‚en indeed we have lim n→∞ f (n) g(n) = lim n→∞ (5 + 40 n + 100 n3 ) = 5 ∈ R+. b) f (n) := 5n + ln n + 2n3 + 1 n Solution: Let g(n) := n3. ‚en indeed we have lim n→∞ f (n) g(n) = lim n→∞ ( 5 n2 + ln n n3 + 2 + 1 n4 ) = 2 ∈ R +. c) f (n) := n ln n − 2n + 3n2 Solution: Let g(n) := n2. ‚en indeed we have lim n→∞ f (n) g(n) = lim n→∞ ( ln n n − 2 n + 3) = 3 ∈ R+. d) f (n) := 23n + 4n log5 n6 + 78√n − 9 Solution: By the properties of logarithms, 4n log5 n6 = 24n log5 n = 24n ln n ln 5 . Let g(n) := n ln n. ‚en indeed we have lim n→∞ f (n) g(n) = lim n→∞ ( 23 ln n + 24 ln 5 + 78 √n ln n − 9 n ln n ) = 24 ln 5 ∈ R+. e) f (n) := log2 √n5 + √ log2 n5 Solution: By the properties of logarithms, log2 √n5 = 5 2 ln 2 ln n, and √ log2 n5 = √ 5 ln 2 · √ln n. Let g(n) := ln n. ‚en indeed we have lim n→∞ f (n) g(n) = lim n→∞ ( 5 2 ln 2 + √ 5 ln 2 · 1 √ln n ) = 5 2 ln 2 ∈ R+. 5 f)∗ f (n) := 2n3 + ( 4√n)log5 log6 n + ( 7√n)log8 log9 n Solution: lim n→∞ ( 7√n)log8 log9 n ( 4√n)log5 log6 n = lim n→∞ n 1 7 log8 log9 n n 1 4 log5 log6 n = lim n→∞ n 1 7 log8 log9 n− 1 4 log5 log6 n . Notice that lim n→∞ ( 1 7 log8 log9 n − 1 4 log5 log6 n) = −∞ , since loga x ≤ logb y if x ≤ y and a ≥ b. Hence lim n→∞ ( 7√n)log8 log9 n ( 4√n)log5 log6 n = lim n→∞ n 1 7 log8 log9 n− 1 4 log5 log6 n = 0 . Moreover, we also have lim n→∞ 2n3 ( 4√n)log5 log6 n = 2 lim n→∞ n3− 1 4 log5 log6 n = 0 . Let g(n) := n 1 4 log5 log6 n. ‚en indeed we have lim n→∞ f (n) g(n) = 1 ∈ R+. Exercise 0.5∗ Finding the range of your bow. To celebrate your start at ETH, your parents gi›ed you a bow and (an inﬁnite number of) arrows. You would like to determine the range of your bow, in other words how far you can shoot arrows with it. For simplicity we assume that all your arrow shots will cover exactly the same distance r, and we deﬁne r as the range of your bow. You also know that this range is at least r ≥ 1 (meter). You have at your disposition a ruler and a wall. You cannot directly measure the distance covered by an arrow shot (because the arrow slides some more distance on the ground a›er reaching distance r), so the only way you can get information about the range r is as follows. You can stand at a distance ℓ (of your choice) from the wall and shoot an arrow: if the arrow reaches the wall, you know that ℓ ≤ r, and otherwise you deduce that ℓ > r. By performing such an experiment with various choices of the distance ℓ, you will be able to determine r with more and more accuracy. Your goal is to do so with as few arrow shots as possible. a) What is a fast strategy to ﬁnd an upper bound on the range r ? In other words, how can you ﬁnd a distance D ≥ 1 such that r < D, using few arrow shots ? ‚e required number of shots might depend on the actual range r, so we will denote it by f (r). Good solutions should have f (r) ≤ 10 log2 r for large values of r. Solution: One possible fast strategy is to ﬁrst shoot an arrow at distance 2 from the wall, and as long as the arrow reaches the wall, you double your distance to the wall for the next shot. More formally, let ℓi denote your distance to the wall for the i-th shot. ‚en this startegy uses distances given by ℓi = 2i, and does this until you ﬁnd a distance ℓt for which your arrow does not reach the wall. D is then given by D = ℓt = 2t, and the required number of shots is f (r) = t, the smallest integer t such that r < 2t. 6 ‚is strategy therefore needs f (r) = ⌈log2 r⌉ shots, and indeed f (r) = ⌈log2 r⌉ ≤ 1 + log2 r ≤ 10 log2 r for all r ≥ 21/9. b) You are now interested in determining r up to some additive error. More precisely, you should ﬁnd an estimate ˜r such that the range is contained in the interval [˜r − 1, ˜r + 1], i.e. ˜r − 1 ≤ r ≤ ˜r + 1. Denoting by g(r) the number of shots required by your strategy, your goal is to ﬁnd a strategy with g(r) ≤ 10 log2 r for all r suﬃciently large. Solution: You start by performing the strategy described in part (a). Note that this allows you to ﬁnd a distance D such that r ∈ [ 1 2 D, D] using f (r) = ⌈log2 r⌉ shots. You will then iteratively ﬁnd smaller and smaller intervals [a, b] ⊆ [ 1 2 D, D] with r ∈ [a, b], until you get an interval whose length is at most 2 (and then you can take ˜r to be the center of this interval). You start by shooting an arrow from distance ( 1 2 D + D)/2 = 3 4 D. If the arrow reaches the wall, then you know that r ∈ [ 3 4 D, D], and otherwise you deduce that r ∈ [ 1 2 D, 3 4 D]. Note that in both cases, the length of the interval of possible ranges r was divided by 2. In the next step, if you know that r ∈ [ 3 4 D, D] then you shoot an arrow from distance ( 3 4 D + D)/2, and if you know that r ∈ [ 1 2 D, 3 4 D] then you shoot an arrow from distance ( 1 2 D + 3 4 D)/2, which allows you to again divide the length of the interval of possible ranges by 2. You carry on this procedure until you ﬁnd an interval [a, b] of length b − a ≤ 2 satisfying r ∈ [a, b], and you deﬁne ˜r = (a + b)/2. By construction, this strategy ﬁnds an estimate ˜r such that ˜r − 1 ≤ r ≤ ˜r + 1. Let’s compute the number of required shots g(r). You start with f (r) = ⌈log2 r⌉ shots in order to perform the strategy described in (a), and then you need t′ additional shots to ﬁnd the interval [a, b]. Note that you start with the interval of possible ranges [ 1 2 D, D] which has length D/2, and with each additional shot you divide this length by 2, until you reach a length smaller than 2. ‚erefore, t′ is the smallest integer such that D/2t′+1 ≤ 2, i.e. D ≤ 2t′+2. ‚is means that t′ = max{⌈log2 D⌉ − 2, 0} (the maximum with 0 is taken because you cannot have a negative number of shots). ‚is is at most ⌈log2 2r⌉ = 1 + ⌈log2 r⌉ because D ≤ 2r, so the total number of required shots is g(r) = f (r) + t ′ ≤ f (r) + ⌈log2 r⌉ + 1 = 2⌈log2 r⌉ + 1 ≤ 2 log2 r + 3, which is smaller than 10 log2 r for all r ≥ 23/8. c) Coming back to part (a), is it possible to have a signiﬁcantly faster strategy (for example with f (r) ≤ 10 log2 log2 r for large values of r) ? Solution: Let h : R+ → R+ be any strictly increasing function with lim r→∞ h(r) = ∞. We will show that there exists a strategy that ﬁnds some D > r using f (r) := ⌈h(r)⌉ shots. Since h : R+ → R+ is strictly increasing, it is bijective and therefore has an inverse h−1 : R+ → R+ which is also strictly increasing. Moreover, we have lim r→∞ h−1(r) = ∞ because lim r→∞ h(r) = ∞. ‚e strategy is then to shoot the arrow at the i-th step with a distance of h−1(i) from the wall, until we get to a step t′′ where the arrow doesn’t reach the wall (i.e. h−1(t′′) > r). ‚e number of required shots is then t′′, which is the smallest integer satisfying h−1(t′′) > r, or equivalently t′′ > h(r). ‚erefore, t′′ = ⌈h(r)⌉ as claimed. For the particular example of f (r) ≤ 10 log2 log2 r, take the function h(r) = log2 log2 r. ‚is corresponds to shooting an arrow from distance h−1(i) = 22i in the i-th step. ‚en the number of required shots is f (r) = ⌈log2 log2 r⌉ ≤ 1 + log2 log2 r, which is smaller than 10 log2 log2 r for all r ≥ 221/9. 7","libVersion":"0.3.1","langs":""}