{"path":"sem1/DMath/PV/leon/DMath-leon-w03.pdf","text":"Diskrete Mathematik ¨Ubungsstunde Zusammenfassung Leon Kolmani´c 09.10.2023 1 Besprechung Bonusaufgabe Die Bewertung der Aufgabe war sehr streng. Auch geringf¨ugige Fehler haben Abzug gegeben. H¨aufige Fehler waren: • Doppelte Negation zweimal in einem Schritt angewendet (z.B. ¬¬A ∧ ¬¬B ≡ A ∧ B) • Keine ≡ Zeichen zwischen den Formeln geschrieben • Doppelte Negation verwendet, ohne sie als Begr¨undung zu erw¨ahnen (z.B. ¬(A ∧ ¬B) ≡ ¬A ∨ B statt ¬(A ∧ ¬B) ≡ ¬A ∨ ¬¬B ≡ ¬A ∨ B) • 1. und 2. Distributivgesetz verwechselt • Assoziativit¨at falsch angewendet (z.B. (A ∧ B) ∧ C ≡ A ∧ B ∧ C statt (A ∧ B) ∧ C ≡ A ∧ (B ∧ C)) • Absorption falsch herum verwendet (z.B. A ∧ (B ∨ A) ≡ A statt A ∧ (B ∨ A) ≡ A ∧ (A ∨ B) ≡ A) Denkt immer daran, dass ihr nur eine Regel pro Schritt anwendet und immer die verwendete Regel hinschreibt. Es ist auch wichtig, dass ihr das Format der Musterl¨osung genau einh¨alt. Weiter m¨ussen die Regeln immer genau so, wie sie im Lemma stehen, angewendet werden. Obwohl die Absorption auch funktion- iert, wenn die Formel vertauscht ist, d¨urft ihr das nicht in einem Schritt machen. Zuletzt m¨usst ihr auch beachten, dass ihr immer die Klammern so beibeh¨alt, wie sie sind. Ihr d¨urft die Klammerung nur mit der Assoziativit¨at ver¨andern. Es ist nicht erlaubt, mit Verweis auf die Assoziativit¨at Klammern wegzulassen. Das gilt auch, wenn die Klammerung bei der gegebenen Formel keinen Unterschied macht. Ihr d¨urft Klammern nur entfernen, wenn sie offensichtlich unn¨otig sind, wie z.B. bei F = ((A)). 1 2 ¨Ubungsaufgabe Pr¨adikatenlogik Wir betrachten das Universum U = R. Die folgenden Aussagen sollen durch pr¨adikatenlogische Formeln ausgedr¨uckt werden. In den Formeln d¨urfen nur die Pr¨adikate less(x, y), equals(x, y) und integer(x, y) vorkommen. Statt less(x, y) und equals(x, y) sind die Kurzschreibweisen x < y und x = y auch erlaubt. Die bin¨aren Funktionen + Addition und · Multiplikation sind auch definiert. Es d¨urfen Konstanten wie 0, 1, (...) verwendet werden. Die Division darf aber nicht verwendet werden. Es ist keine Begr¨undung erforderlich. i) Es gibt keine kleinste reelle Zahl. ii) Jede Ganzzahl 1, die strikt gr¨osser als 0 ist, ist das Produkt zweier Ganz- zahlen. iii) Nicht jede reelle Zahl ist rational. iv) Wenn das Produkt zweier reeller Zahlen negativ ist, dann ist genau eine dieser Zahlen negativ. v) Jede gerade Ganzzahl ist gr¨osser gleich allen reellen Zahlen. vi) Falls es eine reelle Zahl gibt, die strikt gr¨osser und strikt kleiner als 0 ist, dann sind alle reellen Zahlen ganzzahlig. L¨osung: i) ¬∃x∀y(x < y ∨ x = y) ii) ∀x ((integer(x) ∧ 0 < x) → ∃y∃z (integer(y) ∧ integer(z) ∧ x = y · z)) iii) ¬∀x∃p∃q (integer(p) ∧ integer(q) ∧ ¬(q = 0) ∧ p = x · q) iv) ∀x∀y(x · y < 0 → ((x < 0 ∧ ¬(y < 0)) ∨ (y < 0 ∧ ¬(x < 0)))) v) ∀x∀y((integer(x) ∧ ∃b((x = 2 · b) ∧ integer(b))) → (y < x ∨ y = x)) vi) (∃a(a < 0 ∧ 0 < a)) → (∀a(integer(a))) Bei dieser Aufgabe ist es wichtig zu beachten, dass ihr euch keine Gedanken dar¨uber machen m¨usst, ob die Aussagen wahr oder falsch sind. Die Aussage v) ist zum Beispiel falsch. Es ist nur wichtig, dass ihr die Aussagen in eine korrespondierende Formel ¨ubersetzt. Ein h¨aufiger Fehler bei diesen Aufgaben ist es, nicht definierte Pr¨adikate oder Funktionen zu verwenden. Beispielsweise d¨urft ihr in euren Formeln nicht ̸= oder > schreiben, weil nur = und < definiert wurden. Lest ausserdem genau die Aufgabenstellung, diese kann zus¨atzliche Funktionen wie Division ausschliessen. Ihr m¨usst auch nicht erkl¨aren, warum eure Formel die Aussage korrekt repr¨asentiert, schreibt bitte nur die Formel hin. Wenn ihr zur Pr¨adikatenlogik mehr ¨Ubung braucht oder einen ¨Uberblick ¨uber die wichtigsten Konzepte haben wollt, k¨onnt ihr hier in die Zusammenfassung letzter Woche schauen. 1engl.: integer 2 3 Proof Patterns 3.1 ¨Ubersicht Das ist das wichtigste Kapitel im ganzen Skript. Ihr werdet in jedem Beweis in DiskMat und anderen F¨achern diese Verfahren anwenden. Sie sind dadurch charakterisiert, was ihr annehmen d¨urft und was ihr zeigen sollt. Ausserdem funktionieren einige der Verfahren nur f¨ur bestimmte Aussagentypen. In der folgenden Tabelle erhaltet ihr eine ¨Ubersicht: Proof Pattern Wir wollen be- weisen... Wir d¨urfen annehmen... Wir m¨ussen zeigen... Composition of Implications S =⇒ T - S =⇒ U und U =⇒ T Direct Proof S =⇒ T S T Indirect Proof S =⇒ T nicht T nicht S Modus Ponens S - R und R =⇒ S Case Distinction S - Mindestens eine der Aussagen A0, A1, (...), An gilt und f¨ur alle i gilt Ai =⇒ S Proof by Contra- diction S S ist falsch Irgendeine falsche Aussage Non-constructive Existence Proof Es gibt ein x, so dass (...) gilt - Erkl¨aren, wieso es ein x geben muss, so dass f¨ur x (...) gilt Constructive Ex- istence Proof Es gibt ein x, so dass (...) gilt - Ein x benennen und erkl¨aren, wieso f¨ur x (...) gilt Proof by Coun- terexample (...) gilt nicht f¨ur alle x - Ein x benennen und erkl¨aren, wieso f¨ur x (...) nicht gilt 3.2 Proof by Induction Dieses Proof Pattern funktioniert nur bei einer ganz bestimmten Art von Aus- sagen: F¨ur alle nat¨urlichen Zahlen n gilt (...). Man geht wie folgt vor: 1. Man zeigt, dass (...) f¨ur 0 gilt (Induktionsstart) 2. Man nimmt an, dass (...) f¨ur ein n gilt (Induktionshypothese) 3. Man zeigt mithilfe der Induktionshypothese, dass (...) auch f¨ur n + 1 gilt (Induktionsschritt) 3 Es gibt auch andere Varianten, die Aussagen f¨ur alle ganzen Zahlen oder f¨ur alle nat¨urlichen Zahlen ab einem Startwert zeigen. Hier k¨onnt ihr mehr erfahren. 3.3 Pigeonhole Principle Voraussetzungen f¨ur dieses Pattern: • Es gibt n Objekte • Es gibt k < n Kategorien • Jedes Objekt ist in genau einer Kategorie Sind die Voraussetzungen gegeben, k¨onnt ihr direkt folgern: Es gibt mindestens eine Kategorie, in der mindestens ⌈ n k ⌉ Objekte sind. 4 Soundness von Proof Patterns Stellt euch ein Proof Pattern wie ein Rezept vor: Ihr wollt ein bestimmtes Gericht kochen (eine Aussage beweisen). Nun gibt euch das Rezept (Proof Pattern) genaue Anweisungen, die ihr befolgen m¨usst. Wenn ihr fertig seid, erwartet ihr, dass ihr das gew¨unschte Gericht erhaltet und es gut schmeckt (die Aussage bewiesen ist). Nur Rezepte und Proof Patterns, f¨ur die das der Fall ist, wollen wir verwenden. Deshalb f¨uhren wir folgenden Begriff ein: Ein Proof Pattern ist sound, wenn man damit nur wahre Aussagen beweisen kann. Alle bisher vorgestellten Proof Patterns sind sound, Beweise f¨ur die Soundness einiger Pattern gibt es im Skript. 5 Soundness von Proof Patterns ¨uberpr¨ufen Wir ¨uberpr¨ufen die Soundness von Proof Patterns mit Aussagenlogik. Zun¨achst ordnen wir der gew¨unschten Aussage eine Formel G zu. Dann ¨ubersetzen wir die Schritte des Proof Patterns in eine logische Formel F . Schliesslich ¨uberpr¨ufen wir mittels Wahrheitstabellen, dass G logische Konsequenz von F ist. 6 ¨Ubungsaufgaben zur Soundness von Proof Pat- terns Proof Pattern 1 Man betrachte das folgende Proof Pattern, um eine Aussage S zu beweisen: 1. W¨ahle geeignete Aussagen T1 und T2. 2. Zeige T1 =⇒ S. 4 3. Zeige T1 ist falsch =⇒ T2 4. Zeige T2 ist falsch Beweise oder widerlege: Das Proof Pattern ist sound. L¨osung: Wir vergeben zun¨achst aussagenlogische Symbole f¨ur die Aussagen: A soll f¨ur S stehen, B f¨ur T1 und C f¨ur T2. Dann ¨ubersetzen wir die Schritte in logische Formeln: Schritt 2 wird durch B → A beschrieben, Schritt 2 durch ¬B → C und Schritt 3 durch ¬C. Da wir im Proof Pattern alle Schritte durchf¨uhren, bilden wir das logische Und dieser Formeln, um F zu erhalten: F = (B → A) ∧ (¬B → C) ∧ ¬C Da die zu beweisende Aussage S durch die Formel A repr¨asentiert wird, w¨ahlen wir G = A. Nun ¨uberpr¨ufen wir ob folgende Aussage gilt, um die Soundness des Proof Patterns zu pr¨ufen: (B → A) ∧ (¬B → C) ∧ ¬C ⊨ A Die Wahrheitstabelle sieht wie folgt aus: A B C ¬B B → A ¬B → C ¬C (B → A) ∧ (¬B → C) ∧ ¬C A 0 0 0 1 1 0 1 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 Wir sehen: In jeder Zeile, in der die Formel F wahr ist (es gibt nur eine), ist die Formel G = A wahr. Wir haben bewiesen: F ⊨ G und somit ist das Proof Pattern sound. Proof Pattern 2 Man betrachte das folgende Proof Pattern, um eine Ausssage S =⇒ T zu be- weisen: 1. W¨ahle eine geeignete Aussage R 2. Zeige S oder R 3. Zeige R =⇒ T Beweise oder widerlege: Das Proof Pattern ist sound. 5 L¨osung: Wir gehen analog zum vorherigen Pattern vor. A soll f¨ur S stehen, B f¨ur T und C f¨ur R. Schritt 2 des Patterns entspricht der Formel A∨C, Schritt 3 entspricht C → B. Also lautet unsere Formel F : F = (A ∨ C) ∧ (C → B) Da wir S =⇒ T beweisen wollen, w¨ahlen wir G = A → B. Wir ¨uberpr¨ufen also die folgende Aussage: (A ∨ C) ∧ (C → B) ⊨ A → B F¨ur die Wahrheitstabelle ergibt sich: A B C A ∨ C C → B (A ∨ C) ∧ (C → B) A → B 0 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 0 1 0 1 1 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 Wir sehen, dass f¨ur die Interpretation A = 1, B = 0, C = 0 F wahr ist, G aber nicht. Das heisst F ⊭ G. Somit ist das Proof Pattern nicht sound. 6","libVersion":"0.3.1","langs":""}