/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FontSizeAdjuster
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FontSizeAdjuster = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "increment-font-size",
      name: "Increment font size",
      repeatable: true,
      // holding hotkey repeatedely trigger command
      checkCallback: (checking) => {
        const currentSize = this.app.vault.getConfig("baseFontSize");
        if (typeof currentSize !== "number")
          return false;
        if (currentSize >= 30)
          return false;
        if (!checking) {
          this.app.vault.setConfig("baseFontSize", currentSize + 1);
          this.app.updateFontSize();
        }
        return true;
      }
    });
    this.addCommand({
      id: "decrement-font-size",
      name: "Decrement font size",
      repeatable: true,
      // holding hotkey repeatedely trigger command
      checkCallback: (checking) => {
        const currentSize = this.app.vault.getConfig("baseFontSize");
        if (typeof currentSize !== "number")
          return false;
        if (currentSize <= 10)
          return false;
        if (!checking) {
          this.app.vault.setConfig("baseFontSize", currentSize - 1);
          this.app.updateFontSize();
        }
        return true;
      }
    });
    this.addCommand({
      id: "reset-font-size",
      name: "Rest font size to default",
      checkCallback: (checking) => {
        const currentSize = this.app.vault.getConfig("baseFontSize");
        if (typeof currentSize !== "number")
          return false;
        if (!checking) {
          this.app.vault.setConfig("baseFontSize", 16);
          this.app.updateFontSize();
        }
        return true;
      }
    });
  }
};

/* nosourcemap */