/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathJaxPreamblePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/settings/settings.ts
var import_obsidian2 = require("obsidian");

// src/settings/suggest.ts
var import_obsidian = require("obsidian");
var AbstractPathSuggest = class extends import_obsidian.AbstractInputSuggest {
  constructor(plugin, textInputEl) {
    super(plugin.app, textInputEl);
    this.plugin = plugin;
  }
  renderSuggestion({ path }, el) {
    el.setText(path);
  }
  selectSuggestion({ path }) {
    super.selectSuggestion({ path });
    this.setValue(path);
    this.suggestEl.hide();
  }
};
var PreambleSuggest = class extends AbstractPathSuggest {
  constructor(plugin, textInputEl, serialized) {
    super(plugin, textInputEl);
    this.serialized = serialized;
  }
  getSuggestions(query) {
    return this.serialized.preambles.filter((preamble) => {
      return preamble.path.toLowerCase().includes(query.toLowerCase());
    });
  }
};
var FileSuggest = class extends AbstractPathSuggest {
  getSuggestions(query) {
    return this.plugin.app.vault.getFiles().filter((file) => file.path.toLowerCase().includes(query.toLowerCase()));
  }
};
var FolderSuggest = class extends AbstractPathSuggest {
  getSuggestions(query) {
    return this.plugin.app.vault.getAllLoadedFiles().filter((folder) => folder instanceof import_obsidian.TFolder && folder.path.toLowerCase().includes(query.toLowerCase()));
  }
};

// src/settings/settings.ts
var MathJaxPreamblePluginSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
    this.serialized = null;
  }
  display() {
    this.serialized = this.plugin.manager.serialize();
    this._display(this.serialized);
  }
  _display(serialized) {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Register preambles").setDesc('You need to register preamble files before using them. Once registed, you can use them by specifying them (1) as folder preambles (see below) or (2) via the "preamble" note property.').setHeading().addButton((button) => {
      button.setButtonText("Add").setCta().onClick(() => {
        serialized.preambles.push({ path: "" });
        this._display(serialized);
      });
    });
    let i = 1;
    for (const preamble of serialized.preambles) {
      new import_obsidian2.Setting(containerEl).setName(`Preamble ${i}`).addText((text) => {
        text.setPlaceholder("Path to preamble").setValue(preamble.path).then(
          (text2) => new FileSuggest(this.plugin, text2.inputEl).onSelect(({ path }) => preamble.path = path)
        ).onChange((path) => preamble.path = path);
      }).addExtraButton((button) => {
        button.setIcon("trash").onClick(() => {
          const index = serialized.preambles.findIndex(({ path }) => path === preamble.path);
          serialized.preambles.splice(index, 1);
          this._display(serialized);
        });
      });
      i++;
    }
    new import_obsidian2.Setting(containerEl).setName("Folder preambles").setHeading().addButton((button) => {
      button.setButtonText("Add").setCta().onClick(() => {
        serialized.folderPreambles.push({ folderPath: "", preamblePath: "" });
        this._display(serialized);
      });
    });
    i = 1;
    for (const folderPreamble of serialized.folderPreambles) {
      new import_obsidian2.Setting(containerEl).setName(`Folder preamble ${i}`).addText((text) => {
        text.setPlaceholder("Folder path").setValue(folderPreamble.folderPath).then(
          (text2) => new FolderSuggest(this.plugin, text2.inputEl).onSelect(({ path }) => folderPreamble.folderPath = path)
        ).onChange((path) => folderPreamble.folderPath = path);
      }).addText((text) => {
        var _a;
        const preamble = serialized.preambles.find(({ path }) => path === folderPreamble.preamblePath);
        text.setPlaceholder("Preamble path").setValue((_a = preamble == null ? void 0 : preamble.path) != null ? _a : "").then(
          (text2) => new PreambleSuggest(this.plugin, text2.inputEl, serialized).onSelect(({ path }) => {
            var _a2;
            const preamble2 = serialized.preambles.find((p) => p.path === path);
            folderPreamble.preamblePath = (_a2 = preamble2 == null ? void 0 : preamble2.path) != null ? _a2 : "";
          })
        ).onChange((preamblePath) => {
          var _a2;
          const preamble2 = serialized.preambles.find((p) => p.path === preamblePath);
          folderPreamble.preamblePath = (_a2 = preamble2 == null ? void 0 : preamble2.path) != null ? _a2 : "";
        });
      }).addExtraButton((button) => {
        button.setIcon("trash").onClick(() => {
          const index = serialized.folderPreambles.findIndex(({ folderPath }) => folderPath === folderPreamble.folderPath);
          serialized.folderPreambles.splice(index, 1);
          this._display(serialized);
        });
      });
      i++;
    }
  }
  async hide() {
    super.hide();
    if (this.serialized)
      await this.plugin.manager.deserialize(this.serialized);
    this.plugin.rerender();
    await this.plugin.saveSettings();
  }
};

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/patches/markdown-preview-view.ts
var import_obsidian3 = require("obsidian");
var patchMarkdownPreviewView = (plugin) => {
  plugin.register(around(import_obsidian3.MarkdownPreviewView, {
    // @ts-ignore
    postProcess(old) {
      return function(app, ctx) {
        plugin.manager.loadPreamble(ctx.sourcePath, ctx.frontmatter);
        return old.call(this, app, ctx);
      };
    }
  }));
};

// src/patches/editor-view.ts
var import_view = require("@codemirror/view");
var import_obsidian4 = require("obsidian");
var patchEditorView = (plugin) => {
  plugin.register(around(import_view.EditorView.prototype, {
    update(old) {
      return function(transactions) {
        var _a, _b, _c, _d;
        const sourcePath = (_c = (_b = (_a = this.state.field(import_obsidian4.editorInfoField, false)) == null ? void 0 : _a.file) == null ? void 0 : _b.path) != null ? _c : "";
        plugin.manager.loadPreamble(sourcePath, (_d = plugin.app.metadataCache.getCache(sourcePath)) == null ? void 0 : _d.frontmatter);
        return old.call(this, transactions);
      };
    }
  }));
};

// src/manager.ts
var import_obsidian5 = require("obsidian");
var PreambleManager = class extends import_obsidian5.Component {
  constructor(plugin, serialized) {
    super();
    this.plugin = plugin;
    this.serialized = serialized;
    this.app = plugin.app;
    this.preambles = /* @__PURE__ */ new Map();
    this.folderPreambles = /* @__PURE__ */ new Map();
    this.lastPreamblePath = null;
  }
  onload() {
    this.app.workspace.onLayoutReady(async () => {
      await this.deserialize(this.serialized);
      this.plugin.rerender();
    });
    this.registerEvent(this.app.vault.on("modify", (file) => this.onModify(file)));
    this.registerEvent(this.app.vault.on("rename", (file, oldPath) => this.onRename(file, oldPath)));
    this.registerEvent(this.app.vault.on("delete", (file) => this.onDelete(file)));
  }
  serialize() {
    return {
      preambles: [...this.preambles.values()].map(({ path }) => ({ path })),
      folderPreambles: [...this.folderPreambles.entries()].map(([folderPath, preamblePath]) => ({ folderPath, preamblePath }))
    };
  }
  async deserialize(data) {
    this.preambles = /* @__PURE__ */ new Map();
    const promises = [];
    for (const { path } of data.preambles) {
      if (!path)
        continue;
      const file = this.app.vault.getAbstractFileByPath(path);
      if (file instanceof import_obsidian5.TFile) {
        promises.push(
          this.app.vault.read(file).then(
            (content) => this.preambles.set(path, { path, content: this.preprocess(content) })
          )
        );
      } else {
        new import_obsidian5.Notice(`${this.plugin.manifest.name}: Preamble file ${path} not found.`);
      }
    }
    await Promise.all(promises);
    this.folderPreambles = /* @__PURE__ */ new Map();
    for (const { folderPath, preamblePath } of data.folderPreambles) {
      this.folderPreambles.set((0, import_obsidian5.normalizePath)(folderPath), preamblePath);
    }
  }
  preprocess(data) {
    data = data.trim();
    if (data.startsWith("```")) {
      const lineBreak = data.indexOf("\n");
      if (lineBreak === -1)
        data = data.slice(3).trim();
      else
        data = data.slice(lineBreak + 1).trim();
    }
    if (data.endsWith("```"))
      data = data.slice(0, -3).trim();
    if (data.startsWith("$$"))
      data = data.slice(2).trim();
    if (data.endsWith("$$"))
      data = data.slice(0, -2).trim();
    if (data.startsWith("$"))
      data = data.slice(1).trim();
    if (data.endsWith("$"))
      data = data.slice(0, -1).trim();
    return data;
  }
  async onModify(file) {
    if (file instanceof import_obsidian5.TFile) {
      for (const { path } of this.preambles.values()) {
        if (path === file.path) {
          const content = await this.app.vault.read(file);
          this.preambles.set(path, { path, content: this.preprocess(content) });
          this.plugin.rerender();
        }
      }
    }
  }
  onRename(file, oldPath) {
    if (file instanceof import_obsidian5.TFile)
      this.onFileRename(file, oldPath);
    if (file instanceof import_obsidian5.TFolder)
      this.onFolderRename(file, oldPath);
    this.plugin.saveSettings();
  }
  onFileRename(file, oldPath) {
    for (const { path, content } of this.preambles.values()) {
      if (path === oldPath) {
        this.preambles.set(file.path, { path: file.path, content: content ? this.preprocess(content) : void 0 });
        this.preambles.delete(oldPath);
      }
    }
    for (const [folderPath, preamblePath] of this.folderPreambles.entries()) {
      if (preamblePath === oldPath) {
        this.folderPreambles.set(folderPath, file.path);
      }
    }
  }
  onFolderRename(folder, oldPath) {
    for (const { path, content } of this.preambles.values()) {
      if (path.startsWith((0, import_obsidian5.normalizePath)(oldPath + "/"))) {
        const newPath = path.replace(oldPath, folder.path);
        this.preambles.delete(path);
        this.preambles.set(newPath, { path: newPath, content });
      }
    }
    for (const [folderPath, preamblePath] of this.folderPreambles.entries()) {
      const oldFolderPath = (0, import_obsidian5.normalizePath)(oldPath + "/");
      const newFolderPath = (0, import_obsidian5.normalizePath)(folder.path + "/");
      if (folderPath === oldPath) {
        this.folderPreambles.delete(oldFolderPath);
        this.folderPreambles.set(newFolderPath, preamblePath.replace(oldFolderPath, newFolderPath));
      } else if (folderPath.startsWith(oldFolderPath) || preamblePath.startsWith(oldFolderPath)) {
        this.folderPreambles.delete(folderPath);
        this.folderPreambles.set(
          folderPath.replace(oldFolderPath, newFolderPath),
          preamblePath.replace(oldFolderPath, newFolderPath)
        );
      }
    }
  }
  onDelete(file) {
    if (file instanceof import_obsidian5.TFile)
      this.onFileDelete(file);
    if (file instanceof import_obsidian5.TFolder)
      this.onFolderDelete(file);
    this.plugin.saveSettings();
  }
  onFileDelete(file) {
    this.preambles.delete(file.path);
    for (const [folderPath, preamblePath] of this.folderPreambles.entries()) {
      if (preamblePath === file.path) {
        this.folderPreambles.delete(folderPath);
      }
    }
  }
  onFolderDelete(folder) {
    for (const { path } of this.preambles.values()) {
      if (path.startsWith((0, import_obsidian5.normalizePath)(folder.path + "/"))) {
        this.preambles.delete(path);
      }
    }
    for (const [folderPath, preamblePath] of this.folderPreambles.entries()) {
      if (folder.path === folderPath || folderPath.startsWith((0, import_obsidian5.normalizePath)(folder.path + "/")) || preamblePath.startsWith((0, import_obsidian5.normalizePath)(folder.path + "/"))) {
        this.folderPreambles.delete(folderPath);
      }
    }
  }
  resolvedPreamble(sourcePath, frontmatter) {
    var _a;
    if (typeof (frontmatter == null ? void 0 : frontmatter.preamble) === "string") {
      let preamblePath = frontmatter.preamble;
      if (preamblePath.startsWith("[[") && preamblePath.endsWith("]]")) {
        preamblePath = preamblePath.slice(2, -2);
      }
      const preambleFile = this.app.metadataCache.getFirstLinkpathDest(preamblePath, sourcePath);
      if (preambleFile) {
        const preamble = [...this.preambles.values()].find(({ path }) => path === preambleFile.path);
        if (preamble)
          return preamble;
      }
    }
    const file = this.app.vault.getAbstractFileByPath(sourcePath);
    let folder = file == null ? void 0 : file.parent;
    while (folder) {
      const preamblePath = this.folderPreambles.get(folder.path);
      if (preamblePath) {
        return (_a = this.preambles.get(preamblePath)) != null ? _a : null;
      }
      folder = folder.parent;
    }
    return null;
  }
  loadPreamble(sourcePath, frontmatter) {
    const preamble = this.resolvedPreamble(sourcePath, frontmatter);
    if (preamble == null ? void 0 : preamble.content) {
      if (this.lastPreamblePath !== preamble.path) {
        (0, import_obsidian5.renderMath)(preamble.content, false);
        this.lastPreamblePath = preamble.path;
      }
    }
  }
  forgetHistory() {
    this.lastPreamblePath = null;
  }
};

// src/main.ts
var MathJaxPreamblePlugin = class extends import_obsidian6.Plugin {
  async onload() {
    var _a;
    await (0, import_obsidian6.loadMathJax)();
    const data = (_a = await this.loadData()) != null ? _a : {};
    const serializedPreambles = data["preambles"] || { preambles: [], folderPreambles: [] };
    this.addSettingTab(new MathJaxPreamblePluginSettingTab(this));
    this.addChild(this.manager = new PreambleManager(this, serializedPreambles));
    patchMarkdownPreviewView(this);
    patchEditorView(this);
  }
  async saveSettings() {
    await this.saveData({ preambles: this.manager.serialize() });
  }
  async rerender() {
    this.manager.forgetHistory();
    for (const leaf of this.app.workspace.getLeavesOfType("markdown")) {
      const view = leaf.view;
      const state = view.getState();
      const eState = view.getEphemeralState();
      view.previewMode.rerender(true);
      const editor = view.editor;
      editor.setValue(editor.getValue());
      if (state.mode === "preview") {
        state.mode = "source";
        await view.setState(state, { history: false });
        state.mode = "preview";
        await view.setState(state, { history: false });
      }
      view.setEphemeralState(eState);
    }
  }
};
