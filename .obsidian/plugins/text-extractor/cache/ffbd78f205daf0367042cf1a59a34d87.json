{"path":"sem1/EProg/VRL/extra/slides/EProg_s00_information.pdf","text":"252-0027 Einführung in die Programmierung Herbstsemester 2023/24 Thomas R. Gross Department Informatik ETH Zürich ©Thomas Gross 2020 - 2023 Vorlesung+ § Im Hörsaal Präsensvorlesung § Stellen Sie Fragen! § Bitte keine persönlichen Gespräche § Remote Übertragung (ML E12 und LiveStream) § Stellen Sie Fragen, melden Sie Probleme § Aufzeichnung in ETH Video Portal § Fragen & Kommentare via EduApp Course Channel 4 Diese Veranstaltung § Vorlesungen (ML D 28) § Dienstag 10 – 12 § Freitag 8 – 10 (ausserdem Do 28. 9. & 5. 10., 14 – 15, ETF F5) § Übungen (diverse Räume) § Mittwoch 16 – 18 § Ein Angebot: keine Anwesenheitspflicht § Sie sind für Ihre (Aus)Bildung verantwortlich 6 Informationen § Web Seiten der Gruppe (Laboratory for Software Technology) www.lst.inf.ethz.ch Im ETH Content Management System – nicht immer sofort online § Vorlesung und Übungen sind ein Angebot : keine Anwesenheitspflicht § Sie sind für Ihre (Aus)Bildung verantwortlich 7 Auf unserer Web Seite finden Sie § Folien (wenn möglich vor der Vorlesung aber keine Garantie) § Achtung: 1 Seite/Slide § Drucken Sie 2, 4, 6 Seiten pro Blatt A4 Papier § Besser: drucken Sie nicht … § In der Vorlesung geschriebene Folien (Auswahl) § Vielleicht 24h-48h nach der Vorlesung § Diverse Links (zu Video Portal, Material der Übungsgruppen, Aufgabenstellungen) 8 Informationen § Auf dem Video Portal der ETH § Aufzeichnung des übertragenen Livestreams § Nur Hauptprojektor § Die Vorlesung wird aufgezeichnet § Daher bittet unsere Rechtsabteilung Sie zur Kenntnis zu nehmen, dass diese Vorlesung aufgezeichnet wird. Wenn Sie nicht auf einem Video erscheinen wollen, dann setzen Sie sich bitte nicht in den Blickwinkel der Kamera im D 28. 10 Wichtig: Bitte belegen Sie die Vorlesung in myStudies. Sonst können wir Sie nicht erreichen und Sie haben nicht Zugang zu Aufgaben, usw. Unbedingt bis Freitag den 22. 9., 12 Uhr mittags! 11 Das Programm für heute 12 «Educators, generals, dieticians, psychologists, and parents program. Armies, students, and some societies are programmed.» Alan Perlis (Foreword to «Structure and Interpretation of Computer Programs», H. Abelson and G. J. Sussman, 1985) Für uns: Allgemeinste Form des Programmieren: «Computer Programming» Das Programm für heute 13 § Was ist Programmieren? § (Soll man) Programmieren lernen? § Bezug zum Informatikstudium an der ETH § Wie wir die Lernziele erreichen ... Was ist überhaupt «Programmieren» § Programmieren –> Programm § Programm: von griechisch prógramma § Schriftliche Bekanntmachung, Aufruf; Tagesordnung [Duden] § Anweisungen § Informatik: Programm wird ausgeführt § Programm(ausführung) manipuliert Symbole § Text, Zahlen, Bilder, … 14 Was ist überhaupt «Programmieren» § Programmieren: Erstellen eines Programms § Programmieren (Zusammenfassend): Software Entwicklung § Programmierung behandelt alle Aspekte – von Entwurf bis Installation § Programm realisiert einen Algorithmus § Algorithmus: beschreibt Schritt-für-Schritt wie eine Aufgabe gelöst wird 15 (Soll man) Programmieren lernen? 161718 31. Dez. 2019 (Soll man) Programmieren lernen? 1920 § Idee: § Benutzer gibt Spezifikation ein § Spezifikation: Aufgabenstellung § Copilot liefert ein korrektes Programm 21 Count «coXe»: Spezifikation 22 Count «coXe»: Vorschlag für Name 23 countCode 24 countCode 25 countCode 27 Copilot § Wählte guten Namen für das Programm § Brauchte (etwas) Hilfe mit dem Parameter § Zusammenfassung: ✓ 28 Copilot mit Aufgaben auf Deutsch ... 29 Copilot w/ German § Kein Problem § Copilot kennt sogar einen guten Namen für das Programm ... 30 Copilot mit Aufgaben auf Italienisch § Danke an Giacomo Ponti! § Data una stringa di lunghezza dispari, ritorna la stringa di lunghezza 3 dal centro della stringa originale. La lunghezza della stringa originale sarà almeno di 3 caratteri. § Auch die italienische Aufgabenstellung für middleThree und andere sind kein Problem § (Alle Aufgaben, die wir probierten ...) 31 § Andere mach(t)en ähnliche Erfahrungen § Copilot recht gut für solche und ähnliche Probleme § Ist Programmieren kein Problem mehr? 32 (Soll man) Programmieren lernen? § Programmieren – das Latein des 21. Jahrhunderts? § Stärkt logisches Denken … 34 Lehrplan G ym nasium 2022, K anton Zürich (Soll man) Programmieren lernen? § Programmieren – das Latein des 21. Jahrhunderts? § Stärkt logisches Denken § Angeblich § Aber nicht wirklich wichtig § Für die meisten Studierenden 35 § Gilt das auch für Programmieren ? § Github Copilot macht die Arbeit für uns?? § Copilot «lernte» mit öffentlichen Repositories und Programmier Aufgaben § Copilot kennt nicht nur die Lösungen .... sondern weiss auch was das nächste Problem ist ... § Genauso kennt Copilot «beliebte» Aufgaben wie «Türme von Hanoi», «Fibonacci Zahlen», .... § Aber wer will Lösungen zu diesen Aufgaben?? 36 E Berger, Coping w/ Copilot Prüfungsvorbereitung 2018 37 Week Size (Words) Topic Success 4 197 String-Addition: loops, arrays 0 5 456 Tool Rental: classes, arrays, iteration, JUnit 0 6 344 Valleys & Hills: arrays, data analysis, I/O 0 7 146 String Interleaving: recursion 0 8 151 List Reversal: references, working w/ classes 0 9 163 Class Puzzle: inheritance (w/o classes or driver) 0 10 600 Desk Calculator: inheritance, recursion 0 11 302 Data Analysis (FIFA): ArrayList<..>, Map<..> 0 12 194 Sublist Palindrome: Set<List<..>>, exceptions 100 Im 1. Schritt Copilot 38 Copilot – Erwartet Hinweise § Mögliche Hinweise § Einfügen von Variablen § Änderung des Kontrollflusses § Hilfe bei Implementation einer Datenstruktur § Attribute und Methoden von Objekten § Definition von Vergleich(Prädikat)en § Vorläufige Ergebnisse für ausgewählte Aufgaben § Experimente von Giacomo Ponti 39 Copilot – mit Hinweisen (2018) 40 Week Size (Words) Total Success 4 197 4 100 5 456 3 100 6 344 4 100 7 146 2 0 8 151 1 100 9 163 12 100 10 600 5 100 11 302 3 100 12 194 0 100 Anzahl HinweiseCopilot – Pair Programmer nicht Ersatz § Mögliche Hinweise § Einfügen von Variablen § Änderung des Kontrollflusses § Hilfe bei Implementation von Datenstruktur § Attribute und Methoden von Objekten § Definition von Vergleich(Prädikat)en § ... und weitere 42 § Sie haben dazu Fragen? ß ß ß ß ß § Dann sind Sie hier richtig Programmierung und Informatik § Ein Thema der Informatik – es gibt auch andere § Zentral wenn Sie lernen wollen, wie die Informatik ein Problem angeht § Fokus auf «Möglichkeiten und Grenzen der maschinellen Informationsverarbeitung» § Es gibt «unmögliche» Probleme § Kosten der Berechnung (einer Lösung) sind sehr wichtig 44 Programmierung «Programming as universal activity» by Vinton Cerf, CACM March 2016, vol 59(3) p 7 § analyzing problems § breaking them down into manageable parts § finding solutions § integrating the results 45 Programmierung «Programming as universal activity» by Vinton Cerf, CACM March 2016, vol 59(3) p 7 § Probleme analysieren § Probleme in (beherrschbare) Teilprobleme zerlegen § Lösungen finden § Ergebnisse zusammenfügen/kombinieren 46 Vinton Cerf (*1943) Ph.D. UCLA (1972) Assistant Professor Stanford (1972-76) Program Manager (D)ARPA (1976-82) Zusammen mit Bob Kahn massgeblich an der Entwicklung von TCP/IP beteiligt (Internet Protokoll) Nach 1982 diverse Positionen in Industrie & Verbänden, seit 2005 VP Google Dr. h.c. ETH 1998 47 Schlagfertig beantwortete Vint Cerf die teilweise ziemlich kritischen Fragen des ETH-Publikums.(2006) http://web.ethlife.ethz.ch/articles/campuslife/vintcerf.html Programmierung § Lösungen finden: für andere Menschen § Beschreiben wie eine Lösung aussehen soll § Lösungen finden: für eine Maschine § Anweisungen für eine Maschine/Computer 48 Programmierung § Lösungen finden: für andere Menschen § Beschreiben wie eine Lösung aussehen soll § Lösungen finden: für eine Maschine § Anweisungen für eine Maschine/Computer § Beschreibung, Anweisung: in einer «Sprache» 49 Wie Programmieren lernen? § Programm: Folge von Anweisungen, die von einem Computer ausgeführt werden (können) § Wir müssen verstehen welche Anweisungen der Computer ausführen kann § Dann Erstellen der Folge von Anweisungen § Mögliche Anweisungen: Programmiersprache 50 Einführung in die Programmierung § Müssen eine Programmiersprache verwenden § Sprache für Computer (führt aus) § ... schreibt § Sprache für Menschen (schreibt, liest) § ... selten führt aus (heute) 51 § Müssen eine Programmiersprache verwenden § Sprache für Computer (führt aus) § ... schreibt § Sprache für Menschen (schreibt, liest) § ... selten führt aus (heute) § Charles [Peirce] was appointed to his first official position in the Coast Guard Survey [..] in July 1861, as an assistant computer at $ 35 per month. (J. Brent, Charles Sanders Peirce: A Life. 1993. p 61) Einführung in die Programmierung 52 Heute: Maschine Früher: Berufsbezeichnung Früher: Berufsbezeichnung Einführung in die Programmierung § Müssen eine Programmiersprache verwenden § Wir verwenden Java™ § «Industrial strength» Sprache § Viele Konzepte § Nicht alle werden in «Einf. in die Programmierung» vorgestellt/verwendet § … diese werden auch nicht für die Prüfung erwartet § Mehr Themen/Konzepte in weiteren Vorlesungen 55 Programmieren § Wie kann man Programmieren lernen? § Braucht man eine besondere Begabung? § Gibt es nur Naturtalente (und der Rest kann zuschauen)? § Wie kann man XXXX lernen? 56 Jede(r) kann programmieren lernen § Ziel der Vorlesung: Kompetenz § Lernziel: Sie können korrekte Programme systematisch erstellen § Programmieren ist zentrales Thema der Informatik § Aber nicht das einzige! § Wichtig sind: § Aufmerksamkeit § Imagination, Phantasie § Übung Übung Übung Übung Übung 61 Veranstaltung = Vorlesung + Übung § Programmieren erfordert Übung § Nur Übung macht perfekt … § Sie lernen nicht programmieren wenn Sie sich nur die Vorlesung anhören § Sie müssen die Übungsaufgaben lösen (oder es zumindest versuchen) 6468 Visionen Dez 2020 69 Visionen Dez 2020 Übungen § Aufgabenblätter § Werden über Web Seite publiziert § In der Übungsgruppe bei Bedarf vor-besprochen § Eine Gelegenheit zu lernen! § Praxis Übungen § Bonus Übungen § Teilnahme an Übungsgruppe nicht verbindlich aber sehr empfohlen § Es gibt selten nur eine Lösung § Üben Sie das Diskutieren und Vergleichen verschiedener Lösungen 70 Praxis und Bonus Übungen § Werden teilweise automatisch korrigiert § «Automatisch» – durch einen Computer § d.h. durch ein Programm, das von einem Computer ausgeführt wird § Hinweis: Ihr Java Programm wird nicht direkt ausgeführt, die Java Anweisungen werden übersetzt (durch einen Compiler) § Analyse des Programms § Selbe Technologie hilft bei der Bewertung von Programmen § Thema der Forschung 71 Praxis Übungen § Sie können die Lösungen im Internet (wahrscheinlich) finden § Musterlösung aus früheren Jahren § Langweilen die Assistierenden und Copilot § Eine Gelegenheit zu lernen! § Besprechung in der Gruppe, Feedback, Überarbeiten 72 Bonus Übungen § Sie können (ab 4. oder 5. Aufgabenblatt) «Bonuspunkte» für die Basisprüfung sammeln § Bonuspunkte helfen die Note anzuheben – maximal 0.25 Notenbonus § Maximalnote auch ohne Bonus erreichbar § Programmieren ist Teil der Basisprüfung § Details später. 73 Bonus Übungen § Anreiz § Sie müssen die Aufgaben selber lösen. § Abschreiben (oder abschreiben lassen) ist unehrliches Verhalten und wird nach der ETH Disziplinarverordnung geahndet. 75 Übungen vs Prüfungserfolg (WS16/17)Dank an R Meier & M Faesfür die Graphik. (Session Herbst 16/17) 7678 -10 0 10 20 30 40 50 60 70 80 90 100 110 120 -10 0 10 20 30 40 50 60 70 80 90 100 110 120 % LE Bonus vs % Programming 100 % < 100 < 90 < 80 < 70 < 60 < 50 < 40 < 30 < 20 < 10 100 %< 100< 90< 80< 70< 60< 50< 40< 30< 20< 10 % Bonus vs. % Programmieren (HS21) 79 Anzahl Studierende (100 % LE Bonus insgesamt) à X % Punkte Programmierprüfung (HS21) % Punkte ProgrammierprüfungAnzahl 80 Anzahl Studierende (100 % LE Timed Bonus) à X % Punkte Programmierprüfung (HS22) % Punkte ProgrammierprüfungAnzahl Bonus Übungen § Anreiz § Stichwort: Eigenverantwortung § Nur die Bonusaufgaben lösen? Riskant wenn Sie wenig/keine Programmiererfahrung haben. § Und: Sie müssen die Aufgaben selber lösen um zu lernen. 83 Übungsgruppen § Wir bieten drei Arten von Gruppen an: § Fokusgruppen § Fokus auf Studierende ohne Vorkenntnisse und ohne vorherige Programmiererfahrung (egal welche Programmiersprache) § Gemischte Gruppen § Für alle Vorkenntnisstufen § Repetierenden Gruppe (schneller Einstieg) 86 Übungsgruppen § Wir bieten drei Arten von Gruppen an: § Fokusgruppen § Fokus auf Studierende ohne Vorkenntnisse und ohne vorherige Programmiererfahrung (egal welche Programmiersprache) § Gemischte Gruppen § Für alle Vorkenntnisstufen § Freie Wahl -- Alle Gruppen behandeln den selben Stoff/die selben Aufgaben 87 Einschreibung in Übungsgruppen § Ab heute Nachmittag in myStudies möglich § Wenn die bevorzugte Art von Gruppe nicht verfügbar ist: Warten! § Wir passen Anzahl und Grösse der Gruppen an § Wenn Sie mit anderen Studierenden in eine Gruppe wollen: § Zusammen (zeitgleich) einschreiben § Bitte bis Freitag (22. 9.) einschreiben! § Nachzügler später möglich, aber evtl. mit Einschränkungen § Nur wer in Gruppe eingeschrieben ist kann Lösungen einreichen 88 Bei Problemen § Erste Anlaufstelle Treffen der Übungsgruppe § Wenn nicht möglich: «Study Center» § Coaches können 1-1 helfen § Study Center nicht Ersatz für Übungsgruppe § Weitere Informationen auf dem Web 89 Wöchentlicher Ablauf (im Normalfall) § bis Mittwoch Morgen: Praxis Übungen und (später) Bonus Aufgaben auf dem Web publiziert § Übung 0: [Heute] Einrichten der Arbeitsumgebung § Mittwoch Nachmittag: Treffen Übungsgruppe § Besprechung Aufgaben (alte, neue, extra) und Vorlesungsthemen § Diese Woche nur Study Center für Probleme mit Arbeitsumgebung § Mittwoch Folgewoche: Abgabe der Lösungen (Praxis Übungen und Bonus Aufgaben) 90 Besondere Regeln für 9. & 11. Woche § Bonus Aufgabe erst am 21. 11. (5. 12.) publiziert und muss innerhalb von 2 Stunden abgegeben werden § Weitere Details auf dem Web und später in Vorlesung 91 Weiterer Ablauf (Plan) § 22. 9.: 8:15 (Fr): Vorlesung § 26. 9.: 10:15 (Di): Vorlesung § 27. 9.: 1. Treffen der Gruppen (Mittwoch nächste Woche) § Thema: Arbeitsumgebung einrichten § 28. 9.: 14:15 (Do): Vorlesung [ETA F5, Keine «Algorithmen und Datenstrukturen» zu dieser Zeit] § 29. 9.: 8:15 (Fr): Vorlesung § 3.10.: 10:15 (Di): Vorlesung § 5. 10.: 14:15 (Do): Vorlesung [ETA F5] § 6. 10.: 8:15 (Fr): Vorlesung 115 Vorschau § Übung U0: (19. 9. -> 27. 9.): Einrichten der Arbeitsumgebung § Keine Abgabe § Wir wollen Ihnen helfen schnell arbeiten zu können: jetzt anfangen!! § Sprechstunden (Study Center) nutzen (Mi 20.9. 16-18, Fr 22.9. 12-14) § Übung U1 (27. 9. -> 4. 10.): «Abgabe» durchspielen, einfache Aufgabe § So erhalten Sie auch Feedback, ggf. in der Gruppe einreichen § Übung U2 (4. 10. -> 11. 10.): einfachste Programme § Ab Übung U4: Bonuspunkte möglich (später mehr) 116 Details auf der Web Seite","libVersion":"0.3.2","langs":""}