{"path":"sem4/CN/VRL/extra/CN-s07-QUIC.pdf","text":"Computer Networks: QUIC Simon Scherrer Slides adapted from Ankit Singla Photo: ETH Zürich / Gian Marco Castelberg Where we are in the course … Part 1: Overview & Principles Part 2: Applications Part 3: Transport Part 4: Algorithms 2 Computer Networks What should the transport layer provide? How do we build reliable transport? How does the Internet’s transport work? Sockets: the application ⟷ transport interface #1 #2 #3 #4 Part 3: Transport 3 A new Internet protocol is being deployed! 4 Quick UDP Internet Connections* * IETF: QUIC is a name, not an acronym. A new Internet protocol is being deployed! 6 • Biggest transport change in ~30 years • You’re already using it • 35% of downstream traffic in EMEA [2022] • 75% of Meta Internet traffic [2022] • Standardized by IETF • Tightly integrated with HTTP/3 design Strategy: rebuild everything on UDP 7 [The QUIC Transport Protocol: Design and Internet-Scale Deployment, Langley et al., SIGCOMM 2017] Strategy: rebuild everything on UDP 8 Source port Destination port Sequence number Acknowledgment Advertised windowHdrLen Flags0 Checksum Urgent pointer Options (variable) SRC port DST port checksum length DATA DATA Why build a new transport? • Application context has changed • TCP’s “hellos” are too expensive • TCP doesn’t handle mobility • Difficult to evolve TCP (Ossification) • Middleboxes, firewalls are suspicious (overfit to traditional transport headers) 9 Why build a new transport? 10 • Application context has changed • TCP’s “hellos” are too expensive • TCP doesn’t handle mobility • Difficult to evolve TCP (Ossification) • Middleboxes, firewalls are suspicious (overfit to traditional transport headers) Redesigning transport for the Web 11 Innovating Transport with QUIC: Design Approaches and Research Challenges Cui et al., IEEE Internet Computing 2017. Sliding window halts if any flow halts Sending process Receiving process TCP Last byte written Last byte read Sender Window Receiver Window 12 Redesigning transport for the Web 13 Innovating Transport with QUIC: Design Approaches and Research Challenges Cui et al., IEEE Internet Computing 2017. Why build a new transport? 14 • Application context has changed • TCP’s “hellos” are too expensive • TCP doesn’t handle mobility • Difficult to evolve TCP (Ossification) • Middleboxes, firewalls are suspicious (overfit to traditional transport headers) Eliminating the “hello” safely (in the common case) Client Server ... Establish connection Request response Client request Close connection DNS “Hi” Data transfer handshake state in a “transport cookie” 15 QUIC rolls in TCP and TLS connection negotiation First connection to a server Innovating Transport with QUIC: Design Approaches and Research Challenges Cui et al., IEEE Internet Computing 2017. 16 QUIC rolls in TCP and TLS connection negotiation Repeat connection Innovating Transport with QUIC: Design Approaches and Research Challenges Cui et al., IEEE Internet Computing 2017. 17 Vulnerable to replay attacks! (no new TLS key for connection) But 0-RTT data transfer is not entirely “free” Open to replay attacks 23 1-RTT Setup Random half key k1 Random half key k2 f(k1) f(k2) Shared key k = G(k1, f(k2)) Shared key k = G(f(k1), k2) Auth(data, k), Enc(data, k) Replay during other, later connection? → Key k will be different → Auth cannot be forged 0-RTT Setup Preshared key k, Cookie C Extract key k from CCookie C, Auth(data, k), Enc(data, k) Replaying message is possible! data = “Pay 5000$” … but servers should tolerate duplicate transmissions anyway! Why build a new transport? 26 • Application context has changed • TCP’s “hellos” are too expensive • TCP doesn’t handle mobility • Difficult to evolve TCP (Ossification) • Middleboxes, firewalls are suspicious (overfit to traditional transport headers) TCP doesn’t handle mobility • TCP: Connection is specific to src.IP • UDP: give me dest.IP, port and I’ll handle it • QUIC is built on UDP • Adds “connection IDs” separate from IP addresses • Initialized (randomly) in handshake 27 Why build a new transport? 28 • Application context has changed • TCP’s “hellos” are too expensive • TCP doesn’t handle mobility • Difficult to evolve TCP (Ossification) • Middleboxes, firewalls are suspicious (overfit to traditional transport headers) Middleboxes trying to “help” 29 Source port Destination port Sequence number Acknowledgment Advertised windowHdrLen Flags0 Checksum Urgent pointer Options (variable) DATA Packets using these are weird, let’s throw them! Strategy: rebuild everything on UDP 30 Source port Destination port Sequence number Acknowledgment Advertised windowHdrLen Flags0 Checksum Urgent pointer Options (variable) SRC port DST port checksum length DATA DATA QUIC public headers Strategy: rebuild everything on UDP 31 SRC port DST port checksum length Carry things like Connection ID, setup flags, QUIC version … Source port Destination port Sequence number Acknowledgment Advertised windowHdrLen Flags0 Checksum Urgent pointer Options (variable) DATA","libVersion":"0.3.2","langs":""}