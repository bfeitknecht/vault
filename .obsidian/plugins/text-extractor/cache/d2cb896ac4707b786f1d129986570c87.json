{"path":"sem2a/PProg/VRL/slides/PProg-L01-introduction.pdf","text":"Parallel Programming Introduction & Course Overview Prof. Barbara Solenthaler SS 2024 Lecturers 2 Prof. Barbara Solenthaler CNB G 102.1 solenthaler@inf.ethz.ch Teaches Part I Office hours: per email request Prof. Torsten Hoefler OAT V 15 torsten.hoefler@inf.ethz.ch Teaches Part II Office hours: per email request https://spcl.inf.ethz.ch/Teaching/2024-pp/ 1. Parallel programming is a necessity – since 2000-ish 2. A different way of computational thinking – who said everything needs a total order? 3. Generally fun (since always) – if you like to challenge your brain 3 Why This Course? Karl Rupp’s blog Course Overview Parallel Programming (252-0029-00L) • 4L + 2U • 7 ECTS Credits • Audience: Computer Science Bachelor • Part of Basisprüfung • Lecture Language: Denglisch 4 Course Coordination • Lectures 2 x week: • Monday 10-12 HG F 5, HG F 7 • Tuesday 10-12 HG F 5, HG F 7 • Weekly Exercise Sessions • Wednesday 16-18 or Friday 10-12 • Enroll via myStudies • Focus groups 5 Course Material and Communication Course website: https://spcl.inf.ethz.ch/Teaching/2024-pp/ Moodle 2024: https://moodle-app2.let.ethz.ch/course/view.php?id=22281 Lecture slides, exercises, forum 6 About This Course Head TAs: • Philine Witzig (Part I) • Timo Schneider (Part II) Teaching Assistants (Part I): 7 Grades: • Class is part of Basisprüfung: written, centralized exam after the term • 100% of grade determined by final exam • Exercises not graded but essential Your TA ► Head TA ► Lecturer Communication: • Daniel Dorda • Aurel Gruber • Nikola Kovacevic • Lasse Lingens • Till Schnabel • Agon Serifi • Yingyan Xu • Lingchen Yang • Benjamin Gruzman • Gamal Hassan • Finn Heckman • Sarah Kuhn • Raphael Larisch • Julianne Orel • Zero tolerance cheating policy (cheat = fail + being reported) • Homework • Don’t look at other students code • Don’t copy code from anywhere • Ok to discuss things – but then you have to do it alone • Code may be checked with tools • Don’t copy-paste • Code • Text • Images 8 Academic IntegrityConcepts and Practice Our goal is twofold: • Learn how to write parallel programs in practice • Using Java for the most part • And showing how it works in C • Understand the underlying fundamental concepts • Generic concepts outlive specific tools • There are other approaches than Java's 9 You are Encouraged to: • Ask questions: • helps us keep a good pace • helps you understand the material • let's make the course interactive • class or via e-mail or via forum • Use the web to find additional information • Javadocs • Stack Overflow • Write Code & Experiment 10 If there is a problem, let us know as early as possible! What are Exercises for? Learning tool Seeing a correct solution is not enough You should try to solve the problem yourselves Hence, exercise sessions are for guiding you to solve the problem not for spoon-feeding you solutions 11 Class Overview 12 Parallelism • Understanding and detecting parallelism • Intro to PC Architectures • Formalizing parallelism • Programming models for parallelism (Parallel) Programming • Recap: Programming in Java + a bit of JVM • Parallelism in Java (Threads) Concurrency • Shared data • Race Conditions • Locks, Semaphores, etc. • Lock-free programming • Communication across tasks and processes Parallel Algorithms • Useful & common algorithms in parallel • Data structures for parallelism • Sorting & Searching, etc. Schedule (Part I) 13 Lecture Ex 1 Introduction Ex 2 Introduction to Multi-threading Ex 3 Multi-threading Ex 4 Parallel Models Ex 5 Divide and Conquer Ex 6 Task Parallelism Ex 7 Synchronization and Resource Sharing Exercises Feb 19 Introduction & Course Overview Feb 20 Java Recap and JVM Overview Feb 26 Introduction to Threads and Synchronization (Part I) Feb 27 Introduction to Threads and Synchronization (Part II) Mar 4 Introduction to Threads and Synchronization (Part II) Mar 5 Parallel Architectures: Parallelism on the Hardware Level (Part I) Mar 11 Basic Concepts in Parallelism Mar 12 Divide and Conquer Mar 18 ForkJoin Framework Mar 19 Cilk-style bounds and Task Parallel Algorithms Mar 25 Cilk-style bounds and Task Parallel Algorithms Mar 26 Virtual threads Apr 8 Shared Memory Concurrency, Locks and Data Races Apr 9 Reserve, exam prep Schedule (Part II) 14 Lecture Exercises Ex 8 Synchronization II Ex 9 Reasoning about Locks / Java Memory Model Basics Ex 10 Advanced Synchronization Mechanisms Ex 11 Advance Synchronization Mechanisms Ex 12 Linearizability Ex 13 Software Transactional Memory Ex 14 MPI + Reductions Apr 15 Data Races - Implementing locks with Atomic Registers Apr 16 Data Races - Implementing locks with Atomic Registers II Apr 22 Beyond Locks I: Spinlocks, Deadlocks, Semaphores Apr 23 Beyond Locks II: Semaphore, Barrier, Producer-/Consumer, Monitors Apr 29 Readers/Writers Lock, Lock Granularity: Coarse Grained, Fine Grained, Optimal, and Lazy Synchronization Apr 30 Lock tricks, skip lists, and without Locks I May 6 Without Locks II May 7 ABA Problem, Concurrency Theory May 13 Sequential Consistency, Consensus, Transactional Memory May 14 Consensus Hierarchy + Transactional Memory May 21 Transactional Memory + Message Passing May 27 Message Passing May 28 Consensus Proof and Reductions Parallel Sorting Big Picture (Part I) 15 CPU OS JVM (Process A) Core Core Core Core OS thread OS thread OS thread OS thread OS scheduler JVM scheduler JVM thread Process B Memory Space A Memory Space B Physical Memory JVM thread JVM thread JVM threadL03-05 L06 L07 L08-09 L10-L11 L13 … … Stack Registers PC Stack Registers PC Stack Registers PC Stack Registers PC Parallel performance & algorithms L12Virtual threads • https://cgl.ethz.ch/teaching/parallelprog24/pages/terminology.html 16 Terminology Course Overview 17 aka why should you care? How Does This Course Fit Into the CS Curriculum? • Programming-in-the-small • Programming-in-the-large 18 Program = Algorithms + Data Structures => Data Structures and Algorithms System = Processes + Objects + Communication This class Intro to Programming This class How Does This Course Fit Into the CS Curriculum? 19 Process / Program Algorithm Data structure Algorithm Data structure … … Process / Program Algorithm Algorithm Data structure … … … … Operating System Network OS Learning Objectives By the end of the course you should 1. have mastered fundamental concepts in parallelism 2. know how to construct parallel algorithms using different parallel programming paradigms (e.g., task parallelism, data parallelism) and mechanisms (e.g., threads, tasks, locks, communication channels). 3. be qualified to reason about correctness and performance of parallel algorithms 4. be ready to implement parallel programs for real-world application tasks (e.g. searching large data sets) 20 Requirements Basic understanding of Computer Science concepts Basic knowledge of programming concepts: We will do a quick review of Java and briefly discuss JVMs Basic understanding of computer architectures: No detailed knowledge necessary (we will cover some) 21 Image source: http://jolyon.co.uk 22 Motivation – Why Parallelism? 24 Moore’s Law Recap: Transistor counts double every two years § Means: Smaller transistors => can put more on chip => computational power grows exponentially => your sequential program automatically gets faster. § Also applies to RAM size and pixel densities CPU DB Motivation – Why Parallelism? 25 CPU DB Why Don’t We Keep Increasing Clock Speeds? Transistors have not stopped getting smaller + faster (Moore lives) Heat and power have become the primary concern in modern computer architecture! Consequence: • Smaller, more efficient Processors in terms of power (Ops / Watt) • More processors – often in one package 26 Main design constraint today is power §Single-Core CPUs: § Complex control hardware § Pro: Flexibility + performance § Con: Expensive in terms of power (Ops / Watt) §Many-Core/GPUs etc: § Simpler control hardware § Pro: Potentially more power efficient (Ops / Watt) § Con: More restrictive / complex programming models [but useful in many domains, e.g. deep learning]. 27 What Kind of Processors Do We Build Then? 1. MUTUAL EXCLUSION Three stories 28 Alice’s Cat vs. Bob’s Dog 29 A B Requirement I: Mutual Exclusion ! 30 A B 31 A B Requirement II: No Lockout when free 32 A B Communication: Idea 1 [Alternate] 33 A B catdog Dog is allowed in yard Access Protocol [Alternate] 34 A B catdog Now cat is allowed in yard Problem: Starvation! 35 A B catdog on vacation Communication: Idea 2 [Notification] 36 A B My pet is in the yard Access Protocol 2.1: Idea 37 A B Cat wants to get out 38 A B 39 A B Another Scenario 40 A B Cat wants to get out Dog wants to get out 41 A B 42 A B Problem: No Mutual Exclusion! 43 A B Checking Flags Twice Does Not Help: Deadlock! 44 A B Access Protocol 2.2 45 A B Cat wants to get out 46 A B 47 A B 48 A B 49 A B Dog wants to get out 50 A B 51 A B Access Protocol 2.2 is provably correct 52 A B Minor (?) Problems: Livelock, Starvation 53 A B Final Solution 54 A B catdog dog goes first Final Solution 55 A B catdog Dog wants to get out Cat wants to get out Final Solution 56 A B catdog Final Solution 57 A B catdog Final Solution 58 A B catdog Final Solution 59 A B catdog Next time cat goes first Still: General Problem of Waiting ... 60 A B 2. PRODUCER-CONSUMER Three stories 61 Producer-Consumer 62 A B Producer-Consumer 63 A B Rules 64 A B 65 A B 66 A B Communication 67 A B Food is empty Protocol 68 A B 69 A B not any more 70 A B 71 A B Empty again Oh dear... 3. READERS-WRITERS Three stories 7273 A B PET PET 74 A B LOVES PET LOVES 75 A B HAM PET LOVES 76 A B I PET LOVES 77 A B HATE PET LOVES 78 A B SALAD PET LOVES SALAD The bad news § Reality of parallel computing is much more complicated than this. § The results of one action, such as the lifting of a flag by one thread, can become visible by other threads delayed or even in different order, making the aforementioned protocols even more tricky. § Precise reasons will become clear much later in your studies. But we will understand consequences in the lectures later. 79 The good news § On parallel hardware we will find an interesting tool to deal with low level concurrency issues. § There is sufficient abstraction in the programming models of different programming languages. § Later on, we will not really have to deal with such low level concurrency issues. But we should have understood them once. 80 Language Landscape C, C++ Java, Kotlin, C# Python, Ruby, Perl Go, Rust Haskell, OCaml JavaScript, TypeScript Swift, Dart … 81 Why use Java? Is ubiquitous (see oracle installer) • Many (very useful) libraries • Excellent online tutorials & books Parallelism is well supported • In the language and via frameworks Interoperable with modern JVM languages • E.g., Akka framework Yet, not perfect • Tends to be verbose, lots of boilerplate code 82 Introduction to Java Programming § Introduction to Java Programming, 2014. § Daniel Liang. § ISBN-13: 9780133813463 § Chapters 1-13 (with some omissions) § Week 1-3 83 Java Concurrency in Practice § Java Concurrency in Practice, 2006. § Brian Goetz, Tim Peierls, Joshua Bloch, Joseph Bowbeer, David Holmes, Doug Lea. § ISBN-13: 9780321349606 § Week 4-9 84 Theory and beyond • Fundamental treatment of concurrency • In particular the \"Principles\" part is unique • Not easy • In this course § Theory of concurrency § Behind locks § Lock-free programming 85","libVersion":"0.3.2","langs":""}