{"path":"sem5/ES/VRL/extra/slides/ES-s00-introduction.pdf","text":"© Michele Magno D-ITET Center for Project-Based Learning Embedded Systems Lecture 0 Introduction 0 - 2 Where We are 0. Introduction into Embedded Systems 1. Hardware-Software Architecture and Software Development 2. Hardware-Software Interfaces - GPIO, Interrupt, and Clock 3. Hardware-Software Interfaces - Serial Interfaces 4. Hardware-Software Interfaces - Timer, ADC 6. Real-Time Systems 7. Dynamic Scheduling and Real-Time Operating Systems 8. Deterministic Scheduling 9. Low Power Design 10. Computational Units 11. Implementation Strategies & Project Kick-off 12. Project Q&A Hardware- Software Real-Time Special 0 - 3 What You Will Learn ▪ Theoretical foundations and principles to analyze and design embedded systems. ▪ Practical aspects of embedded system design, mainly software design. The course has three components: Lecture: Communicate principles and practical aspects of embedded systems. Exercise: Practical: Introduction into practical aspects of embedded systems design. Use of state-of-the-art hardware and design tools – ARM Cortex-M4F cores. Theory: Use paper and pencil to deepen your understanding of analysis and design principles. Project-Based Learning practical exercises! 0 - 4 Organization Webpage: https://moodle-app2.let.ethz.ch/course/view.php?id=25574 Lecture: PD. Dr. Michele Magno michele.magno@pbl.ee.ethz.ch Literature: ▪ Yifeng Zhu: Embedded Systems with Arm Cortex-M Microcontrollers in Assembly Language and C - Fourth Edition, E-Man Press LLC, ISBN: 978-0982692677, 2023 ▪ Giorgio C. Butazzo: Hard Real-Time Computing Systems. Predictable Scheduling Algorithms and Applications, Springer, ISBN 978-1-4614-3019-3, 2011 Sources: The slides contain ideas and material of J. Rabaey, K. Keuzer, M. Wolf, P. Marwedel, P. Koopman, E. Lee, P. Dutta, S. Seshia, and from the above cited books. 0 - 5 Who We Are Webpage: https://pbl.ee.ethz.ch/people.html Course Coordinator Julian Moosmann julian.moosmann@pbl.ee.ethz.ch ETZ K 78.3 Lectures / Exam Coordinator Jakub Mandula jakub.mandula@pbl.ee.ethz.ch ETF F 102 Lectures / Exam Coordinator Nicolas Schärer nicolas.schaerer@pbl.ee.ethz.ch ETZ K 78.3 0 - 6 Lecture and Exercises Lectures: Held on Mondays from 14:15 to 16:00 in ETF C1 until further notice. Slides are available via the web page of the lecture. Exercises: Held from 16:15 to 18:00 in ETF E1. Group A on Wednesday, and group B on Friday. The group assignment is binding! The exercises will include practical programming tasks as well as theoretical questions. They are made available before the date of the exercise. During an exercise, you will apply the learned knowledge in theoretical and practical exercises. Teaching assistants give hints how to approach the solution, answer your questions and discuss the correct solution. Solutions to the exercises will be provided on Monday of the following week. Exercises are an integral part of the lecture and contain exam-relevant content. 0 - 7 Lab and Exercise Preparation Preparation: We urgently ask all students to install the required software for the practical exercises on their own hardware prior the first exercise. You can find the installation guide for Windows, MacOS, and Linux on Moodle. Moodle: Check the “Install Guide” on Moodle. Questions: Ask in the exercise sessions or on the Moodle Forum for installation issues. 0 - 8 End-Semester Mini Project Mini Project: At the end of the semester, we will offer a mini project in the style of the practical exercises. Constantly following and solving the practical sessions is the best way to acquire the knowledge for completing the bonus project successfully. Bonus: If completed successfully, the final grade will be increased by 0,25. Details: Some more details later and will follow in the semester. 0 - 9 Embedded System «Znüni Böxli» 0 - 10 What’s inside the Box Everyone gets: 1x NUCLEO-L476RG Board 1x Embedded Systems Sensor Shield 1x Mini-USB Cable 0 - 11 Be Careful and Please do Not … 0 - 12 What You Need to Return 1x NUCLEO-L476RG Board 1x Embedded Systems Sensor Shield 1x Mini-USB Cable Put it back inside the ”Znüni Böxli”. 0 - 13 Hardware Distribution Distribution Days: Wednesday, 24.09.2025 beginning of the exercise for Group A Friday, 26.09.2025 beginning of the exercise for Group B Make sure to bring your Legi, please! 0 - 14 Details: Mini – Project on the Real Hardware Bonus Evaluation Criteria (0.25 points) . To qualify for the bonus, students must fulfill all of the following requirements: ▪ Sensor Data Collection ▪ Acquire data from at least one physical sensor. ▪ Ensure sampling follows a fixed sample rate and period. ▪ Algorithm Performance Comparison ▪ Implement two different algorithms. ▪ Provide a clear and quantitative performance comparison (e.g., accuracy, latency, resource use). ▪ Energy Consumption Analysis ▪ Estimate energy consumption considering active and sleep phases. ▪ Present calculations clearly, with assumptions stated. ▪ Report Submission ▪ Write a concise report (max. half a page). ▪ Summarize findings, performance comparison, and energy analysis. ▪ Pitch Video ▪ Submit a 1-minute demo pitch video. ▪ Explain the setup, highlight performance on the real platform, and show results. 0 - 15 Interaction: What about You? Clicker Questions in the EduApp Why did you choose to attend the lecture on embedded systems? What is an Embedded System? Icon by Freepik 0 - 16 LLM Assistant with “context” and project-based learning support http://pbl-gpt.ee.ethz.ch/ ▪ RAG of all Embedded Systems documents, slides, exercises and code ▪ Should return more relevant answers compared to standalone GPT… New: PBL-GPT! 0 - 17 ▪ LLMs can hallucinate…  ▪ Trial run – expect sluggish performance  ▪ Only works in ETH network ▪ Sign up here: http://pbl-gpt.ee.ethz.ch/ ▪ Create a new account with your Moodle email ▪ Try it and give us feedback ▪ Limited Tokens per user/day! New: PBL-GPT! 0 - 18 Embedded Systems - Impact 0 - 19 • Often, the main reason for buying is not information processing Embedded systems (ES) = information processing systems embedded into a larger product •Examples: Embedded Systems 0 - 20 The Hype Cycle © Gartner Inc. https://www.gartner.com Peak of Inflated Expectations 0 - 21 The Hype Cycle © Gartner Inc. https://www.gartner.com Internet of Things Connected Home Edge Computing Sensors and Interfaces 0 - 22 The Hype Cycle Continuous Edge Computing Gen AI Gen AI at the Edge ☺ 0 - 23 Embedded Systems Embedded Systems are an essential component … Manyika, James, et al. Disruptive technologies: Advances that will transform life, business, and the global economy. Vol. 180. San Francisco, CA: McKinsey Global Institute, 2013. 0 - 24 Some Example of Embedded Systems in our Lab Micropower Artificial Intelligence Smart Sensing & Energy Harvesting Sensor Networks & Wireless Communication Nano-power System Design Hybrid Localization Asset Tracking Wearable Sensing Ubiquitou s Healthcar e Autonomou s Navigation Sensing in Harsh Environments Edge Computing Predictive Maintenanc e Event-driven Image Sensing Flexible Electronics Autonomous Racing Robotics & Control 0 - 25 Embedded Systems physical/biological/social processes observing influencing reasoning deciding big data CYBER WORLD PHYSICAL WORLD Nature Hardware & Software Computation Communication Embedded System Use feedback to influence the dynamics of the physical world by taking smart decisions in the cyber world 0 - 26 Reactivity & Timing Embedded systems are often reactive: ▪ Reactive systems must react to stimuli from the system environment : „A reactive system is one which is in continual interaction with is environment and executes at a pace determined by that environment“ [Bergé, 1995] Embedded systems often must meet real-time constraints: ▪ For hard real-time systems, right answers arriving too late are wrong. All other time-constraints are called soft. A guaranteed system response has to be explained without statistical arguments. „A real-time constraint is called hard, if not meeting that constraint could result in a catastrophe“ [Kopetz, 1997]. 0 - 27 Predictability & Dependability “It is essential to predict how a CPS is going to behave under any circumstances […] before it is deployed.”Maj14 “CPS must operate dependably, safely, securely, efficiently and in real-time.”Raj10 Maj14 R. Majumdar & B. Brandenburg (2014). Foundations of Cyber-Physical Systems. Raj10 R. Rajkumar et al. (2010). Cyber-Physical Systems: The Next Computing Revolution. CPS = cyber-physical system 0 - 28 Efficiency & Specialization ▪ Embedded systems must be efficient: ▪ Energy efficient ▪ Code-size and data memory efficient ▪ Run-time efficient ▪ Weight efficient ▪ Cost efficient Embedded Systems are often specialized towards a certain application or application domain: ▪ Knowledge about the expected behavior and the system environment at design time is exploited to minimize resource usage and to maximize predictability and reliability. 0 - 29 Comparison Embedded Systems: ▪ Few applications that are known at design-time. ▪ Not programmable by end user. ▪ Fixed run-time requirements (additional computing power often not useful). ▪ Typical criteria: ▪ Cost ▪ Power consumption ▪ Size and weight ▪ Dependability ▪ Worst-case speed General Purpose Computing ▪ Broad class of applications. ▪ Programmable by end user. ▪ Faster is better. ▪ Typical criteria: ▪ Cost ▪ Power consumption ▪ Average speed 0 - 30 Interaction: Discussion (5 minutes) Brainstorm real-world applications of embedded systems. 1. Recap the key concepts from the introduction and highlight the importance of real-world applications (1 minute). 2. Brainstorm quickly and write down one real-world application where embedded systems can be applied. Select one sensor and one actuator that might be used in that application (4 minutes). 3. Place your application in one of the fields in the clicker question: 1. To which field does your application belong? 2. Which sensors are needed? Icon by Freepik 0 - 31 Embedded System: An Example 0 - 320 - 330 - 340 - 35 System Overview Motors (Actuators)Battery (Power) Sensors Controller/Processor 0 - 36 What is a Microcontroller? Microcontroller ▪ A microcontroller is a small processor with a core, memory and integrated I/O peripherals such as timers, analog-to-digital converters, and serial communications [1]. ▪ Features of a microcontroller (MCU): ▪ Self Contained (CPU, Memory, I/O) ▪ Application or Task Specific (Not a general-purpose computer) ▪ Appropriately scaled for the job ▪ Small power consumption ▪ Low costs ( $0.50 to $5.00.) ▪ Microcontrollers are everywhere, many systems contain even multiple microcontrollers. •[1] Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C, page 56 0 - 37 High-Level Block Diagram 0 - 38 High-Level Block Diagram Low Power CPU: • Enabling power to the rest of the system • Battery charging and voltage measurement • Wireless radio (boot and operate) • Detect and check expansion boards Higher Performance CPU: • Sensor reading and motor control • Flight control • Telemetry (including the battery voltage) • Additional user development • USB connection UART: • communication protocol (Universal Asynchronous Receiver/Transmitter) • Exchange of data packets to and from interfaces (wireless, USB) 0 - 39 High-Level Block Diagram Sensor Board:Acronyms: • Wkup: Wakeup signal • GPIO: General-purpose input/output signal • SPI: Serial Peripheral Interface Bus • I2C: Inter-Integrated Circuit (Bus) • PWM: Pulse-width modulated Signal • VCC: power-supply EEPROM: • Electrically erasable programmable read-only memory • Used for firmware (part of data and software that usually is not changed, e.g. configuration data) • Can not be easily overwritten in comparison to Flash Flash Memory: • Non-volatile random-access memory for program and data 0 - 40 High-Level Physical View 0 - 41 High-Level Physical View 0 - 42 Embedded Systems - Basics 0 - 43 Embedded Systems in a Picture – An Overview // High-level language // C-source code int main (void){ int total = 0; for (int i = 0; 1 < 10; i++) { total += i; } while(1); // Infinite loop } code.c Firmware/Software Perspective - programming functionality - interfacing HW w. drivers System Overview Hardware Perspective - - Defining the physical Connection (Schema) - - Designing the actual electronics schematics.SchDoc Microcontroller (MCU) Debug/Program interfaceProcessor Flash Memory SRAM I/O Ports … Sensors MotorsBattery Ext. Memory 0. Design HW 1. Write Code // Low-level Language // Target Assembly Code MOVS r1, #0 MOVS r2, #0 B check loop: ADD r1, r1, r0 ADDS r0, r0, #1 check: CMP r0, #10 BLT loop self: B self Compiler code.asm 0x2100 0x2000 0xE001 0x4401 0x1C40 0x280A 0xDBFB 0x8F00 0xE7FE 0010000100000000 0010000000000000 1110000000000001 0100010000000001 0001110001000000 0010100000001010 1101110011111011 1011111100000000 1110011111111110 Target Machine Code code.bincode.hex Assembler 2. Compile with GCC Compiler 3. Using SWD/JTAG to flash the processor with your code pcb.PcbDoc 0 - 44 Schematics 0 - 45 Low-Level Schematic Diagram View (1 page out of 3) Takes a bit of practice to understand… 0 - 46 How to Read the Hierarchical Schematic? Author: schilkp, mojulian Project: ES_Lecture_Block_Diagram Note: Example block diagram Block_Diagram.SchDoc Author: schilkp, mojulian Project: ES_Lecture_ExampleBattery Note: Example Battery Power Document Battery.SchDoc Author: schilkp, mojulian Project: ES_Lecture_LED Note: Example LED Document LED.SchDoc ▪ Complicated schematics are drawn in a hierarchical manner. ▪ Circuit is split into separate sheets. Each sheet contains related circuitry, i.e.: Power, MCU, Sensors,… ▪ These sub-circuits are represented as blocks in other schematic sheets. ▪ Think of it like functions while programming: ▪ You design the sub-circuit once with defined inputs and output ports. (“implementing the function”). ▪ You reuse these sub-circuits multiple times in other schematics (“calling the function”). 0 - 47 How to Read the Hierarchical Schematic? ▪ Local Net Labels: ▪ Avoids ”Kabelsalat”/ “Ratsnest” ▪ Matched names connect within current sheet. ▪ Global Power Labels: ▪ Matched symbols connects globally across all sheets. ▪ Sheet Ports: ▪ Define inputs & outputs of a re-useable schematic block ▪ Sheet Block/Symbol: ▪ Represents an instance of a schematic sheet defined elsewhere. ▪ Harness/Bus ▪ Groups related signals into one connection. Connected! 0 - 48 How to Read the Hierarchical Schematic? Author: schilkp, mojulian Project: ES_Lecture_Block_Diagram Note: Example block diagram Author: schilkp, mojulian Project: ES_Lecture_ExampleBattery Note: Example Battery Power Document Author: schilkp, mojulian Project: ES_Lecture_LED Note: Example LED Document Author: schilkp, mojulian Project: ES_Lecture_All_in_one Note: All in One, Ok but not ideal for scaling. Block_Diagram.SchDoc Battery.SchDoc LED.SchDoc All_in_one.SchDoc ▪ The 3 schematics above are equivalent to the one shown below. ▪ This simple example is somewhat contrived, but in a complex system such organization is very helpful. ▪ Note that the two “RandomLabel” labels are NOT connected! ▪ They are LOCAL labels. 0 - 49 Net Labels in Action (1 page out of 3) LEDs 0 - 50 Brief Glimpse Inside the Microcontroller CPU Memory I/O Peripherals Now we will have a look at the first Peripheral: GPIO 0 - 51 GPIO (General-Purpose Input-Output) 0 - 52 How does the Microcontroller Interact with the World? ▪ Feature a number of General-Purpose Input/Output (GPIO) pins. ▪ They are grouped into ports: ▪ Each port is identified by a letter (A-H). ▪ Each port features up to 16 GPIO pins. ▪ They can be configured in a variety of ways: ▪ Input/Output/Analog/Alternate (Peripheral) ▪ Push-Pull/Open Drain ▪ Internal Pull-Ups/Pull-Downs 0 - 53 GPIO Pin in Detail Each pin has many features and components: We will explore them step by step. •Outside MCU•Inside MCU 0 - 54 GPIO: Inputs •Outside MCU•Inside MCU ▪ Digital inputs detect whether an external voltage signal is higher or lower than a predetermined threshold. •Vext •Vschmitt To Core Input •Schmitt Trigger 0 - 55 GPIO: Floating Inputs ▪ A digital input that is not connected to a voltage source is referred to as floating. ▪ Floating pins have an undefined state and will randomly read as 1 or 0. This must be avoided! ▪ Pull-up or Pull-down resistors are used to provide a default voltage when the pin would otherwise be floating. •[1] Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C, page 362 GPIO •[1] GPIO •[1] ▪ No Pull-Up. ▪ Pressed: 0V ▪ Else: Floating ▪ Pull-Up. ▪ Pressed: 0V ▪ Else: Vdd 0 - 56 GPIO: Pull-Up and Pull-Down Resistors •Outside MCU•Inside MCU ▪ Pull-Up or Pull-Down Resistors can be soldered to the PCB, or internally enabled by software. 0 - 57 GPIO: Outputs •Outside MCU•Inside MCU ▪ Digital outputs control the voltage on the pin. From Core Output 0 - 58 •GPIO Operating Modes – Digital Output •[1] Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C, page 360 •[1] •[1] •[1] •max. current is limited by the MOSFET’s channel size! ▪ For digital outputs, each GPIO can be configured as either push-pull or open- drain. ▪ Push-pull can absorb or supply current: 1 0 0 - 59 •GPIO Operating Modes – Digital Output •[1] Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C, page 361 •[1] •[1] •[1] ▪ For digital outputs, each GPIO can be configured as either push-pull or open- drain. ▪ Open-drain can only absorb current: In general, this setup is useful for connecting multiple devices to the same line, as they can all pull the line low without conflicting with each other. 0 - 60 •GPIO Operating Modes – Digital Output Speed •[1] Embedded Systems with ARM Cortex-M Microcontrollers in Assembly Language and C, page 362 •[1] The slew rate of a GPIO pin is the speed of change of its output voltage per unit of time, as defined as follows: slew rate = △v △t ▪ High slew rate: fast signals but causes higher electromagnetic interference (EMI) and consumes more power ▪ Low slew rate: save power and reduce noise 0 - 61 •GPIO Operating Modes – Digital Output Speed •C •R •Vline= Output Port: VCC •* “Parasitics” model the non-ideal real-world behavior of an electrical circuit (e.g. a real inductor can be modeled by an ideal inductor in series with a resistor and a capacitance in parallel). ▪ The system can be modeled as an RC equivalent circuit. ▪ The resistor is given by the strength of the transistors and minor parasitics*. ▪ The capacitor is given by parasitics. ▪ RC-constant formed by parasitic elements determines the rising and falling time! ▪ GPIO slew time can be adjusted in software. 0 - 62 Quick Review of RC circuit ▪ The Input or Output path of a GPIO Port/Pin, has always parasitics due to the MCU manufacturing and the PCB design. ▪ These constants have to be considered. Charing (initial 𝑽𝒍𝒊𝒏𝒆 = 𝟎𝐕) •C •R •Vline •𝑉𝑙𝑖𝑛𝑒 = 𝑉𝐷𝐷(1 − 𝑒− 𝑡 𝑅𝐶) VDD The capacitor gets charged with: Discharging (initial 𝑽𝒍𝒊𝒏𝒆 = 𝑽𝑫𝑫) •C •R •Vline •𝑉𝑙𝑖𝑛𝑒 = 𝑉𝐷𝐷𝑒− 𝑡 𝑅𝐶 The capacitor gets discharged with: VSS 0 - 63 ▪ The slew rate is configurable by setting the GPIO output speed ▪ For STM32L4 (the MCU we will use in the lab): ▪ low speed (<400 kHz) ▪ Medium speed (<3 MHz) ▪ Fast speed (<10 MHz) ▪ High speed (<40 MHz) ▪ This changes the drive strength of the output transistor, changing the effective R value of the RC equivalent. •GPIO Operating Modes – Digital Output Speed 0 - 64 GPIO: Alternate Function & Analog Pins •Outside MCU•Inside MCU ▪ Analog pins connect to digital-to-analog or analog-to-digital converters. ▪ Alternate function pins connect to dedicated peripherals, such as communication interfaces, timers, PWM outputs, … From Peripheral To Peripheral ADC/DAC 0 - 65 Embedded Systems in a Picture – An Overview // High-level language // C-source code int main (void){ int total = 0; for (int i = 0; 1 < 10; i++) { total += i; } while(1); // Infinite loop } code.c Firmware/Software Perspective - programming functionality - interfacing HW w. drivers System Overview Hardware Perspective - - Defining the physical Connection (Schema) - - Designing the actual electronics schematics.SchDoc Microcontroller (MCU) Debug/Program interfaceProcessor Flash Memory SRAM I/O Ports … Sensors MotorsBattery Ext. Memory // Low-level Language // Target Assembly Code MOVS r1, #0 MOVS r2, #0 B check loop: ADD r1, r1, r0 ADDS r0, r0, #1 check: CMP r0, #10 BLT loop self: B self Compiler code.asm 0x2100 0x2000 0xE001 0x4401 0x1C40 0x280A 0xDBFB 0x8F00 0xE7FE 0010000100000000 0010000000000000 1110000000000001 0100010000000001 0001110001000000 0010100000001010 1101110011111011 1011111100000000 1110011111111110 Target Machine Code code.bincode.hex Assembler pcb.PcbDoc 0 - 66 Learning objective of Today Class ✓ Where we are what we will do ✓ What are Embedded Systems ✓ Both, hardware and software are important ✓ Block Diagram and Schematics ✓ GPIOs ✓ Trends 0 - 67 D-ITET Center for Project-Based Learning FUTURE LEARNING INITIATIVE Tue 30 Sept. 16:00-18:30 Gloriastrasse 35, E floor Open to all students and D-ITET staff! •Check our projects here •16:00 - 18:30 •Projects exhibition •Live demo of the center projects •16:30 - 17:00 •Ceremony •Best BSc Thesis Award •Best PBL Theses •TinyML Swiss Demos PBL Open Day 0 - 68 See You Tomorrow or Next Week!","libVersion":"0.5.0","langs":""}