{"path":"sem2/DDCA/UE/e/slides/DDCA-LAB08a-snake.pdf","text":"Digital Design & Computer Arch. Lab 8.1 Supplement: Full System Integration (Presentation by Aaron Zeller) Frank K. Gürkaynak Seyyedmohammad Sadrosadati ETH Zürich Spring 2024 [14 May 2024] Lab 8 Overview ◼ You will build a whole single-cycle processor and write assembly code that runs on the FPGA board. ◼ Don’t worry! You have 2 sessions for the lab, and it will give you up to 14 points (+6 points from the reports). ◼ You will learn how a processor is built. ◼ Learn how the processor communicates with the outside world. ◼ Implement the MIPS processor and demonstrate a simple “snake” program on the FPGA starter kit. 2 Lab 8 Sessions ◼ Session I: The Crawling Snake ◼ Session II: Speed Up the Snake 3 Lab 8 Session I: The MIPS Processor ◼ Download the Vivado project from the course website ◼ A lot of parts are already implemented for you! ◼ What you will have to implement: ❑ Compute the Instruction Memory address and read the instruction. ❑ Connect the ALU. ❑ Compute the Data Memory address and add the necessary wires. ❑ Instantiate the Control Unit. 4 Lab 8 Session I: Memory-Mapped I/O ◼ Your goal is to control the 7-segment display with your assembly program. ◼ You will need to complete the I/O controller so the output of the processor will be correctly mapped to the display. 5 I/O in Assembly ◼ How do we communicate with the display? ◼ Memory Mapped I/O ❑ We designate specific addresses for the I/O ❑ We can read and write to those addresses. ◼ Example 6 # write contents of $t0 into memory at address 0x7FF0 # so that the I/O controller can send it to the display sw $t0, 0x7FF0($0) Lab 8 Session I : The Crawling Snake ◼ You learned how to write assembly code in Lab 7 ◼ We provide you with the code for a crawling snake on the 7-segment display ◼ We will run this program on the processor you build in this lab! 7 Lab 8 Session I : The Given Code ◼ Read the lab manual carefully! It contains important information that will save you a lot of time. ◼ The code contains //TODO markers to show you where you are supposed to add things. 8 Lab 8 Session I : The Given Code ◼ The lab manual tells you what files contain and which files you need to modify. 9 Lab 8 Session I : The Given Code ◼ For each //TODO in the code there is a part in the lab manual that explains what you are supposed to do. 10 Lab 8 Session I : Verilog Endianness ◼ Verilog does not assume endianness of buses. ◼ The endianness is determined depending on how you declare the bus. ◼ wire[10:0] A is little endian. ◼ wire[0:10] B is big endian. 11 Lab 8 Session I : Verilog Endianness ◼ wire[10:0] A is little endian. o A[10] is the most significant bit o A ends in the least significant bit. o [10], [9], ... , [0] ◼ wire[0:10] B is big endian. o B[10] is the least significant bit o B ends in the most significant bit. o [0], [1], ... , [10] ◼ A[1:0] selects the lower 2 bits in both cases. 12 Last Words ◼ You will build a whole single-cycle processor and write assembly code that runs on the FPGA board. ◼ You will learn how a processor is built. ◼ Learn how the processor communicates with the outside world. ◼ Implement the MIPS processor and demonstrate a simple “snake” program on the FPGA starter kit. ◼ You will have some questions to answer in the report. 13 Report Deadline 14 [31. Mai 2024 23:59] Digital Design & Computer Arch. Lab 8.1 Supplement: Full System Integration Frank K. Gürkaynak Seyyedmohammad Sadrosadati ETH Zürich Spring 2024 [14 May 2024]","libVersion":"0.3.1","langs":""}