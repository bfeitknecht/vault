{"path":"HS23/EProg/VRL/extra/slides/EProg_s11_arrays.pdf","text":"252-0027 Einführung in die Programmierung 3.0 Arrays (Reihen) Thomas R. Gross Department Informatik ETH Zürich 1 Übersicht Verwandte Themen: § 3.0 Arrays § 4.0 Klassen und Objekte Wichtig um «interessante» Programme zu schreiben: § 5.0 Input/Output 2 3.0 Reihen (Arrays) Based on Slides by Reges et al. Copyright © Pearson 2013. Copyright © Thomas Gross 2023. All rights reserved. 3 Übersicht § 3.0 Arrays § 3.1 Motivation § 3.2 Deklaration und Erstellen § 3.3 Arbeiten mit Arrays § 3.4 Arrays und Methoden § 3.5 Invarianten – Beispiel mit Array 4 3.1 Ein neues Problem Sie wollen für die Mitglieder eines Sportvereins (oder einer Gruppe/Team/Sektion) Daten analysieren z.B. Grösse: Durchschnittsgrösse und Anzahl der Spieler/innen die über dem Durchschnitt liegen Könnte so aussehen § Input unterstrichen Anzahl Mitglieder? 6 Groesse in cm: 165 Groesse in cm: 164 Groesse in cm: 158 Groesse in cm: 163 Groesse in cm: 169 Groesse in cm: 181 Durchschnitt in cm = 166.7 Anzahl ≥ Durchschnitt: 2 (33 %) 5 Schritte § Jeder Wert (Grösse) muss eingegeben werden um den Durchschnitt zu berechnen (Summe dividiert durch Anzahl Mitglieder) § Nach der Berechnung des Durchschnitts müssen wir zählen wieviele Personen grösser (gleich) als der Durchschnitt sind § Aber den Durchschnitt kennen wir erst zum Schluss § Müssen die Messwerte bis zum Ende speichern 6 Was ist problematisch? § Jeder Wert muss zweimal verwendet werden: § Um den Durchschnitt zu berechnen § Um die Anzahl Personen die grösser (gleich) als der Durchschnitt sind zu finden § Könnten natürlich jeden Wert in einer Variable speichern … aber : § Wir wissen nicht mit wievielen Personen wir arbeiten bis das Programm ausgeführt wird § Wir wissen nicht wieviele Variable wir brauchen § Wir brauchen einen Weg, mehrere Variable auf einmal zu deklarieren 7 «Arrays» (Reihen) § Ein Array erlaubt uns mehrere Werte des selben Typs zu speichern § Element: Ein Wert in einem Array. § Index: Zahl (>= 0) um ein Element eines Arrays auszuwählen § Base: Das erste Element hat den Index 0 8 «Arrays» (Reihen) § Ein Array erlaubt uns mehrere Werte des selben Typs zu speichern. § Element: Ein Wert in einem Array. § Index: Zahl (>= 0) um ein Element eines Arrays auszuwählen § Base: Das erste Element hat den Index 0 Index 0 1 2 3 4 5 6 7 8 9 Wert 12 49 -2 26 5 17 -6 84 72 3 Element 0 Element 4 Element 9 Ein Array für int Werte 9 «Arrays» (Reihen) § Ein Array erlaubt uns mehrere Werte des selben Typs zu speichern § Element: Ein Wert in einem Array. § Index: Zahl (>= 0) um ein Element eines Arrays auszuwählen § Base: Das erste Element hat den Index 0 § Müssen Variable deklarieren um auf Array zugreifen zu können § Deklaration in einer Methode (z.B. main) 10 3.2 Array Variable – Deklaration der Variable und Erstellen des Arrays Deklarieren der Variable Erstellen des Arrays Initialisieren (Array wird immer initialisiert wenn erstellt) § Zwei Varianten § Deklaration der Variable und Erstellen des Arrays zusammen § Nur Deklaration der Variable 11 type[] name = new type[length] § type: Der Typ der Elemente des Arrays Deklaration und Initialisierungname verweist auf Array von type Elementen type[] name = new type[length] § type: Der Typ der Elemente des Arrays § Genauer: § type_var[] name = new type_element[length]; § Z. Zt. müssen type_var und type_element identisch sein § Beispiel: § int[] numbers = new int[10]; z.Zt.: selber Typ! type[] name = new type[length] § type: Der Typ der Elemente des Arrays § name: Name der Variable mit der Zugriff möglich ist § new: Operator der Array mit Platz für length Element erstellt § length: Länge – beliebiger int Ausdruck ≥ 0 § Beispiele: § int[] numbers = new int[10]; § int x = 2 * 3 + 1; § int[] data = new int[x % 9 + 3]; type[] name = new type[length]Syntax § Beispiel: int[] numbers = new int[10]; § Deklariert Variable numbers und lässt sie auf Array mit 10 Elementen des Typs int verweisen Index 0 1 2 3 4 5 6 7 8 9 Wert numbers Platz für int WertPlatz für int Wert 15 type[] name = new type[length]Syntax § Beispiel: int[] numbers = new int[10]; § Deklariert Variable numbers und lässt sie auf Array mit 10 Elementen des Typs int verweisen numbers Platz für int WertPlatz für int Wert 16 Index 0 1 2 3 4 5 6 7 8 9 Wert ? ? ? ? ? ? ? ? ? ? Array: Deklarieren und Erstellen § new: Operator der Array mit Platz für length Element erstellt § Was für Werte sollen da (am Anfang) gespeichert werden? § Wollen verhindern dass ein Program Daten eines anderen liest § Wollen bei wiederholter Ausführung das selbe Resultat (ohne Input…) § Daher genau definiert: § Jedes Element wird auf einen Wert der Null «entspricht» gesetzt § Voreinstellung («default») Type Default Wert int 0 long 0 double 0.0 boolean false String null 22 Array: Deklarieren (der Variable) ohne Erstellen (des Arrays) type[] name; § Deklariert eine Variable (name) die auf Arrays mit type Elementen verweist § Beispiel: int[] numbers; § Keine Länge nötig § Variable numbers kann auf Array mit 10 int Elementen, auf Array mit 7 int Elementen, auf Array mit 42 int Elementen … verweisen § Später Zuweisung nötig § z.B. numbers = new int[42]; 24 «Arrays» (Reihen) § Ein Array erlaubt uns mehrere Werte des selben Typs zu speichern § Element: Ein Wert in einem Array. § Index: Zahl (>= 0) um ein Element eines Arrays auszuwählen § Base: Das erste Element hat den Index 0 § Zugriff auf Element: Name einer Variable die auf den Array verweist und Index 25 Zugriff auf Elemente: name[index] Setzen § name[index] = expression; // Modifikation § name: Name der Variable um auf Arrayelemente zu zu greifen § index: int Wert (Ausdruck der int ergibt) § expression: Ausdruck der Wert vom Typ der Elemente des Arrays ergibt int[] data; data = new int[10]; data[0] = 27; data[3] = -6; Index 0 1 2 3 4 5 6 7 8 9 Wert 0 0 0 0 0 0 0 0 0 0 Index 0 1 2 3 4 5 6 7 8 9 Wert 27 0 0 -6 0 0 0 0 0 0 data Zugriff auf Elemente: name[index] Lesen § name[index] liefert Wert des Elements index § name: Name der Variable um auf Arrayelemente zu zu greifen § index: int Wert (Ausdruck der int ergibt) § Kann überall auftreten wo ein Wert (dieses Typs) verwendet werden kann int j = data[0]; int k = data[3]; System.out.print(j+k) index 0 1 2 3 4 5 6 7 8 9 value 0 0 0 0 0 0 0 0 0 0 Index 0 1 2 3 4 5 6 7 8 9 Wert 27 0 0 -6 0 0 0 0 0 0 21 27 Arrays für andere Typen boolean[] results = new boolean[5]; results[2] = true; results[4] = true; String[] address = new String[6]; address[3] = \"Florastrasse 6\"; Index 0 1 2 3 4 Wert false false true false true Index 0 1 2 3 4 5 Wert null null null \"Florastrasse 6\" null null 28 Legale Index Werte Legale Index Werte: zwischen 0 und (Länge des Arrays - 1). § Einschliesslich § Lesen oder Schreiben (Zugriff, «access») mit einem Index ausserhalb dieses Bereichs resultiert in einer ArrayIndexOutOfBoundsException § «Out-of-bounds» Fehler Index 0 1 2 3 4 5 6 7 8 9 Wert 0 0 0 0 0 0 0 0 0 0 10 11 12 …… -3 -2 -1 29 Out-of-bounds Zugriffe § Example: int[] data = new int[10]; System.out.println(data[0]); // okay System.out.println(data[9]); // okay System.out.println(data[-1]); // exception System.out.println(data[10]); // exception Index 0 1 2 3 4 5 6 7 8 9 Wert 0 0 0 0 0 0 0 0 0 0 Exception bewirkt Abbruch der Ausführung dieses Programms data 30 Arrays und Zugriffe auf Elemente int[] numbers = new int[8]; numbers[1] = 3; numbers[4] = 99; numbers[6] = 2; int x = numbers[1]; numbers[x] = 42; numbers[numbers[6]] = 11; // use numbers[6] as index xx 3 Index 0 1 2 3 4 5 6 7 Wert 0 0 0 0 0 0 0 0 Index 0 1 2 3 4 5 6 7 Wert 0 3 11 42 99 0 2 0 Index 0 1 2 3 4 5 6 7 Wert 0 3 0 0 99 0 2 0 Index 0 1 2 3 4 5 6 7 Wert 0 3 0 42 99 0 2 0numbers 32 Arrays und for-Schleifen § Oft wird auf Arrayelemente in einer «for»-Schleife zugegriffen for (int i = 0; i < 8; i++) { System.out.print(numbers[i] + \" \"); } System.out.println(); // output: 0 3 11 42 99 0 2 0 § Eine Schleife eignet sich auch zur Zuweisung an jedes Element eines Arrays. for (int i = 0; i < 8; i++) { numbers[i] = 2 * i; } Index 0 1 2 3 4 5 6 7 Wert 0 2 4 6 8 10 12 14 numbers 33 Das length Attribut Das length Attribut eines Arrays name liefert die Anzahl der Elemente name.length for (int i = 0; i < numbers.length; i++) { System.out.print(numbers[i] + \" \"); } // output: 0 2 4 6 8 10 12 14 34 Array Initialisierung § (Richtige) Programme lesen Dateien um Array zu initialisieren § Wir können einen Loop verwenden … for (int i = 0; i < 8; i++) { numbers[i] = 2 * i; } § Manchmal mühsam § Java erlaubt Initialisierung mit Konstanten 41 Array Initialisierung § type[] name = { value1, value2, …., valueN } § Deklariert und initialsiert Array name mit N Elementen § valuei : Typ muss mit type übereinstimmen int[] myIntArray = { 1, 3, 8, 4, 10, 11, 0, -2} 42 Index 0 1 2 3 4 5 6 7 Wert 1 3 8 4 10 11 0 -2 myIntArray Array Initialisierung für andere Typen § type[] name = { value1, value2, …., valueN } double[] myDoubleArray = {1.0, 0.0, 0.5, 0.99999999999}; boolean[] myBooleanArray = {true, true, true, false}; String[] myStringArray = {\"ein\", \"Versuch\"} 43 Index 0 1 2 3 Wert 1.0 0.0 0.5 0.99999999999 myBooleanArray Index 0 1 2 3 Wert true true true false myDoubleArray myBooleanArray Index 0 1 Wert \"ein\" \"Versuch\" Unser Beispiel am Anfang (Messwertanalyse) Ein Array hilft uns, dieses Programm zu schreiben Anzahl Mitglieder? 6 Groesse in cm: 165 Groesse in cm: 164 Groesse in cm: 158 Groesse in cm: 163 Groesse in cm: 169 Groesse in cm: 181 Durchschnitt in cm = 166.7 Anzahl ≥ Durchschnitt: 2 (33 %) 44 Programm // Liest Groessen, berechnet Durchschnitt, gibt Anzahl und // Prozentsatz >= Durchschnitt aus import java.util.Scanner; public class Analyse { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(\"Anzahl Mitglieder? \"); int members = input.nextInt(); int[] data = new int[members]; double sum = 0.0; for (int i = 0; i < members; i++) { // Groesse einlesen System.out.print(\"Groesse in cm: \"); data[i] = input.nextInt(); sum += data[i]; } // Fortsetzung naechste Seite 45 Programm , Fortsetzung // compute results double avg = (double) sum/members; System.out.println(\"Durchschnitt in cm = \" + avg); int count = 0; for (int i = 0; i < members; i++) { if (data[i] >= avg) { count++; }; } // report results System.out.println(\"Anzahl >= Durchschnitt: \" + count + \" (\" + (double)count/members*100 + \" %)\"); // Formatierung koennte besser sein … } } 46 Diskussion § Idealerweise können wir diese Anweisungen in einer Methode organisieren § Möchten den Array der Messwerte als Parameter übergeben können § Wir ignorieren Formatierung der Ergebnisse 47 3.3 Arbeiten mit Arrays 50 Java Variable – Referenztyp § Eine Referenzvariable (auch: «reference type variable», Variable eines Referenztyps) erlaubt den Zugriff auf einen Array int[] myArray; § myArray ist eine Referenzvariable (kann für Arrays von int Werten gebraucht werden) § Nicht für andere Arten von Arrays (dazu später mehr) § Speichert/liefert Information die Zugriff auf Array erlaubt § Nach der Deklaration gibt es noch keinen Platz für die Daten 51 Java Variable – Referenztyp § int[] myArray deklariert eine Referenzvariable (kann für Arrays von int Werten gebraucht werden) § Speichert/liefert Information die Zugriff auf Array erlaubt § Noch gibt es keinen Bereich der Daten speichert § Erst Zuweisung verknüpft Referenzvariable mit einem Array § Entweder in der Deklaration int[] myArray = new int[10]; § Oder in separaten Schritten § int[] myArray; § myArray = new int[10]; 52 int[] myArray = {0, 1, 4, 9}; Direkte Initialisierung nur mit Deklaration möglich Java Variable – Referenztyp § int[] myArray deklariert eine Referenzvariable (kann für Arrays von int Werten gebraucht werden) § Erst Zuweisung verknüpft Referenzvariable mit einem Array § Wiederholte Zuweisungen sind möglich int[] myArray = {0, 1, 4, 9}; // Deklaration // myArray[2]==4 myArray = new int[3]; // myArray verweist auf {0,0,0} § Auch Zuweisung auf anderen (existierenden Array) ist möglich int[] yourArray = myArray; 53 § Durch eine Zuweisung kann eine Referenzvariable auf einen anderen Array verweisen int[] a = { 4, 3, 2, 1, 0}; int[] b = { 10, 20, 30, 40}; a = b; //a:[10, 20, 30, 40] § Die rechte Seite einer Zuweisung zu einer Referenzvariable muss auch eine Referenzvariable sein. § Der Typ der Elemente muss übereinstimmen § Die Anzahl der Elemente muss nicht übereinstimmen § (Oder Ergebnis des new Operators) 54 Index 0 1 2 3 4 Wert 4 3 2 1 0 a b Index 0 1 2 3 Wert 10 20 30 40 § Durch eine Zuweisung kann eine Referenzvariable auf einen anderen Array verweisen int[] a = { 4, 3, 2, 1, 0}; int[] b = { 10, 20, 30, 40}; a = b; § Und wenn a nicht mehr auf diesen Array verweisen soll? § Zuweisung des besonderen Wertes null a = null; § null heisst das a auf keinen Array verweist § Nur noch b verweist jetzt auf den Array 55 Index 0 1 2 3 4 Wert 4 3 2 1 0a b Index 0 1 2 3 Wert 10 20 30 40 Zugriff auf Elemente des Arrays … erfordert [ .. ] (mit legalem Index) (wenn Array exisitiert) myArray[1] = 99; int b = myArray[7]; System.out.println(myArray[1]); //99 [..] ist auch ein Operator (mit höchstem Rang) Sonst macht myArray[1]+1 keinen Sinn 56 Java Referenzvariable § Wir müssen unterscheiden zwischen § Zugriff auf ein Element (mittels name[index]) § Zugriff auf den Array auf den die Referenzvariable verweist § z.B. um andere Referenzvariable zu setzen ( = name) § Referenzvariable ist eine Kurzform um zu sagen: dies ist eine Java Variable des Typs «Reference auf ….» long[] longArray; //Verweist auf Array mit long Elementen int[] intArray; //Verweist auf Array mit int Elementen 58 null § null ist der Wert einer Referenzvariable die auf keinen Array verweist. 59 int[] a = new int[10]; a[0] = 1; ✓ System.out.println(a.length); ✓ a = null; System.out.println(a.length); ✘ a[1] = 2; ✘ System.out.println(a); ✓ //null Was passiert mit dem Array {4, 3, 2, 1, 0}? Nach Zuweisung von null verweist eine Referenzvariable auf keinen Array int[] a = { 4, 3, 2, 1, 0}; int[] b = { 10, 20, 30, 40}; a = b; a = null; Wenn keine weitere Referenzvariable auf den Array verweist dann ist der Array unerreichbar § Keine direkte Auswirkung auf Programmausführung § Kann (und wird) irgendwann vom Java System entfernt werden (nicht unser Thema, abhängig von Version, Speicherplatz, Host, …) § Wir können uns auf das Erstellen eines korrekten Programms «beschränken» 60 Index 0 1 2 3 4 Wert 4 3 2 1 0a b Index 0 1 2 3 Wert 10 20 30 40 Reference Semantics § Wenn eine Referenzvariable als Operand in einer Zuweisung erscheint (x=y) dann wird der Array nicht kopiert sondern beide Variablen beziehen sich nun (verweisen nun) auf den selben Array: Reference Semantics! § Variablen x und y enthalten nun eine Referenz («reference», Verweis) auf den selben Array. Veränderungen der Elemente einer Referenzvariable bewirken eine Änderung der Werte der anderen Referenzvariable. § Aliasing: zwei (oder mehr) Referenzvariable verweisen auf den selben Array 61 Verweise und Arrays § Arrays verwenden Reference Semantics. Warum? § Effizienz. Das Kopieren grosser Arrays kostet (zu)viel Zeit. § Programmstruktur. Es ist oft sinnvoll (und logisch) wenn verschiedene Methoden mit einem (gemeinsamen) Array arbeiten. int[] dataSet = new int[ … ]; step1(dataSet); step2(dataSet); § Objekte verwenden auch Reference Semantics 62 Arrays sind Objekte § … aber viele Operatoren sind für Objekte nicht definiert § Der Additionsoperator + ist nur für Strings definiert String s = \"hello\"; String t = \"world\"; s = s + \" \" + t; // \"hello world\" Scanner sc = new Scanner(System.in); Scanner ec = new Scanner(System.in); sc = sc + ec; // operator + cannot be applied § Der Multiplikationsoperator * ist auch für Strings nicht definiert s = 2 * s; // operator * cannot be applied § Auch die meisten Vergleichsoperatoren sind nicht definiert § Und Output auch nicht so wie wir es wollen 66 Arrays § Manchmal wünschen wir uns (vielleicht) dass (z.B.) + definiert ist int[] a = new int[10]; int[] b = new int[10]; a = a + b; // error if ( a >= b ) { … } // error § Aber Java unterstützt dies nicht. 68 Vergleiche von Arrays § Leider gibt es kein equals für Arrays § Wie für Strings: if (\"hello\".equals(myString)) { … } § Man kann zwei Arrays weder mit == noch mit equals vergleichen um zu prüfen ob sie die selben Elemente haben int[] a1 = {42, -7, 1, 15}; int[] a2 = {42, -7, 1, 15}; if (a1 == a2) { ... } // incorrect! if (a1.equals(a2)) { ... } // incorrect! 69 3.4 Arrays und Methoden § Array Parameter § Array Rückgabe Werte 70 Filter § Schreiben Sie ein Programm(segment) das in einem Array alle Elemente < 0 auf 0 setzt § Zum Beispiel für diesen Array: [11, -42, -5, 27, 0, 89] § Sollte der gefilterte Array so aussehen: [11, 0, 0, 27, 0, 89] § Das Programm sollte für int Arrays jeder Grösse funktionieren. 71 Filter — Variante 1 § Der Array der Elemente ist sichtbar, Name der Referenzvariable numbers // filter the array numbers for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { numbers[i] = 0; } } 72 Filter, Verbesserte Anforderungen § Schreiben Sie (ausgehend von dem Programm Segment das einen Array filtert) eine filter Methode § Soll den Array, dessen Werte zu filtern sind, als Parameter akzeptieren. int[] numbers = {11, -42, -5, 27, 0, 89}; filter(the_numbers); 73 Filter, Verbesserte Anforderungen § Schreiben Sie (ausgehend von dem Programm Segment das einen Array filtert) eine filter Methode § Soll den Array, dessen Werte zu filtern sind, als Parameter akzeptieren. int[] numbers = {11, -42, -5, 27, 0, 89}; filter(the_numbers); § Fragen: 1. Wie schreiben wir eine Methode die einen Array als Parameter hat? 2. (Wie) Müssen wir den Inhalt des geänderten Arrays nach Verarbeitung zurück geben? 74 Array Parameter (Deklaration) return_type methodName(type[] name) § Deklaration einer Methode methodName die einen Array als Parameter akzeptiert § … und dann auch erfordert § mehrere Parameter möglich (wie bisher), auch gewöhnliche (skalare) Parameter § return_type: Typ des Rückgabewertes § Die bekannten Regeln (werden demnächst erweitert) § type: Typ der Elemente des Arrays § name: Name des formalen Parameters 75 Array Parameter (Deklaration) return_type methodName(type[] name) § Beispiel: // Returns the average of the given array of numbers int average(int[] numbers) { int sum = 0; for (int i = 0; i < numbers.length; i++) { sum += numbers[i]; } return sum / numbers.length; } 76 Array Parameter (Deklaration) return_type methodName(type[] name) § In der Deklaration steht dass ein Array Parameter gebraucht wird § Keine Angabe der Grösse § Angabe des Typs der Elemente § Obwohl die Länge des Arrays nicht in der Parameterliste erscheint so kann die Methode die Länge jedoch herausfinden § length Attribut name.length 77 Aufruf einer Methode mit Array Parameter § Wie gehabt (Aufruf einer Methode mit Basistyp Parametern) 78 Array Parameter (Aufruf) methodName(arrayName); § arrayName: Name des aktuellen Parameters § Beispiel: // figure out the average TA IQ int[] iq = {126, 84, 149, 167, 95}; int avg = average(iq); System.out.println(\"Average IQ = \" + avg); 79 Array Parameter (Aufruf) methodName(arrayName); § arrayName: Name des aktuellen Parameters § Beispiel: // figure out the average TA IQ int[] iq = {126, 84, 149, 167, 95}; int avg = average(iq); System.out.println(\"Average IQ = \" + avg); Keine [] wenn der Array übergeben wird! 80 Array Rückgabe (Deklaration) § Methoden können auch Arrays zurückgeben return_type[] methodName(ParameterListe) { return_type: Typ der Elemente des zurückgegebenen Arrays § Wieder verwenden wir ein return Statement um anzugeben, was als Ergebnis einer Methode zurückgegeben wird. 81 Array Rückgabe Beispiel // Returns a new array with two copies of each value. // Example: [1, 4, 0, 7] -> [1, 1, 4, 4, 0, 0, 7, 7] int[] duplicateElements(int[] numbers) { int[] result = new int[2 * numbers.length]; for (int i = 0; i < numbers.length; i++) { result[2 * i] = numbers[i]; result[2 * i + 1] = numbers[i]; } return result; } 82 Array Rückgabewerte § Die aufrufende Methode sollte den Rückgabewert entgegen nehmen § Dafür brauchen wir eine passende Variable return_type[] name = methodName(parameters); int[] iq = {126, 84, 149, 167, 95}; int[] iqd = duplicateElements(iq); 85 Filter, Verbesserte Anforderungen § Schreiben Sie (ausgehend von dem Programm Segment das einen Array filtert) eine filter Methode § Soll den Array, dessen Werte zu filtern sind, als Parameter akzeptieren. int[] numbers = {11, -42, -5, 27, 0, 89}; filter(the_numbers); § Fragen: 1. Wie schreiben wir eine Methode die einen Array als Parameter hat? 2. (Wie) Müssen wir den Inhalt des geänderten Arrays nach Verarbeitung zurück geben? 87 Filter – Variante 2 § Schreiben Sie (ausgehend von dem Programm Segment das einen Array filtert) eine filter Methode. § Soll den Array, dessen Werte zu filtern sind, als Parameter akzeptieren. int[] numbers = {11, -42, -5, 27, 0, 89}; int[] filteredNumbers = filter(numbers); § Antwort auf Frage 1: int[] filter (int[] inputArray) { … return filtered; // result Array } 88 Filter – vollständige Variante 2 int[] filter (int [] numbers) { int [] filtered = new int[numbers.length]; for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { filtered[i] = 0; } } return filtered; } 89 Filter – vollständige Variante 2 int[] filter (int [] numbers) { int [] filtered = new int[numbers.length]; for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { filtered[i] = 0; } } return filtered; } § Vergisst (leider) die Werte die >= 0 sind! 90 Filter – Variante 3: Lösung mit Einschränkungen int[] filter (int[] numbers) { int[] filtered = new int[numbers.length]; for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { filtered[i] = 0; } else { filtered[i] = numbers[i]; } } return filtered; } 91 Diskussion § Lösung korrekt (gibt uns den gewünschten Array) § Nehmen wir an der Array hat die Länge 8’500’000 und 20 Elemente < 0 § Wie viele Zuweisungen werden ausgeführt? § Wie viele davon sind absolut notwendig? § Eine Methode möchte Elemente eines Arrays modifizieren ohne die Elemente kopieren zu müssen § Ein Beispiel von vielen … 92 Array Parameter § Wir wollen einer Methode erlauben, einen Array (oder ein Objekt) als Parameter zu erhalten ohne dass die Arrayelemente kopiert werden müssen § Wir sparen Zeit. § Wir sparen Platz. § Wir können Veränderungen («Updates») direkt («in place») vornehmen § Dann brauchen wir (evtl) auch keinen Rückgabewert 93 Wir erinnern uns: Reference Semantics § Reference Semantics: Eine Variable enthält eine Referenz («reference», Verweis) auf einen Array § Wenn eine Referenzvariable als Operand in einer Zuweisung erscheint dann wird der Array nicht kopiert sondern beide Variablen beziehen sich nun (verweisen nun) auf den selben Array. § Veränderungen der Elemente einer Referenzvariable bewirken eine Änderung der Werte der anderen Referenzvariable. 94 Übergabe eines Array Parameters § Wie eine Zuweisung int[] localA = new int[3]; int[] localB = localA; § // irgendwo: void method(int[] pA) { … } method(localA); § // beim Aufruf: int[] pA = localA; § Wie geht das? Das System kopiert die Information die besagt, wo sich der Array befindet 95 Reference Semantics § Wenn wir einen Array als Parameter übergeben kann die aufgerufene Methode den Array verändern und die Veränderungen sind für den Aufrufer sichtbar § Bei Variablen eines Basistyps (int, double, boolean, …) ist das anders 97 Filter, vollständige Lösung public static void filter (int [] numbers) { for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { numbers[i] = 0; } } } 98 Filter public static void filter (int[] numbers) { for (int i = 0; i < numbers.length; i++) { if (numbers[i] < 0) { numbers[i] = 0; } } } int[] data = {11, -42, -5, 27, 0, 89}; filter(data); // Nach Ende von filter: data ist Array mit Werten // [11, 0, 0, 27, 0, 89] 99 Array als Parameter § Wenn ein Array als Parameter übergeben wird, dann wird der Array nicht kopiert. Der Parameter verweist auf den selben (ursprünglichen) Array. § Wenn der Array modifiziert wird, dann wird auch der Array, den die aufrufende Methode sieht, verändert. 101 Array Parameter verwenden Reference Semantics § Wir sagen dass Array Parameter «by reference» übergeben werden. § Veränderungen in einer Methode werden von der aufrufenden Methode gesehen. 102 Reference Semantics § Wird eine Array Variable (als Argument) übergeben bezieht sich der Parameter in der aufgerufenen Methode auf den selben Array § Wie eine Zuweisung von einer Referenzvariablen an eine andere int[] z = { 1, 3, 5}; // print z aMethod(z); // print z 104104 void aMethod(int[] x) { x[x.length-1] = 9; // print \"in ... \" // print x } Output: {1,3,5} in ... {1,3,9} {1,3,9} z Index 0 1 2 Wert 1 3 5 x Output: {1,3,5} in ... {1,3,9}Arrays und Output § Auch für Arrays gibt es eine Default Darstellung § int[] myArray = new int[5]; § System.out.println(myArray); 106 Arrays und Output § Auch für Arrays gibt es eine Default Darstellung § int[] myArray = new int[5]; § System.out.println(myArray); § Nur leider hilft uns diese nicht weiter 107 Output I@2a139a55 Die Klasse Arrays § Die Klasse Arrays in der Bibliothek java.util enthält einige Methoden, die wir in einer static Methode aufrufen können Method name Description binarySearch(array, value) returns the index of the given value in a sorted array (or < 0 if not found) copyOf(array, length) returns a new copy of an array equals(array1, array2) returns true if the two arrays contain same elements in the same order fill(array, value) sets every element to the given value sort(array) arranges the elements into sorted order toString(array) returns a string representing the array, such as \"[42, -7, 1, 15]\" 108 Die Arrays Klasse § Syntax: Arrays.methodName(parameters) § methodName: Service den wir brauchen § parameter(s) : Ein oder mehr Parameter § Beispiel import java.util.Arrays; int[] a1 = {42, -7, 1, 15}; int[] a2 = {42, -7, 1, 15}; if (Arrays.equals(a1, a2)) { ... } 109 Besonders praktisch: Arrays.toString § Die Klasse Arrays in der Bibliothek java.util enthält einige Methoden, die wir in einer static Methode aufrufen können Method name Description binarySearch(array, value) returns the index of the given value in a sorted array (or < 0 if not found) copyOf(array, length) returns a new copy of an array equals(array1, array2) returns true if the two arrays contain same elements in the same order fill(array, value) sets every element to the given value sort(array) arranges the elements into sorted order toString(array) returns a string representing the array, such as \"[42, -7, 1, 15]\" 110 Arrays.toString § Arrays.toString nimmt einen Array als Parameter und liefert einen String mit den Array Elementen int[] e = {0, 2, 4, 6, 8}; e[1] = e[3] + e[4]; System.out.println(\"e is \" + Arrays.toString(e)); Output: e is [0, 14, 4, 6, 8] § Einfacher Weg String mit den Werten des Arrays zu erhalten111","libVersion":"0.3.2","langs":""}