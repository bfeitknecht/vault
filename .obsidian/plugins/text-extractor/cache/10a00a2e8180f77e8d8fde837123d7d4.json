{"path":"sem3/TI/UE/c/TI-c-u01.pdf","text":"TI-bf-u01 Basil Feitknecht, 23-922-099 Camil Schmid, 23-944-234 Dennis Küenzi, 21-559-315 1 (a) Let L def. = {w ∈ Σn ∣ ∀x ∈ Σ |w|x ≥ 1} denote the language of words of length n that contain each letter at least once. To solve this, we use the principle of inclusion-exclusion. It is known, that there are |Σ|n words of length n over the alphabet Σ, in our case 3n. Now we need to subtract all words that are missing one letter, i.e. w ∈ Γn, where Γ = Σ − {s} for some s ∈ Σ. Since these words consist of only two letters, there are 2n of them in the three diﬀerent possible languages. Let Γn a,b, Γn a,c, Γn b,c be the languages of words of words of length n consisting only of the denoted letters. Therefore, w.o.l.g. |Γn x,y| = 2n, and since there are three such sets, we need to subtract 3 ⋅ 2n from our total. Finally, let's add back the words that were subtracted multiple times, i.e. words missing two symbols. There are only 3 such words, namely an, bn, cn. Thus we arrive at the ﬁnal number of |L| = 3n − 3 ⋅ 2n + 3. Let f : N → N denote the number of words of length n ∈ N over Σ that contain each of the three letters in the alphabet at least once. f(n) def. = { □ (b) 0, n < 3 3n − 3 ⋅ 2n + 3, n ≥ 3 Let g : N → N denote the number of words of length n ∈ N over Σn that do not contain 11 as a subword. The function follows the ﬁbonacci sequence. Thus, g(n) def. = □ 2 Prove or disprove. (a) We pove this by case distinction. Case L = ∅ Let L = ∅, then L2 = ∅ and clearly ∅ ⊆ ∅. Thus L2 ⊆ L. Case L = {λ} Let L = {λ}, then L2 = {λλ} = {λ}. Since L = L2 ⟹ L2 ⊆ L Case |L| = ∞ We prove this case by contradiction. Assume for the sake of contradiction, that the order of our language is ﬁnite, i.e. |L| ≠ ∞. Let w ∈ L be an arbitrary word, s.t. w ≠ λ. Now, since we assume the statement to be true for some ﬁnite order language, there must be some word v ∈ L2 s.t. v = w2. However, since we assume L2 ⊆ L, there must also be some word u ∈ L2 s.t. u = v2. We have arrived at a contradiction, since L cannot be ﬁnite but fulﬁll the implication. Thus |L| = ∞ in order for L2 ⊆ L. □ (b) ⎧ ⎨ ⎩ 1, n = 0 2, n = 1 g(n − 1) + g(n − 2), n ≥ 2 Let A = L2 ⋅ (L2 − L1) and B = (L2)2 − L2 ⋅ L1. To show that the equality holds, we need to prove that A ⊆ B and B ⊆ A. Let's start with A ⊆ B. Let z ∈ A be arbitrarily chosen. Applying the deﬁnition of the concatination of languages gives us z = xy, where x ∈ L2 and y ∈ L2 − L1, i.e. y ∉ L1. To prove A ⊆ B we need to show that z ∈ B, i.e. z ∈ (L2)2 but z ∉ L2 ⋅ L1. Let v, w ∈ L2, w ∉ L1 be arbitrary, which implies z = vw, but vw ∉ L2 ⋅ L1 by deﬁnition. Thus A ⊆ B is proven. Let's now show B ⊆ A. Let z ∈ B be arbitrarily chosen, i.e. z = xy, where x, y ∈ L2, y ∉ L1. Filling in the deﬁnition for A, gives us that z ⊆ L2 ⋅ (L2 − L1). Thus z = vw, where v ∈ L2 and w ∈ L2 − L1. This corresponds to our initial deﬁnition of z, w.o.l.g. let v = x and w = y. Thus B ⊆ A is proven. Since A ⊆ B, B ⊆ A ⟹ A = B, as was to be proven. □ 3 (a) |L1| = k,  |L1L2| = k + 1 □ (b) |L1| = k,  |L1L2| = k + 5 □ Σ = {a} L1 = {a} ∪ Lλ L2 = {an ∣ n ∈ [k]} Σ = {a} L1 = {ai ∣ i ∈ [5]} ∪ Lλ L2 = {an ∣ n ∈ [k]} (c) |L1| = k,  |L2| = l,  |L1L2| = k ⋅ l □ (d) |L1| = k,  |L2| = l,  |Σ| = 1,  |L1L2| = k ⋅ l □ Σ = {a, b} L1 = {ai ∣ i ∈ [k]} (1) L2 = {bj ∣ j ∈ [l]} (2) (1), (2) ⟹ |L1| = k,  |L2| = l (3) L1 ∩ L2 = ∅, (3) ⟹ |L1L2| = k ⋅ l Σ = {a} L1 = k ⋃ i=1 al⋅i L2 = l ⋃ i=1 ai","libVersion":"0.5.0","langs":""}