{"path":"sem3/EProg/UE/e/EProg-e-u02.pdf","text":"252-0027-00: Einführung in die Programmierung Übungsblatt 2 Abgabe: 08. Oktober 2024, 23:59 In dieser Übung werden Sie endlich selber Java-Programme schreiben! Checken Sie mit Eclipse die neue Vorlage aus, indem Sie wie in Übung 1 im Menü zuerst auf ihr Repository in der Repository Ansicht rechtsklicken und Pull wählen. Danach importieren Sie das neue Projekt durch Rechtsklick auf u02 und Auswahl von Import Projects... Beachten Sie, dass Sie in dieser Übung mehrere unabhängige Programme im selben Eclipse- Projekt haben werden. Bevor Sie ein Programm starten, achten Sie deshalb darauf, dass Sie die richtige Datei im Package Explorer ausgewählt oder im Editor geöffnet haben. Vergessen Sie nicht, Ihren Programmcode zu kommentieren! Aufgabe 1: Fehlerbehebung Finden und beheben Sie alle Fehler im Programm “FollerVehler.java”. Eclipse hilft Ihnen dabei, indem es anzeigt, wo die Fehler sind (und eine mehr oder weniger hilfreiche Fehlermeldung dazu ausgibt), aber Sie müssen selber herausfinden, was das Problem ist und wie Sie es beheben können. Wenn Sie alle Fehler behoben haben, sollte das Programm Folgendes ausgeben: Hello world Gefällt Ihnen dieses Programm? Ich habe es selbst geschrieben. Aufgabe 2: Schweizerfahne Statt eine Vorlage zu benützen, schreiben Sie in dieser Aufgabe ein Programm von Grund auf selbst. Eclipse wird Ihnen allerdings etwas Schreibarbeit abnehmen. 1. Erstellen Sie eine neue Java-Datei “SwissFlag.java”. Wählen Sie dafür im Menü File → New → Class oder klicken Sie auf das Symbol in der Symbolleiste. Geben Sie im Dialog bei Name “SwissFlag” ein und drücken Sie “Finish”. 2. Erstellen Sie zuerst eine leere main-Methode, so wie Sie es bei anderen Programmen gesehen haben. (Tipp: Sie können in Zukunft auch die Option public static void main(String[] args) im Dialog für neue Java-Klassen auswählen, um sich ein wenig Arbeit zu sparen.) 1 3. Erweitern Sie das Programm so, dass es die Schweizerfahne in der Konsole ausgibt. Die Fahne könnte ungefähr wie folgt aussehen, Sie dürfen aber auch eine grössere oder schönere Version entwerfen: ----------------------------------- | | | | | +++++++ | | +++++++ | | +++++++ | | +++++++++++++++++++++ | | +++++++++++++++++++++ | | +++++++++++++++++++++ | | +++++++ | | +++++++ | | +++++++ | | | | | ----------------------------------- Teilen Sie das Programm in mehrere Methoden auf, welche von der main-Methode aufgerufen werden. Damit sorgen Sie dafür, dass weniger Wiederholungen von Code-Stücken vorkom- men, was das Ändern des Programms deutlich einfacher macht. Aufgabe 3: Eingabe und Zufall In dieser Aufgabe arbeiten Sie mit der Eingabe und Ausgabe von Java und lernen die Klassen Scanner und Random näher kennen. Die Klassen Scanner und Random müssen importiert werden. Dies kann man mittels import java.util.Scanner und import java.util.Random tun, wie in der Vorlesung gezeigt wurde. 1. Schreiben Sie ein Programm “Adder.java”, welches zwei ganze Zahlen einliest und die Summe davon ausgibt. Sie sollen dafür die Scanner-Klasse verwenden, wie in der Vorlesung gezeigt. Das Programm soll nach der ersten Zahl fragen: Geben Sie Zahl 1 ein: dann nach der zweiten Zahl: Geben Sie Zahl 2 ein: und schliesslich, wenn Sie zum Beispiel “25” und “1999” eingeben, folgendes ausgeben: 25 + 1999 = 2024 Sie können davon ausgehen, dass nur ganze Zahlen eingegeben werden. Testen Sie das Programm mit verschiedenen Zahlen. 2 Figure 1: Ein Würfel mit 20 Seiten 2. Schreiben Sie ein Programm Wuerfel.java, das einen Würfel simuliert. Hierbei soll eine positive ganze Zahl N eingelesen werden, welche die Anzahl der Seiten des Würfels repräsen- tiert. Der übliche Würfel hat 6 Seiten, jedoch existieren auch Würfel mit 12, 16, 20 (siehe Abbildung 1) und mehr Seiten. Jede Seite trägt eine unterschiedliche Zahl, die von 1 bis N (inklusive N) reicht. Das Programm soll den Wurf simulieren, indem es die Klasse Random verwendet. Ein möglicher Ablauf des Programmes könnte folgendermassen aussehen: Wie viele Seiten hat Ihr Würfel? Der Benutzer gibt eine Zahl ein, z.B. 20, danach wird gewürfelt: Es wurde eine 17 gewürfelt! 3. Schreiben Sie ein Programm ChatGPT.java, welches die Interaktion mit einem AI-Chatbot simuliert. Das Programm soll die Anwenderin bzw. den Anwender begrüssen, nach dem Namen und Alter fragen, und anschliessend die Glückszahl verraten. Die Glückszahl soll zufällig gewählt werden, in dem Sie die Random Klasse benutzen. Ein möglicher Ablauf des Programmes könnte folgendermassen aussehen: Guten Tag! Ich bin ChatGPT, der beste Chatbot, den es gibt! Wie heissen Sie? Ein Namen wird eingegeben, z.B. Alice, danach antwortet der Chatbot auf diesen Input: Sehr erfreut Alice! Wie alt sind Sie? Ein Alter wird eingegeben, z.B. 23, danach antwortet der Chatbot auf diesen Input: Mittels dieser Informationen habe ich Ihre Glückszahl gefunden! Die Glückszahl lautet 42. 3 Aufgabe 4: Berechnungen 1. Vervollständigen Sie “SharedDigit.java”. In der main-Methode sind zwei int-Variablen a und b deklariert und mit einem Wert zwischen 10 und 99 (einschliesslich) initialisiert. Das Programm soll einer int-Variablen r einen bestimmten Wert zuweisen. Wenn a und b eine Ziffer gemeinsam haben, dann wird r die gemeinsame Ziffer zugewiesen (wenn a und b beide Ziffern gemeinsam haben, dann kann eine beliebige Ziffer zugewiesen werden). Wenn es keine gemeinsame Ziffer gibt, dann soll −1 zugewiesen werden. Sie brauchen für dieses Programm keine Schleife. Beispiele: • Wenn a: 34 und b: 53, dann ist r: 3 • Wenn a: 10 und b: 22, dann ist r: −1 • Wenn a: 66 und b: 66, dann ist r: 6 • Wenn a: 34 und b: 34, dann ist r: 3 oder 4 Testen Sie Ihre Loesung mit a gleich 34 und b gleich 43. Was liefert Ihr Programm? 2. Vervollständigen Sie “SumPattern.java”. In der main-Methode sind drei int-Variablen a, b, und c deklariert und mit irgendwelchen Werten initialisiert. Wenn die Summe von zwei der Variablen die dritte ergibt, nehmen wir an dass a + c == b, so soll die Methode “Moeglich. a + c == b” ausgeben (wobei die Werte für a, b, und c einzusetzen sind). Wenn das nicht der Fall ist, dann soll die Methode “Unmoeglich.” ausgeben. Beispiele: • Wenn a: 4, b: 10, c: 6, dann wird “Moeglich. 4 + 6 == 10” oder “Moeglich. 6 + 4 == 10” ausgegeben. • Wenn a: 2, b: 12, c: 0, dann wird “Unmoeglich.” ausgegeben. 3. Vervollständigen Sie “AbsoluteMax.java”. In der main-Methode sind drei int-Variablen a, b, und c deklariert und mit irgendwelchen Werten initialisiert. Das Programm soll einer int-Variable r den grössten absoluten Wert von a, b, und c zuweisen. Aufgabe 5: EBNF In dieser Aufgabe erstellen Sie erneut verschiedene EBNF-Beschreibungen. Speichern Sie diese wie gewohnt in der Text-Datei “EBNF.txt”, welche sich in Ihrem “u02”-Ordner bzw. im “U02 <N-ETHZ-Account>”-Projekt befindet. Sie können die Datei direkt in Eclipse bearbeiten. 1. Erstellen Sie eine Beschreibung <pyramid>, welche als legale Symbole genau jene Wörter zulässt, welche aus einer Folge von strikt aufsteigenden, gefolgt von einer Folge von strikt absteigenden Ziffern bestehen. Beispiele sind: 14, 121, 1221, 1341. Sie dürfen annehmen, dass das leere Wort auch zugelassen wird. (Als Challenge können Sie probieren, das leere Wort auszuschliessen.) 4 2. Erstellen Sie eine Beschreibung <digitsum>, welche als legale Symbole genau jene natür- lichen Zahlen zulässt, deren Quersumme eine gerade Zahl ist. 3. Erstellen Sie eine Beschreibung <xyz>, welche genau alle Wörter zulässt, die aus X, Y und Z bestehen und bei welchen jedes X mindestens ein Y im Teilwort links und rechts von sich hat. Beispiele sind: Z, YXY, YXXY, ZYXYY. 4. Erstellen Sie eine Beschreibung <term>, welche als legale Symbole genau alle wohlgeformten arithmetischen Terme, bestehend aus positiven ganzen Zahlen, Variablen (x, y, z), Addition und Klammern zulässt. Geklammerte Terme müssen mindestens eine Addition enthalten. Beispiele sind: 1 + 4, (1 + 4), 1 + (3 + 4), (1 + 1) + x + 5. 5","libVersion":"0.3.2","langs":""}