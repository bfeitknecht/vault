{"path":"sem3/TI/VRL/extra/nwehrl/TI-nwehrl-w04.pdf","text":"Theoretische Informatik HS24 Nicolas Wehrli ¨Ubungsstunde 04 15. Oktober 2024 ETH Z ¨urich nwehrl@ethz.ch 1 Heute 1 Feedback zur Serie 2 Beweise f ¨ur Nichtregularit¨at Kurze Wiederholung vom letzten Mal Theorie f ¨ur Nichtregularit¨atsbeweise - continued Sprachen mit Einsymbolalphabet 3 Nichtdeterministische Endliche Automaten 2 Feedback zur Serie Feedback - Generell gut gel ¨ost. War nicht das schwierigste Blatt. - Aufpassen auf Fl ¨uchtigkeitsfehler! - λ nicht vergessen! - Macht euch bei den Klassen das Leben nicht schwer. 3 Beweise f ¨ur Nichtregularit¨at Theorie f ¨ur Nichtregularit¨atsbeweise - Lemma 3.3 Sei A = (Q, Σ, δA, q0, F) ein EA. Seien x, y ∈ Σ∗, x ̸= y, so dass ˆδA(q0, x) = p = ˆδA(q0, y) f ¨ur ein p ∈ Q (also x, y ∈ Kl[p]). Dann existiert f ¨ur jedes z ∈ Σ∗ ein r ∈ Q, so dass xz und yz ∈ Kl[r], also gilt insbesondere xz ∈ L(A) ⇐⇒ yz ∈ L(A) Generelle Tips: - Betrachtet |Q| + 1 W ¨orter f ¨ur Pigeonhole-Principle. - Geeigneten Suffix finden. 4 Theorie f ¨ur Nichtregul¨arit¨atsbeweise - Pumping Lemma Sei L regul¨ar. Dann existiert eine Konstante n0 ∈ N, so dass jedes Wort w ∈ Σ∗ mit |w| ≥ n0 in drei Teile x, y und z zerlegen l¨asst, das heisst w = yxz, wobei (i) |yx| ≤ n0 (ii) |x| ≥ 1 (iii) entweder {yxkz | k ∈ N} ⊆ L oder {yxkz | k ∈ N} ∩ L = ∅. 5 Theorie f ¨ur Nichtregul¨arit¨atsbeweise - Pumping Lemma Beweis Sei L ∈ Σ∗ regul¨ar. Dann existiert ein EA A = (Q, Σ, δA, q0, F), so dass L(A) = L. Sei n0 = |Q| und w ∈ Σ∗ mit |w| ≥ n0. Dann ist w = w1w2...wn0u, wobei wi ∈ Σ f ¨ur i = 1, ..., n0 und u ∈ Σ∗. Betrachten wir die Berechnung auf w1w2...wn0: (q0, w1w2w3...wn0) A (q1, w2w3...wn0) A ... A (qn0−1, wn0) A (qn0, λ) 6 Theorie f ¨ur Nichtregul¨arit¨atsbeweise - Pumping Lemma In dieser Berechnung kommen n0 + 1 Zust¨ande q0, q1, ..., qn0 vor. Da |Q| = n0, existieren i, j ∈ {0, 1, ..., n0}, i < j, so dass qi = qj. Daher haben wir in der Berechnung die Konfigurationen (q0, w1w2w3...wn0) A ∗ (qi, wi+1wi+2...wn0) A ∗ (qi, wj+1...wn0) A ∗ (qn0, λ) Dies impliziert (qi, wi+1wi+2...wj) A ∗ (qi, λ) (1) Wir setzen nun y = w1...wi, x = wi+1...wj und z = wj+1...wn0u, so dass w = yxz. 7 Theorie f ¨ur Nichtregul¨arit¨atsbeweise - Pumping Lemma Wir ¨uberpr ¨ufen nun die Eigenschaften (i),(ii) und (iii): (i) yx = w1...wiwi+1...wj und daher |yx| = j ≤ n0. (ii) Da |x| ≥ j − i und i < j, ist |x| ≥ 1. (iii) (1) impliziert (qi, xk) A ∗ (qi, λ) f ¨ur alle k ∈ N. Folglich gilt f ¨ur alle k ∈ N: (q0, yx kz) A ∗ (qi, x kz) A ∗ (qi, z) A ∗ (ˆδA(qi, z), λ) Wir sehen, dass f ¨ur alle k ∈ N die Berechnungen im gleichen Zustand qend = ˆδA(qi, z) enden. Falls also qend ∈ F, akzeptiert A alle W ¨orter aus {yxkz | k ∈ N}. Falls qend /∈ F, dann akzeptiert A kein Wort aus {yxkz | k ∈ N}. ■ 8 Theorie f ¨ur Nichtregul¨arit¨atsbeweise - Pumping Lemma Sei L regul¨ar. Dann existiert eine Konstante n0 ∈ N, so dass jedes Wort w ∈ Σ∗ mit |w| ≥ n0 in drei Teile x, y und z zerlegen l¨asst, das heisst w = yxz, wobei (i) |yx| ≤ n0 (ii) |x| ≥ 1 (iii) entweder {yxkz | k ∈ N} ⊆ L oder {yxkz | k ∈ N} ∩ L = ∅. Generelle Tips: - Das gew¨ahlte Wort h¨angt sehr wahrscheinlich von n0 ab. - Es ist meist einfacher, das Wort so zu konstruieren, dass man nur ein Zeichen pumpt (i.e. x besteht nur aus einem Zeichen). - Aufpassen auf Quantoren! Wir d ¨urfen ein Wort w¨ahlen (mit L¨ange ≥ n0) und m ¨ussen dann zeigen, dass keine Partition davon existiert, die (i)-(iii) erf ¨ullt. 9 Theorie f ¨ur Nichtregularit¨atsbeweise - Satz 3.1 (Kolmogorov) Sei L ⊆ (Σbool)∗ eine regul¨are Sprache. Sei Lx = {y ∈ (Σbool)∗ | xy ∈ L} f ¨ur jedes x ∈ (Σbool)∗. Dann existiert eine Konstante const, so dass f ¨ur alle x, y ∈ (Σbool)∗ K(y) ≤ ⌈log2(n + 1)⌉ + const, falls y das n-te Wort in der Sprache Lx ist. Wie wir sehen werden, beruht der Nichtregularit¨atsbeweis darauf, dass die Differenz von |wn+1| − |wn| f ¨ur kanonische W ¨orter (wi)i∈N beliebig gross werden kann. 10 Beispielaufgabe 2 - Kolmogorov Methode Verwenden Sie die Methode der Kolmogorov-Komplexit¨at, um zu zeigen, dass die Sprache L1 = {0 n2·2n | n ∈ N} nicht regul¨ar ist. 11 Beispielaufgabe 2 - Kolmogorov Methode Angenommen L1 sei regul¨ar. Wir betrachten L 0m2·2m+1 = {y | 0 m2·2m+1y ∈ L1}. Da (m + 1)2 · 2 m+1 = (m2 + 2m + 1) · 2 m+1 = m 2 · 2m + m 2 · 2 m + (2m + 1) · 2m+1 = m 2 · 2m + (m 2 + 4m + 2) · 2m ist f ¨ur jedes m ∈ N das Wort y1 = 0(m2+4m+2)·2m−1 das kanonisch erste Wort der Sprache L 0m2·2m+1. 12 Beispielaufgabe 2 - Kolmogorov Methode Nach Satz 3.1 existiert eine Konstante c, unabh¨angig von m, so dass K(y1) ≤ ⌈log2(1 + 1)⌉ + c = 1 + c. Die Anzahl aller Programme, deren L¨ange kleiner oder gleich 1 + c sind, ist endlich. Da es aber unendlich viel W ¨orter der Form 0(m2+4m+2)·2m−1 gibt, ist dies ein Widerspruch. Demzufolge ist L1 nicht regul¨ar. ■ 13 Beispielaufgabe 3 - Direkte Methode (Lemma 3.3) Verwende eine direkte Argumentation ¨uber den Automaten (unter Verwendung von Lemma 3.3), um zu zeigen, dass die Sprache L2 = {w ∈ {0, 1}∗ | |u|0 ≤ |u|1 f ¨ur alle Pr¨afixe u von w} nicht regul¨ar ist. 14 Beispielaufgabe 3 - Direkte Methode (Lemma 3.3) Angenommen L2 sei regul¨ar. Dann existiert ein Endlicher Automat A = (Q, {0, 1}, δ, q0, F) mit L(A) = L2. Wir betrachten die W ¨orter 1, 1 2, ..., 1|Q|+1 Per Pigeonhole-Principle existiert i, j ∈ {1, ..., |Q| + 1} mit i < j, so dass ˆδ(q0, 1i) = ˆδ(q0, 1j). Nach Lemma 3.3 gilt nun f ¨ur alle z ∈ {0, 1}∗ 1 iz ∈ L2 ⇐⇒ 1jz ∈ L2 15 Beispielaufgabe 3 - Direkte Methode (Lemma 3.3) Sei z = 0j. Wir haben dann also 1 iz = 1 i0j /∈ L2, da i < j und ein Wort auch ein Pr¨afix von sich selbst ist (Die Bedingung |1i0j|0 ≤ |1i0j|1 wird verletzt). Aber wir haben auch 1 jz = 1j0j ∈ L2, was zu einem Widerspruch f ¨uhrt. Also ist die Annahme falsch und L2 nicht regul¨ar. ■ 16 Sprachen mit Einsymbolalphabet Angenommen es handelt sich bei L ⊆ Σ∗ um eine Sprache ¨uber einem un¨aren Alphabet (|Σ| = 1, Σ = {x}). Dann gilt: ∀w ∈ Σ∗ : w = x |w| Insbesondere gibt es f ¨ur jede L¨ange nur ein Wort. Sei die Folge (wi)i∈N kanonisch geordnet, so dass wi ∈ L (Wenn L endlich betrachten wir nur endlich viele W ¨orter der Folge). Durch das gilt folgendes ∀w ∈ Σ∗. ∀k ∈ N. |wk| < |w| < |wk+1| =⇒ w /∈ L 17 Beispielaufgabe 4 - Pumping Lemma Zeigen Sie, dass L = {0 n·⌈√n⌉ | n ∈ N} nicht regul¨ar ist. 18 Beispielaufgabe 4 - Pumping Lemma Angenommen L = {00·⌈√0⌉, 01·⌈√1⌉, 02·⌈√2⌉, ...} sei regul¨ar. Seien w0, w1, w2, ... die W ¨orter von L in kanonischer Reihenfolge. Nach dem Pumping Lemma gibt es ein n0 ∈ N, dass die Bedingungen (i)-(iii) erf ¨ullt sind. Wir w¨ahlen w = wn2 0 = 0 n2 0⌈ √n2 0⌉ ∈ L. Es ist leicht zu sehen das |w| ≥ n0 und folglich existiert eine Aufteilung w = yxz (y = 0l, x = 0m und z = 0n2 0⌈√ n2 0⌉−l−m), die (i)-(iii) erf ¨ullt. Da nach (i) |yx| = l + m ≤ n0, folgt |x| = m ≤ n0. Aus (ii) folgt |x| = m ≥ 1. 19 Beispielaufgabe 4 - Pumping Lemma Wegen |yx2z| = |yxz| + |x| gilt also |yxz| < |yx2z| ≤ |yxz| + n0. Das n¨achste Wort in L nach wn2 0 ist wn2 0+1 und es gilt |wn2 0+1| − |wn2 0| = (n 2 0 + 1) · ⌈√ n2 0 + 1⌉ − n 2 0 · ⌈√ n2 0⌉ = (n 2 0 + 1) · ⌈√ n2 0 + 1⌉ − n 2 0 · n0 > (n 2 0 + 1) · n0 − n 3 0 = n0 Die strikte Ungleichung gilt da n0 ∈ N und n0 = ⌈√ n2 0⌉ < √n2 0 + 1 ≤ ⌈√ n2 0 + 1 ⌉. =⇒ |wn2 0+1| ≥ |wn2 0| + (n0 + 1) 20 Beispielaufgabe 4 - Pumping Lemma Somit gilt |wn2 0| < |yx 2z| < |wn2 0+1| Daraus folgt yx2z /∈ L, w¨ahrend yxz ∈ L, in Widerspruch zu (iii). ■ 21 Beispielaufgabe 5 - Kolmogorov Methode Zeigen Sie, dass L = {0 n·⌈√n⌉ | n ∈ N} nicht regul¨ar ist. 22 Beispielaufgabe 5 - Kolmogorov Methode Widerspruchsannahme: Sei L regul¨ar. Wir betrachten L0m·⌈ √m⌉+1 = {y ∈ Σ∗ | 0 m·⌈√m⌉+1y ∈ L} Dann ist f ¨ur jedes m ∈ N das Wort y1 = 0 (m+1)·⌈√m+1⌉−(m·⌈√m⌉+1) das kanonisch erste Wort der Sprache L0m·⌈√m⌉+1. 23 Beispielaufgabe 5 - Kolmogorov Methode Nach Satz 3.1 existiert eine Konstante c, so dass gilt K(y1) ≤ ⌈log2(1 + 1)⌉ + c = 1 + c f ¨ur jedes m ∈ N. Da die L¨ange von |y1| |y1| = (m + 1) · ⌈√m + 1⌉ − (m · ⌈√m⌉ + 1) ≥ (m + 1) · ⌈√m⌉ − m · ⌈√m⌉ − 1 = ⌈√m⌉ − 1 m→∞ −→ ∞ beliebig gross werden kann, gibt es unendlich viele W ¨orter von dieser Form. Dies ist ein Widerspruch, da es nur endlich viele Programme der L¨ange maximal 1 + c geben kann. ■ 24 Nichtdeterministische Endliche Automaten Definition NEA Ein nichtdeterministischer endlicher Automat (NEA) ist ein Quintupel M = (Q, Σ, δ, q0, F). Dabei ist (i) Q eine endliche Menge, Zustandsmenge genannt, (ii) Σ ein Alphabet, Eingabealphabet genannt, (iii) q0 ∈ Q der Anfangszustand, (iv) F ⊆ Q die Menge der akzeptierenden Zust¨ande und (v) δ eine Funktion von Q × Σ nach P(Q), ¨Ubergangsfunktion genannt. Ein NEA kann zu einem Zustand q und einem gelesenen Zeichen a mehrere oder gar keinen Nachfolgezustand haben. 25 Konfigurationen f ¨ur NEAs Eine Konfiguration von M ist ein Tupel (q, w) ∈ Q × Σ∗. - ”M befindet sich in einer Konfiguration (q, w) ∈ Q × Σ∗, wenn M im Zustand q ist und noch das Suffix w eines Eingabewortes lesen soll.” - Die Konfiguration (q0, x) ∈ {q0} × Σ∗ ist die Startkonfiguration f ¨ur das Wort x. Ein Schritt von M ist eine Relation (auf Konfigurationen) M ⊆ (Q × Σ∗) × (Q × Σ∗), definiert durch (q, w) M (p, x) ⇐⇒ w = ax, a ∈ Σ und p ∈ δ(q, a) 26 Berechnungen f ¨ur NEAs Eine Berechnung von M ist eine endliche Folge C1, ..., Ck von Konfigurationen, so dass Ci M Ci+1 f ¨ur alle 1 ≤ i ≤ k. Eine Berechnung von M auf x ist eine Berechnung C = C0, ..., Cm, wobei C0 = (q0, x) und entweder Cm ∈ Q × {λ} oder Cm = (q, ay) f ¨ur ein a ∈ Σ, y ∈ Σ∗ und q ∈ Q, so dass δ(q, a) = ∅. Falls Cm ∈ F × {λ}, sagen wir, dass C eine akzeptierende Berechnung von M auf x ist, und dass M das Wort x akzeptiert. 27 Weitere Definitionen Die Relation M ∗ ist die reflexive und transitive H ¨ulle von M , genau wie bei einem EA. Wir definieren L(M) = {w ∈ Σ∗ | (q0, w) M ∗ (p, λ) f ¨ur ein p ∈ F} als die von M akzeptierte Sprache. Zu der ¨Ubergangsfunktion δ definieren wir die Funktion ˆδ : (Q × Σ∗) → P(Q) wie folgt: (i) ˆδ(q, λ) = {q} f ¨ur alle q ∈ Q (ii) ˆδ(q, wa) = ⋃ r∈ˆδ(q,w) δ(r, a) f ¨ur alle q ∈ Q, a ∈ Σ, w ∈ Σ∗. 28","libVersion":"0.3.2","langs":""}