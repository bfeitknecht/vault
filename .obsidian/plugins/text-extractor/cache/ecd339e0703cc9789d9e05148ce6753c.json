{"path":"sem3/EProg/PV/exams/theory/HS22.pdf","text":"Herbst 2022 252-0027 – Einführung in die Programmierung Departement Informatik ETH Zürich 3. Februar 2023 – Schriftliche Prüfung ID: 1260 Nachname: Vorname: Legi-Nummer: – – Sie dürfen diese Prüfung oder die Aufgaben für die Programmierprüfung erst öﬀnen nachdem die Aufsicht die Prüfung gestartet hat. Wenn Sie diese Dokumente vorher öﬀnen gilt dies als Täuschungsversuch. Mit Ihrer Unterschrift bestätigen Sie, dass Sie die hier aufgeführte Person sind, Sie die Hinweise zur Kenntnis genommen haben, Sie die Aufgaben selbständig gelöst haben, Sie Ihre eigene Lösung abgeben, Sie keine Kopie der Prüfung mitnehmen, und dass Sie alle technischen Probleme, gesund- heitlichen Probleme (die Ihre Leistungen in dieser Prüfung beeinträchtigten) und etwaige störende äussere Einﬂüsse gemeldet haben bzw. wissen, dass Sie diese melden sollen. Unterschrift: Hinweise 1. Öﬀnen Sie diese Prüfung und die Aufgabenstellung für die Programmierprüfung erst, wenn die Aufsicht den Beginn der Prüfung bekannt gibt. 2. Schreiben Sie zuerst Ihren Namen und Ihre Legi-Nummer auf die Vorderseite dieser Prüfung. Vergessen Sie nicht Ihre Unterschrift nach dem Ende der schriftlichen Prüfung. 3. Dieser Teil der Prüfung dauert 40 Minuten. Falls Sie sich durch irgendjemanden oder irgend- etwas gestört fühlen, melden Sie dies sofort einer Aufsichtsperson. 4. Die Prüfung hat 12 Seiten. Vergewissern Sie sich dass Ihr Exemplar vollständig ist. 5. In dieser Prüfung gibt es 40 Punkte. Benutzen Sie die Anzahl der Punkte als Hinweis, wie Sie Ihre Zeit einteilen können. Fehler bei der Bearbeitung einer Aufgabe haben keinen Einﬂuss auf die Punkte, die Sie für andere Aufgaben erhalten. Sie können die Aufgaben in beliebiger Reihenfolge lösen. 6. Lesen Sie die Aufgabenstellungen genau durch. 7. Tragen Sie Ihre Antwort(en) direkt in die Prüfungsbögen ein. Falls Sie mehr Platz brauchen, ist Ihre Antwort wahrscheinlich zu lang. 8. Benutzen Sie einen Stift (blau oder schwarz), der nicht ausradiert werden kann. Bitte schreiben Sie deutlich und leserlich! Wenn Sie etwas durchstreichen wollen, so machen Sie dies bitte klar und eindeutig. 9. Trennen Sie nicht die zusammengeheftete Prüfung. Mit losen Blättern riskieren Sie, ein Blatt zu verlieren. 10. Es ist wichtig, dass Ihre Antworten die Aufgaben klar und unzweideutig behandeln. Die Klarheit der Antworten beeinﬂusst Ihre Note. Eine fehlende Antwort wird als falsche Antwort bewertet. Wenn Sie Annahmen (über die in den Aufgaben aufgeführten hinaus) treﬀen, so geben Sie diese bitte an. 11. Wenn Sie zur Toilette müssen, melden Sie dies einer Aufsichtsperson durch Handzeichen. Es darf zur gleichen Zeit immer nur eine Person zur Toilette. 12. Wir beantworten keine inhaltlichen Fragen während der Prüfung. Kommentare zur Aufgabe schreiben Sie bitte auf das Aufgabenblatt. 13. Wenn die Aufsicht diesen Teil der Prüfung beendet, schliessen Sie bitte die Prüfung und schrei- ben nicht mehr in die Prüfung. Weiterarbeiten über die erlaubte Zeit gilt als Täu- schungsversuch. Bitte unterschreiben Sie die Prüfung auf der Vorderseite und legen Sie die Prüfung mit Ihrer Legitimationskarte (“Legi”) gut sichtbar auf Ihren Arbeitstisch. 14. Wir sammeln die Prüfung ein. Wichtig: stellen Sie unbedingt selbst sicher, dass Ihre Prüfung von einer Aufsichtsperson eingezogen wird. Stecken Sie keine Prüfung (auch keine leere) ein. Page 2 of 12 1260 ID: 1260 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 3 5 11 2 4 6 8 3 5 7 5 4 4 - - \u0006 Übertrag −− Total 40 Page 3 of 12 1260 Aufgabe 1 (3) Gegeben sei eine Methode main in einer Java Klasse. public static void main(String[] args) { /* body */ } Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ einge- fügt werden. Geben Sie für jede Anweisung an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile-Fehler”). Achten Sie auf die korrekte Formatierung der verschiedenen Typen, also z.B. 7.0 statt 7 für eine reelle Zahl (double). 1. System.out.println( 9 / 3 * 2 + 1 + \"\" + 2 * 3 + (4 * 3) % 3 ); ________________________ 2. System.out.println(7 > 6 && (3 + \">\" + 2) == \"3 > 2\" || 4 % 2 == 0 % 0); ________________________ 3. System.out.println(8 / 5 + 0.5 + 5 / 2 + (8 % 3) * 1.0); ________________________ Page 4 of 12 1260 Aufgabe 2 (4) Gegeben sei eine Java Klasse mit einer Methode bar(...), die mit verschiedenen Argumenten auf- gerufen wird. import java.util.Arrays; import java.util.ArrayList; import java.util.List; class J02_h22 { public static void main(String[] args) { List<Integer> in = Arrays.asList(5, 1, 7, 6); ArrayList<Integer> al = new ArrayList<Integer>(in); System.out.println(al); // [5, 1, 7, 6] bar(al); System.out.println(al); // bar(al); System.out.println(al); // bar(al); System.out.println(al); // } public static void bar(List<Integer> a) { List<Integer> x; x = a; if (x.get(0) >= x.get(1)) { x.remove(1); x.add(0, x.get(1)+1); } } } Bitte geben Sie rechts neben den println() Statements an, was das println() Statement an der Stelle ausgibt. Bitte geben Sie auch gegebenenfalls ausgegebene Klammern an. Um das Format zu demonstrieren haben wir die Ausgabe des ersten println() Statements bereits angegeben. Sollten Anweisungen nicht ausge- führt werden können, so markieren Sie bitte diese Anweisungen deutlich und schreiben rechts “Laufzeitfehler” (oder “Exception”); Sie brauchen den genauen Fehler bzw. die genaue Exception nicht angeben. Wenn ein Statement einen Laufzeitfehler generiert, dann gilt, dass dieses ignoriert wird, das heisst, die nachfolgenden Statements werden nicht beeinﬂusst und wie gewöhnlich ausgeführt. Page 5 of 12 1260 Aufgabe 3 (5) Gegeben ist eine Klasse S und drei Referenzvariablen s1, s2, und s3 mit Typ S. Die Werte von s1, s2, und s3 sind nicht null. X und Y sind int Werte. Beantworten Sie die folgenden Fragen. Zur Erinnerung: a.compareTo(b) < 0 heisst dass a vor b in der Ordnungsrelation ist. Markieren Sie Ihre Antwort in der Checkbox: 1. Es gilt: s1.compareTo(s2) == X s3.compareTo(s2) == X Folgt daraus s1 == s3 ? Ja □ Nein □ 2. Es gilt: s1.compareTo(s2) == Y s2.compareTo(s3) == 1 Folgt daraus s1.compareTo(s3) > 0 ? Ja □ Nein □ 3. Es gilt: s1.compareTo(s2) == Y und Y > 0 s2.compareTo(s3) == 1 Folgt daraus s1 >= s3 ? Ja □ Nein □ 4. Es gilt: s1.compareTo(s2) == Y und Y > 0 s2.compareTo(s3) == Y + 1 Folgt daraus s1.compareTo(s3) > 0 ? Ja □ Nein □ 5. Es gilt: s1.compareTo(s2) == Y und Y > 0 s2.compareTo(s3) == -Y Folgt daraus s1.compareTo(s3) < 0 ? Ja □ Nein □ Page 6 of 12 1260 Aufgabe 4 (4) Gegeben sind die Precondition und Postcondition für das folgende Programm public static double compute(int n) { // Precondition: n > 0 double h = 0.0; int c = 1; // Loop Invariante: while (c <= n) { h = h + (1.0/(double) c); c++; } // Postcondition: h == Í= :=1 1 : // oder: h == Summe(k=1, n, 1/k) d.h. Summe von 1/k fuer k=1, ..., n return h; } Geben Sie die Loop Invariante an. Loop Invariante: _______________________________ Page 7 of 12 1260 Aufgabe 5 (11) Gegeben seien diese Klassen und Interfaces in separaten Dateien (im default Package): class Arachnida { int a = 1; int g = 10; public int alter() { return a; } public int gewicht() { return g; } public String toString() { return \"A\"; } } class Scorpiones extends Arachnida { int f = 10; public int gewicht() { return g+2; } int futter() { return f; } public String toString() { return \"S\"; } } interface TierDesJahres { public int alter(); public int gewicht(); } class Buthidae extends Scorpiones implements TierDesJahres { public int alter() { return a; } public String toString() { return \"B\"; } } class Tetrapulmonata extends Arachnida implements TierDesJahres { int f = 100; public int gewicht() { return g+3; } public String toString() { return \"T\"; } } class Uropygi extends Tetrapulmonata { int delta() { return 1000; } int futter() { return f + delta(); } public String toString() { return \"U\"; } } class Hubbardiinae extends Uropygi { Hubbardiinae() { f = 1000; } int delta() { return 10000; } int futter() { return f + super.futter(); } public String toString() { return \"H\"; } } In einer Klasse Explore in dem selben Package beﬁndet sich die Methode main. public static void main (String[] args) { /* Body */ } Page 8 of 12 1260 Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden. Geben Sie für jede Anweisungsfolge an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile- Fehler”). Falls ein gedruckter String Leerzeichen enthält, dann ist die genaue Anzahl/Weite der Leerzeichen unwichtig. 1. TierDesJahres tier1 = new Buthidae(); System.out.println(tier1 + \" \" + tier1.alter()); ________________________ 2. TierDesJahres tier2 = new Arachnida(); System.out.println(tier2 + \" \" + tier2.alter()); ________________________ 3. Arachnida tier3 = new Uropygi(); System.out.println(tier3 + \" \" +tier3.delta()); ________________________ 4. Scorpiones tier4 = new Buthidae(); System.out.println(tier4 + \" \" + tier4.futter()); ________________________ 5. TierDesJahres tier5 = new Hubbardiinae(); System.out.println(((Tetrapulmonata) tier5) + tier5.futter()); ________________________ 6. TierDesJahres tier6 = new Hubbardiinae(); System.out.println(tier6 + \" \" + ((Uropygi)tier6).futter()); ________________________ 7. TierDesJahres tier7 = new Uropygi(); Hubbardiinae tier8 = (Hubbardiinae) tier7; System.out.println(tier8 + \" \" + tier8.alter()); ________________________ 8. Hubbardiinae tier9 = new Hubbardiinae(); System.out.println(tier 7 + \" \" + tier9.super.futter()); ________________________ Page 9 of 12 1260 Aufgabe 6 (8) Gegeben sei in Abbildung 1 die EBNF-Beschreibung von boolean_expression. Für die EBNF-Beschreibung von identiﬁer_or_literal gelten die Regeln für Bezeichner (identiﬁers) und Werte (literal values) in Java. Die EBNF Beschreibung von boolean_expression unterscheidet sich aber sonst von den in Java zulässigen Ausdrücken. arithmetic_op ⇐ + | * | - | / comparison_op ⇐ > | >= | < | <= boolean_op ⇐ && | || arithmetic_expression ⇐ ( arithmetic_expression ) | identiﬁer_or_literal arithmetic_op identiﬁer_or_literal | identiﬁer_or_literal boolean_term ⇐ boolean_term comparison_op arithmetic_expression | arithmetic_expression boolean_expression ⇐ boolean_expression boolean_op boolean_term | boolean_term Abbildung 1: EBNF-Beschreibung von boolean_expression Geben Sie für jeden folgenden Ausdruck an, ob er nach der EBNF-Beschreibung von boolean_expression in Abbildung 1 gültig ist. (Tipp: alle Bezeichner und Werte in diesen Ausdrücken (d.h., identiﬁer_or_literal in Abbildung 1) sind korrekt.) Ausdruck Gültig Ungültig Ausdruck Gültig Ungültig x = a * b ( (a > b) && (x > y) ) x > 8 || x == 8 (a > 1 || b > 0) a * (b + c) > x true a > b > c x < y > z a && b || c a+b > c && x+y Page 10 of 12 1260 Aufgabe 7 (5) Bitte geben Sie für die folgenden Java Programmsegmente die schwächste Vorbedingung (weakest precondition) WP an. Bitte geben Sie die Precondition als Java Expression an. Alle Variablen sind vom Typ int und es gibt keinen Over/Underﬂow. 1. WP: { } x = z; if (x > 0) { a = x * x + 1; } else { a = x * (x + 1); } Q: { a > 0 } 2. WP: { } p = 2 * q + 1; t = p + 1; Q: { t > 15 } Wir wünschen Ihnen alles Gute für den Rest der Prüfungssession und das nächste Semester. Ihr “Einführung in die Programmierung”-Team. Page 11 of 12 1260 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 3 5 11 2 4 6 8 3 5 7 5 4 4 - - \u0006 Übertrag −− Total 40 Page 12 of 12","libVersion":"0.5.0","langs":""}