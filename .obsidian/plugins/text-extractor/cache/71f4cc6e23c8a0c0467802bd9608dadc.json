{"path":"sem4/CN/UE/e/CN-u11-e.pdf","text":"Exercise 11: Algorithms, Linear Programming, and Bloom Filters Question 1: Max flow in data centers Figure 1 shows a network of 4 data centers. The data centers can generate and receive the following amounts of traffic: • DC1: 3Gbps • DC2: 2Gbps • DC3: 2Gbps • DC4: 5Gbps Every data center can send arbitrary traffic to any other data center in the network. For communication, a pair of data centers use the shortest path only. If there are paths of the same length, a pair of data centers will pick only one of them. The links are assumed to be full duplex link; i.e., if their capacity is c, then a traffic rate of c can be sent simultaneously in both directions. What should be the capacity of the red link in order to accommodate any possible traffic matrix? How to solve the same problem for an arbitrary network? Question 2: Shortest-path routing You are an ISP that operates the Internet2 network in the US (shown in Fig. 3). Would you use shortest-path routing to route the traffic? Explain your answer. 1 Question 3: Graph Algorithms Consider a transmission between A and B within the network depicted in the Figure below. Question 3.1 Latency The numbers on the links, fi, correspond to the propagation delay of that respective link in ms. Compute the path with lowest latency from A to B neglecting all other delays. Which algorithm can you use for this problem? 2 Network Topology with propagation delay of links, fi Question 3.2 Bandwidth Consider the same figure as in 4.1. Now the numbers on the links, fi, correspond to the available bandwidth of that respective link in Mbps. Compute the path with highest possible bandwidth from A to B. Describe an algorithm that can solve this problem (in words or in pseudocode). Question 3.3 Reliability Consider the same figure as in 4.1. Now the numbers on the links, fi, correspond to the probability that the respective link may fail in percent; for example, the link AF has a failure probability of 3%. We assume link failures to be independent from each other. How could you find the most reliable path from A to B? Hint: Define appropriate weights based on the fi and use Dijkstra’s algorithm. Which link weights are additive and usable for Dijkstra? Question 4: True or False For each of the following statements indicate for each if it is true or false. 1. BFS is never a viable algorithm choice to solve the shortest path problem. 2. The shortest widest path (SWP) weight criteria fulfills the isotonicity property. 3. The widest shortest path (WSP) weight criteria fulfills the isotonicity property. 4. The Ford-Fulkerson Algorithm can be used to find out how reliable a network is. 3 Question 5: Linear Programming In this question, let’s look at the LP formulation of the max-flow linear program presented in the lecture. Variables: • Flow S → T : f • Flow on edge u → v : fuv Objective: • maximize f Notation: • F (v) = ∑ w∈E+(v) fvw − ∑ u∈E−(v) fuv Constraints: 1. Edge capacities: ∀u → v ∈ E : • 0 ≤ fuv • fuv ≤ cuv 2. Flow from S: f = F (S) 3. Flow conservation: ∀v ∈ V \\ {S, T } : F (v) = 0 Question 5.1 Canonical form Write the max-flow linear program above in the canonical form of an LP. In particular, specify: • the vector of variables x = (x1, ..., xn) T , x ≥ 0 • the maximization coefficients for the objective function c = (c1, ..., cn)T , where Θ = cT · x is maximized • the unequality constraints in the form of m × n matrix A and the vector b = (b1, ..., bm) T , where A · x ≤ b Question 5.2 Implementation (optional) Implement the max-flow linear program by yourself (e.g., using python’s scipy library) and verify that it indeed finds the correct solution for the maximum bandwidth of the network presented in question 3.2. You can use the maxflow-template.py to get started. The relevant scipy docu- mentation can be found here. 4 Question 6: Bloom Filters The memory footprint of Bloom filters is so small that they can fit into devices with very limited memory like network switches or network cards (NIC). Give 2 potential applications for Bloom filters on these platforms. Question 7: Bloom Filter duplicate detection In the context of network monitoring, Bloom filters can be used to quickly find duplicates. Our duplicate detection system is comprised of two filter, B0 and B1. We divide the time in intervals ∆, which must be greater than the maximum propagation time of packets δ. We ignore time sync errors for simplicity. At the beginning of each interval, one of the two filters is reset and is filled with new packets, while the other one is frozen. For each new packet, both filters are checked for duplicates. Question 7.1 What kind of answers does a Bloom filter give? Question 7.2 Why does ∆ need to be bigger than δ? What happens if a packet that is older than the two periods is received? Question 7.3 Assume the k hash functions are not correlated and the probabilities of single bit values are not correlated either. What is the probability of a false positive after inserting n elements into a bloom filter of size m? 5","libVersion":"0.5.0","langs":""}