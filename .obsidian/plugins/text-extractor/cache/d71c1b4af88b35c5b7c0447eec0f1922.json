{"path":"sem3/EProg/VRL/extra/slides/EProg-slides-w01.pdf","text":"252-0027 Einführung in die Programmierung 1. EBNF Manuela Fischer, Malte Schwerhoff Departement Informatik ETH Zürich 1. EBNF 1.1 Motivation 1.2 Definition 1.3 Kontrollformen 1.4 Ableitungen 1.5 Graphische Darstellung von EBNF-Beschreibungen 1.6 Kontrollformen II: Rekursion 2 Genaue Beschreibungen ▪ wichtiges Thema für Informatik ▪ Programmiersprachen ▪ Werte ▪ Input ▪ … 3 Beispiel ▪ Format der eingelesenen Körpergrösse ▪ Einheit ▪ cm (166), m (1.66) oder mm (1660)? ▪ Genauigkeit ▪ 1660 mm, 1663 mm, 1700 mm? ▪ Darstellung ▪ 1.66E+03 mm, 1660 mm, 1’660 mm 4 Erlaubte Werte (in einem Format) ▪ Sind eine Sprache (Menge von erlaubten Zeichenfolgen) ▪ Brauchen präzise und verständliche Beschreibung ▪ Beschreibung mit Text ▪ Missverständnisse… ▪ Beschreibung mit Formalismus (Menge von Regeln) ▪ Präzise ▪ Erlaubt automatische Prüfung 5 EBNF (Extended Backus Naur/Normal Form) ▪ Formalismus zur Beschreibung der Syntax einer Sprache ▪ nur Form/Struktur, nichts über die Bedeutung ▪ Automatische Prüfung möglich ▪ Viele Anwendungsgebiete ▪ Beschreibung von Programmiersprachen ▪ Beschreibung von Inputs ▪ Food for thought für später (3. Semester): Welche Sprachen sind mit EBNF beschreibbar? 6 Wieso EBNF in EProg? ▪ Wichtig für weiterführende Vorlesungen ▪ Theoretische Informatik, Compiler Design, ... ▪ Schult formales und präzises Denken ▪ Sehr wichtig fürs Programmieren und fürs Informatik-Studium! ▪ Programmieren im Kleinen ▪ Programmieren (in Java) Erstellen einer EBNF-Beschreibung ▪ ähnliche Konzepte ▪ Gibt Ihnen Zeit, Java zu installieren ▪ Neu für (fast) alle, auch für die mit Programmierkenntnissen 7 1. EBNF 1.1 Motivation 1.2 Definition 1.3 Kontrollformen 1.4 Ableitungen 1.5 Graphische Darstellung von EBNF-Beschreibungen 1.6 Kontrollformen II: Rekursion 8 Definition EBNF-Beschreibung ▪ EBNF-Beschreibung («EBNF description») ▪ Formale Beschreibung der Struktur einer Sprache ▪ Besteht aus Menge von EBNF-Regeln ▪ Reihenfolge unwichtig ▪ gibt an, welche Wörter (Zeichenfolgen) erlaubt sind ▪ Erlaubt, falls nach Regeln gebildet (wird später erklärt! ▪ EBNF-Regel («EBNF rule»): 9 LHS ⟵ RHS Definition EBNF-Regel Form ▪ linke Seite («left-hand side») LHS ▪ Name der EBNF-Regel in eckigen Klammern: <name> ▪ Beliebiger Name möglich; deskriptive und relevante Namen sinnvoll! ▪ Jeder Name darf nur einmal vorkommen auf linker Seite! ▪ Pfeil ⟵ ausgesprochen als «ist definiert als» ▪ rechte Seite («right-hand side») RHS 10 LHS ⟵ RHS Rechte Seite ▪ Definition (genaue Beschreibung) für den Namen LHS ▪ Beschreibt die Menge der (erlaubten) Wörter ▪ kann bestehen aus 1. Zeichen (auch Literal oder Terminal genannt) 2. Namen von EBNF-Regeln (auch Nonterminal genannt) 3. Kombinationen der vier Kontrollformen («control forms») ▪ Aufreihung («sequence») ▪ Entscheidung («decision»): Auswahl und Option ▪ Wiederholung («repetition») ▪ Rekursion («recursion») 11 Ähnlich auch in Java 1. Zeichen als RHS 12 <digit_zero> ⟵ 0 Zeichen Name Regel <digit_zero> lässt nur genau dieses Zeichen 0 als Wort zu. 2. Namen als RHS 13 <digit_zero> ⟵ 0 <number_zero> ⟵ <digit_zero> Name EBNF-RegelName Regel <number_zero> lässt genau die durch <digit_zero> beschriebenen Wörter zu. 1. EBNF 1.3 Kontrollformen 1.3.1 Aufreihung 1.3.2 Entscheidung 1.3.3 Wiederholung 14 Aufreihung («sequence») ▪ Folge von beliebig vielen Elementen ▪ von links nach rechts gelesen: Reihenfolge ist wichtig ▪ Jedes Element muss gültige RHS sein ▪ Abstand für Übersichtlichkeit; kein echtes Leerzeichen 15 E1 E2 E3 Beispiel Regeln für Beschreibung des Vorlesungssaals 1: «D28» 16 <letter_D> ⟵ D <digit_2> ⟵ 2 <digit_8> ⟵ 8 <room1> ⟵ <letter_D> <digit_2> <digit_8> Aufreihung<room1> ⟵ D 2 8 Mehrere EBNFs, gleiche Sprache 17 <letter_D> ⟵ D <digit_2> ⟵ 2 <digit_8> ⟵ 8 <room1> ⟵ <letter_D> <digit_2> <digit_8> <room1> ⟵ D 2 8 EBNF 1 EBNF 2 <room1> ⟵ <letter_D> 2 <digit_8> <letter_D> ⟵ D <digit_8> ⟵ 8 EBNF 3 Durch EBNF definierte Sprache 18 ▪ Anwenden einer Regel: Ersetzen des Namens durch RHS der Regel ▪ EBNF hat eine spezielle Regel: Startregel («entry rule») ▪ Konvention: letzte Regel ist die Startregel (falls nicht anders erwähnt) ▪ Sprache der EBNF (informell): Menge aller Zeichenfolgen (ohne Namen!), die ausgehend von der Startregel durch wiederholtes Anwenden der EBNF-Regeln erstellt werden können <letter_D> ⟵ D <digit_8> ⟵ 8 <room1> ⟵ <letter_D> 2 <digit_8>Startregel Sprache: {D28} 1. EBNF 1.3 Kontrollformen 1.3.1 Aufreihung 1.3.2 Entscheidung 1.3.3 Wiederholung 19 ▪ Auswahl («selection») ▪ Option («option») Entscheidung («decision») 20 E1 | E2 | E3 [ E ] Auswahl («selection») ▪ Menge beliebig vieler Alternativen ▪ Durch senkrechten Strich («stroke») | getrennt ▪ Alternative: gültige RHS ▪ Genau eine der Alternativen wird gewählt 21 E1 | E2 | E3 Beispiele 22 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <room1> ⟵ D 2 8 <room2> ⟵ E 1 2 <room> ⟵ <room1> | <room2> Klammern ▪ Nicht eindeutig ▪ Variante 1: \"A oder BC\" ▪ Variante 2: \"AC oder BC\" ▪ Klammern schaffen Klarheit ▪ A | (B C) oder (A | B) C ▪ Erscheinen nicht in resultierenden Zeichenkette (Wort) 23 A | B C Option («option») ▪ Optionales Element ▪ In eckigen Klammern («square brackets») [ ] ▪ Element muss gültige RHS sein ▪ Kann gewählt werden, muss aber nicht 24 [ E ] Beispiele 25 <initials> ⟵ M [ H ] S <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sign> ⟵ + | - <number> ⟵ [ <sign> ] <digit> Option und Auswahl ▪ Option und Auswahl werden oft kombiniert ▪ Äquivalent zu E1 | E2 | 𝛆 ▪ 𝛆 wird «epsilon» ausgesprochen ▪ 𝛆 entspricht der leeren Zeichenfolge ▪ 𝛆 erscheint nicht im Wort 26 [ E1 | E2 ] 1. EBNF 1.3 Kontrollformen 1.3.1 Aufreihung 1.3.2 Entscheidung 1.3.3 Wiederholung 27 Wiederholung («repetition») 28 ▪ Wiederholung eines Elements ▪ Element muss gültige RHS sein ▪ 0, 1, 2, … Wiederholungen ▪ In geschweiften Klammern («curly braces») { } { E } Beispiel: Ganze Zahlen 29 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sequence> ⟵ <digit> { <digit> } <sign> ⟵ + | - <integer> ⟵ [ <sign> ] <sequence> <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } Beispiel: Ganze Zahlen 30 ▪ Umgangssprachliche Beschreibung ▪ <digit> ist definiert als eines der Zeichen 0, …, 9 ▪ <integer> ist definiert als eine Folge von 3 Elementen ▪ ein optionales Vorzeichen (eine der Alternativen + und -) ▪ ein <digit> ▪ Wiederholung von 0 oder mehr <digit>s <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } Beispiel: Kanonische Zahlen ▪ EBNF-Beschreibung für kanonische Zahlen, d.h. Zahlen, die keine führenden Nullen haben ▪ 007 ist illegal, 7 ist legal 31 <zero> ⟵ 0 <nonzero> ⟵ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <digit> ⟵ <zero> | <nonzero> <canonic_int> ⟵ [ + | - ] <nonzero> { <digit> } Sonst 0 nicht legal! ( ) | <zero> Beispiel: Zahlen mit Hochkomma 32 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <prefix> ⟵ <digit> | <digit> <digit> | <digit> <digit> <digit> <integer> ⟵ [ + | - ] <prefix> { ’ <digit> <digit> <digit>} ▪ 1’234 234 1’123’123 12’123’123 123’123 Sonderzeichen 33 ▪ Besondere Zeichen in EBNF-Beschreibungen ▪ < > ⟵ | [ ] { } ( ) und Leerzeichen ▪ Treten nicht in resultierenden Wörtern auf ▪ Falls als Zeichen in Wort erwünscht, verwenden wir Rahmen: ▪ } für Zeichen } ▪ ˽ oder für Leerschlag Beispiel: Zahlenmengen ▪ EBNF-Beschreibung für Zahlenmengen ▪ beliebige Anzahl von Zahlen separiert durch Komma zwischen { } ▪ { 1 } {3, 2} {3, 2, 3} { } ▪ Mehrfachnennungen und Reihenfolge unwichtig ▪ Reihenfolge der Zahlen kann nicht erzwungen werden! 34 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } <integer_list> ⟵ <integer> { , <integer> } <integer_set> ⟵ { [ <integer_list> ] } 1. EBNF 1.1 Motivation 1.2 Definition 1.3 Kontrollformen 1.4 Ableitungen 1.5 Graphische Darstellung von EBNF-Beschreibungen 1.6 Kontrollformen II: Rekursion 35 Ist ein Wort (Zeichenfolge) legal? 36 ▪ Wort ist legal falls ▪ Informell: alle Zeichen mit den Elementen der Regel übereinstimmen ▪ Formal: es eine Ableitung der Zeichenfolge gibt ▪ Ableitung («derivation»): Sequenz von Ableitungsschritten ▪ startend mit Startregel ▪ endend mit Zeichenfolge (ohne Nichtterminale) ▪ Ableitungsschritt («derivation step») ▪ Regel: Namen (LHS) durch Definition (RHS) ersetzen ▪ Auswahl: eine Alternative wählen ▪ Option: entscheiden, ob optionales Element gewählt wird oder nicht ▪ Bestimmung der Anzahl Wiederholungen Beispiel 37 ▪ ▪ Legale Zeichenfolgen: 4, +9, -09, -0, +, -, … ▪ Illegale Zeichenfolgen: +-6, 7-, +-,… <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <number> ⟵ [ + | - ] { <digit> } Darstellungsformen einer Ableitung 38 ▪ Ableitungstabelle ▪ Erste Zeile ist Startregel ▪ Letzte Zeile ist Zeichenfolge ▪ Übergang zwischen zwei Zeilen entspricht Ableitungsschritt ▪ Ableitungsbaum ▪ Wurzel ist Namen der Startregel ▪ Blätter sind Zeichen ▪ Verbindungen stehen für einen Ableitungsschritt Beispiel: Ableitung von -4 als Tabelle 39 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sign> ⟵ + | - <number> ⟵ [ <sign> ] <digit> (R1) (R2) (R3) <number> ⟵ [ <sign> ] <digit> (R3) ⟵ <sign> <digit> Option wählen ⟵ (+ | -) <digit> (R2) ⟵ - <digit> Auswahl - wählen ⟵ - ( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ) (R1) ⟵ - 4 Auswahl 4 wählen Begründungen Beispiel: Ableitung von -4 als Baum 40 (R1) (R2) (R3)<number> [<sign>] <sign> + | - - <digit> 0|1|2|3|4|5|6|7|8|9 4 (R3) Option (R1) (R2) Auswahl Auswahl <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sign> ⟵ + | - <number> ⟵ [ <sign> ] <digit> Beispiel: Ableitung von 6 als Tabelle 41 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sign> ⟵ + | - <number> ⟵ [ <sign> ] <digit> <number> ⟵ [ <sign> ] <digit> (R3) ⟵ <digit> Option nicht wählen ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 (R1) ⟵ 6 Auswahl 6 wählen (R1) (R2) (R3) Beispiel: Ableitung von 6 als Baum 42 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <sign> ⟵ + | - <number> ⟵ [ <sign> ] <digit> (R1) (R2) (R3) <number> [ <sign> ] 𝛆 <digit> 0|1|2|3|4|5|6|7|8|9 6 (R3) Option (R1) Auswahl Beispiel: Ableitung von 284 als Baum 43 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } <integer> [ + | - ] 𝛆 <digit> 0|1|2|3|4|5|6|7|8|9 2 { <digit> } <digit> 0|1|2|3|4|5|6|7|8|9 8 <digit> 0|1|2|3|4|5|6|7|8|9 4 Beispiel: Ableitungsversuch für A15 44 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } <integer> [ + | - ] 𝛆 <digit> 0|1|2|3|4|5|6|7|8|9 ????? { <digit> } ????? 45 <integer_set> { [ <integer_list> ] <integer_list> { , <integer> } } <integer>5 , , <integer> <integer> -2 11 <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } <integer_list> ⟵ <integer> { , <integer> } <integer_set> ⟵ { [ <integer_list> ] } Ableitung von {5, -2, 11} Äquivalenz von EBNF-Beschreibungen 46 ▪ Sprache der EBNF: Menge ihrer legalen Zeichenfolgen ▪ Zwei EBNF-Beschreibungen 𝐵1 und 𝐵2 sind äquivalent falls ihre Sprachen gleich sind: ▪ Zeichenfolge legal für 𝐵1 ⇔ legal für 𝐵2 ▪ Zeichenfolge illegal für 𝐵1 ⇔ illegal für 𝐵2 ▪ Anzahl und Namen der Regeln irrelevant für Äquivalenz Syntax versus Semantik 47 ▪ Syntax: Form/Struktur ▪ Wird von EBNF-Formulierung beschrieben ▪ Semantik («semantics»): Bedeutung/Interpretation ▪ Falls nicht legal (falsche Syntax), dann keine Bedeutung (undefiniert) ▪ Zwei wichtige Fragen zur Semantik: ▪ Können unterschiedliche Zeichenfolgen die gleiche Bedeutung haben? ▪ «Herr Wirth», «Professor Wirth» und «Niklaus Wirth» meinen die gleiche Person ▪ Kann eine Zeichenfolge mehrere (verschiedene) Bedeutungen haben? ▪ «nächste Vorlesung» ist abhängig vom aktuellen Datum Beispiele Semantik 48 ▪ <integer>-EBNF ▪ Bedeutung ist der Wert der Zahl ▪ Unterschiedliche Zeichenfolgen können gleiche Bedeutung haben ▪ 1 und +1 ▪ 0, +0 und -0 ▪ 0012 und 12? Je nachdem… (z.B. Mathematik vs. PIN-Code) ▪ <integer_set>-EBNF ▪ Bedeutung ist mathematische Menge ▪ Unterschiedliche Darstellungen mit gleicher Bedeutung ▪ {1, 2, 3}, {3, 2, 1} und {1, 1, 1, 2, 2, 2, 3, 3, 3} 1. EBNF 1.1 Motivation 1.2 Definition 1.3 Kontrollformen 1.4 Ableitungen 1.5 Graphische Darstellung von EBNF-Beschreibungen 1.6 Kontrollformen II: Rekursion 49 Graphische Darstellung von EBNF-Regeln 50 ▪ EBNF-Beschreibung: Menge von Syntax-Graphen ▪ Ein Syntax-Graph für jede Regel ▪ gültige Zeichenfolge: Pfad durch Graph von links nach rechts ▪ Substitution: Syntax-Graphen in andere einsetzen ▪ Interne Namen verschwinden ▪ Entspricht einem Anwenden der Regel Graphische Darstellung von EBNF-Regeln 51 ▪ Aufreihung ▪ Auswahl CBAA B C A | B | C A B C Graphische Darstellung von EBNF-Regeln 52 ▪ Option ▪ Wiederholung [ A ] A { A } A Beispiel 53 0 1 2 3 4 5 6 7 8 9 <digit> + − <integer> <digit> <digit> <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <integer> ⟵ [ + | - ] <digit> { <digit> } Beispiel 54 <integer> ⟵ [ + | - ] ( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ) { 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9} 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 + − <integer> a) c) b) Welche Wörter sind legal für Graph? 55 A B A B A B C 1. EBNF 1.1 Motivation 1.2 Definition 1.3 Kontrollformen 1.4 Ableitungen 1.5 Graphische Darstellung von EBNF-Beschreibungen 1.6 Kontrollformen II: Rekursion 56 Eine unendliche Geschichte mit Rekursion Es war einmal ein Mann. Der hatte einen hohlen Zahn. In diesem hohlen Zahn befand sich eine Schachtel. In der Schachtel war ein Brief. In diesem Brief stand: Es war einmal ein Mann. Der hatte einen hohlen Zahn. In diesem hohlen Zahn befand sich eine Schachtel. In der Schachtel war ein Brief. In diesem Brief stand: ... 57 <paragraph> <endless_story> ⟵ <paragraph> <endless_story> ▪ Name der EBNF-Regel auch auf rechten Seite ▪ Welche Zeichenfolgen sind gültig? ▪ Keine! Immer ein Nichtterminal auf rechten Seite! ▪ Sinnvolle/endliche Rekursion braucht Abbruchsoption ▪ Es muss (mindestens) einen Weg geben, <endless_story> durch eine RHS ohne diesen Namen zu ersetzen ▪ Optionaler Name auf rechter Seite Rekursion mit EBNF 58 <endless_story> ⟵ <paragraph> <endless_story> <endless_story> ⟵ <paragraph> [ <endless_story> ] Beliebig lange Geschichte mit Rekursion 59 <endless_story> ⟵ <paragraph> [ <endless_story> ] ⟵ ⟵ ⟵ ⟵ ⟵ ⟵ ... ▪ Direkte Rekursion («direct recursion»): Name der Regel auf RHS ▪ Indirekte Rekursion («indirect recursion»): Folge von Regeln 𝑅1, … , 𝑅𝑘: ▪ 𝑅𝑖+1 erscheint auf der rechten Seite von 𝑅𝑖 für 1 ≤ 𝑖 ≤ 𝑘 − 1 und ▪ 𝑅1 erscheint auf der rechten Seite von 𝑅𝑘 ▪ EBNF-Beschreibung ist rekursiv, falls sie rekursive Regel hat Rekursion 60 <A> ⟵ a | [ <A> ] <A> ⟵ a | <B> <B> ⟵ [ <A> ] Beispiel: natürliche Zahlen 61 <positive_integer> ⟵ <digit> [ <positive_integer> ] ⟵ ⟵ ⟵ ⟵ ⟵ ⟵ ... Beispiel: Ableitungstabelle von “AAB” 62 <r> ⟵ B | ( A <r> ) <r> ⟵ B | ( A <r> ) Regel ⟵ A <r> Auswahl (A <r>) ⟵ A ( B | ( A <r> ) ) Regel ⟵ A A <r> Auswahl (A <r>) ⟵ A A ( B | ( A <r>) ) Regel ⟵ A A B Auswahl (B) Beispiel: Ableitungbaum von ”AAB” 63 <r> ⟵ B | ( A <r> ) <r> B | ( A < r> ) A <r> B | ( A < r> ) A <r> B | ( A < r> ) B Abgekürzt: Auswahl und Aufreihung kombiniert ▪ Viele Probleme haben kurze Lösung mit und ohne Rekursion ▪ Natürliche Zahlen ▪ Unendliche Geschichte Rekursion versus Wiederholung 64 <positive_int> ⟵ <digit> [ <positive_int> ] <positive_int> ⟵ <digit> { <digit> } <endless_story> ⟵ <paragraph> [ <endless_story> ] <endless_story> ⟵ <paragraph> { <paragraph> } ▪ EBNF-Beschreibung für die Sprache 𝐴 𝑛𝐵𝑛 𝑛 ∈ ℕ } ▪ Mit Rekursion ▪ Ohne Rekursion Rekursion versus Wiederholung 65 <equalAB> ⟵ [ A <equalAB> B ] <equalAB> ⟵ { A } { B } <equalAB> ⟵ { A B } ? ABBB ABAB ▪ Bei EBNF: Rekursion mächtiger ▪ Es gibt Sprachen, die nur mit Rekursion beschrieben werden können! ▪ Alle Sprachen, die mit Wiederholung beschrieben werden können, können auch mit Rekursion beschrieben werden. ▪ Nebenbemerkung: Bei Programmiersprachen gleich mächtig! ▪ Jede Rekursion kann durch Wiederholung(en) ausgedrückt werden und umgekehrt! ▪ Manchmal eine Formulierung einfacher/eleganter Rekursion versus Wiederholung 66 Geschichte von EBNF ▪ Zuerst gabs nur BNF… ▪ Aufreihung, Auswahl, Rekursion ▪ …dann wurde sie zur EBNF ▪ Niklaus Wirth hat Option und Wiederholung hinzugefügt ▪ Nicht essentiell ▪ Einfachere Lesbarkeit 67 Beispiel: <integer> mit BNF statt EBNF 68 <sign> ⟵ + | - <digit> ⟵ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 <digits> ⟵ <digit> | <digit> <digits> <integer> ⟵ ( ε | <sign> ) <digits> Food for thought: Zeichen | für Auswahl nicht nötig. Was stattdessen?","libVersion":"0.5.0","langs":""}