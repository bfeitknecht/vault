{"path":"sem2/PProg/UE/s/PProg-u05-s.pdf","text":"Parallel Programming Assignment 5: Divide and Conquer Spring Semester 2024 Assigned on: 20.03.2024 Due by: (Wednesday Exercise) 25.03.2024 (Friday Exercise) 27.03.2024 Task 2 – Amdahl’s and Gustafson’s Law Assuming a program consists of 50% non-parallelizable code. a) Compute the speed-up when using 2 and 4 processors according to Amdahl’s law. Answer: Amdahl’s law says: Sp ≤ Wser + Wpar Wser + Wpar p = 1 f + 1−f p Therefore we have S2 ≤ 1 1 2 + 1 4 = 4 3 ≈ 1.33 and S4 ≤ 1 1 2 + 1 8 = 8 5 =≈ 1.6 b) Now assume that the parallel work per processor is fixed. Compute the speed-up when using 2 and 4 processors according to Gustafson’s law. Answer: Gustafson’s Law says: Sp = p − f (p − 1) So we have S2 = 2 − 1 2 (2 − 1) = 3 2 ≈ 1.5 and S4 = 4 − 1 2 (4 − 1) = 5 2 ≈ 2.5 c) Explain why both speed-up results are different. Answer: Amdahl’s law sees the percentage of non-parallelizable code as a fixed limit for the speedup. So even if we had an infinite amount of processors, according to Amdahl’s law, the speedup would never be greater than 2. On the other hand Gustafson’s law assumes that the parallel part of the program increases with the problem size and the sequential part stays fixed. A more formal explanation:* The fundamental assumption of Amdahl’s law is that the sequential part of the executable work W is given by a fixed ratio f of the overall work W provided: Ws = W · f , Wp = W · (1 − f ). Assuming it would take time T to process W on a single core, we compute the time required to process work Wp with p processors as Tp = T · f + T · (1 − f )/p. Thus T1/Tp = 1 f +(1−f )/p The fundamental assumption of Gustafson’s law is that the sequential part of the executable work W is given by a fixed ratio f of the work W before the work size is increased to Wp = W · p when p processors are available: Ws = W · f , Wp = W · p · (1 − f ). Assuming it would take time T to process W on a single core, we compute the time required to process work Wp with p processors as Tp = T · f + T · p · (1 − f )/p = T while with only one processor we get T1 = T · f + T · (1 − f ) · p, thus T1/Tp = f + (1 − f ) · p. *For the following arguments, we assume that, homogeneously over all processors, the time T [e.g. in seconds] to process some work W [e.g. in instructions] is proportional to W . Moreover, we assume parallelism without overheads. 2 Task 3 – Amdahl’s and Gustafson’s Law II a) The analysis of a program has shown a speedup of 3 when running on 4 cores. What is the serial fraction according to Gustafson’s law? Answer: Gustafson’s Law: Sp = p − f (p − 1) Sp = p − f (p − 1) 3 = 4 − 3f 3f = 4 − 3 f = 1 3 b) The analysis of a program has shown a speedup of 3 when running on 4 cores. What is the serial fraction according to Amdahl’s law (assuming best possible speedup)? Answer: Amdahl’s Law: Sp ≤ 1 f + 1−f p Sp ≤ 1 f + 1−f p 3 = 1 f + 1−f 4 3 = 1 3f +1 4 3 = 1 3f +1 4 3 = 4 3f + 1 9f + 3 = 4 9f = 1 f = 1 9 3 Task 4 – Task graph Assuming you want add eight numbers, then two options to do this are 1 + 2 ︸ ︷︷ ︸ + +3 ︸ ︷︷ ︸ + +4 ︸ ︷︷ ︸ + +5 ︸ ︷︷ ︸ + +6 ︸ ︷︷ ︸ + +7 ︸ ︷︷ ︸ + +8 ︸ ︷︷ ︸ + and 1 + 2 ︸ ︷︷ ︸ + + 3 + 4 ︸ ︷︷ ︸ + ︸ ︷︷ ︸ + + 5 + 6 ︸ ︷︷ ︸ + + 7 + 8 ︸ ︷︷ ︸ + ︸ ︷︷ ︸ + ︸ ︷︷ ︸ + a) Given those two variants, determine the length of the critical path for both computations. Answer: In the first version we always have to wait for the previous addition to finish, before we can start the following one. This causes us to have eight operations that can not be executed in parallel, which form the critical path. In the second version we do recursive addition with a cut-off of one. We finish the whole task after 7 levels (including joins not shown in the figure) which is the length of the critical path. b) For a sequence of length n, determine the length of the critical path using the approaches from above. Answer: In the first version we add all the numbers in a serial fashion - therefore the length of the critical path is equal to the length of the set of numbers. n In the second version we do as many independent additions in parallel as possible resulting in a tree structure for the task graph (including joins). The critical path is equal to the height of this tree which is O(⌈log2(n)⌉ ) 4","libVersion":"0.3.2","langs":""}