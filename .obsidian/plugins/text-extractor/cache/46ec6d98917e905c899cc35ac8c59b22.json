{"path":"sem3/TI/UE/s/TI-s-u09.pdf","text":"Departement Informatik Theoretische Informatik Prof. Dr. Dennis Komm Prof. Dr. Juraj Hromkoviˇc Dr. Hans-Joachim B¨ockenhauer Exemplary Solutions – Sheet 9 Z¨urich, November 29, 2024 Solution to Task 25 Because the given 1-tape-TM always halts, it never reaches the same internal configuration twice during a computation. If it did, then there would be a loop between the two configurations that would repeat infinitely often and thus the TM would not halt. This makes the length of every computation bounded by the number of pairwise distinct internal configurations. The number of internal configurations can be computed as the product of the number of states, the number of possible head positions on the input tape, the number of possible head positions on the working tape, and the number of possible contents of the working tape. The number |Q| of states is constant, the used part of the input tape has length n + 2, because it contains just the input word and the two endmarkers, and, by assumption, the used part of the working tape including the left endmarker has length s(n) + 1, i.e., there are s(n) + 1 possible head positions on the working tape. To count the internal configurations, it remains to bound the number of possible contents of the working tape. In addition to the left endmarker 0 at the beginning and the fixed infinite suffix kkk . . ., the tape contains s(n) symbols from {1, . . . , k} in ascending order. To determine the number of such words of length s(n), we consider the set of all words of length s(n) + k − 1 over the alphabet {A, |} that contain exactly k − 1 symbols |. Each such word uniquely describes one possible content of the working tape: The symbols A represent the s(n) symbols from {1, . . . , k}, the symbols | represent transitions from symbol i to symbol i + 1. Due to the sorting of the tape content, the assignment of the symbols A to the symbols from {1, . . . , k} is uniquely given by the position of the separators |. There are exactly ( s(n) + k − 1 k − 1 ) words over {A, |} of the described form and each of them corresponds to exactly one possible content of the working tape. Hence, M has at most |Q| · (n + 2) · (s(n) + 1) · ( s(n) + k − 1 k − 1 ) ∈ O(n · (s(n)) k) internal configurations in total. Solution to Task 26 Let f : N → N be a monotonically increasing function such that f (n) ≥ n for all n ∈ N. (a) Let L1, L2 ∈ NTIME(f ). We seek to prove that L1 ∪ L2 ∈ NTIME(f ). By definition of NTIME(f ), there exist two nondeterministic multitape Turing machines M1 with k1 tapes and M2 with k2 tapes for k1, k2 ≥ 1, such that L1 = L(M1), L2 = L(M2), and TimeM1(w1), TimeM2(w2) ∈ O(f (n)) for all inputs w1 ∈ L1, w2 ∈ L2 of length n. From them, we construct a nondeterministic (k1 +k2 +1)-tape TM M for L = L1 ∪L2 as follows. The machine M first copies its input onto the first working tape and then brings the heads on the tapes back to the beginning. This is clearly feasible in time O(n) and thus also in O(f (n)), since f (n) ≥ n, for all n ∈ N. Now M simulates the work of M1 on the input tape and the working tapes 2 through k1 + 1 and the work of M2 on the working tape 1 as the input tape and the working tapes k1 + 2 through k1 + k2 + 1 in parallel. The machine M accepts if and only if at least one of the two simulations of M1 and M2 accepts. Clearly, there exists an accepting computation of M on the word w if and only if there exists an accepting computation of M1 or M2 on w. Furthermore, the length of the shortest accepting computation of M on w does not exceed the time to copy the input plus the length of the shortest accepting computation of M1 or M2 on w. Hence, TimeM (w) ∈ O(n) + min{TimeM1(w), TimeM2(w)} ⊆ O(f (n)) for all w ∈ L1 ∪ L2. It follows that L1 ∪ L2 ∈ NTIME(f ). (b) Let L ∈ NTIME(f ) and L ′ ∈ TIME(f ). Then there exist a nondeterministic k1-tape Turing machine M1 for L and a deterministic k2-tape Turing machine M2 for L′ such that TimeM1(n), TimeM2(n) ∈ O(f (n)). From them, we construct a nondeterministic (k1 + k2)-tape TM M for L − L′ with a time complexity in O(f (n)) as follows. The machine M first simulates the work of M2 on the input w of length n on the working tapes k1 + 1 through k1 + k2. Because TimeM2(n) ∈ O(f (n)), this simulation is guaranteed to terminate on every input of length n in time O(f (n)). If M2 reaches the accepting state, then w ∈ L′, hence, w /∈ L − L ′, and M thus rejects its input. If M2 reaches the rejecting state, then w /∈ L′. In this case, M brings the reading head on the input tape back to the beginning and starts a simulation of M1 on w on the first k1 working tapes. If M1 accepts the word w, then M accepts as well and vice versa. The time complexity of M can be bounded as follows. The simulation of M2 clearly requires O(f (n)) steps, bringing back the reading head then requires again at most O(n) ⊆ O(f (n)) steps. If the word w is accepted by M1, then, by definition of nondeterministic time complexity, there exists a computation of M1 that can be simulated in O(f (n)) time. Hence, TimeM (n) ∈ O(f (n)). Solution to Task 27 Let L ⊆ {0, 1}∗ be an infinite language. Using the diagonalization method, we can define a subset L ′ of L that is not recursively enumerable. Let Mi be the i-th Turing machine in the canonical order. Then we define a diagonalization language with respect to L as follows: Ldiag,L = {w ∈ {0, 1}∗ | w = wi is the i-th word in L for some i ∈ N and Mi does not accept wi}. It clearly holds that Ldiag,L ⊆ L. 2 Assume that Ldiag,L is recursively enumerable. Then Ldiag,L = L(M ) holds for a TM M . Since M must occur in the canonical enumeration of all Turing machines, there exists some i ∈ N such that M = Mi. But the language Ldiag,L cannot be equal to L(Mi) because wi ∈ Ldiag,L ⇐⇒ wi /∈ L(Mi) . This is a contradiction, hence, Ldiag,L /∈ LRE. 3","libVersion":"0.5.0","langs":""}