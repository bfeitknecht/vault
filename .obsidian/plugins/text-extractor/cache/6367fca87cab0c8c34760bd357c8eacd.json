{"path":"sem2/AuW/VRL/slides/AuW-L22-minimal-flow.pdf","text":"Vorlesung Algorithmen und Wahrscheinlichkeit, D-INFK, ETH Zürich Angelika Steger & Emo Welzl Flüsse in Netzwerken: Algorithmen ε1ε2ε3ε4+ε+ε+ε−ε−εstε5 ε := mini εi 0 / 18 Netzwerke und Flüsse s t a b c 5 6 1 7 2 2 6 1 s t a b c 3 5 1 7 1 2 6 1 Netzwerk N = (V , A, c, s, t). Fluss f mit Wert 3 − 1 + 5 = 7. 1 / 18 Schnitt s t a b c 5 6 1 7 2 2 6 1 S T s-t-Schnitt (S, T ) mit Kapazität 6 + 2 + 2 = 10. 2 / 18 Schnitt vs. Fluss Lemma Ist f ein Fluss und (S, T ) ein s-t-Schnitt in einem Netzwerk, so gilt val(f ) ≤ cap(S, T ) . (bewiesen) 3 / 18 Schnitt vs. Fluss Lemma Ist f ein Fluss und (S, T ) ein s-t-Schnitt in einem Netzwerk, so gilt val(f ) ≤ cap(S, T ) . (bewiesen) s t a b c 3 5 1 7 1 2 6 1 s t a b c 5 6 1 7 2 2 6 1 S T Fluss mit Wert 7 7 ≤ 10 Schnitt mit Kapaziät 10 3 / 18 Schnitt vs. Fluss Lemma Ist f ein Fluss und (S, T ) ein s-t-Schnitt in einem Netzwerk, so gilt val(f ) ≤ cap(S, T ) . (bewiesen) Satz („Maxﬂow-Mincut Theorem“) Jedes Netzwerk erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . (noch nicht bewiesen) Ziel: Algorithmus und Beweis des Maxﬂow-Mincut Theorem. 3 / 18 Verbessern eines gegebenen Flusses (1) s t a b c 5 6 1 7 2 2 6 1 s t a b c 3 5 1 7 1 2 6 1 Netzwerk N = (V , A, c, s, t) Fluss mit Wert 3 − 1 + 5 = 7 4 / 18 Verbessern eines gegebenen Flusses (1) s t a b c 5 6 1 7 2 2 6 1 s t a b c 3 → 4 5 1 7 1 → 2 2 6 1 Netzwerk N = (V , A, c, s, t) Fluss mit Wert 4 − 1 + 5 = 8 4 / 18 Verbessern eines gegebenen Flusses (2) s t a b c 5 6 1 7 2 2 6 1 s t a b c 4 5 1 7 2 2 6 1 Fluss mit Wert 4 − 1 + 5 = 8 5 / 18 Verbessern eines gegebenen Flusses (2) s t a b c 5 6 1 7 2 2 6 1 s t a b c 4 5 → 6 1 7 2 2 6 1 → 0 Fluss mit Wert 4 − 1 + 6 = 9 5 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Flusserhaltungserhaltung Lokale Veränderungen des Flusses, die die Flusserhaltung erhalten: +δ+δ+δ−δ+δ−δ−δ−δ Unter Beachtung { der Kapazität bei „+δ“, und des aktuellen Flusses bei „−δ“. Quelle Flussaugmentierung Senke +δ+δ+δ−δ−δst augmentierender Pfad (ungerichteter Pfad!) Wie ﬁnden wir augmentierende Pfade? 6 / 18 Verwaltung des potentiellen Extraﬂusses/Spielraum 7525 Netzwerk Spielraum 7 / 18 Verwaltung des potentiellen Extraﬂusses/Spielraum cffc − f Netzwerk Spielraum 7 / 18 Restnetzwerk Für e = (u, v ), sei eopp := (v , u) (entgegen gerichtete Kante). Sei N = (V , A, c, s, t) ein Netzwerk ohne entgegen gerichtete Kanten1 und sei f ein Fluss in N. Das Restnetzwerk Nf := (V , Af , rf , s, t) ist wie folgt deﬁniert: 1. Ist e ∈ A mit f (e) < c(e), dann ist e eine Kante in Af , mit rf (e) := c(e) − f (e). 2. Ist e ∈ A mit f (e) > 0, dann ist eopp in Af , mit rf (eopp) = f (e). 3. Af enthält nur Kanten wie in (1) und (2). rf (e), e ∈ Af , nennen wir die Restkapazität der Kante e. Restkapazität = „Spielraum“ 1Vereinfachende Annahme, ist aber nicht essentiell. 8 / 18 Restnetzwerk Netzwerk Restnetzwerk Restkapazität 7525777707 9 / 18 Charakterisierung maximaler Fluss Satz Sei N ein Netzwerk (ohne entgegegen gerichtete Kanten). Ein Fluss f ist maximaler Fluss ⇔ es im Restnetzwerk Nf keinen gerichteten s-t-Pfad gibt. Für jeden maximalen Fluss f gibt es einen s-t-Schnitt (S, T ) mit val(f ) = cap(S, T ). 10 / 18 Beweis Es gibt im Restnetzwerk Nf einen gerichteten s-t-Pfad ⇒ f kann augmentiert werden (⇒ f ist nicht maximal) Wir betrachten einen gerichteten s-t-Pfad in Nf : ε1ε2ε3ε4stε5 Bestimme die kleinste Restkapazität ε := mini εi Augmentiere f entlang des Pfades um ε. 11 / 18 Beweis Es gibt im Restnetzwerk Nf einen gerichteten s-t-Pfad ⇒ f kann augmentiert werden (⇒ f ist nicht maximal) Wir betrachten einen gerichteten s-t-Pfad in Nf : ε1ε2ε3ε4stε5 Bestimme die kleinste Restkapazität ε := mini εi Augmentiere f entlang des Pfades um ε. 11 / 18 Beweis Es gibt im Restnetzwerk Nf einen gerichteten s-t-Pfad ⇒ f kann augmentiert werden (⇒ f ist nicht maximal) Wir betrachten einen gerichteten s-t-Pfad in Nf : ε1ε2ε3ε4+ε+ε+ε−ε−εstε5 Bestimme die kleinste Restkapazität ε := mini εi Augmentiere f entlang des Pfades um ε. 11 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stf (e) = c(e)ee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stf (e) = c(e)ee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stf (e′) = 0f (e) = c(e)ee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stf (e′) = 0f (e) = c(e)ee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis Es gibt im Restnetzwerk Nf keinen gerichteten s-t-Pfad ⇒ ∃ s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ) (⇒ f ist maximal) S := in Nf von s aus erreichbare Knoten; T := V \\ S. s von s aus in Nf erreichbar ⇒ s ∈ S t von s aus nicht erreichbar ⇒ t ̸∈ S } ⇒ (S, T ) ist s-t-Schnitt. stf (e′) = 0f (e) = c(e)ee′ST f (S, T ) = cap(S, T ) f (T , S) = 0 val(f ) = f (S, T ) | {z } =cap(S,T ) − f (T , S) | {z } =0 = cap(S, T ) 12 / 18 Beweis – Beispiel „Finde den Schnitt“ s t a b c 5 6 1 7 2 2 6 1 s t a b c 4 6 1 7 2 2 6 0 Fluss mit Wert 4 − 1 + 6 = 9 13 / 18 Charakterisierung maximaler Fluss Satz Sei N ein Netzwerk (ohne entgegegen gerichtete Kanten). Ein Fluss f ist maximaler Fluss ⇔ es im Restnetzwerk Nf keinen gerichteten s-t-Pfad gibt. Für jeden maximalen Fluss f gibt es einen s-t-Schnitt (S, T ) mit val(f ) = cap(S, T ). ▶ Zeigt noch nicht, dass es immer einen maximalen Fluss gibt. 14 / 18 Charakterisierung maximaler Fluss Satz Sei N ein Netzwerk (ohne entgegegen gerichtete Kanten). Ein Fluss f ist maximaler Fluss ⇔ es im Restnetzwerk Nf keinen gerichteten s-t-Pfad gibt. Für jeden maximalen Fluss f gibt es einen s-t-Schnitt (S, T ) mit val(f ) = cap(S, T ). ▶ Zeigt noch nicht, dass es immer einen maximalen Fluss gibt. 14 / 18 Ford-Fulkerson Algorithmus Ford-Fulkerson(V , A, c, s, t) 1: f ← 0 ▷ Fluss konstant 0 2: while ∃ s-t-Pfad P in Nf do ▷ augmentierender Pfad 3: Augmentiere den Fluss entlang P 4: return f ▷ maximaler Fluss ▶ Wir können nicht garantieren, dass der Algorithmus terminiert. ▶ Der Algorithmus kann bei Kapazitäten aus R unendlich laufen. ▶ Bei Kapazitäten aus N0 bleiben im Algorithmus Flüsse und Restkapazitäten ganzzahlig. In jedem Augmentierungsschritt wird der Fluss ganzzahlig ≥ 1 verbessert. D.h. insbesondere auch, dass das Ergebnis ganzzahlig (A → N0) ist. 15 / 18 Ford-Fulkerson Algorithmus Ford-Fulkerson(V , A, c, s, t) 1: f ← 0 ▷ Fluss konstant 0 2: while ∃ s-t-Pfad P in Nf do ▷ augmentierender Pfad 3: Augmentiere den Fluss entlang P 4: return f ▷ maximaler Fluss ▶ Wir können nicht garantieren, dass der Algorithmus terminiert. ▶ Der Algorithmus kann bei Kapazitäten aus R unendlich laufen. ▶ Bei Kapazitäten aus N0 bleiben im Algorithmus Flüsse und Restkapazitäten ganzzahlig. In jedem Augmentierungsschritt wird der Fluss ganzzahlig ≥ 1 verbessert. D.h. insbesondere auch, dass das Ergebnis ganzzahlig (A → N0) ist. 15 / 18 Ford-Fulkerson Algorithmus Ford-Fulkerson(V , A, c, s, t) 1: f ← 0 ▷ Fluss konstant 0 2: while ∃ s-t-Pfad P in Nf do ▷ augmentierender Pfad 3: Augmentiere den Fluss entlang P 4: return f ▷ maximaler Fluss ▶ Wir können nicht garantieren, dass der Algorithmus terminiert. ▶ Der Algorithmus kann bei Kapazitäten aus R unendlich laufen. ▶ Bei Kapazitäten aus N0 bleiben im Algorithmus Flüsse und Restkapazitäten ganzzahlig. In jedem Augmentierungsschritt wird der Fluss ganzzahlig ≥ 1 verbessert. D.h. insbesondere auch, dass das Ergebnis ganzzahlig (A → N0) ist. 15 / 18 Ford-Fulkerson Algorithmus Ford-Fulkerson(V , A, c, s, t) 1: f ← 0 ▷ Fluss konstant 0 2: while ∃ s-t-Pfad P in Nf do ▷ augmentierender Pfad 3: Augmentiere den Fluss entlang P 4: return f ▷ maximaler Fluss ▶ Wir können nicht garantieren, dass der Algorithmus terminiert. ▶ Der Algorithmus kann bei Kapazitäten aus R unendlich laufen. ▶ Bei Kapazitäten aus N0 bleiben im Algorithmus Flüsse und Restkapazitäten ganzzahlig. In jedem Augmentierungsschritt wird der Fluss ganzzahlig ≥ 1 verbessert. D.h. insbesondere auch, dass das Ergebnis ganzzahlig (A → N0) ist. 15 / 18 Analyse Sei n := |V | und m := |A| für Netzwerk N = (V , A, c, s, t). ▶ Angenommen c : A → N0 und U := maxe∈A c(e). Dann gilt val(f ) ≤ cap({s}, V \\ {s}) ≤ (n − 1)U und es gibt höchstens (n − 1)U Augmentierungsschritte. ▶ Ein Augmentierungsschritt Suche s-t-Pfad in Nf , Augmentieren, Aktualisierung von Nf benötigt O(m) Zeit. Satz (Ford-Fulkerson mit ganzzahligen Kapazitäten) Sei N = (V , A, c, s, t) ein Netzwerk mit c : A → N≤U 0 , U ∈ N, ohne entgegen gerichtete Kanten.2 Dann gibt es einen ganzzahligen maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. 2Vereinfachende Annahme, ist aber nicht essentiell. 16 / 18 Analyse Sei n := |V | und m := |A| für Netzwerk N = (V , A, c, s, t). ▶ Angenommen c : A → N0 und U := maxe∈A c(e). Dann gilt val(f ) ≤ cap({s}, V \\ {s}) ≤ (n − 1)U und es gibt höchstens (n − 1)U Augmentierungsschritte. ▶ Ein Augmentierungsschritt Suche s-t-Pfad in Nf , Augmentieren, Aktualisierung von Nf benötigt O(m) Zeit. Satz (Ford-Fulkerson mit ganzzahligen Kapazitäten) Sei N = (V , A, c, s, t) ein Netzwerk mit c : A → N≤U 0 , U ∈ N, ohne entgegen gerichtete Kanten.2 Dann gibt es einen ganzzahligen maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. 2Vereinfachende Annahme, ist aber nicht essentiell. 16 / 18 Analyse Sei n := |V | und m := |A| für Netzwerk N = (V , A, c, s, t). ▶ Angenommen c : A → N0 und U := maxe∈A c(e). Dann gilt val(f ) ≤ cap({s}, V \\ {s}) ≤ (n − 1)U und es gibt höchstens (n − 1)U Augmentierungsschritte. ▶ Ein Augmentierungsschritt Suche s-t-Pfad in Nf , Augmentieren, Aktualisierung von Nf benötigt O(m) Zeit. Satz (Ford-Fulkerson mit ganzzahligen Kapazitäten) Sei N = (V , A, c, s, t) ein Netzwerk mit c : A → N≤U 0 , U ∈ N, ohne entgegen gerichtete Kanten.2 Dann gibt es einen ganzzahligen maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. 2Vereinfachende Annahme, ist aber nicht essentiell. 16 / 18 Analyse Sei n := |V | und m := |A| für Netzwerk N = (V , A, c, s, t). ▶ Angenommen c : A → N0 und U := maxe∈A c(e). Dann gilt val(f ) ≤ cap({s}, V \\ {s}) ≤ (n − 1)U und es gibt höchstens (n − 1)U Augmentierungsschritte. ▶ Ein Augmentierungsschritt Suche s-t-Pfad in Nf , Augmentieren, Aktualisierung von Nf benötigt O(m) Zeit. Satz (Ford-Fulkerson mit ganzzahligen Kapazitäten) Sei N = (V , A, c, s, t) ein Netzwerk mit c : A → N≤U 0 , U ∈ N, ohne entgegen gerichtete Kanten.2 Dann gibt es einen ganzzahligen maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. 2Vereinfachende Annahme, ist aber nicht essentiell. 16 / 18 Maxﬂow-Mincut Theorem Damit haben wir auch bewiesen. Satz („Maxﬂow-Mincut Theorem“, ganzzahlig) Jedes Netzwerk ohne entgegen gerichtete Kanten mit ganzzahligen Kapazitäten erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Der Satz gilt auch, wenn das Netzwerk entgegen gerichtete Kanten hat. Und er gilt auch bei beliebigen reellen Kapazitäten. 17 / 18 Maxﬂow-Mincut Theorem Damit haben wir auch bewiesen. Satz („Maxﬂow-Mincut Theorem“, ganzzahlig) Jedes Netzwerk ohne entgegen gerichtete Kanten mit ganzzahligen Kapazitäten erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Der Satz gilt auch, wenn das Netzwerk entgegen gerichtete Kanten hat. Und er gilt auch bei beliebigen reellen Kapazitäten. 17 / 18 Maxﬂow-Mincut Theorem Damit haben wir auch bewiesen. Satz („Maxﬂow-Mincut Theorem“, ganzzahlig) Jedes Netzwerk ohne entgegen gerichtete Kanten mit ganzzahligen Kapazitäten erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Der Satz gilt auch, wenn das Netzwerk entgegen gerichtete Kanten hat. Und er gilt auch bei beliebigen reellen Kapazitäten. 17 / 18 Anmerkungen ▶ Capacity-Scaling [Dinitz-Gabow‘73] Sind in einem Netzwerk alle Kapazitäten ganzzahlig und höchstens U, so kann ein ganzzahliger maximaler Fluss in Zeit O(mn(1 + log U)) berechnet werden kann. ▶ Dynamic Trees [Sleator-Tarjan‘83] Der maximale Fluss eines Netzwerks kann in Zeit O(mn log n) berechnet werden. ▶ Alle Schranken gelten nach Maxﬂow-Mincut auch für die Berechnung eines minimalen s-t-Schnitts. ▶ Wir besprechen als Nächstes weitere Anwendungen (Matchings, Bildsegmentierung). 18 / 18 Anmerkungen ▶ Capacity-Scaling [Dinitz-Gabow‘73] Sind in einem Netzwerk alle Kapazitäten ganzzahlig und höchstens U, so kann ein ganzzahliger maximaler Fluss in Zeit O(mn(1 + log U)) berechnet werden kann. ▶ Dynamic Trees [Sleator-Tarjan‘83] Der maximale Fluss eines Netzwerks kann in Zeit O(mn log n) berechnet werden. ▶ Alle Schranken gelten nach Maxﬂow-Mincut auch für die Berechnung eines minimalen s-t-Schnitts. ▶ Wir besprechen als Nächstes weitere Anwendungen (Matchings, Bildsegmentierung). 18 / 18 Anmerkungen ▶ Capacity-Scaling [Dinitz-Gabow‘73] Sind in einem Netzwerk alle Kapazitäten ganzzahlig und höchstens U, so kann ein ganzzahliger maximaler Fluss in Zeit O(mn(1 + log U)) berechnet werden kann. ▶ Dynamic Trees [Sleator-Tarjan‘83] Der maximale Fluss eines Netzwerks kann in Zeit O(mn log n) berechnet werden. ▶ Alle Schranken gelten nach Maxﬂow-Mincut auch für die Berechnung eines minimalen s-t-Schnitts. ▶ Wir besprechen als Nächstes weitere Anwendungen (Matchings, Bildsegmentierung). 18 / 18 Anmerkungen ▶ Capacity-Scaling [Dinitz-Gabow‘73] Sind in einem Netzwerk alle Kapazitäten ganzzahlig und höchstens U, so kann ein ganzzahliger maximaler Fluss in Zeit O(mn(1 + log U)) berechnet werden kann. ▶ Dynamic Trees [Sleator-Tarjan‘83] Der maximale Fluss eines Netzwerks kann in Zeit O(mn log n) berechnet werden. ▶ Alle Schranken gelten nach Maxﬂow-Mincut auch für die Berechnung eines minimalen s-t-Schnitts. ▶ Wir besprechen als Nächstes weitere Anwendungen (Matchings, Bildsegmentierung). 18 / 18","libVersion":"0.3.1","langs":""}