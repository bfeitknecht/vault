{"path":"sem4/FMFP/PV/exams/midterms/FMFP-FS19-A.pdf","text":"Department of Computer Science D. Basin, P. M¨uller, D. Traytel Formal Methods and Functional Programming Quiz 1 March 12, 2019, 10:15–10:45 Student: Last Name: First Name: SOLUTION A Student Number: General Comments: 1. This booklet consists of 4 pages; the back page of this booklet is page 4. After the quiz begins, check that your quiz papers are complete (2 assignments). 2. Only write on the quiz paper and extra paper sheets which are given by the assistants. Do not take any of this paper out of the quiz: submit it all. Write your ﬁrst and last name and your student number on every sheet of paper that you write on. 3. This is a closed book quiz: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. You may use any functions from the Haskell Prelude in your solutions (without giving their deﬁnitions). 5. Write clearly in the sense of logic, language, and readability. Label all rule applications in your derivation trees. The clarity of your arguments and explanations aﬀects your grade. 6. You have 30 minutes to complete the quiz. Assignment 1 2 ∑ Max. points 12 8 20 Your points Formal Methods and Functional Programming, Quiz 1, SS19 2 Assignment 1: Natural Deduction (12 points) We recall the following rules from natural deduction for ﬁrst-order intuitionistic logic: Γ, A Ø A Ax Γ, A Ø B Γ Ø A → B →I Γ Ø A → B Γ Ø A Γ Ø B →E Γ Ø Œ Γ Ø A ŒE Γ, A Ø Œ Γ Ø ¬A ¬I Γ Ø ¬A Γ Ø A Γ Ø B ¬E Γ Ø A Γ Ø B Γ Ø A ∧ B ∧I Γ Ø A ∧ B Γ Ø A ∧EL Γ Ø A ∧ B Γ Ø B ∧ER Γ Ø A Γ Ø A ∨ B ∨IL Γ Ø B Γ Ø A ∨ B ∨IR Γ Ø A ∨ B Γ, A Ø C Γ, B Ø C Γ Ø C ∨E Γ Ø A(x) Γ Ø ∀x. A(x) ∀I ∗ Γ Ø ∀x. A(x) Γ Ø A(t) ∀E Γ Ø A(t) Γ Ø ∃x. A(x) ∃I Γ Ø ∃x. A(x) Γ, A(x) Ø B Γ Ø B ∃E ∗∗ Side conditions: (∗) x does not occur free in any formula in Γ, (∗∗) x does neither occur free in any formula in Γ nor in B. Prove using the above rules that (∃x. ∀y. ¬P (x) ∨ Q(y)) → ∀y. ∃x. P (x) → Q(y) holds. Label each inference step with the name of the corresponding rule. Formal Methods and Functional Programming, Quiz 1, SS19 3 Solution: Let • Γ1 ∶= ∃x. ∀y. ¬P (x) ∨ Q(y) • Γ2 ∶= Γ1, ∀y. ¬P (x) ∨ Q(y) • Γ3 ∶= Γ2, P (x) • Γ4 ∶= Γ3, ¬P (x) • Γ5 ∶= Γ3, Q(y) Γ1 Ø ∃x. ∀y. ¬P (x) ∨ Q(y) Ax Γ3 Ø ∀y. ¬P (x) ∨ Q(y) Ax Γ3 Ø ¬P (x) ∨ Q(y) ∀E Γ4 Ø ¬P (x) Ax Γ4 Ø P (x) Ax Γ4 Ø Q(y) ¬E Γ5 Ø Q(y) Ax Γ3 Ø Q(y) ∨E Γ2 Ø P (x) → Q(y) →I Γ2 Ø ∃x. P (x) → Q(y) ∃I Γ1 Ø ∃x. P (x) → Q(y) ∃E ∗∗ Γ1 Ø ∀y. ∃x. P (x) → Q(y) ∀I ∗ Ø (∃x. ∀y. ¬P (x) ∨ Q(y)) → (∀y. ∃x. P (x) → Q(y)) →I (∗): y does not occur free in Γ1 (∗∗): x does not occur free in Γ1 and ∃x. P (x) → Q(y) Formal Methods and Functional Programming, Quiz 1, SS19 4 Assignment 2: Collapse (8 points) The collapse of a nonnegative integer n is the number obtained from n via replacing runs of consecutive equal digits d by a single digit d. For example, the collapse of the number 44666448 equals 4648. Write a function collapse :: Int -> Int that given a nonnegative integer n as input computes its collapse as deﬁned above. Examples: collapse 0 = 0 collapse 2 = 2 collapse 22 = 2 collapse 44666448 = 4648 Solution: collapse :: Int -> Int collapse n | n < 10 = n | d’ == d = n’ | otherwise = 10 * n’ + d where n’ = collapse (n ‘div‘ 10) d = n ‘mod‘ 10 d’ = n’ ‘mod‘ 10","libVersion":"0.5.0","langs":""}