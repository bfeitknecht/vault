{"path":"sem3/EProg/PV/exams/theory/FS21.pdf","text":"Frühjahr 2021 252-0027 – Einführung in die Programmierung Departement Informatik ETH Zürich 19. August 2021 – Schriftlicher Teil Nachname: Vorname: Legi-Nummer: – – Computer: slab Sie dürfen diese Prüfung oder die Aufgaben für die Programmierprüfung erst öﬀnen nachdem die Aufsicht die Prüfung gestartet hat. Wenn Sie diese Dokumente vorher öﬀnen gilt dies als Täuschungsversuch. Mit Ihrer Unterschrift bestätigen Sie, dass Sie die hier aufgeführte Person sind, Sie die Hinweise zur Kenntnis genommen haben, Sie die Aufgaben selbständig an den aufgeführten Computern gelöst haben, Sie Ihre eigene Lösung abgeben, Sie keine Kopie der Prüfung mitnehmen, und dass Sie alle technischen Probleme, gesundheitlichen Probleme ( die Ihre Leistungen in dieser Prüfung beeinträch- tigten) und etwaige störende äussere Einﬂüsse gemeldet haben bzw. wissen, dass Sie diese melden sollen. Unterschrift: Aufgabe Wert Punkte Aufgabe Wert Punkte 1 5 5 8 2 6 6 12 3 9 7 4 4 12 8 4 \u0006 Übertrag −− Total 60 Hinweise 1. Öﬀnen Sie diese Prüfung erst, wenn die Aufsicht den Beginn der Prüfung bekannt gibt. 2. Beachten Sie bitte während der Prüfung unbedingt die Hygienevorschriften. 3. Schreiben Sie zuerst Ihren Namen, Ihre Legi-Nummer, und die ID Ihres Computers (z.B., slabhg 9999) auf die Vorderseite dieser Prüfung, damit Sie es später nicht vergessen. 4. Dieser Teil der Prüfung dauert 1 Stunde (60 Minuten). Falls Sie sich durch irgendjemanden oder irgendetwas gestört fühlen, melden Sie dies sofort einer Aufsichtsperson. 5. Die Prüfung hat 18 Seiten. Vergewissern Sie sich dass Ihr Exemplar vollständig ist. 6. In dieser Prüfung gibt es 60 Punkte. Benutzen Sie die Anzahl der Punkte als Hinweis, wie Sie Ihre Zeit einteilen können. Fehler bei der Bearbeitung einer Aufgabe haben keinen Einﬂuss auf die Punkte, die Sie für andere Aufgaben erhalten. Sie könnnen die Aufgaben in beliebiger Reihenfolge lösen. 7. Lesen Sie die Aufgabenstellungen genau durch. 8. Tragen Sie Ihre Antwort(en) direkt in die Prüfungsbögen ein. Falls Sie mehr Platz brauchen, ist Ihre Antwort wahrscheinlich zu lang. Wenn Sie doch mehr Platz brauchen, so benutzen Sie die Rückseiten. 9. Benutzen Sie einen Kugelschreiber (blau oder schwarz) oder Füller, der nicht ausradiert werden kann. Benutzen Sie keinen Bleistift. Bitte schreiben Sie deutlich und leserlich! Wenn Sie etwas durchstreichen wollen, so machen Sie dies bitte klar und deutlich. 10. Trennen Sie nicht die zusammengeheftete Prüfung. Mit losen Blättern riskieren Sie, ein Blatt zu verlieren. 11. Es ist wichtig, dass Ihre Antworten die Aufgaben klar und unzweideutig behandeln. Die Klarheit der Antworten beeinﬂusst Ihre Note. Wenn Sie Annahmen (über die in den Aufgaben aufgeführten hinaus) treﬀen, so geben Sie diese bitte an. 12. Wenn Sie zur Toilette müssen, melden Sie dies einer Aufsichtsperson durch Handzeichen. Es darf zur gleichen Zeit immer nur eine Studentin oder ein Student zur Toilette. 13. Wir beantworten keine inhaltlichen Fragen während der Prüfung. Kommentare zur Aufgabe schreiben Sie bitte auf das Aufgabenblatt. 14. Wenn die Aufsicht die Prüfung beendet, schliessen Sie bitte die Prüfung und schreiben nicht mehr in die Prüfung. Weiterarbeiten über die erlaubte Zeit gilt als Täuschungsversuch. Bitte unterschreiben Sie die Prüfung auf der Vorderseite und legen Sie die Prüfung mit Ihrer Legitimationskarte (“Legi”) gut sichtbar auf Ihren Arbeitstisch. 15. Wir sammeln die Prüfung ein. Wichtig: stellen Sie unbedingt selbst sicher, dass Ihre Prüfung von einer Aufsichtsperson eingezogen wird. Stecken Sie keine Prüfung (auch keine leere) ein. Page 2 of 18 Aufgabe 1 (5 Punkte) Gegeben sei eine Java Methode test(), die mit verschiedenen Argumenten für ein Exemplar s der Klasse Suspicious aufgerufen wird. class Suspicious { int i = 0; String test(int i) { if (i <= 0) { return \"Z\"; } if (i < 3) { i = i - 1; String result = \"T\" + test(i) + \"T\"; i = 0; return result; } else if (i < 6) { return \"S\" + test(i+1) + \"S\"; } else { return \"X\" + test(i/8); } } } Bitte geben Sie für jeden dieser Aufrufe das Resultat an (entweder dem String, der gedruckt wird, oder schreiben Sie “Laufzeitfehler” (oder “exception”) in dem Fall dass eine Exception auftritt (den genauen Fehler bzw. die genaue Exception müssen Sie nicht angeben). Suspicious s = new Suspicious(); 1. System.out.println(s.test(1)); ________________________ 2. System.out.println(s.test(3)); ________________________ 3. System.out.println(s.test(9)); ________________________ Page 3 of 18Page 4 of 18 Aufgabe 2 (6 Punkte) Gegeben sei eine Methode main in einer Java Klasse. public static void main(String[] args) { /* body */ } Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden und den angegebenen Output produzieren. Bestimmen Sie für jede Anweisung die fehlenden Operatoren so, das die Anweisung die gezeigte Ausgabe erzeugt. Mögliche Operatoren sind +, -, *, / und %. Wenn es für eine Anweisung mehrere mögliche Lösungen gibt, so genügt eine Lösung. Sollte es keine Lösung geben, so schreiben Sie bitte ”nicht möglich”. Bereits existierende Operatoren (oder sonstige Teile der Anweisung) dürfen Sie nicht verändern. Auch dürfen Sie Klammern weder hinzufügen noch entfernen. 1. System.out.println(64 / (8 2) + (15 14) 2) ; //Output: 18 2. System.out.println(((48 8) * (17 3) <= 3 ) || (7 0) == 1); //Output: true 3. System.out.println(\"test \" + 17 17 8 2); //Output: test 0 Page 5 of 18Page 6 of 18 Aufgabe 3 (9 Punkte) Gegeben sei die Methode assertionRaetsel(int x). Geben Sie an (für die angegebenen Stellen im Programm), ob die vier Aussagen x > y und z > 0 und z % 3 == 0 und z % 3 == 1 IMMER, MANCHMAL oder NIE wahr sind. Sie können diese drei Möglichkeiten mit I/M/N abkürzen. public static int assertionRaetsel(int x) { int y = 1; int z = 0; // Point A while (x > y) { // Point B z += x - y; x /= 3; // Point C y *= 3; // Point D } // Point E return z; } x > y z > 0 z % 3 == 0 z % 3 == 1 Point A Point B Point C Point D Point E Page 7 of 18 Aufgabe 4 (12 Punkte) Gegeben seien diese Klassen und Interfaces in separaten Dateien (im default Package): interface Eta { public void fct1(); } interface Theta extends Eta { public void fct1(); } class Kappa implements Eta { Integer i = 1; public void fct1() { System.out.println(\"Kappa \" + i); } } class Lambda implements Theta { String s = \"Lambda\"; public void fct1() { System.out.println(\"Lambda fct1 \" + s); } public void fct2() { System.out.println(\"Lambda fct2 \" + s); } } class Epsilon extends Lambda { String s = \"Epsilon\"; public void fct1() { System.out.println(\"Epsilon fct1 \" + s); } public void fct2() { super.fct2(); System.out.println(\"Epsilon fct2 \" + s); } public void fct3() { System.out.println(\"Epsilon fct3 \" + s); } } class Gamma extends Epsilon { String s = \"Gamma\"; public void fct2() { System.out.println(\"Gamma fct2 \" + s); } } In einer Klasse Explore in dem selben Package beﬁndet sich die Methode main. public static void main (String[] args) { /* Body */ } Page 8 of 18 Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden. Geben Sie für jede Anweisungsfolge an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile- Fehler”). Falls ein gedruckter String Leerzeichen enthält, dann ist die genaue Anzahl/Weite der Leerzeichen unwichtig. 1. Eta x1 = new Kappa(); x1.fct1(); ________________________ 2. Theta x2 = new Kappa(); x2.fct1(); ________________________ 3. Eta x3 = new Lambda(); x3.fct1(); ________________________ 4. Lambda x4 = new Lambda(); x4.fct2(); ________________________ 5. Lambda x5 = new Lambda(); Lambda x6 = (Epsilon)x5; x6.fct2(); ________________________ 6. Lambda x6 = new Epsilon(); x6.fct2(); ________________________ 7. Lambda x7 = new Gamma(); x7.fct3(); ________________________ 8. Epsilon x8 = new Epsilon(); x8.fct3(); x8.fct2(); ________________________ 9. Epsilon x9 = new Gamma(); x9.fct3(); x9.fct2(); ________________________ 10. Gamma x10 = new Gamma(); x10.fct3(); x10.fct2(); ________________________ Page 9 of 18 Aufgabe 5 (8 Punkte) Gegeben sei die EBNF-Beschreibung von boolean_expression. Für id gelten die Regeln für Bezeichner (identiﬁers) und Werte (literal values) in Java. Diese boolschen Ausdruecke unterscheiden sich aber sonst von den in Java zulässigen. relational_term ⇐ ( relational_expression ) | id relational_expression ⇐ relational_term > relational_term | relational_term > = relational_term | relational_term < relational_term | relational_term < = relational_term | relational_term boolean_factor ⇐ ! boolean_factor | ( boolean_expression ) | relational_expression boolean_term ⇐ boolean_term & & boolean_factor | boolean_factor boolean_expression ⇐ boolean_expression | | boolean_term | boolean_term Abbildung 1: EBNF-Beschreibung von boolean_expression 1. Geben Sie für jeden folgenden Ausdruck an, ob er nach der EBNF-Beschreibung in Abbildung 1 gültig ist. (Tipp: alle Bezeichner und Werte in diesen Ausdrücken (d.h., id in Abbildung 1) sind korrekt.) Ausdruck Gültig Ungültig Ausdruck Gültig Ungültig (a >= b) (q » r) 4 = a (j && (j > 1))) ((18.0 > 7)) true a || b || c a || b && c && d ((a = 1) > 2) xref != null !a !!true (!a || z) () 1++ <= 3 7 <= !z Page 10 of 18 2. Geben Sie einen boolschen Ausdruck an (Sie können die int Variablen i, j, k und 8 oder weniger sonstige Zeichen verwenden), der in Java gültig ist, aber nicht von der obigen EBNF Beschreibung akzeptiert wird. int i, j, k; Page 11 of 18 Aufgabe 6 (12 Punkte) Vervollständigen Sie die Lücken im untenstehenden Programmcode, sodass die main Methode in der InheritanceTest Klasse ohne Fehler kompiliert und ausgeführt werden kann, ohne eine Exception zu werfen, Der zu erwartende Konsolen-Output von main ist unten angegeben. Sie dürfen keine weiteren Klassen, Methoden, oder Interfaces hinzufügen. Tipp: Nicht in allen Lücken muss etwas stehen aber in allen Lücken kann etwas stehen. class InheritanceTest { public static void main(String[] args) { A z1 = new B(); z1.bar(); I any = z1; any.foo(); Z z = new A(); ((A) z).bar(); System.out.println(); C c1 = new C(); any = c1; any.foo(); D x1 = new D(); D x2 = new E(); any = x1; any.foo(); Integer i = 1; Integer j = 0; x1.fct(i,j); i = 2; j = 1; x2.fct(i,j); } } Jedesmal wenn die Methode main in der Klasse InheritanceTest ausgeführt wird (alle Klassen sind in der selben Package), sollte folgender Output auf die Konsole geschrieben werden: BingoBingo Found Bingo 00 Here 00 Here 40 Here 3 02 Here Page 12 of 18 interface I { public void foo(); } class Z ______________________________________________________ { } class A ______________________________________________________ { public void foo() { System.out.println(\"Found\"); } public void bar() { System.out.print(\"Bingo\"); } } class B ______________________________________________________ { public void bar() { super.bar(); System.out.println(\"Bingo\"); } } class C ______________________________________________________ { Integer i = 0; Integer j = 0;; public void foo() { fct (i,j); System.out.println(\"Here\"); } public void fct(Object o1, Integer o2) { System.out.println(o1.toString() + o2); } } class D ______________________________________________________ { public void fct(Integer i1, Integer o2) { i = 4 * i1; super.foo(); } } class E ______________________________________________________ { Integer i; public void fct(Integer i1, Integer o2) { System.out.println(i1 + o2); i = 2 * i1; j = o2 + 1; super.foo(); } } Page 13 of 18Page 14 of 18 Aufgabe 7 (4 Punkte) Gegeben sind die Precondition und Postcondition für das folgende Programm public int compute(int a, int b) { // Precondition: a >= 0 int x; int res; x = a; res = b; // Loop Invariante: while (x > 0) { x = x - 1; res = res + 1; } // Postcondition: res = a + b return res; } Was ist die Loop Invariante? Loop Invariante: ___________________________________________ Page 15 of 18Page 16 of 18 Aufgabe 8 (4 Punkte) Bitte geben Sie für die folgenden Programmsegmente die schwächste Vorbedingung (weakest pre- condition) an. Bitte verwenden Sie Java Syntax (die Klammern { und } können Sie weglassen). Alle Anweisungen sind Teil einer Java Methode. Alle Variablen sind vom Typ int und es gibt keinen Overﬂow. 1. P: ?? m = n * 4; k = m - 2; Q: { n > 0 && k > 5 } 2. P: ?? if (x > y) { z = x - y; } else { z = y - x; } { z > 0 } Wir wünschen Ihnen alles Gute für den Rest des Sommers und das nächste Semester. Ihr “Einführung in die Programmierung”-Team. Page 17 of 18 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 5 5 8 2 6 6 12 3 9 7 4 4 12 8 4 \u0006 Übertrag −− Total 60 Page 18 of 18","libVersion":"0.5.0","langs":""}