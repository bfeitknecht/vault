{"path":"sem4/FMFP/PV/exams/01-endterms/FMFP-FS11.pdf","text":"Computer Science Department, D. Basin, P. M¨uller Formal Methods and Functional Programming Endterm June 7th, 2011, 10:00 – 12:00 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. Check that your exam papers are complete (this page, two pages on background material, and 5 assignments). 2. Write your last and ﬁrst name on every page that contains parts of your solutions. 3. It is not allowed to use your own papers, documents, scripts, etc., or any electronic equipment (notebook computers, calculators, cell phones, etc.) 4. Use a ballpoint pen or fountain pen (no pencil). Return the instructions, the tasks, and your solutions before leaving the room. 5. Write your answers in English. Important: Write clearly in the sense of logic, lan- guage, and readability. The clarity of your arguments and explanations aﬀects your grade. 6. You have 120 minutes to complete the exam. 7. Place your student ID on the desk. Assignment 1 2 3 4 5 ∑ Max. points 2 4 5 9 8 28 Your points Grade Syntax and Semantics of IMP Syntax The statements of the programming language IMP are given by the grammar s ::= skip ∣ ∣ x := e ∣ ∣ s; s ∣ ∣ if b then s else s end ∣ ∣ while b do s end where x ranges over the variables, e ranges over the arithmetic expressions, and b ranges over the Boolean expressions. Natural Semantics SkipN S ⟨skip, σ⟩ → σ AssN S ⟨x:=e, σ⟩ → σ[x ↦→ A[[e]]σ] SeqN S ⟨s1, σ⟩ → σ′, ⟨s2, σ′⟩ → σ′′ ⟨s1;s2, σ⟩ → σ′′ IfTN S ⟨s1, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ if B[[b]]σ = tt IfFN S ⟨s2, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ if B[[b]]σ = ﬀ WhTN S ⟨s, σ⟩ → σ′, ⟨while b do s end, σ′⟩ → σ′′ ⟨while b do s end, σ⟩ → σ′′ if B[[b]]σ = tt WhFN S ⟨while b do s end, σ⟩ → σ if B[[b]]σ = ﬀ Formal Methods and Functional Programming, Endterm, SS11 3 Structural Operational Semantics SkipSOS ⟨skip, σ⟩ →1 σ AssSOS ⟨x:=e, σ⟩ →1 σ[x ↦→ A[[e]]σ] Seq1SOS ⟨s1, σ⟩ →1 σ′ ⟨s1;s2, σ⟩ →1 ⟨s2, σ′⟩ Seq2SOS ⟨s1, σ⟩ →1 ⟨s′ 1, σ′⟩ ⟨s1;s2, σ⟩ →1 ⟨s′ 1;s2, σ′⟩ IfTSOS ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s1, σ⟩ if B[[b]]σ = tt IfFSOS ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s2, σ⟩ if B[[b]]σ = ﬀ WhileSOS ⟨while b do s end, σ⟩ →1 ⟨if b then s;while b do s end else skip end, σ⟩ Axiomatic Semantics SkipAx { P } skip { P } AssAx { P[x ↦→ e] } x:=e { P } SeqAx { P } s1 { Q } { Q } s2 { R } { P } s1;s2 { R } IfAx { b ∧ P } s1 { Q } { ¬b ∧ P } s2 { Q } { P } if b then s1 else s2 end { Q } WhAx { b ∧ P } s { P } { P } while b do s end { ¬b ∧ P } ConsAx { P′ } s { Q′ } { P } s { Q } if P ⇒ P′ and Q′ ⇒ Q Formal Methods and Functional Programming, Endterm, SS11 4 Assignment 1 (2 points) Consider the following IMP statement s: r := 1; while j>1 do r := r * j; j := j - 1 end Let σ be a state such that σ(j) = 3. Prove using the structural operational semantics that there is a state σ′ with σ′(r) = 6 such that ⟨s, σ⟩ → ∗ 1 σ′. Hint: Provide the complete derivation sequence. You do not need to provide the derivation trees to justify the transitions. Formal Methods and Functional Programming, Endterm, SS11 5Formal Methods and Functional Programming, Endterm, SS11 6 Assignment 2 (4 points) Consider the following program s: i:=n; sum:=0; while i#0 do sum:=sum+i; i:=i-1 end Prove that {n ≥ 0 ∧ n = N } s {sum = N · (N + 1) 2 } Provide only the proof outline. Hint: You may want to begin by ﬁnding a suitable invariant for the loop. Formal Methods and Functional Programming, Endterm, SS11 7Formal Methods and Functional Programming, Endterm, SS11 8 Assignment 3 (5 points) Prove that for all P and Q: ⊢ { P } while b do skip end { Q } ⇐⇒ ( P ∧ ¬b ⇒ Q ) Formal Methods and Functional Programming, Endterm, SS11 9Formal Methods and Functional Programming, Endterm, SS11 10 Assignment 4 (9 points) Recall the semantics of the parallelism construct extension to IMP, in the SOS semantics: Par1SOS ⟨s1, σ⟩ →1 ⟨s′ 1, σ′⟩ ⟨s1 par s2, σ⟩ →1 ⟨s′ 1 par s2, σ′⟩ Par2SOS ⟨s1, σ⟩ →1 σ′ ⟨s1 par s2, σ⟩ →1 ⟨s2, σ′⟩ Par3SOS ⟨s2, σ⟩ →1 ⟨s′ 2, σ′⟩ ⟨s1 par s2, σ⟩ →1 ⟨s1 par s′ 2, σ′⟩ Par4SOS ⟨s2, σ⟩ →1 σ′ ⟨s1 par s2, σ⟩ →1 ⟨s1, σ′⟩ Task A (6 points): Prove that, for all natural numbers i and for all statements s1, s2 and states σ, σ′: ⟨s1;s2, σ⟩ → i 1 σ′ =⇒ ⟨s1 par s2, σ⟩ → i 1 σ′ Formal Methods and Functional Programming, Endterm, SS11 11Formal Methods and Functional Programming, Endterm, SS11 12 Task B (3 points): Prove that it is not the case that for all statements s1, s2 and states σ, σ′: ⟨s1 par s2, σ⟩ → ∗ 1 σ′ =⇒ (⟨s1;s2, σ⟩ → ∗ 1 σ′ ∨ ⟨s2;s1, σ⟩ → ∗ 1 σ′) Hint: Show this by ﬁnding a counterexample: ie., ﬁnd speciﬁc statements s1, s2, and states σ, σ′ such that the implication above does not hold, and justify why formally the implication does not hold. Formal Methods and Functional Programming, Endterm, SS11 13 Assignment 5 (8 points) Consider a nonterminating server process that receives requests from clients. A single request contains the address and the language of the client. The server answers with messages containing the recipient address and an integer representing some data. This data depends on the language of the client. In addition, the server counts the number of received requests per language. Clients contact the server by sending a request over a shared channel, and then waiting for an answer. Once a client receives a message, it checks if the intended recipient of the message is itself. If that is not the case, it resends the message over the shared channel. The channel is synchronous (no buﬀering), and shared among all clients. We want to model this system in Promela. For sake of simplicity, we allow only two languages (German - de - and English - en). Answers sent by the server are modeled by type answer while clients’ requests are modeled by request (see below). We have two global variables msg de and msg en that contain the integer value of the data which should be sent by the server to German and English clients respectively. In addition, the global variables nreq de and nreq en track the number of German and English requests received by the server respectively. Finally, net models the shared synchronous channel used for the communications between clients and servers. The following Promela code contains these deﬁnitions: mtype = {de, en}; typedef answer { int address; int data; } typedef request { int address; mtype language; } int msg_en; int msg_de; int nreq_de = 0; int nreq_en = 0; chan net = [0] of {answer, request}; Task A (3 points): Write a Promela process active proctype client(int address; mtype language) that models a client, where address and language are its address and language, respectively. Formal Methods and Functional Programming, Endterm, SS11 14Formal Methods and Functional Programming, Endterm, SS11 15 Task B (3 points): Write a Promela process active proctype server() that models the server. Formal Methods and Functional Programming, Endterm, SS11 16 Task C (2 points): Consider the following property: All requests are answered eventually. • Is this a liveness or a safety property? Why? • Formalize this property in LTL by using the following atomic propositions: request m the client requests m answer m the server answers to m","libVersion":"0.5.0","langs":""}