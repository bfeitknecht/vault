{"path":"sem5/VLSI1/VRL/extra/Top-Down-Digital-VLSI-Design/Chapter-1---Introduction-to-Microelectronic_2015_Top-Down-Digital-VLSI-Desig.pdf","text":"CHAPTER 1 INTRODUCTION TO MICROELECTRONICS 1.1 ECONOMIC IMPACT Let us begin by relating the worldwide sales of semiconductor products to the world’s gross domestic product (GDP)1. In 2012, this proportion was 300 GUSD out of 72.0 TUSD (0.42%). Assessing the significance of semiconductors on the basis of sales volume grossly underestimates its impact on world economy, however. This is because microelectronics is acting as a technology driver that enables or expedites a range of other industrial, commercial, and service activities. Just consider • Computer and software industry, • Telecommunications and media industry, • Commerce, logistics, and transportation, • Natural science and medicine, • Power generation and distribution, and — last but not least — • Finance and administration. Microelectronics thus has an enormous economic leverage as any progress there spurs many, if not most, innovations in “downstream” industries and services. A popular example ... After a rapid growth during the last four decades, the electric and electronic content of passenger cars nowadays makes up more than 20% of the total value in simpler cars and close to 40% in well-equipped vehicles. What’s more, microelectronics is responsible for the vast majority of improvements that we have witnessed. Just consider electronic ignition and injection that have subsequently merged and evolved to become electronic engine management. Add to that anti-lock brakes and anti-skid stability pro- grams, trigger circuits for airbags, anti-theft equipment, automatic air conditioning, navigation aids, multiplexed busses, electronically controlled drive train and suspension, audio/video information and entertainment, LED illumination and headlights, night vision and collision avoidance systems, hybrid propulsion, and regenerative braking. 1 The GDP indicates the value of all goods and services sold during some specified year. Top-Down Digital VLSI Design © 2015 Elsevier Inc. All rights reserved. 1 2 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS EDA software & virtual components Semiconductor components Electronic components World-wide gross domestic product 2012: 72 TUSD/a 2012: 300 GUSD/a Electronic goods (computers, smartphones, home entertainment equipment, etc.) Applications: • Goods with embedded electronics (machines, cars, cameras, watches, etc.) (corporate IT, Internet, music download, etc.) • Information technology services FIGURE 1.1 Economic leverage of microelectronics on “downstream” industries and services. Forthcoming innovations include an 48 V on-board supply network, electronically driven valve trains, brake by wire, drive by wire, advanced driver assistance systems, and, possibly, entirely autonomous vehicles. And any future transition to propulsion by other forms of energy is bound to intensify the importance of semiconductors in the automotive industry even further. ... and its less evident face Perhaps less obvious but as important are the many contributions of electronics to the processes of development, manufacturing and servicing. Innovations behind the scene of the automotive industry include computer-aided design (CAD) and finite element analysis, virtual crash tests, computational fluid dynamics, computer numeric controlled (CNC) machine tools, welding and assembly robots, computer-integrated manufacturing (CIM), quality control and process monitoring, order processing, supply chain management, and diagnostic procedures. \u0002 This almost total penetration has been made possible by a long-running drop of cost per function at a rate of 25 to 29% per year. While computing, telecommunication, and entertainment products existed before the advent of microelectronics, today’s anywhere, anytime information and telecommunication society would not have been possible without, just compare the electronic devices in fig.1.2. Observation 1.1. Microelectronics is the enabler of information technology. On the positive side, microelectronics and information technology improve speed, efficiency, safety, comfort, and pollution control of industrial products and commercial processes thereby bringing competitive advantages to those companies that take advantage of them. On the negative side, the rapid progress, most of which is ultimately fueled by advances in semiconductor manufacturing technology, also implies a rapid obsoletion of hardware and software products, services, know-how, and organizations. A highly cyclic economy is another unfortunate trait of the semiconductor industry [1]. 1.1 ECONOMIC IMPACT 3 (a) (b) (c) FIGURE 1.2 The impact of microelectronics on consumer goods. A smartphone that takes advantage of advanced application- speciﬁc integrated circuits to combine a TV player, a jukebox, a calculator, a mobile phone, and much more in one handheld device (a). The same four functions just a couple of years earlier (ca. 2005) (b). Similar products from the 1970s that operate with vacuum tubes, discrete solid-state devices, and other components but include no large-scale integrated circuits (c) (photos courtesy of Alain Kaeslin). 4 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES An integrated circuit (IC) is an electronic component that incorporates and interconnects a multitude of miniature electronic devices, mostly transistors, on a single piece of semiconductor material, typically silicon.2 Many such circuits are jointly manufactured on a thin semiconductor wafer with a diameter of typically 300 mm before they get cut apart to become (naked) dies. The sizes of typical dies range between a pinhead and a large poststamp. The vast majority of ICs or (micro)chips,as they are colloquially referred to, gets individually encapsulated in a hermetic package before being soldered onto printed circuit boards (PCB). The rapid progress of semiconductor technology in conjunction with marketing activities of many competing companies — notably trade mark registration and eye catching — has led to a plethora of terms and acronyms, the meaning of which is not consistently understood by all members of the microelectronics community. This section introduces the most important terms, clarifies what they mean, and so prepares the ground for more in-depth discussions. Depending on perspective, microchips are classified according to different criteria. 1.2.1 THE GUINNESS BOOK OF RECORDS POINT OF VIEW In a world obsessed with records, a foremost question asks “How large is that circuit?”. Die size is a poor metric for design complexity because the geometric dimensions of a circuit greatly vary as a function of technology generation, fabrication depth, and design style. Transistor count is a much better indication. Still, comparing across logic families is problematic as the number of devices necessary to implement some given function varies.3 Gate equivalents attempt to capture a design’s hardware complexity independently from its actual circuit style and fabrication technology. One gate equivalent (GE) stands for a two- input nand gate and corresponds to four MOSFETs in static CMOS; a flip-flop takes roughly 7 GEs. Memory circuits are rated according to storage capacity in bits. Gate equivalents and memory capacities are at the basis of the naming convention below. 2 This is a note to non-Angloamerican readers made necessary by a tricky translation of the term silicon. English German French Italian meaning silicon Silizium silicium silicio Si, the chemical element with atomic number 14 silicone Silikon silicone silicone a broad family of polymers of Si with hydrocarbon groups that comprises viscous liquids, greases and rubber-like solids 3 Consistent with our top-down approach, there is no need to know the technicalities of CMOS, TTL and other logic families at this point. Interested readers will find a minimum of information in appendix 1.5. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 5 circuit complexity GEs of logic + bits of memory small-scale integration (SSI) 1 ... 10 medium-scale integration (MSI) 10 ... 100 large-scale integration (LSI) 100 ... 10 000 very-large-scale integration (VLSI) 10 000 ... 1 000 000 ultra-large-scale integration (ULSI) 1 000 000 ... Clearly, this type of classification is a very arbitrary one in that it attempts to impose boundaries where there are none. Also, it equates one storage bit to one gate equivalent. While this is approximately correct when talking of static RAM (SRAM) with its four- or six-transistor cells, the single-transistor cells found in dynamic RAMs (DRAM) and in ROMs cannot be likened to a two-input nand gate. A better idea is to state storage capacities separately from logic complexity and along with the memory type concerned, e.g. 75 000 GE of logic + 32 Kibit SRAM + 512 bit flash ≈ 108 000 GE overall complexity.4 One should not forget that circuit complexity per se is of no merit. Rather than coming up with inflated designs, engineers are challenged to find the most simple and elegant solutions that satisfy the specifications given in an efficient and dependable way. 1.2.2 THE MARKETING POINT OF VIEW In this section, let us adopt a market-oriented perspective and ask “How do functionality and target markets relate to each other?” General-purpose ICs The function of a general-purpose IC is either so simple or so generic that the component is being used in a multitude of applications and typically sold in huge quantities. Examples include gates, flip-flops, counters, adders, and other components of the various 7400 families but also RAMs, ROMs, microcomputers, and many digital signal processors (DSP). Application-speciﬁc integrated circuit Application-specific integrated circuits (ASIC) are being specified and designed with a particular purpose, equipment, or processing algorithm in mind. Initially, the term had been closely associated with glue logic, that is to all those bus drivers, decoders, multiplexers, registers, interfaces, etc. found in many system assembled from integrated circuits. ASICs have evolved from substituting a single package for such ancillary functions that were originally dispersed over several SSI/MSI circuits. 4 The binary prefixes kibi- (Ki), mebi- (Mi), gibi- (Gi) and tebi- (Ti) are recommended by various standard bodies for 210, 220,230 and 240 respectively because the more common decimal SI prefixes kilo- (k), mega- (M), giga- (G) and tera- (T) give rise to ambiguity since 210 ∗= 103. As an example, 1 Mibyte = 8 Mibit = 8 · 220 bit with Mibyte being pronounced as “me bi byte”, a contraction of “mega binary byte”. 6 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Today’s highly-integrated ASICs are much more complex and include powerful systems or subsys- tems that implement highly specialized tasks in data and/or signal processing. The term system-on- a-chip (SoC) has been coined to reflect this development. Overall manufacturing costs, performance, miniaturization, and energy efficiency are key reasons for opting for ASICs. Still from a marketing point of view, ASICs are subdivided further into application-specific standard products and user-specific ICs. Application-specific standard product (ASSP). While designed and optimized for a highly specific task, an application-specific standard product circuit is being sold to various customers for incorporation into their own products. Examples include graphics accelerators, multimedia chips, data compression circuits, forward error correction devices, ciphering/deciphering circuits, smart card chips, chip sets for cellular radio, PCIe and Ethernet interfaces, wireless LAN chips, and driver circuits for power semiconductor devices, just to name a few.5 User-specific integrated circuit (USIC). As opposed to ASSPs, user-specific ICs are being designed and produced for a single company that seeks a competitive advantage for their products, they are not intended to be marketed as such. Control of innovation and protection of proprietary know- how are high-ranking motivations for designing circuits of this category. Popular USICs include the Apple A4 SoC introduced with the iPad in 2010 and its successors A5, A6, A7, etc. Various audio processor chips for hearing aids have been developed for similar reasons. User-specific parts are sometimes fabricated in relatively modest quantities. As an example, consider the USIC (14 · 106 GE, 90 nm CMOS, 60 W) that forms the heart of the first oscilloscope family by Rhode & Schwarz. counter logic gate SSI MSI LSI VLSI ULSI multiplier parallel complexity hardware . . . . \"system on a chip (SoC) \" . . . . functionality glue logic mobile radio base-band processor compressor video data digital filter error-correcting encoder/decoder transceiver spatial diversity . . . . memory [and still more memory] . . . . . . . . program-controlled processor . . . .interface computer . . . . field-programmable logic devices . . . . (before getting programmed) general purpose application- specific FIGURE 1.3 ICs classiﬁed as a function of functionality and hardware complexity. 5 Microprocessors that have their instruction sets, input/output capabilities, memory configurations, timers, and other auxiliary features tailored to meet specific needs also belong to the ASSP category. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 7 1.2.3 THE FABRICATION POINT OF VIEW Another natural question is “To what extent is a circuit manufactured according to user specifications?”. Full-custom ICs Integrated circuits are manufactured by patterning multiple layers of semiconductor materials, metals and dielectrics. In a full-custom IC, all such layers are patterned according to user specifications. Fabricating a particular design requires wafers to go through all processing steps under control of a full set of lithographic photomasks all of which are made to order for this very design, see fig.1.4.This is relevant from an economic point of view because mask manufacturing is a dominant contribution to non-recurring VLSI fabrication costs. A very basic CMOS process featuring two layers of metal requires some 10 to 12 fabrication masks, any additional metal layer asks for two more masks. At the 65 nm generation, an advanced CMOS process comprises twelve layers of metal and involves some 45 lithography cycles. unprocessed wafer most masks shared with other designs few masks made to order for one design all masks made to order for one design preprocessed (b)(a) wafer FIGURE 1.4 Full-custom (a) and semi-custom (b) mask sets compared. Semi-custom ICs Only a small subset of fabrication layers is unique to each design. Customization starts from prepro- cessed wafers that include large quantities of prefabricated but largely uncommitted primitive items such as transistors or logic gates. These so-called master wafers then undergo a few more processing steps 8 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS during which those primitives get interconnected such as to complete the electrical and logic circuitry required for a particular design. As an example, fig.1.5 shows how a logic gate is being manufactured from a few pre-existing MOSFETs by etching open contact holes followed by deposition and patterning of one metal layer. In order to accommodate designs of different complexities, vendors make masters available in various sizes ranging from a couple of thousands to millions of usable gate equivalents. Organization and customization of semi-custom ICs have evolved over the years. Gate array, aka channeled gate array. Originally, sites of a few uncommitted transistors each were arranged in long rows that extended across most of the die’s width. Metal lines were then used to connect the prefabricated transistors into gates, and the gates into circuits. The number of custom photomasks was twice that of metal layers made to order. As long as no more than two layers of metal were available, special routing channels had to be set aside in between to accommodate the necessary intercell wiring, see fig.1.6a. Sea-of-gates. When more metals became available in the early 1990s, those early components got displaced by channelless sea-of-gate circuits because of their superior layout density. The availability of higher-level metals allowed for routing over the gates customized on the layers underneath, dispensing with the waste of routing channels, see fig.1.6b. Thanks to a trick called separation gate, sea-of-gates also did away with the periodic gaps in the layout that had grouped MOSFETs into sites. All this together afforded the flexibility to accommodate highly repetitive structures such as RAMs and ROMs. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 9 custom metallization + preprocessed master = customized circuit= not used not used (b) (a) (c) FIGURE 1.5 Customization of a gate array site (simpliﬁed). A six-pack of prefabricated MOS transistors (a), metal pattern with contact openings (b), and ﬁnished 2-input NAND gate (c). Structured ASIC. A decade later, the number of metal layers had grown to a point where it became uneconomical to customize them all. Instead, transistors are preconnected into small generic subcircuits such as nands, muxes, AOI gates, full-adders, lookup tables (LUT), and bistables on the lower layers of metal. Customization is essentially confined to interconnecting those subcircuits on the top two to four metal layers. The design process is also accelerated as power and clock distribution networks are largely prefabricated. 10 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Fabric. Exploding mask costs and the limitations of sub-wavelength lithography currently work against many custom-made photomasks. The idea behind fabrics is to standardize the metal layers as much as possible. A subset of them are patterned into fixed segments of predetermined lengths which get pieced together by short metal straps, aka jumpers, on the next metal layer below or above to obtain the desired wiring. Customization is via the vertical contact plugs, called vias, that connect between two adjacent layers. predefined routing channel input/output pad routing channel only where needed unutilized areas GA SOG utilized devices availability metal layers of multiple row of prefabricated transistor pairs row of prefabricated gate-array sites (a) (b) FIGURE 1.6 Floorplan of channeled gate-array (a) versus channelless semi-custom circuits (b). Due to the small number of design-specific photomasks and processing steps, semi-custom manu- facturing significantly reduces the non-recurring costs as well as the turnaround time.6 Conversely, prefabrication necessarily results in non-optimal layouts. Note the unused transistor pair in fig.1.5,for instance, or think of the extra parasitic capacitances and resistances caused by standardized wiring. Prefabrication also implies a self-restraint to fixed transistor geometries thereby further limiting circuit density, speed, and energy efficiency. Lastly, not all semi-custom masters accommodate on-chip memories equally well. The concept of metal customization is also applied to analog and mixed-signal circuits. Prefabricated masters then essentially consist of uncommitted transistors (MOSFETs and/or BJTs) and of passive devices.7 6 Turnaround time denotes the lapse of time from coming up with a finalized set of design data until physical samples become available for testing. 7 Microdul MD300 and MD500 are just two examples. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 11 Field-programmable logic Rather than manufacturing dedicated layout structures, a generic part is made to assume a user- defined circuit configuration by purely electrical means. No custom photomasks are involved. Field- programmable logic (FPL) devices are best viewed as “soft hardware”.8 Unlike semi- or full-custom ASICs, FPL offers turnaround times in the order of seconds. Most of today’s product families allow for in-system configuration (ISC). The key to obtaining various gate-level networks from the same hardware resources are a multitude of electrical links that can be done — and in many cases also undone — long after a device has left the factory. For the moment being, you can think of a programmable link as some kind of fuse. Commercial parts further differ in how the on-chip hardware resources are organized. Field- programmable gate arrays (FPGA), for instance, resemble mask-programmed gate arrays (MPGA) in that they are organized into a multitude of logic sites and interconnect channels. In this text, we will be using the term field-programmable logic (FPL) as a collective term for any kind of electrically configurable IC regardless of its capabilities, organization, and configuration technology.9 Their important market share affords FPL devices a more detailed discussion in chapter 2. Standard parts By standard part, aka commercial off-the-shelf (COTS) component, we mean a catalog part with no customization of the circuit hardware whatsoever. 1.2.4 THE DESIGN ENGINEER’S POINT OF VIEW Hardware designers will want to know “Which levels of detail are being addressed during a part’s design process?”. Hand layout In this design style, an IC or some subblock thereof gets entered into the CAD database by delineating individual transistors, wires, and other circuit elements at the layout level. To that end, designers use a layout editor, essentially a color graphics editing tool, to draw the desired geometric shapes to scale, much as in the illustration of fig.1.5c. Any design so established must conform with the layout rules imposed by the target process. Porting it to some other process requires the layout to be redesigned unless the new set of rules is obtained from the previous one by simple scaling operations. Editing geometric layout is slow, cumbersome, and prone to errors. Productivity is estimated to lie somewhere between 5 and 10 transistors drawn per day, including the indispensable verification, correction, and documentation steps which makes this approach prohibitively expensive. 8 As opposed to firmware which can be understood as frozen instruction sequences or “hard software”. 9 “Field-configurable” would better reflect what actually happens and also avoid confusion with program-controlled processors. Yet, the term “programmable” has gained so much acceptance in acronyms such as PLA, PAL, CPLD, FPGA, etc. that we stay with it. Just make sure to understand there is no instruction sequence to execute. 12 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Conversely, manual editing gives designers full control over their layouts when in search of maximum density, performance, and/or electrical matching. Geometric layout, which in the early days had been the only avenue to IC design, continues to play a dominant role in memory and analog circuit design. In digital design, it is considered archaic, although a fully handcrafted circuit may outperform a synthesis- based equivalent by a factor of three or more. Cell libraries and schematic entry Design capture here occurs by drawing circuit diagrams where subfunctions are instantiated and interconnected by wires as illustrated in fig.1.9c. All the details of those elementary subcircuits, aka cells, have been established before, collected in cell libraries, and made available to VLSI designers. For the sake of economy, cell libraries are shared among numerous designs. A schematic editor differs from a standard drawing tool in several ways: • Circuit connectivity is maintained when components are being relocated. • A schematic editor is capable of reading and writing both circuit diagrams and netlists.10 • It supports circuit concepts such as connectors, busses, node names, and instance identifiers. The resulting circuits and netlists are then verified by simulation and other means. Compared to manual layout entry, cell-based design represented a marked step towards abstracting from process-dependent details. Physical design does not go beyond place and route (P&R) where each cell is assigned a geometric location and connected to other cells by way of metal lines. As this is done by automatic tools, the resulting layouts are almost always correct by construction and design productivity is much better than for manual layout. Another advantage is that any electronics engineer can start to develop cell-based ASICs with little extra training. 10 The difference between a netlist and a circuit diagram, aka schematic (drawing), is explained in section 1.6. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 13 INA INB INC OUP architecture procedural of nor3 is begin end procedural; OUP <= not (INA or INB or INC) after tpd; entity nor3 is port ( INA, INB, INC : in StdLogic; OUP : out StdLogic; ) generic ( tpd : time := 1.0 ns ); end nor3; 0 0 0 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 stimuli responses 1 0 0 0 0 1 INA OUPINB INC INA INB INC OUP INA OUPINB INC INA OUPINB INC VSS VDD VSS VDD INA OUPINB INC INA OUPINB INC VSS VDD VSS VDD (a) (b) (c) (d) (e) (f) FIGURE 1.7 Views of a library cell or of any other subcircuit shown for a 3-input NOR gate. Icon (a), simulation model (b), test vector set (c), transistor-level schematic (d), detailed layout (e), and cell abstract (f) (simpliﬁed). Library elements are differentiated into standard cells, macrocells, and megacells. Standard cells are small but universal building blocks such as logic gates, latches, flip-flops, multiplex- ers, adder slices, and the like with preestablished layout and defined electrical characteristics.11 They are the preferred means for implementing random logic as there is virtually no restriction on the functionality that can be assembled from them. Commercial libraries include between 300 and 500 standard cells with logic complexities ranging from 1/2 to some 60 gate equivalents; the pertaining collection of datasheets typically occupies between 400 and more than 1000 pages. On the semiconductor die, standard cells get arranged in adjoining parallel rows with the interconnecting wires running over the top of them. This so-called over-the-cell routing style is being practiced ever since three and more layers of metal have become available.12 Megacells also come with a ready-to-use layout. What sets them apart from standard cells is their larger size and complexity. Typical examples include microprocessor cores and peripherals such as direct memory access controllers, various serial and parallel communication interfaces, timers, A/D and D/A converters, and the like. Megacells are ideal for piecing together a microcomputer or an ASIC with comparatively very little effort. Typical application areas are in telecommunications equipment, automotive equipment, instrumentation, and control systems. 11 Standard cells are also termed “books” (within IBM) and macros (in the context of semi-custom ICs). 12 Older processes did not afford that much routing resources and the wires had to be inserted between the rows such as to form well-defined routing channels. The resulting separation between adjacent cell rows obviously made a poor usage of silicon. In fact, it was not uncommon that routing channels occupied twice or even three times as much area as the active cells themselves. 14 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Macrocells , in contrast, have their layout assembled on a per case basis according to designer specifications. The software tool that does so is called a macrocell generator and is also in charge of providing a simulation model, an icon, a datasheet, and other views of the macrocell. For reasons of area and design efficiency, this approach is essentially limited to a few common building blocks of medium complexity such as RAMs and ROMs. This is because all such structures show fairly regular geometries that lend themselves well to being put together from a limited collection of layout tiles. Those tiles are manually designed, optimized and verified before being stored as part of the generator package. std cell std cell std cell std cell std cell standard cell row with over-the-cell routing megacell macrocell megacell megacell megacell macrocell FIGURE 1.8 Typical cell mix in a full-custom IC. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 15 As standard cells, macrocells, megacells, and hand layout all have their specific merits and drawbacks, they are often combined in the design of full-custom ICs.13 The resulting mix of cells is illustrated in fig.1.8. While design productivity in terms of transistors instantiated per day is clearly superior for megacells and macrocells than for standard cells, expect an average of some 15 to 20 GEs per day from cell-based design. Schematic entry was important at a time. Today, it is confined to functions that are neither available as library items nor amenable to automatic synthesis. Schematic entry further continues to be essential in analog circuit design. Automatic circuit synthesis The entry level here is a formal description of an entire chip or of a major subblock therein. Most such synthesis models are established using a text editor and look like software code. Yet, they are typically written in a hardware description language (HDL) such as VHDL or SystemVerilog, see fig.1.9b. The output from the automatic synthesis procedure is a gate-level netlist. That netlist then forms the starting point for place and route (P&R) or for preparing a bit stream that will eventually serve to configure an FPL device. Logic synthesis implies the generation of combinational networks and — as an extension — of fairly simple finite state machines (FSM). A synthesis tool accepts logic equations built from operators such as not, and, or, xor, etc., truth tables, state graphs, and the like. Automatic tools for logic synthesis and optimization have been in routine use for a long time, they have been completely absorbed in today’s EDA flows. Register transfer level (RTL) synthesis goes one step further in that an entire circuit is viewed as a network made up of storage elements — registers and possibly also RAMs — that are held together by combinational building blocks, see fig.1.9a. Also, behavioral specifications are no longer limited to simple logic operations but are allowed to include arithmetic functions (e.g. comparison, addition, subtraction, multiplication), string operations (e.g. concatenation), arrays, enumerated types, and other more powerful constructs. The synthesis process essentially begins with the registers that store the circuit’s state. Next, the combinational networks required to process data words while they are moving back and forth between those registers are generated and optimized. Command on a circuit’s structure is otherwise left to the designer who decides on the number of registers, on the concurrency of operations, on the necessary computational resources, etc. RTL synthesis dispenses with the need of manually assembling a given functionality from logic gates and, therefore, greatly facilitates design parametrization and maintenance. Synthesis further enables engineers to render their work portable, that is to capture all relevant characteristics of a circuit design in a form that is virtually technology-independent. It so becomes possible to defer the commitment to a specific silicon foundry, to a particular cell library, or to subordinate idiosyncrasies of some FPL family until late in the design process. As fabrication processes are frequently being upgraded, making designs portable and reusable is extremely valuable. 13 In a microcomputer, for instance, the datapath might be implemented in hand layout, data RAM and program ROM generated as macrocells, the controller as a network of standard cells obtained from automatic synthesis, while a serial interface from an earlier design might get reused as a megacell. 16 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS architecture procedural of patternmatch is begin signal PREST : Std_Logic_Vector(0 to 5);; end architecture procedural; process (CLK,CLR) is begin if CLR=’1’ then allbits : for i in 1 to 5 generate end process; elsif CLK’event and CLK=’1’ then end generate; PREST(i) <= PREST(i-1); end if; PREST(0) <= INP; PREST(i) <= ’0’; OUP <= true when PREST(1 to 5)=\"11011\" else false; DQ Q CLR CLK DQ Q CLR CLK DQ Q CLR CLK DQ Q CLR CLK DQ Q CLR CLK ROM + | - | 0 * +1 ww v 2w+3 (b) (c) (a) FIGURE 1.9 RTL diagram (a), RTL synthesis model (b), and gate-level schematic (c) (simpliﬁed, note that (a) and (b) refer to different circuits). Architecture synthesis, which is also referred to as high-level synthesis in VLSI circles, starts from an algorithmic description such as a C++ program or a Matlab model, for instance. As opposed to an RTL model, the source code is purely behavioral and includes no explicit indications for how to marshal data processing operations and the necessary hardware resources. Rather, these elements must be obtained in an automatic process that essentially works in five major phases: 1. Identify the computational and storage requirements of the algorithm. 2. From a virtual library of common hardware building blocks, select a suitable item for each kind of processing and storage operation. 3. Establish a cycle-based schedule for carrying out the algorithm with those resources. Where there is a choice, indicate which building block is to process what data item. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 17 4. Decide on a hardware organization able to execute the resulting work plan. Specify the architecture in terms of combinational logic blocks, data registers, on- and off-chip memories, busses, switches, signals, and finite state machines. 5. Keeping track of data moves and operations for each clock cycle, translate all this into the necessary instructions for synthesis at the RTL level. Generating a close-to-optimum architecture under performance, power, cost and further con- straints represents a formidable optimization problem, especially if a tool is expected to work for arbitrary applications. To get an idea, consult the lists of issues in section 1.3.2. Architecture synthesis allows for rapid exploration of the design space and performs well in a couple of specialized areas (e.g. digital filters and ASIPs). Apart from that, however, high-level synthesis does not — up to now — produce results comparable to those of inspired and experienced engineers. Nonetheless, architecture synthesis continues to be an active field of research as VLSI design can no longer afford to deal with low-level details. Even an experienced RTL code writer cannot be expected to complete much more than 40 lines of code per day. Estimates say that design productivity ranges from 20 to 400 GE per working day.14 Albeit quite impressive, these figures are actually insufficient to keep pace with the rapid advances of fabrication technology. Design with virtual components In the late 1990s, synthesis technology together with HDL standardization has opened up the door for an entirely new approach to designing digital VLSI circuits. A virtual component (VC)15 essentially is a HDL synthesis package that is made available to others on a commercial basis for incorporation into their own ICs. VLSI design teams across the electronics industry are so put in a position to purchase hardware designs for major subfunctions on the merchant market, dispensing with the need to write too much HDL source code on their own. The licensees just remain in charge of synthesis, place and route (P&R), and overall verification. Though of highly specific nature, most VCs implement fairly common subfunctions; some degree of parametrization is sought to cover more potential applications. Examples include, but are not limited to, micro- and signal processor cores, all sorts of filters, audio and/or video en/decoders, cipher functions, error correction en/decoders, USB, FireWire, and many other interfaces. 14 Be warned that design productivity is extremely dependent on circumstances: • The effort per transistor is not the same for memories, logic, and mixed-signal designs. • The more circuit blocks can be reused that have been validated before, the better. • Skilled engineering teams not only work faster but also manage with less design iterations. • Powerful EDA tools can work out many minor circuit and layout details automatically. • The existence of an established and proven design flow benefits the design process. • Tight timing, power and layout density budgets ask for more human attention. • Unstable specifications and rapidly changing teams are detrimental to productivity. 15 Virtual components are better known as intellectual property modules or IP modules for short. We prefer the term “virtual component” because IP does not point to electronics in any way and because the acronym might easily be misunderstood as “Internet protocol”. Other synonyms include “core” and “core ware”. 18 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS While hard modules such as standard cells, macrocells and megacells had freed most IC designers from addressing transistor-level issues and detailed layout by the mid 1980s, the soft VCs have extended these benefits to higher levels of abstraction in a natural way. New business opportunities have opened up and companies that specialize in marketing synthesis models have emerged. A classification scheme depicted in table 1.1 nicely complements the one of fig.1.3. Electronic system-level (ESL) design automation More recently, competitive pressure has incited the industry to look at design productivity from a wider perspective. ESL design automation is a collective term for efforts that take inspirations from numerous ideas. • Enforce a correct-by-construction methodology by supporting progressive refinement starting with a virtual prototype of the system to be. • Recur to architecture synthesis to explore the solution space more systematically and more rapidly than with conventional, e.g. RTL synthesis, methods. Table 1.1 IC families as a function of fabrication depth and design abstraction level. Fabrication Electrical Semi-custom Full-custom depth conﬁguration fabrication fabrication Design Cell-based as obtained from Hand layout level ◦ synthesis with VCs in HDL form, ◦ synthesis from captive HDL code, ◦ schematic entry, or a mix of these Product Field- Gate-array, Std. cell IC Full-custom IC name programmable sea-of-gates, (with or w/o logic device or structured macrocells and (FPGA, CPLD) ASIC megacells) • Support hardware-software co-design by making it possible to start software development before hardware design is completed. • Improve the coverage and efficiency of functional verification by dealing with system-level transactions and by taking advantage of formal verification techniques where possible. 1.2.5 THE BUSINESS POINT OF VIEW Our final question is concerned with the sharing of industrial activities among partners. “What is the business model of a given semiconductor company?” Integrated device manufacturer (IDM) is the name for a company that not only designs and markets microchips but that also does the wafer processing in-house in their own semiconductor fabrica- tion plant or fab for short. Examples: Intel, Samsung, Toshiba, ST-Microelectronics, Texas Instruments, Cypress Semicon- ductor, AMS. 1.2 MICROELECTRONICS VIEWED FROM DIFFERENT PERSPECTIVES 19 Silicon foundry, albeit technically incorrect, designates a company that operates a complete wafer processing line and that offers its manufacturing services to others. Examples: TSMC, UMC, SMIC, etc. Fabless vendor. A company that develops and markets proprietary semiconductor components but has their manufacturing commissioned to an independent silicon foundry rather than operating any wafer processing facilities of its own. Examples: Altera (FPL), Actel (FPL), Broadcom (networking components), Cirrus Logic-Crystal (audio and video chips), Lattice Semiconductor (FPL), Nvidia (graphics accelerators), PMC- Sierra (networking components), Qualcomm (chipsets for wireless telecommunication), and Xilinx (FPL). Fab-lite vendor is the name for a company that outsources standard wafer processing steps but retains the limited and highly specialized manufacturing capabilities required to integrate sensors, actuators, microelectromechanical systems, RF components (such as high-Q inductors and RF switches), photonic devices, or the like, in a silicon substrate along with electronic circuitry. This approach typically implies that fully or partially processed CMOS wafers undergo a series of final processing steps at the vendor’s own facilities. Examples: Luxtera, Sensirion. Intellectual property (IP) vendor. A fabless company that makes it a business to develop hardware subfunctions and to license them to others for incorporation into their ICs. Intellectual property here refers to any kind of predeveloped electronic subfunction such as standard cells, macrocells, megacells, or virtual components. Examples: ARM, Faraday, Sci-worx, Synopsys. Originally, all IC business had been confined to vertically integrated semiconductor companies that designed and manufactured standard parts for the markets they perceived. Opening VLSI to other players was essential to instilling new and highly successful fabless business models. Three factors came together in the 1980s to make this possible. • Generous integration densities at low costs. • Proliferation of high-performance engineering workstations and EDA software. • Availability of know-how in VLSI design outside IC manufacturing companies. This text wants to contribute to the third item with a focus on synthesis-based design. 20 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS 1.3 THE VLSI DESIGN FLOW 1.3.1 THE Y-CHART, A MAP OF DIGITAL ELECTRONIC SYSTEMS The Y-chart by Daniel Gajski is convenient for situating the various stages of digital design and the numerous attempts to automate them. Three axes stand for three different ways to look at a digital system and concentric circles represent various levels of abstraction, see fig.1.10. physical perspective back-end design behavioral perspective structural perspective front-end design physical behavioral perspective structural perspective electrical logic (aka gate-level) architecture system register transfer levels of abstraction FINISH START logic synthesis transfer functions subtasks truth tables, state graphs data moves and operations standard cells, macrocells detailed layout mask polygons, chip or board placement and routing floorplan, partitioning algorithm and I/O top blocks physical perspective transistors, wires gates, latches, flip-flops ALUs, registers, memories subblocks FIGURE 1.10 The Y-chart of digital electronic systems. From a behavioral perspective we are only interested in what a circuit or system does, not in how it is actually built. Put differently, the design is viewed as a black box that processes information by producing some output symbols in response to some input symbols. What matters most is the dependency of the output from past and present inputs, but timing relationships between input data, output data, and clock signals may be relevant too. A structural way of looking at electronic circuits is concerned with connectivity, that is with the building blocks from which a circuit is composed and with how they connect to each other. Given some behavioral specification, it is always possible to come up with more than one network for implementing it. Structural alternatives typically differ in terms of circuit complexity, performance, energy efficiency, and in other characteristics of practical interest. 1.3 THE VLSI DESIGN FLOW 21 What counts from a physical point of view is how the various hardware components and wires are arranged in the space available on a semiconductor chip or on a printed circuit board. Again, there is a one-to-many relationship between structural description and physical arrangement. Illustrations of circuits viewed at different levels of abstraction and from all three perspectives have been given in figs.1.7 and 1.9 while fig.1.11 adds some new ones. In addition, table 1.2 lists the objects that are of interest for the individual views. It is interesting to note that different time units are used depending on the abstraction level on which behavior is described. Table 1.2 Views and levels of abstraction in digital design. level of view concept abstraction behavioral structural physical of time system input/output system with chip, board, sequence, relationship input/output or cabinet throughput architecture bus functional organization partitioning, partial ordering model (BFM) into subsystems ﬂoorplan relationships register data transfers ALUs, muxes, placement and clock cycles transfer and operations and registers routing (cycle-true) logic truth tables, gates, latches, standard cells events, delays, state graphs and ﬂip-ﬂops or components timing paramsa electrical transfer transistors, detailed layout, continuous functions wires, R, L, C mask polygons a Such as tpd, tsu, tho, and the like. Glitches are also accounted for at this level of abstraction. 22 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS architecture seriesexpansion of cosine is begin process (theta) is begin sum := 1.0; end process; end architecture seriesexpansion; end loop; result <= sum; variable sum, term : real; variable n : natural; term := 1.0; n := 0; while abs term > abs (sum / 1.0E6) loop n := n+2; term := (-term)*theta**2 / real(((n-1)*n)); sum <= sum+term; Uoup inpU trellis trace unit back survivor memory branch metric unit comput. add- compare- units select path metric I memory path metric II memory AB C state graph (models reactive behavior) data dependency graph (models transformatorial behavior) local controller local controller local controller super- visory controller (b) (c) (e) (f) (a) (d) FIGURE 1.11 Floorplan of a VLSI chip (a), software model (b), encapsulated chip (c), graphical formalisms (d), transfer characteristic of an inverter (e), and block diagram (f) (simpliﬁed). 1.3.2 MAJOR STAGES IN DIGITAL VLSI DESIGN The development cycle of VLSI circuits comprises a multitude of steps, illustrated by way of two drawings that partially overlap. Fig.1.12 focuses on system-level issues and reduces all activities that are related to actual IC design to their most simple expression while fig.1.13 does the opposite. Again, figs.1.7, 1.9,and 1.11 help to clarify what is meant. The remainder of this chapter explains how everything fits together before important choices that have to be made as part of front-end design are being discussed in the upcoming chapters. Depending on your preferences, you may skim over sections 1.3.2 to 1.3.4 for a first reading and come back later when having developed a better understanding of the details. System-level design. The decisions taken during this stage are most important as they determine the final outcome more than anything else. • Specify the functionality, operating conditions, and desired characteristics (in terms of performance, power, form factor, costs, etc.) of the system to be. • Partition the system’s functionality into subtasks. 1.3 THE VLSI DESIGN FLOW 23 • Explore alternative hardware and software tradeoffs. • Decide on make or buy for all major building blocks. • Decide on interfaces and protocols for data exchange. • Decide on data formats, operating modes, exception handling procedures, etc. • Define, model, evaluate and refine the various subtasks from a behavioral perspective. It is a characteristic trait of this stage that acceptance criteria, design procedures, design expertise, and the software tools that are being put to service vary greatly with the nature of the overall application and of the subsystem currently being considered. Examples packet router audio compressor microprocessor mode of operation reactive transformatorial must ﬁt both data manipulation shallow deep must ﬁt both real-time processing yes typically yes maybe, maybe not numerical precision known a priori to be determined must ﬁt both design focus architecture algorithm instruction set background queuing theory human perception code analysis evaluation tool traﬃc simulation algorithmic simulation benchmark programs \u0002 Fig. 1.12 exposes another difficulty of system-level design that has its roots in the highly heterogeneous nature of electronic systems. At various points, some fairly abstract design description must be propagated from one software tool to the next. Yet, there are no mathematical formalisms and agreed-on computer languages of adequate scope to capture a sufficient portion of a system, let alone a system as a whole. Some relief comes from the system-level modeling language SystemC that supports piecing together partial models. 24 CHAPTER 1 INTRODUCTION TO MICROELECTRONICSs y s t e m - l e v e l d e s i g nh a r d w a r e d e s i g n collection of algorithms along with data formats ASIC or FPL device program-controlled processor truly portable and amenable to synthesis with good results? efficient hardware implementation of algorithms behavioral modelling and simulation model libraries for various subfunctions control flow, cooperat. finite state machines protocols, user interfaces ressource and/or instruction set planning algorithms and system archi- tecture design abstract mathematical models subject to successive refinement data networks, congestions, traffic, queues effects from finite word sizes, scaling filter synthesis, filtering, correlation error correction coding, modulation source coding, compression data key distribution, ciphering, authentication clock recovery synchronization, behavioral aspects addressed structural aspects addressed physical aspects addressed is there any broadly accepted formalism for specification? • exploration, • fast prototyping, and • validation of algorithms and system architectures implies addressing a subset of the issues shown here forwarding of design data corrective action by designer based on feedback information EDA problem areas code generator for signal- or microprocessor machine code to processor from marketing and customers HDL generator for hardware synthesis front-end VLSI design gate-level schematics bit-true HDL model back-end VLSI design layout data to IC fabrication hk 12.5.14 system specifications - interactive resource allocation - automatic scheduling - automatic binding - translation to RTL model to programmable IC bit stream configuration back-end FPGA or CPLD design depending on the application MATLAB is a de facto standard, SystemC helps piece diverse models together UML may provide a workable solution FIGURE 1.12 Design ﬂow from a system-level perspective (greatly simpliﬁed).16 Algorithm design. The central theme is to meet the data and/or signal processing requirements defined before with a series of computations that are streamlined in view of their implementation in hardware. The subsequent assignments make part of algorithm design. • Coming up with a collection of suitable algorithms or computational paradigms.17 • Cut down computational burden and memory requirements. • Find acceptable compromises between computational complexity and accuracy. 16 This text focuses on hardware; implementing the software components in a system is beyond its scope. 17 The term “computational paradigm” has been chosen to include finite state machines, cellular automata, neural networks, fuzzy logic, and other computational schemes that are not necessarily covered by the word “algorithm” as it is normally understood in the context of software engineering. 1.3 THE VLSI DESIGN FLOW 25 • Analyze and contain effects of finite word-length computation. • Decide on number representation schemes. • Evaluate alternatives and select the one best suited for the situation at hand. • Quantify the minimum required computational resources (in terms of memory, word widths, arithmetic and logic operations, and their frequencies of occurrence). Algorithm design culminates in a bit-true software model which is indispensable for checking figures of merit relevant for the application at hand, e.g. signal-to-noise ratio, coding gain, data compression factor, error rate, and the like against specifications. Architecture design. VLSI architects essentially decide on the necessary hardware resources and organize their interplay such as to implement a known computational algorithm under the performance, cost, power and other constraints imposed by the target application. The hardware arrangement they have to come up with must capture the essential structural characteristics of the future circuit but, at the same time, abstracts from implementation details. Still, architecture design also implies selecting a target technology and taking into account its possibilities and limitations.18 Architecture design starts from fairly abstract notions of a circuit’s functionality and gradually proceeds to more detailed representations. The process is understood to happen in two substages, namely high-level architecture design and register transfer level design. The former involves. • Partition a computational task in view of a hardware realization. • Organize the interplay of the various subtasks. • Decide on the hardware resources to allocate to each subtask. (allocation) • Define datapaths and controllers.19 • Decide between off-chip RAMs, on-chip RAMs, and registers. • Decide on communication topologies and protocols (parallel, serial). • Define how much parallelism to provide in hardware. • Decide where to opt for pipelining and to what degree. • Decide on a circuit style, fabrication technology, and manufacturing process. • What abstraction level to design at and what cell libraries to use, if any? • Get a first estimate of the circuit’s size and cost. • etc. The result is captured in a high-level block diagram that includes datapaths, controllers, mem- ories, interfaces, and key signals. A preliminary floorplan is also being established. Verification of an architecture typically occurs by way of simulations, where each major building block is represented by a behavioral model of its own. 18 Take this as an analogy from everyday life. Assume you were given the recipe for a phantastic cake by your grandmother and you were now to make a business out of it by setting up a bakery to mass-produce the cake. The recipe corresponds to the algorithm or software model that specifies how the various ingredients must be processed in order to obtain the final product. Architecture design can then be likened to deciding on the mixers, kneaders, ovens and other machines for processing the ingredients, and to planning the material flow in an industrial bakery. Observe that you will arrive at different factory layouts depending on the quantity of cakes that you intend to produce and depending on the availability and costs of labor and equipment. 19 These and other circuit-related terms are explained in section 1.6. 26 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS The work is then carried down to the more detailed register transfer level (RTL) where the circuit gets modeled as a collection of storage elements interconnected by purely combinational subcircuits. Relevant issues at this stage include • How to implement arithmetic and logic units (e.g. ripple-carry, carry-lookahead, or carry-select adder)? • Whether to use hardwired logic or microcode to implement a controller? • When to use a ROM rather than random logic? • What operations to perform during which clock cycle? (scheduling) • What operations to carry out on which processing unit? (binding) • Where to insert pipelining and shimming registers? • How to balance combinational depth between registers? • What clocking discipline to adopt? • What time interval to use as the basic clock period? • Where to prefer a bidirectional bus over a unidirectional one? • How to control the access to a bus with multiple drivers? • By what test strategy to ensure testability? • How to initialize the circuit? • etc. A hardware description language (HDL) is used to hold the outcome of this step. Simulations augmented with assertion-based techniques are instrumental in debugging the RTL code. The floorplan is refined on the basis of the more detailed data that are now available and compared against the die size and cost targets for the final product. This is also the point to decide on the most appropriate design level — synthesis, schematic entry, hand layout — for each circuit block. Logic design. The translation into a gate-level netlist and its Boolean optimization are largely auto- matic (HDL synthesis). The design is now definitively being committed to • A fabrication depth (e.g. full-custom vs. semi-custom vs. FPL), • One or more cell libraries (e.g. by AMS vs. Faraday vs. Xilinx), • A circuit style (e.g. static vs. dynamic CMOS logic), and • A manufacturing process (e.g. 28HPM by UMC vs. 28HP by TSMC). The delays and energy dissipation figures associated with the various computational and storage operations are being calculated. Subcircuits that are found to limit performance during pre-layout analysis are identified and redesigned or reoptimized where possible. The result is a complete set of gate-level schematics and/or netlists validated by electrical rule check (ERC), gate-level simulation, timing verification, and power estimation. 1.3 THE VLSI DESIGN FLOW 27 Testability improvement. A malfunctioning IC is the result of design flaws, fabrication defects, or both. Special provisions are necessary to ascertain the correct operation of millions of transistors enclosed in a package with a couple of hundred pins at most. Design for test (DFT) implies improving the controllability and observability of inner circuit nodes by adding auxiliary circuitry on top of the payload logic.20 In addition, a test vector set is generated for telling faulty circuits from correct ones. Such a vector set typically includes thousands or millions of stimuli and expected responses. In a procedure referred to as fault grading, testability is rated by relating the number of fabrication defects that can in fact be detected with a test vector set under consideration to the total number of conceivable faults. Both the test circuitry and the test patterns are iteratively refined until a satisfactory fault coverage is obtained. 20 Standard techniques include block isolation, scan testing, and BIST. Block isolation makes major circuit blocks accessible from outside a chip with the aid of extra multiplexers so that stimuli can be applied and responses evaluated via package pins while in test mode. Scan testing is to be outlined in section 7.2.2. The idea behind built-in self test (BIST) is to move stimuli generation and response checking onto the chip itself, and to essentially output a “go/no go” result [2]. BIST and block isolation are popular for testing on-chip memories. As DFT, test vector preparation, and automated test equipment (ATE) are not part of this text, the reader is referred to the specialized literature such as [3] [4], for instance. 28 CHAPTER 1 INTRODUCTION TO MICROELECTRONICSf r o n t - e n d d e s i g nb a c k - e n d d e s i g n pre-layout timing verification preliminary timing estimation fault grading design architecture gate-level netlist (1) RTL model specifications test vector generation insertion of test structuresauto. test insert. from system-level development formal equivalence check block diagram high-level electrical rule check (ERC)HDL synthesis preliminary cell placement test vectors to IC testinglargely automated physical design tools detailed routing chip abstract layout formal equivalence check calculation delay cell and wire delays floorplan overall beha- vioral simulation inp. to outp. mapping block-level behavioral simul. transaction-based register transfer level simulation cycle-true simulation gate-level event-driven substitution of detailed layout for cell abstracts chip detailed layout extraction of devices and interconnect layout versus schematic (LVS) substitution of detailed circuits for cell iconsautomatic layout merge to IC manufacturing hk 13.03. 12 behavioral modelling (algorithm with software model data formats) gate-level netlist (2) placement and gate netlist (3) RTL design incl. macrocell preparation logic synthesis and optimization estimation of die size and major cost factors preliminary power estimation transistor-level netlist back-annotated extraction of cell abstracts and interconnect layout versus schematic (LVS) layout/design rule check (DRC) post-layout timing verification logic simulation post-layout event-driven calculation delay analysis signal integrity gate-level netlist back-annotated cell and wire delays analysis power gridhigh-level synthesis manufacturability analysis DRC and/or floorplanning, and pinout package selection padframe constr., power distribution, initial placement drawing of bonding diagram to IC packaging bonding diagram reoptimization and rebuffering of logic clock tree insertion placement and gate netlist (4) rebuffering, hold time fixing, and rerouting gate-level netlist (5) final preliminary abstract layout FIGURE 1.13 Digital VLSI design ﬂow (simpliﬁed). See ﬁg.1.14 for an explanation of symbols. 1.3 THE VLSI DESIGN FLOW 29 Physical design. Physical design addresses all issues of arranging the multitude of subcircuits and devices along with their interconnections on a piece of semiconductor material. Floorplanning is concerned with organizing the major circuit blocks into a rectangular area as small as possible while, at the same time, limiting the effects of interconnect delays on the chip’s performance.21 Power and clock distribution are also to be dealt with. A padframe must be generated to hold the bond pads and the top-level layout blocks. During the subsequent place and route (P&R) steps, each cell gets assigned a specific location on the die before the courses of myriads of metal wires that are to carry electrical signals between those cells get defined. The final phase where the global wires running between padframe and core get routed is also known as chip assembly. As the inner layout details of the cells do not really matter for floorplanning, place, and route, cells are typically abstracted to their outlines up to this point. To prepare for IC manufacturing, detailed layout data must be filled in for those abstract views. The outcome is a huge set of polygons that involves all mask layers. Prior to fabrication, the complete layout data need to be checked carefully to protect against fatal mishaps. Physical design verification relies on a number of software tools. • Layout rule check — better known as design rule check (DRC) — examines conformity of layout with geometric rules imposed by the target process. • Manufacturability analysis searches for layout patterns likely to be detrimental to fabrication yield. • Layout extraction (re-)obtains the actual circuit netlist in preparation of • Layout versus schematic (LVS) where it gets compared against the desired one. • Post-layout timing verification. • Post-layout simulation. Sign-off. By accepting a design for prototype fabrication, an IC vendor commits himself to delivering circuits that behave exactly like its post-layout simulation model. As no customer is willing to pay for fabricated parts that do not conform with this requirement, the vendor wants to make sure the design is consistent with good engineering practice and with company-specific guidelines before doing so. DRC, manufacturability, ERC, LVS, post-layout simulation, and fault coverage are routinely examined. Inspection often extends to timing verification, power and clock distribution, test structures, and more. A couple of comments are due after this rather general overview. • In reality, the separation into individual subtasks is not as nice and clear as in fig.1.13. Various side effects of nanometer-size technologies and the quest for optimum results make it necessary for most software tools to work across several levels of abstraction. As an example, it is no longer possible to place and route a gate-level netlist without adapting the circuit logic as a function of the resulting layout parasitics and interconnect delays. In the drawing, this gets reflected by the joint refinement of layout data and netlists. 21 Floorplanning makes part of physical design much as layout design does. What is the difference then? As an analogy, floorplanning is concerned with the partitioning of a flat into rooms and hallways whereas layout design deals with tiny geometric patterns on a carpet. 30 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS • Only ideally does design occur as a linear sequence of steps. Some back and forth between the various subtasks is inevitable to obtain a truly satisfactory result. Also, not all design stages are explicitly covered in every IC development project. Depending on the circuit’s nature, fabrication depth, and design level, some of the design stages are skipped or outsourced, i.e. delegated to specialists at third-party companies.22 • Note the presence of two kinds of boxes in fig.1.13. While angular boxes refer to construction activities, the rounded ones stand for analysis and verification steps. A backward arrow implies that any problem uncovered during such an analysis triggers corrective action. That results from construction steps are subject to immediate verification is typical for VLSI. The reason is that correcting a mistake becomes more and more onerous the further the design process has progressed. Correcting a minor functional bug after layout design, for instance, would require redoing several design stages and would waste many hours of labor and computer time. Also, a functional bug can be uncovered more effectively from a behavioral or RTL model than from a post-layout transistor-level netlist because simulation speed is orders of magnitudes higher and because automatic response checking is much easier to implement for logic and numeric data types than for analog waveforms. • A critical point is reached when first silicon is going to be produced. While it is possible to cut and add wires using advanced and expensive equipment such as focused ion-beam (FIB) technology to patch a malfunctioning prototype [5], there is virtually no way to fix bugs in volume production. Depending on the circuit’s size, fabrication depth, process, and manufacturer, expenses up to 1 MUSD are involved with preparation of photomasks, tooling, wafer processing, preparation of probe cards and evaluation of pre-production samples. Any design flaw found after prototype fabrication thus implies the waste of important sums of money. To make things worse, with turnaround times ranging between three weeks and four months, a product’s arrival on the market is delayed so much that the chip is likely to miss its window of opportunity. Observation 1.2. Redesigns are so devastating for the business that the entire semiconductor industry has committed itself to “first-time-right” design as a guiding principle. To avoid them, VLSI engineers typically spend much more time verifying a circuit than actually designing it. • Fig.1.13 also includes a number of forward arrows that bypass one or two construction steps. They suggest how electronic design automation, cell libraries, and purchased know-how help speed up the design process. Keeping pace with the breathtaking progress of fabrication technology is in fact one of the major challenges for today’s VLSI designers. 22 The design of a simple glue logic chip, for instance, begins at the logic level as there are no algorithmic or architectural questions to deal with. 1.3 THE VLSI DESIGN FLOW 31 1.3.3 CELL LIBRARIES Library development occurs quite separately from actual IC design.23 Cell libraries are typically licensed to IC developers by specialized library vendors since silicon vendors have largely withdrawn from this business.library development hk 18.4.02 layout versus schematic (LVS)purchase of cell library transistor-level schematics design transistor level circuit extraction leaf cell layouts circuit simulation continuous time layout design at detail level cell characterization transistor-level netlists with layout parasitics leaf cell timing models flow of design data corrective action by designer based on feedback information design automation shortcuts behavioral aspects structural aspects physical aspects construction verification list of leaf cells to be behavioral modelling leaf cell functional models target cell library directly contribute to design decisions and/or process data manufacturability analysis DRC and/or FIGURE 1.14 Library design ﬂow (simpliﬁed). Once the set of prospective library cells has been defined functionally, library development proceeds in three major phases, see fig.1.14. Electrical design deals with implementing logic functions as transistor- level networks and with sizing the individual devices such as to find an optimum trade-off between performance, circuit complexity, and energy efficiency. 23 Semi-custom ICs and FPL rely on prefabricated primitives anyway. 32 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS During the subsequent layout design, the locations and geometric shapes of individual devices are defined along with the shapes of the connecting wires. The goal is to obtain leaf cells that are compact, fast, energy-efficient, suitable for automatic place and route (P&R), and that can be manufactured with maximum yield. Verification includes the customary ERC, DRC, manufacturability analysis, extraction, and LVS procedures. Next the electrical and timing parameters that are to be included into data sheets and simulation models of the cells are determined. This library characterization step typically relies on repeated continuous-time continuous-value simulations under varying load, input ramp, and operating conditions. Designing, characterizing, documenting, and maintaining a cell library is a considerable effort as multiple design views must be prepared for each cell, including • A datasheet with functional, electrical, and timing specifications. • A graphical icon or symbol for inclusion into schematic drawings. • An accurate behavioral models for simulation and timing analysis. • A set of simulation and test vectors. • A transistor-level netlist or schematic. • A detailed layout. • A simplified layout view showing cell outline and connector locations for the purpose of place and route known as cell abstract, floorplanning abstract, or phantom cell. Please refer back to fig.1.7 for illustrations. In order to protect their investments, most library vendors consider their library cells to be proprietary and are not willing to disclose how they are constructed internally. They supply datasheets, icons, simulation models, and abstracts, but no transistor-level schematics and no layouts. Under this scheme, detailed layouts are to be substituted for all cell abstracts by the vendor before mask preparation can begin. Note this extra step is reflected in fig.1.13. 1.3.4 ELECTRONIC DESIGN AUTOMATION SOFTWARE The VLSI industry has long become entirely dependent on electronic design automation (EDA) software. There is not one single step that could possibly be brought to an end without the assistance of sophisticated computer programs. The sheer quantity of data necessary to describe a multi-million transistor chip makes this impossible. The design flow outlined in the previous section gives a rough idea on the variety of CAE/CAD programs that are required to pave the way for VLSI and FPL design. Almost each box in fig.1.13 stands for yet another tool. While a few vendors can take pride in offering a range of products that covers all stages from system- level decision making down to physical layout, their efforts tend to focus on relatively small portions of the overall flow for reasons of market penetration and profitability. Frequent mergers and acquisitions are another characteristic trait of the EDA industry. Truly integrated design environments and seamless design flows are hardly available out of the box. 1.3 THE VLSI DESIGN FLOW 33 Also, the idea of integrating numerous EDA tools over a common design database and with a consistent user interface, once promoted as front-to-back environments, aka frameworks, has lost momentum in the marketplace in favor of point tools and the “best in class” approach. Design flows are typically pieced together from software components of various origins.24 The prevalence of software tools, design kits, and cell libraries from multiple sources in conjunction with the absence of industry-wide standards adds to the complexity of maintaining coherent design environments. Many of the practical difficulties with setting up efficient design flows are left to EDA customers and can sometimes become a real nightmare. Hopefully this trend will be reversed one day when customers are willing to pay more attention to design productivity than to layout density and circuit performance. 24 Fascinating accounts of the evolution of the EDA industry are given in [6] [7]. 34 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS 1.4 PROBLEMS 1. ∗ Various examples of design views have been given in figs.1.7, 1.9,and 1.11. Locate them in the Y-chart of fig.1.10. 2. ∗ Think of some industrial product family of your own liking (computer, record/music player, smartphone, camera, TV set/video recorder, car, locomotive, airplane, photocopier, light source, building control equipment, etc.). Discuss what microelectronics has contributed towards making these products possible in their present form. How has the microelectronic content evolved over the years? Where do you see challenges for improving these products and their microelectronic content? 1.5 APPENDIX I: A BRIEF GLOSSARY OF LOGIC FAMILIES 35 1.5 APPENDIX I: A BRIEF GLOSSARY OF LOGIC FAMILIES A logic family is a collection of digital subfunctions that • support the construction of arbitrary logic, arithmetic and storage functions, • are compatible among themselves electrically, and that • share a common fabrication technology. A logic family must be available either as physical parts (SSI/MSI/LSI components for board design) or in virtual form as a set of library cells to be instantiated and manufactured together on a semiconductor chip (for IC design). Table 1.3 Major semiconductor technologies and logic families with their acronyms. Acronym Meaning MOS Metal Oxide Semiconductor. FET Field Eﬀect Transistor (either of n- or p-channel type). BJT Bipolar Junction Transistor (either of npn or pnp type). NMOS n-MOS (transistor, circuit style, or fabrication technology). PMOS p-MOS (transistor, circuit style, or fabrication technology). CMOS Complementary MOS (circuit style or fabrication technology) where pairs of n- and p-channel MOSFETs cooperate in each logic gate; features zero quiescent power dissipation, or almost so; supply voltages have evolved from up to 15 V down to below 1 V. static CMOS Circuit style that supports suspending all switching activities indeﬁnitely and in any state with no loss of state or data. dynamic CMOS Circuit style where data and/or state are kept as electrical charges that need to be refreshed or computed anew at regular intervals as data and/or state are otherwise lost. TTL Transistor Transistor Logic, made up of BJTs and passive devices; ﬁrst logic family to gain widespread acceptance as SSI/MSI parts, has evolved over many generations all of which share a 5 V supply. ECL Emitter-Coupled Logic, non-saturating current switching circuits built on the basis of BJTs, provides complementary outputs with a mere 0.5 V swing; exhibits prohibitive static power dissipation. ESCL Enhancement Source-Coupled Logic, similar but built from MOSFETs. BiCMOS CMOS subcircuits combined with bipolar devices on a single chip. Originally a low-power but slow alternative to TTL, CMOS has become the technology that almost totally dominates VLSI today. This is essentially because layout density, operating speed, energy efficiency, and manufacturing costs per function benefit from the geometric down-scaling that comes with every process generation. In addition, the simplicity and comparatively low power dissipation of CMOS circuits have allowed for integration densities not possible on the basis of BJTs. Fig.1.15 opposes samples from various logic families. The focus of this text is on static circuits in CMOS technology. However, as designing digital VLSI systems and developing with PLDs only loosely depend on technology, there is no need to worry about further details at this stage. 36 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS resistor varicapdiodedevice icon IN1 OUP IN2 p-channel MOSFET n-channel voltage-controlled current source npn pnp current-controlled current source BJTdevice icon approx. behavior Schottky device variations depletion device OUP VCC GND IN1 IN2 GND VCC OUP IN1 IN2 bias section other gates shared with (NAND) OUP1 OUP2 (AND) IN1 IN2 VCC2 VEE VCC1 evolution technological VDD VSS IN1 IN2 OUP VDD VSS OUP IN1 IN2 OUP VDD VSS IN1 IN2 evolution technological (d) (e) (f) (g) (a) (c)(b) FIGURE 1.15 Major logic families exempliﬁed by way of a 2-input NAND gate. Icon (d), PMOS (a), NMOS (b), static CMOS (c), TTL (e,f), and ECL circuits (g). (e) shows the original multi-emitter structure that gave TTL its name whereas (f) refers to a more recent F generation part that includes many auxiliary devices for clamping and speedup. Observe how disparate one gate equivalent (GE) can be. 1.6 APPENDIX II: AN ILLUSTRATED GLOSSARY OFCIRCUIT-RELATED TERMS 37 1.6 APPENDIX II: AN ILLUSTRATED GLOSSARY OF CIRCUIT-RELATED TERMS Table 1.4 lists important terms from digital circuits, microelectronics, and electronic design automation (EDA). Two illustrations follow. Fig.1.16 identifies most of the underlying concepts by way of a circuit diagram while fig.1.17 shows how they reflect in a hardware description language (HDL) model. Although those concepts are applied throughout the EDA community, the terms being used and their meanings vary from one company to the next. Note the difference between a schematic and a netlist. Either one unambiguously specifies a circuit as a collection of interconnected components. On top of this, schematic data include information that indicate where and how to draw icons, wires, busses, etc. on a computer screen or on a piece of paper. While totally irrelevant from an electrical or functional point of view, the graphical arrangement matters when humans want to grasp a circuit’s organization and understand its operation. A netlist is easily derived from a schematic, but the converse is not obvious. Except for trivial examples, circuit diagrams obtained from netlists by automatic means lack the clarity and expressiveness of human-made schematics. U2 U3 U1 binaryenc INP3 INP2 INP1 BITA BITB codeconverter Data[2:0] U4 regwide2 Q[1] CLK Q[0] D[1] D[0] U5 Cvd2 Cvd1 Anti Clock Data[2:0] Data[0] Data[1] Data[2] N11 N12 N13 N14 Clock Anti Cvd1 Cvd2 net node or net bus bus clock clock input reference component cell instance port port or connector pin instance connector reference leaf cell Synopsys lingo general term design circuit model xo2 inv inv ripper breakout symbol icon or symbol FIGURE 1.16 Circuit-related terms illustrated by way of a schematic drawing. Make sure you understand why U2 and U3 relate to the same component but to distinct instances. Also note that inv and xo2 are leaf cells whereas binaryenc and regwide2 are not. 38 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Relating to information-processing hardware, datapath is a generic term for all those subcircuits that manipulate payload data, see fig.1.18. That is, a datapath is not confined to arithmetic/logic units (ALU) that carry out operations on data words, but also includes short-term data storage (accumulators, registers, FIFOs) plus the necessary data routing facilities (busses and switches). Datapaths tend to be highly regular as similar functions are carried out on multiple bits at a time. Datapath operation is governed by a control section that also coordinates activities with surrounding circuits. The controller does so by interpreting various status signals and by piloting datapath operation via control signals in response. A controller is either implemented as a hardwired finite state machine (FSM), as a stored program (program counter plus microcoded instruction sequence), or as a combination of both. In a computer-type architecture, all facilities dedicated to the sole purpose of address processing must be considered part of the controller, not of the datapath, even if they are ALUs or registers by nature. architecture structural of codeconverter is -- list non-library components to be used component binaryenc port ( INP1, INP2, INP3 : in std_logic; BITA, BITB : out std_logic ); end component; component regwide2 port ( CLK: in std_logic; Q : out std_logic_vector(1 downto 0 ); end component; D : in std_logic_vector(1 downto 0); -- declare internal signals signal N11, N12, N13, N14 : std_logic; begin reference component cell instance reference leaf cell U1: binaryenc port map ( INP1=>Data(2), INP2=>Data(1), INP3=>Data(0), BITA=>N11, BITB=>N12 ); -- instantiate components and interconnect them U2: inv port map ( A=>N11, Z=>N13 ); port map ( A=>N12, Z=>N14 ); U3: inv end structural; U5: xo2 port map ( A=>N13, B=>N14, Z=>Anti ); port map ( CLK=>Clock, D(1)=>N13, D(0)=>N14, U4: regwide2 Q(1)=>Cvd1, Q(0)=>Cvd2 ); net node or net pin instance connector design circuit model clock clock input entity codeconverter is port ( Clock : in std_logic; Data : in std_logic_vector(2 downto 0); Anti, Cvd1, Cvd2 : out std_logic ); end codeconverter;port port or connector bus bus library STDCELLS; use STDCELLS.logicgates.all; library IEEE; use IEEE.std_logic_1164.all; ----------------------------------------------------------- ----------------------------------------------------------- library component library library program library package program package FIGURE 1.17 Circuit- and software-related terms in a structural VHDL model. 1.6 APPENDIX II: AN ILLUSTRATED GLOSSARY OFCIRCUIT-RELATED TERMS 39 +/− RAM ROM input data output data higher-level control input higher-level status output status signals control signals datapath section control section ALU MUX FSM data processing units, data storage, and data switches finite state machines, instruction sequences, hardwired logic, or any combination thereof FIGURE 1.18 Interplay of datapath and controller in a typical information-processing circuit. Table 1.4 A Glossary of terms from electronic design. General term Synopsys Meaning lingo Circuit elements circuit model design a description of an electronic circuit or subcircuit component reference a self-contained subcircuit of well-deﬁned functionality component library library a named collection of components (leaf) cell reference an atomic component typically available from a library that can not be decomposed into smaller components instance cell one speciﬁc copy of a subcircuit that is being used as part of a larger circuit Interconnect node aka net net an electrical node or — which is the same — a wire that runs between two or more (instance) connectors port aka terminal port a node that can be electrically contacted aka connector from the next higher level of circuit hierarchy instance connector pin a connector of an instance clock input clock a connector explicitly deﬁned as clock source bus bus a named set of nodes with cardinality > 1 special net a net not shown but tacitly implied in schematics, examples: ground and power Circuit drawings icon aka symbol symbol a graphical symbol for a component or a connector schematic schematic a drawing of a (sub)circuit that is made up of icons and diagram of wires where the latter are graphically shown as lines netlist netlist a data structure that captures what instances make up for a (sub)circuit and how they are interconnected breakout ripper a special icon that indicates where a net or a subbus leaves or enters the graphical representation for a bus Continued 40 CHAPTER 1 INTRODUCTION TO MICROELECTRONICS Table 1.4 A Glossary of terms from electronic design—cont’d geometry layer by layer and that guides IC fabrication (cell) row many standard cells arranged in a row such as to share common ground lines, power lines, and wells well a volume that accommodates MOSFETs of identical polarity; doping is opposite to the source and drain islands embedded row end cell a special cell void of functionality to be instantiated at either end of a cell row to properly end the wells ﬁllcap cell a special cell void of functionality to be instantiated aka decap between two regular cells to add decoupling capacitance typically where dense wiring asks for extra room anyway tie-off cell a special cell void of functionality to be instantiated where a regular net must connect to ground or power cell outline a simpliﬁed view where a cell’s layout is reduced to aka abstract the outline and the locations of all of its connectors routing channel space set aside between adjacent cell rows for wiring, no longer needed with today’s multi-metal processes contact a galvanic connection between a metal and a silicon layer via a galvanic connection between two superimposed metal layers bonding area a square opening in the protective overglass exposing a die’s top-level metal for connecting to a package pin Functional veriﬁcation model under test design ... a circuit model subject to simulation circuit under test a physical circuit, e.g. a chip, subject to testing testbench HDL code written for driving the simulation of a model under test; not meant to be turned into a physical circuit Layout items layout a 2D drawing that captures a component’s detailed Integrated circuits die aka chip a fully processed but unencapsulated IC package the encapsulation around a die (package) pin a connector on the outside of an IC package pad pad a connector on a die that is intended to be wired or otherwise electrically connected to a package pin, the term is often meant to include interface circuitry HDL software program package package a named collection of data types, subprograms, etc. program library library a named repository for compiled program packages General term Synopsys Meaning lingo","libVersion":"0.5.0","langs":""}