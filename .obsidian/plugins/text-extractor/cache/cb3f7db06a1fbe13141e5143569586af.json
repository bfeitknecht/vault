{"path":"sem4/DMDB/UE/slides/DMDB-s04-integrity-constraint.pdf","text":"1 Data Modelling and Databases Exercise Session 4: Integrity Constraints 2 Content 1. Theory 2. Exercises Discussion 3 Database Design SQL (DDL) Integrity Constraints 4 Integrity Constraints How can we define rules in a DB? 1. Attribute Constraints: intra-table rules 2. Referential Constraints: inter-table rules 3. Triggers: more complex rules Constraints are used to limit the value of data that can be inserted into a table. There exist two ways to specify constraints on a relation: – When a table is created: CREATE TABLE – After the table is created: ALTER TABLE 5 Integrity Constraints Name Description NOT NULL This enforces a field to always contain a value. UNIQUE This constraint uniquely identifies each record in a table. An attribute that is unique can be null. PRIMARY KEY A primary key uniquely identifies each record in a table (= UNIQUE + NOT NULL), each table can have only one primary key. FOREIGN KEY A foreign key is a reference that points from one table to the primary key of another table. It prevents actions that would destroy links between tables. [Referential Integrity Constraints] CHECK This constraint is used to limit the value range that can be placed in a column. DEFAULT It is used to insert a default value into a column. The default value will be added to all new records, if no other value is specified. 6 Intra-Table Constraints Example: CREATE TABLE User ( id int(11) PRIMARY KEY, group varchar(10) DEFAULT ‘guest', username varchar(20) UNIQUE, password varchar(30) NOT NULL, email varchar(30) CHECK (email LIKE ‘%@%’), CONSTRAINT chk_group CHECK group IN (‘user’, ‘admin’, ‘guest’) ); 7 Intra-Table Constraints Example: CREATE TABLE User ( id int(11) PRIMARY KEY, group varchar(10) DEFAULT ‘guest', username varchar(20) UNIQUE, password varchar(30) NOT NULL, email varchar(30) CHECK (email LIKE ‘%@%’), CONSTRAINT chk_group CHECK group IN (‘user’, ‘admin’, ‘guest’) ); Use the CONSTRAINT statement to name your constraints (optional) • ALTER TABLE User ADD CONSTRAINT uni_email UNIQUE (email) 8 Questions? 9 Question 1 Which one can be used to ensure , or will by definition, not allow NULL values to be inserted? o UNIQUE o NOT NULL o FOREIGN KEY o PRIMARY KEY o CHECK 10 Question 1 o UNIQUE -> In SQL all NULLs are unique ✓NOT NULL o FOREIGN KEY -> Allowed to be NULL ✓PRIMARY KEY -> Can’t be NULL ✓CHECK -> e.g., CHECK (X IS NOT NULL). Which one can be used to ensure , or will by definition, not allow NULL values to be inserted? 11 Question 2 True or False? In principle, a CHECK constraint could be added to a table that makes it impossible to insert any data. 12 Question 2 True or False? In principle, a CHECK constraint could be added to a table that makes it impossible to insert any data. 13 Question 2 True or False? The ON DELETE CASCADE constraint, specified for an attribute in a table, leads to deletions of tuples in the referenced tables. 14 Question 2 uid username 1 jribon 2 prtrem 3 lucasa cid uid comment 1 1 Hello World! 2 1 Students are smart. 3 2 To be or not to be. Referenced Table Referencing Table references True or False? The ON DELETE CASCADE constraint, specified for an attribute in a table, leads to deletions of tuples in the referenced tables. 15 Question 3 For the following questions, you will need to tell which of these apply: - NOT NULL - UNIQUE - PRIMARY KEY - FOREIGN KEY - CHECK - DEFAULT 16 Question 3 A) Ensure referential consistency between relations. - NOT NULL - UNIQUE - PRIMARY KEY - FOREIGN KEY - CHECK - DEFAULT 17 Question 3 A) Ensure referential consistency between relations. - FOREIGN KEY -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 18 Question 3 B) Enforce that each row has some attribute. -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 19 Question 3 B) Enforce that each row has some attribute. - NOT NULL - PRIMARY KEY - CHECK -> These allow defining a known value for a particular attribute in a row -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 20 Question 3 C) Limit the domain of values that can be stored in an attribute. -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 21 Question 3 C) Limit the domain of values that can be stored in an attribute. - NOT NULL, PRIMARY KEY -> prevents NULL values - UNIQUE -> prevents repeated values - CHECK -> domain restriction, e.g. <, <=, >, >= - FOREIGN KEY -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 22 Question 3 D) Enforce a constraint based on the content of a different table. -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 23 Question 3 D) Enforce a constraint based on the content of a different table. - FOREIGN KEY -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 24 Question 3 E) Enforce a constraint based on two different attributes. -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 25 Question 3 E) Enforce a constraint based on two different attributes. - CHECK -> e.g. CHECK (ATTR1 < ATTR2) - PRIMARY KEY, UNIQUE -> can specify constraint on multiple attributes, e.g. PRIMARY KEY (ATTR1, ATTR2) -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 26 Question 3 F) Uniquely identify tuples. -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 27 Question 3 F) Uniquely identify tuples. - UNIQUE, PRIMARY KEY -> by definition -NOT NULL -UNIQUE -PRIMARY KEY -FOREIGN KEY -CHECK -DEFAULT 28 Question 4 When defining a foreign key constraint in SQL without explicitly specifying the ON DELETE policy, what is the default behavior in most RDBMS? 29 Question 4 When defining a foreign key constraint in SQL without explicitly specifying the ON DELETE policy, what is the default behavior in most RDBMS? -- > ON DELETE NO ACTION 30 Question 5 When defining a foreign key constraint in SQL without explicitly specifying the ON UPDATE policy, what is the default behavior in most RDBMS? 31 Question 5 When defining a foreign key constraint in SQL without explicitly specifying the ON UPDATE policy, what is the default behavior in most RDBMS? -- > ON UPDATE NO ACTION 32 Referential Constraints A foreign key is a referential constraint between two tables. This is a reference that points from one (or more) attribute(s) to a unique attribute in the other table (PRIMARY KEY or UNIQUE) A foreign key value must point to an existing tuple in the referenced table. If not, then its value must be NULL, i.e. a FK value cannot point to a non-existing row! 33 Referential Constraints A foreign key is a referential constraint between two tables. This is a reference that points from one (or more) attribute(s) to a unique attribute in the other table (PRIMARY KEY or UNIQUE) uid username 1 jribon 3 prtrem 4 lucasa cid uid comment 1 1 Hello World! 2 1 Students are smart. 3 2 I love DB! ! references 2 34 Referential Constraints A foreign key is a referential constraint between two tables. This is a reference that points from one (or more) attribute(s) to a unique attribute in the other table (PRIMARY KEY or UNIQUE) uid username 1 jribon 3 prtrem 4 lucasa cid uid comment 1 1 Hello World! 2 1 Students are smart. 3 NULL I love DB! references 35 Inter-Table Constraints Example: CREATE TABLE User ( id int(11) PRIMARY KEY, group_id int(11) FOREIGN KEY (group_id) REFERENCES Group(id), username varchar(20), password varchar(30) ) CREATE TABLE Group ( id int(11) PRIMARY KEY, name varchar(10) ) 36 Inter-Table Constraints Example: CREATE TABLE User ( id int(11) PRIMARY KEY, group_id int(11) FOREIGN KEY (group_id) REFERENCES Group(id), username varchar(20), password varchar(30) ) CREATE TABLE Group ( id int(11) PRIMARY KEY, name varchar(10) ) 37 Referential Actions Referential actions ensure data integrity if a row (in a referenced table) is deleted or updated. This defines what should happens if we want to delete (or update) a row that is referenced in another table. 38 Referential Actions Referential actions ensure data integrity if a row (in a referenced table) is deleted or updated. This defines what should happens if we want to delete (or update) a row that is referenced in another table. uid username 1 jribon 2 prtrem 3 lucasa cid uid comment 1 1 Hello World! 2 1 Students are smart. 3 2 To be or not to be. Referenced Table Referencing Table references 39 Referential Actions SQL-2003 specifies 5 different referential actions: Name Description CASCADE The respective rows of the referencing table are deleted or updated together with the referenced row. RESTRICT A row cannot be deleted or updated as long as there is a reference to it from a referencing table. Integrity constraint is checked before executing the statement. [Pessimistic: expect violation] NO ACTION As RESTRICT, but integrity constraint is checked at the end of the UPDATE or DELETE statement. [Optimistic: assume no violation] SET NULL The foreign key value (in the referencing row) is set to NULL when the referenced row is updated or deleted. Note: foreign key must be null-able. SET DEFAULT Similar to SET NULL, the foreign key is set to the column’s default value when the referenced row is updated or deleted. 40 Question 6 Initial contents:Schema: What happens when we run the given queries? 41 Question 6 Schema: INSERT INTO lecture VALUES (1, 'Math I'); INSERT INTO lecture VALUES (2, 'Math II '); INSERT INTO attends VALUES (0, 5); Initial contents: 42 Question 6 Schema: INSERT INTO lecture VALUES (1, 'Math I'); INSERT INTO lecture VALUES (2, 'Math II '); INSERT INTO attends VALUES (0, 5); Initial contents: 43 Question 6 INSERT INTO lecture VALUES (1, 'Math I'); INSERT INTO lecture VALUES (2, 'Math II '); INSERT INTO attends VALUES (0, 5); Not allowed! id 2 already exists. Schema: Initial contents: 44 Question 6 INSERT INTO lecture VALUES (1, 'Math I'); INSERT INTO lecture VALUES (2, 'Math II '); INSERT INTO attends VALUES (0, 5); Not allowed! id 2 already exists. Not allowed! lid 5 doesn’t exist. Schema: Initial contents: 45 Question 6 Schema: Initial contents: 46 Question 6 Schema: Initial contents: 47 Question 6 Schema: Initial contents: 48 Question 6 Not allowed! ON DELETE NO ACTION Schema: Initial contents: 49 Question 6 Schema: Initial contents: 50 Question 6 DELETE FROM student WHERE age >= ( SELECT AVG (age) FROM student ); Schema: Initial contents: 51 Question 6 DELETE FROM student WHERE age >= ( SELECT AVG (age) FROM student ); Schema: Initial contents: 52 Any Questions ? 53 Question 9 CREATE TABLE Emp_Dept ( emp_id INT, department_id INT, email VARCHAR(255) UNIQUE, age INT CHECK (age > 18 AND age < 65), PRIMARY KEY (emp_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(dept_id) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE Departments ( dept_id INT PRIMARY KEY, dept_name VARCHAR(255) ); Does the following transaction succeed or not ? 54 Question 9 CREATE TABLE Emp_Dept ( emp_id INT, department_id INT, email VARCHAR(255) UNIQUE, age INT CHECK (age > 18 AND age < 65), PRIMARY KEY (emp_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(dept_id) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE Departments ( dept_id INT PRIMARY KEY, dept_name VARCHAR(255) ); Does the following transaction succeed or not ? A) BEGIN; INSERT INTO Emp_Dept VALUES (1, 101, NULL, 30); COMMIT; 55 Question 9 CREATE TABLE Emp_Dept ( emp_id INT, department_id INT, email VARCHAR(255) UNIQUE, age INT CHECK (age > 18 AND age < 65), PRIMARY KEY (emp_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(dept_id) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE Departments ( dept_id INT PRIMARY KEY, dept_name VARCHAR(255) ); Does the following transaction succeed or not ? B) BEGIN; INSERT INTO Emp_Dept VALUES (2, 102, ‘test@example.com”, NULL); COMMIT; 56 Question 9 CREATE TABLE Emp_Dept ( emp_id INT, department_id INT, email VARCHAR(255) UNIQUE, age INT CHECK (age > 18 AND age < 65), PRIMARY KEY (emp_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(dept_id) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE Departments ( dept_id INT PRIMARY KEY, dept_name VARCHAR(255) ); Does the following transaction succeed or not ? C) BEGIN; INSERT INTO Emp_Dept VALUES (NULL, 103, ‘nulltest@example.com”, 35); COMMIT; 57 Question 9 CREATE TABLE Emp_Dept ( emp_id INT, department_id INT, email VARCHAR(255) UNIQUE, age INT CHECK (age > 18 AND age < 65), PRIMARY KEY (emp_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(dept_id) ON DELETE NO ACTION ON UPDATE NO ACTION ); CREATE TABLE Departments ( dept_id INT PRIMARY KEY, dept_name VARCHAR(255) ); Does the following transaction succeed or not ? D) BEGIN; UPDATE Departments SET department_id = department_id -1 COMMIT; 58 Question 15-17 How can we add the following constraints to the schema? 1. The start date of salary has to be before the end date. 2. The end date in dept_emp table is either NULL (meaning sometime future) or is in the past. 3. One employee can only be the manager of one department at a time. This implies that the date entries in dept_manager table can not have overlaps for a certain employee. 59 Question 15 60 Question 15 61 Question 16 62 Question 16 Solution: CREATE TABLE dept_emp ( emp_no INT , dept_no CHAR (4) , from_date DATE, to_date DATE , PRIMARY KEY (emp_no , dept_no , from_date ), CHECK ( to_date < NOW () ) ); 63 Question 17 64 Question 17 What if we delete “at a time” constrain ? 65 Question 17 CREATE TABLE dept_manager ( emp_no INT UNIQUE, dept_no CHAR(4), from_date DATE, to_date DATE, PRIMARY KEY (emp_no, dept_no, from_date), FOREIGN KEY emp_no REFERENCES emplyees (emp_no), FOREIGN KEY dept_no REFERENCES departments (dept_no), ); 66 Question 17 First of all, more than one solution! 67 Question 17 Using a new attribute previous_to_date 68 Question 17 Using a new attribute previous_to_date (1) : sematic correctness 69 Question 17 Using a new attribute previous_to_date (1) : sematic correctness (2) : employee + previous_to_date combination is always unique 70 Question 17 Using a new attribute previous_to_date (1) : sematic correctness (2) : employee + previous_to_date combination is always unique (3) : previous_to_date references to_date 71 Question 17 Using a new attribute previous_to_date (1) : sematic correctness (2) : employee + previous_to_date combination is always unique (3) : previous_to_date references to_date (4) : no overlap ! 72 Any Questions Left?","libVersion":"0.5.0","langs":""}