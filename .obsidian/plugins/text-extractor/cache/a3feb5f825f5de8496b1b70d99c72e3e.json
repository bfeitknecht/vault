{"path":"sem3/EProg/PV/exams/theory/HS21-B.pdf","text":"Herbst 2021/22 – B 252-0027 – Einführung in die Programmierung Departement Informatik ETH Zürich 27. Januar 2022 – Schriftlicher Teil Nachname: Vorname: Legi-Nummer: – – Sie dürfen diese Prüfung oder die Aufgaben für die Programmierprüfung erst öﬀnen nachdem die Aufsicht die Prüfung gestartet hat. Wenn Sie diese Dokumente vorher öﬀnen gilt dies als Täuschungsversuch. Mit Ihrer Unterschrift bestätigen Sie, dass Sie die hier aufgeführte Person sind, Sie die Hinweise zur Kenntnis genommen haben, Sie die Aufgaben selbständig gelöst haben, Sie Ihre eigene Lösung abgeben, Sie keine Kopie der Prüfung mitnehmen, und dass Sie alle technischen Probleme, gesund- heitlichen Probleme (die Ihre Leistungen in dieser Prüfung beeinträchtigten) und etwaige störende äussere Einﬂüsse gemeldet haben bzw. wissen, dass Sie diese melden sollen. Unterschrift: Aufgabe Wert Punkte Aufgabe Wert Punkte 1 5 5 4 2 10 6 4 3 10 - - 4 7 - - \u0006 Übertrag −− Total 40 Hinweise 1. Öﬀnen Sie diese Prüfung und die Aufgabenstellung für die Programmierprüfung erst, wenn die Aufsicht den Beginn der Prüfung bekannt gibt. 2. Beachten Sie bitte während der Prüfung unbedingt die Hygienevorschriften. 3. Schreiben Sie zuerst Ihren Namen und Ihre Legi-Nummer auf die Vorderseite dieser Prüfung. 4. Im Prüfungsraum bitten wir Sie auf Gespräche zu verzichten. 5. Dieser Teil der Prüfung dauert 40 Minuten. Falls Sie sich durch irgendjemanden oder irgend- etwas gestört fühlen, melden Sie dies sofort einer Aufsichtsperson. 6. Die Prüfung hat 12 Seiten. Vergewissern Sie sich dass Ihr Exemplar vollständig ist. 7. In dieser Prüfung gibt es 40 Punkte. Benutzen Sie die Anzahl der Punkte als Hinweis, wie Sie Ihre Zeit einteilen können. Fehler bei der Bearbeitung einer Aufgabe haben keinen Einﬂuss auf die Punkte, die Sie für andere Aufgaben erhalten. Sie könnnen die Aufgaben in beliebiger Reihenfolge lösen. 8. Lesen Sie die Aufgabenstellungen genau durch. 9. Tragen Sie Ihre Antwort(en) direkt in die Prüfungsbögen ein. Falls Sie mehr Platz brauchen, ist Ihre Antwort wahrscheinlich zu lang. 10. Benutzen Sie einen Kugelschreiber (blau oder schwarz) oder Füller, der nicht ausradiert werden kann. Benutzen Sie keinen Bleistift. Bitte schreiben Sie deutlich und leserlich! Wenn Sie etwas durchstreichen wollen, so machen Sie dies bitte klar und deutlich. 11. Trennen Sie nicht die zusammengeheftete Prüfung. Mit losen Blättern riskieren Sie, ein Blatt zu verlieren. 12. Es ist wichtig, dass Ihre Antworten die Aufgaben klar und unzweideutig behandeln. Die Klarheit der Antworten beeinﬂusst Ihre Note. Wenn Sie Annahmen (über die in den Aufgaben aufgeführten hinaus) treﬀen, so geben Sie diese bitte an. 13. Wenn Sie zur Toilette müssen, melden Sie dies einer Aufsichtsperson durch Handzeichen. Es darf zur gleichen Zeit immer nur eine Person zur Toilette. 14. Wir beantworten keine inhaltlichen Fragen während der Prüfung. Kommentare zur Aufgabe schreiben Sie bitte auf das Aufgabenblatt. 15. Wenn die Aufsicht die Prüfung beendet, schliessen Sie bitte die Prüfung und schreiben nicht mehr in die Prüfung. Weiterarbeiten über die erlaubte Zeit gilt als Täuschungsversuch. Bitte unterschreiben Sie die Prüfung auf der Vorderseite und legen Sie die Prüfung mit Ihrer Legitimationskarte (“Legi”) gut sichtbar auf Ihren Arbeitstisch. 16. Wir sammeln die Prüfung ein. Wichtig: stellen Sie unbedingt selbst sicher, dass Ihre Prüfung von einer Aufsichtsperson eingezogen wird. Stecken Sie keine Prüfung (auch keine leere) ein. Page 2 of 12 Aufgabe 1 (5) Gegeben sei eine Methode main in einer Java Klasse. public static void main(String[] args) { /* body */ } Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden und den angegebenen Output produzieren. Bestimmen Sie für jede Anweisung die fehlenden Operatoren so, das die Anweisung die gezeigte Ausgabe erzeugt. Mögliche Operatoren sind +, -, *, / und %. Wenn es für eine Anweisung mehrere mögliche Lösungen gibt, so genügt eine Lösung. Sollte es keine Lösung geben, so schreiben Sie bitte ”nicht möglich”. Bereits existierende Operatoren (oder sonstige Teile der Anweisung) dürfen Sie nicht verändern. Auch dürfen Sie Klammern weder hinzufügen noch entfernen. 1. System.out.println(36 / (3 * 12 4)); //Output: 4 2. System.out.println(64 % (4 8 + 1) / 4); //Output: 7 3. System.out.println(32 (2 6)); //Output -8 Page 3 of 12 Aufgabe 2 (10) Gegeben sei die Methode func(double[], int) einer Klasse. In dieser Aufgabe stehen { und } – die Klammern für einen Block – auf einer separaten Zeile. Welche dieser Statements können entfernt werden ohne dass das Ergebnis der Methode verändert wird – egal, was für Parameter der Methode übergeben werden? Zum Beispiel sind im Codesegment if (true) //Redundant { x++; } else //Redundant { x--; //Redundant } die markierten Statements redundant und können entfernt werden. Damit würden auch die Klammern ({ und } überﬂüssig aber Sie müssen nicht angeben, ob Klammern redundant sind. Markieren Sie bitte im folgenden Programm welche der Statements der Methode func redundant sind. Der Parameter y ist niemals null. Schreiben Sie “R” (oder “Redundant”) rechts in der entsprechenenden Zeile. Sie brauchen nur angeben, welche Statements entfernt werden können, Sie brauchen nicht das Programm anderweitig zu verbessern. Page 4 of 12 // process the elements of an n-element array to compute sum // y is never null // Platz fuer Antwort static double func(double[] y, int k) { double sum = 0.0; // int size = 0; // int elems = y.length; // double adjust = 0.0; // if (k != y.length) // { adjust++; // throw new IllegalArgumentException(\"Size mismatch \" + adjust); // } adjust = 0.0; // int count = y.length; // for (int i = 0; i < k; ) // { count = count - 1; // sum += y[i]; // i++; // } if (k == y.length) // { double toBeReturned; // toBeReturned = sum; // sum += adjust; // return sum; // } return 0.0; // } Page 5 of 12 Aufgabe 3 (10) Gegeben seien diese Klassen und Interfaces in separaten Dateien (im default Package): class Aaa { Integer s = 1; public void fct1() { System.out.println(\"Aaa \" + s); } } class Mmm extends Aaa { String s = \"Mmm\"; public void fct1() { System.out.println(\"Mmm fct1 \" + s); } public void fct2() { System.out.println(\"Mmm fct2 \" + s); } } class Nnn extends Aaa { String s = \"Nnn\"; public void fct1() { System.out.println(\"Nnn fct1 \" + s); fct3(); } public void fct3() { System.out.println(\"Nnn fct3 \" + s); } } class Bbb extends Nnn { String s = \"Bbb\"; public void fct2() { System.out.println(\"Bbb fct2 \" + s); } } class Ccc extends Nnn { String s = \"Ccc\"; public void fct2() { super.fct1(); System.out.println(\"Ccc fct2 \" + s); } public void fct3() { System.out.println(\"Ccc fct3 \" + s); } public String toString() { return s; } } class Ddd extends Ccc { String s = \"Ddd\"; public void fct2() { System.out.println(\"Ddd fct2 \" + s); } } In einer Klasse Explore in dem selben Package beﬁndet sich die Methode main. public static void main (String[] args) { /* Body */ } Page 6 of 12 Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden. Geben Sie für jede Anweisungsfolge an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile- Fehler”). Falls ein gedruckter String Leerzeichen enthält, dann ist die genaue Anzahl/Weite der Leerzeichen unwichtig. 1. Object ox = new Aaa(); Object oy = (Aaa) ox; oy.fct1(); ________________________ 2. Aaa mx = new Mmm(); mx.fct1(); ________________________ 3. Mmm mz = new Mmm(); if (mz instanceof Nnn) { mz.fct1(); } ________________________ 4. Bbb bx = new Bbb(); bx.fct2(); ________________________ 5. Ccc cz = new Ddd(); cz.fct3(); ________________________ 6. Ccc ca = new Ddd(); ((Aaa) ca).fct1(); ________________________ 7. Ccc cx = new Ccc(); Ddd dy = (Ddd) cx; dy.fct3(); ________________________ 8. Ddd dx = new Ddd(); System.out.println(dx); ________________________ Page 7 of 12 [Diese Seite ist leer.] Page 8 of 12 Aufgabe 4 (7) Gegeben sei in Abbildung 1 die EBNF-Beschreibung von expression. Für identiﬁer gelten die Regeln für Bezeichner (identiﬁers) und Werte (literal values) in Java. Die EBNF Beschreibung von expression unterscheidet sich aber sonst von den in Java zulässigen Ausdrücken. postﬁx_expression ⇐ special_expression | postﬁx_expression + + | postﬁx_expression - - special_expression ⇐ ( expression ) | identiﬁer unary_operator ⇐ * | / | + | ! assignment_operator ⇐ = | + = arithmetic_expression ⇐ special_expression | arithmetic_expression * expression | arithmetic_expression / expression | arithmetic_expression % expression assignment_expression ⇐ expression assignment_operator arithmetic_expression unary_expression ⇐ postﬁx_expression | unary_operator expression expression ⇐ assignment_expression | unary_expression Abbildung 1: EBNF-Beschreibung von expression Geben Sie für jeden folgenden Ausdruck an, ob er nach der EBNF-Beschreibung von expression in Abbildung 1 gültig ist. (Tipp: alle Bezeichner und Werte in diesen Ausdrücken (d.h., identiﬁer in Abbildung 1) sind korrekt.) Ausdruck Gültig Ungültig Ausdruck Gültig Ungültig x = a * b x = a + c 0 += b++ + a = b * c x = z = 12 x = y++ * 7 x = (a * b) x = (a++ * b) Page 9 of 12 Aufgabe 5 (4) Gegeben sind die Precondition und Postcondition für das folgende Programm public int compute(int n) { // Precondition: n >= 0 int x; int res; x = 1; res = 0; // Loop Invariante: while (x <= n) { res = res + 2 * x; x = x + 1; } // Postcondition: res == n * (n + 1) return res; } Bitte geben Sie die Loop Invariante an. Loop Invariante: ___________________________________________ Page 10 of 12 Aufgabe 6 (4) Bitte geben Sie für die folgenden Java Programmsegmente die schwächste Vorbedingung (weakest precondition) WP an. Bitte geben Sie die Precondition als Java Expression an. Alle Variablen sind vom Typ int und es gibt keinen Overﬂow. 1. WP: { } k = m * 3; Q: { k > 0 } 2. WP: { } x = y * 2; x = x + 1; Q: {x > 2 } 3. WP: { } if (a > b) { c = (-2) * a; } else { c = a + 4; } Q: { c > 0 } Wir wünschen Ihnen alles Gute für den Rest des Prüfungssession und das nächste Semester. Ihr “Einführung in die Programmierung”-Team. Page 11 of 12 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 5 5 4 2 10 6 4 3 10 - - 4 7 - - \u0006 Übertrag −− Total 40 Page 12 of 12","libVersion":"0.3.2","langs":""}