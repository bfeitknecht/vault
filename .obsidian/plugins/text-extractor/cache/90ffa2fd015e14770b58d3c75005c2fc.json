{"path":"sem4/FMFP/PV/FMFP-FS10.pdf","text":"Computer Science Department, D. Basin, P. M¨uller Formal Methods and Functional Programming Endterm June 10th, 2010, 9:00 – 11:00 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. Check that your exam papers are complete (this page, two pages on background material, and 6 assignments). 2. Write your last and ﬁrst name on every page that contains parts of your solutions. 3. It is not allowed to use your own papers, documents, scripts, etc., or any electronic equipment (notebook computers, calculators, cell phones, etc.) 4. Use a ballpoint pen or fountain pen (no pencil). Return the instructions, the tasks, and your solutions before leaving the room. 5. Write your answers in English. Important: Write clearly in the sense of logic, lan- guage, and readability. The clarity of your arguments and explanations aﬀects your grade. 6. If you have a question regarding the meaning of a problem statement, you may ask one of the assistants in charge of the exam. 7. You have 120 minutes to complete the exam. 8. Place your student ID on the desk. Assignment 1 2 3 4 5 6 ∑ Max. points 6 3 6 7 4 4 30 Your points Grade Syntax and Semantics of IMP Syntax The statements of the programming language IMP are given by the grammar s ::= skip ∣ ∣ x := e ∣ ∣ s; s ∣ ∣ if b then s else s end ∣ ∣ while b do s end where x ranges over the variables, e ranges over the arithmetic expressions, and b ranges over the Boolean expressions. Natural Semantics ⟨skip, σ⟩ → σ ⟨x := e, σ⟩ → σ[x ↦→ A[[e]]σ] ⟨s1, σ⟩ → γ ⟨s2, γ⟩ → σ′ ⟨s1; s2, σ⟩ → σ′ ⟨s1, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ B[[b]]σ = tt ⟨s2, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ B[[b]]σ = ﬀ ⟨s, σ⟩ → γ ⟨while b do s end, γ⟩ → σ′ ⟨while b do s end, σ⟩ → σ′ B[[b]]σ = tt ⟨while b do s end, σ⟩ → σ B[[b]]σ = ﬀ Structural Operational Semantics ⟨skip, σ⟩ →1 σ ⟨x := e, σ⟩ →1 σ[x ↦→ A[[e]]σ] ⟨s1, σ⟩ →1 σ′ ⟨s1; s2, σ⟩ →1 ⟨s2, σ′⟩ ⟨s1, σ⟩ →1 ⟨s′ 1, σ′⟩ ⟨s1; s2, σ⟩ →1 ⟨s′ 1; s2, σ′⟩ ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s1, σ⟩ B[[b]]σ = tt ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s2, σ⟩ B[[b]]σ = ﬀ ⟨while b do s end, σ⟩ →1 ⟨if b then s; while b do s end else skip end, σ⟩ Formal Methods and Functional Programming, Endterm, SS10 3 Axiomatic Semantics { P } skip { P } { P [x ↦→ e] } x := e { P } { P } s1 { R } { R } s2 { Q } { P } s1; s2 { Q } { B[[b]] ∧ P } s1 { Q } { ¬B[[b]] ∧ P } s2 { Q } { P } if b then s1 else s2 end { Q } { B[[b]] ∧ P } s { P } { P } while b do s end { ¬B[[b]] ∧ P } { P ′ } s { Q ′ } { P } s { Q } P ⇒ P ′ and Q ′ ⇒ Q Formal Methods and Functional Programming, Endterm, SS10 4 Assignment 1 (6 points) Consider the following IMP statement s: while n # 0 do a := a+n; b := b*n; n := n-1 end • Let σ be a state such that σ(a) = 0, σ(b) = 1, and σ(n) = 2. Prove using the natural semantics that there is a state σ′ with σ′(a) = 3, σ′(b) = 2, and σ′(n) = 0 such that ⟨s, σ⟩ → σ′. Hint: provide the complete derivation tree. • Let σ be a state such that σ(a) = 0, σ(b) = 1, and σ(n) = 2. Prove using the structural operational semantics that there is a state σ′ with σ′(a) = 3, σ′(b) = 2, and σ′(n) = 0 such that ⟨s, σ⟩ → ∗ 1 σ′. Hint: provide the complete derivation sequence. You have not to provide the derivation tree for each individual transition. Formal Methods and Functional Programming, Endterm, SS10 5Formal Methods and Functional Programming, Endterm, SS10 6 Assignment 2 (3 points) Consider the extension of the IMP programming language with the following statement: for(s1, b, s2) s end Give derivation rule(s) in natural semantics for this statement. Your rule(s) must not make use of the while statement. The semantics of this statement is identical to the for-loop statement for(s1; b; s2) {s} in Java and C#. Formal Methods and Functional Programming, Endterm, SS10 7Formal Methods and Functional Programming, Endterm, SS10 8 Assignment 3 (6 points): Consider the extension of the IMP programming language with the following non-determi- nistic statement: s1[]s2 The derivation rules of the natural semantics for s1[]s2 are ⟨s1, σ⟩ → σ′ ⟨s1[]s2, σ⟩ → σ′ ⟨s2, σ⟩ → σ′ ⟨s1[]s2, σ⟩ → σ′ • Prove that there exist b, s1, s2, σ, and σ′ such that ⟨s1[]s2, σ⟩ → σ′ does not imply ⟨if b then s1 else s2 end, σ⟩ → σ′ • Prove that, for all b, s1, s2, σ, and σ′, ⟨if b then s1 else s2 end, σ⟩ → σ′ implies that there exists a derivation tree for ⟨s1[]s2, σ⟩ → σ′ Formal Methods and Functional Programming, Endterm, SS10 9Formal Methods and Functional Programming, Endterm, SS10 10 Assignment 4 (7 points): Consider the following IMP statement s: if j>0 then x := 1; i := 0; while j # i do x := x*y; i := i+1 end else x := 1 end • Prove that ⊢ { y ̸= 0 ∧ j ≥ 0 } s { y ̸= 0 ∧ x = yj }. Hint: you have to avoid cases in which you could have 0 0. Formal Methods and Functional Programming, Endterm, SS10 11Formal Methods and Functional Programming, Endterm, SS10 12 Assignment 5 (4 points): Prove that for all P and Q: ⊢ { P } x := e { Q } ⇐⇒ P ⇒ Q[x ↦→ e] In the proof, you can rely on the following lemma: ∀R, ∀S, if R ⇒ S then R[x ↦→ e] ⇒ S[x ↦→ e] Formal Methods and Functional Programming, Endterm, SS10 13Formal Methods and Functional Programming, Endterm, SS10 14 Assignment 6 (4 points): Consider the following game between a mole (Maulwurf ) and a hunter. The mole has ﬁve holes as in the above ﬁgure. At the beginning of the game, the mole hides in one of these holes. Now the game proceeds in rounds of the following form: the hunter checks one hole to see whether the mole is inside. If it is, the hunter wins the game. If not, the mole must move one hole to the left or right (if it is in the leftmost hole already, it must move to the right and conversely for the rightmost hole). After the mole has moved, the next round starts. It turns out that the hunter has a strategy to win the game, no matter how the mole moves. One sure winning strategy for the hunter is to check holes in the sequence 2-3-4-2-3-4. • Your task is to model this game in Promela. Your model has to contain the data structure for the holes, the set-up of the initial state (the hiding of the mole), the behavior of the mole, the implementation of the hunter’s winning strategy, and an assertion that ensures that after executing the strategy, the hunter has deﬁnitely caught the mole. Formal Methods and Functional Programming, Endterm, SS10 15Formal Methods and Functional Programming, Endterm, SS10 16","libVersion":"0.5.0","langs":""}