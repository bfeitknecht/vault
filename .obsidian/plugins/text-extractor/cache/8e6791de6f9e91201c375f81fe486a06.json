{"path":"sem4/FMFP/PV/exams/endterms/FMFP-FS09.pdf","text":"Computer Science Department D. Basin P. M¨uller Formal Methods and Functional Programming Endterm June 8th, 2009, 10:15 – 12:00 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. Check that your exam papers are complete (this sheet, a sheet on background ma- terial, and 7 assignments). 2. Write your name on every sheet and use a separate sheet for every exercise. Addi- tional sheets are available from the assistants. 3. This is a closed book exam: the only resources allowed are pens. No laptops, no cell phones, no prepared notes, etc. Do not use a pencil (Bleistift) and do not use the color red. 4. You may write your answers in English or German. Important: Write clearly in the sense of logic, language, and readability. The clarity of your arguments and explanations aﬀects your grade. 5. If you have a question regarding the meaning of a problem statement, you may ask one of the assistants in charge of the exam. Assignment 1 2 3 4 5 6 7 ∑ Max. points 4 6 5 1 3 4 3 26 Your points Grade Syntax and Semantics of IMP Syntax Statements of the programming language IMP are given by the grammar s ::= skip ∣ ∣ x := e ∣ ∣ s; s ∣ ∣ if b then s else s end ∣ ∣ while b do s end where x ranges over the variables, e ranges over the arithmetic expressions, and b ranges over the Boolean expressions. Natural Semantics ⟨skip, σ⟩ → σ ⟨x := e, σ⟩ → σ[x ↦→ A[[e]]σ] ⟨s1, σ⟩ → γ ⟨s2, γ⟩ → σ′ ⟨s1; s2, σ⟩ → σ′ ⟨s1, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ B[[b]]σ = tt ⟨s2, σ⟩ → σ′ ⟨if b then s1 else s2 end, σ⟩ → σ′ B[[b]]σ = ﬀ ⟨s, σ⟩ → γ ⟨while b do s end, γ⟩ → σ′ ⟨while b do s end, σ⟩ → σ′ B[[b]]σ = tt ⟨while b do s end, σ⟩ → σ B[[b]]σ = ﬀ Structural Operational Semantics ⟨skip, σ⟩ →1 σ ⟨x := e, σ⟩ →1 σ[x ↦→ A[[e]]σ] ⟨s1, σ⟩ →1 σ′ ⟨s1; s2, σ⟩ →1 ⟨s2, σ′⟩ ⟨s1, σ⟩ →1 ⟨s′ 1, σ′⟩ ⟨s1; s2, σ⟩ →1 ⟨s′ 1; s2, σ′⟩ ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s1, σ⟩ B[[b]]σ = tt ⟨if b then s1 else s2 end, σ⟩ →1 ⟨s2, σ⟩ B[[b]]σ = ﬀ ⟨while b do s end, σ⟩ →1 ⟨if b then s; while b do s end else skip end, σ⟩ Axiomatic Semantics { P } skip { P } { P [x ↦→ e] } x := e { P } { P } s1 { R } { R } s2 { Q } { P } s1; s2 { Q } { b ∧ P } s1 { Q } { ¬B[[b]] ∧ P } s2 { Q } { P } if b then s1 else s2 end { Q } { B[[b]] ∧ P } s { P } { P } while b do s end { ¬B[[b]] ∧ P } { P ′ } s { Q′ } { P } s { Q } P ⇒ P ′ and Q′ ⇒ Q Formal Methods and Functional Programming, Endterm, SS09 1 Assignment 1: structural operational semantics (SOS), (4 points) Consider the following IMP statement w. while x # 0 do if (x mod 2 = 0) then y := y + x else y := y - x end; x := x - 1 end Using the structural operational semantics prove that there is a state σ′ with σ′(y) = 1 such that ⟨w, σ⟩ → ∗ 1 σ′, where σ is a state with σ(x) = 2 and σ(y) = 0. Justify the ﬁrst 4 transitions of your derivation sequence. Formal Methods and Functional Programming, Endterm, SS09 2 Assignment 2: natural semantics, (6 points) Consider the extension of the programming language IMP with the statement repeat s until b where s is a statement and b is a Boolean expression. In the natural semantics, the semantics of this new statement is captured by the two deduction rules ⟨s, σ⟩ → σ′ ⟨repeat s until b, σ⟩ → σ′ B[[b]]σ′ = tt and ⟨s, σ⟩ → γ ⟨repeat s until b, γ⟩ → σ′ ⟨repeat s until b, σ⟩ → σ′ B[[b]]γ = ﬀ Prove that in the natural semantics the statement repeat s until b is semantically equivalent to the statement s; while not b do s end. Formal Methods and Functional Programming, Endterm, SS09 3 Assignment 3: Hoare logic, (1+4 points) (a) Write an IMP statement s that satisﬁes the following Hoare triple for all integer numbers N . { x = N ∧ N > 0 } s { x = ∑ 1≤j≤N j2 } (∗) Hint: N is a logical variable and you are not allowed to use it inside s. Use a while loop in the statement s to compute the ﬁnal value of x. (b) Use Hoare logic to prove that the statement s that you wrote in part (a) indeed satisﬁes the Hoare triple (∗). You may present the proof as an inference tree or as a proof outline. Formal Methods and Functional Programming, Endterm, SS09 4 Assignment 4: axiomatic semantics, (1 point) Consider the extension of the programming language IMP with the nondeterministic choice operator . Extend the axiomatic semantics of IMP by giving inference rule(s) for a statement of the form s1 s2. Hint: Recall that for the statement s1 s2, either s1 or s2 is nondeterministically chosen to be executed. Formal Methods and Functional Programming, Endterm, SS09 5 Assignment 5: weakest liberal pre-condition, (3 points) Prove that for all predicates P , all IMP statements s, and all Boolean expressions b, it holds that wlp(s, P ) = P implies ⊢ { P } while b do s end { P ∧ ¬B[[b]] } Recall the deﬁnition of the weakest liberal pre-condition for an IMP statement r, a pred- icate Q, and a state σ: wlp(r, Q)(σ) = tt ⇔ ∀σ′ : (⟨r, σ⟩ → σ′ ⇒ Q(σ′) = tt) Formal Methods and Functional Programming, Endterm, SS09 6 Assignment 6: Promela, (1+3 points) Consider the following system that consists of two nonterminating processes: a producer and a consumer. The processes communicate via two unidirected channels. The producer successively produces items (integer values), which it sends over the ﬁrst channel to the consumer and waits for a response from the consumer on the other channel. The consumer successively reads an item from the ﬁrst channel and then nondetermistically sends over the second channel a request for resubmission or asks for the next item. The producer reacts according to the received message. (a) Write a Promela macro inline produce_item(i) that generates an integer i between 1 and 100. (b) Write a Promela program with the processes active proctype producer() and active proctype consumer() that model the producer and the consumer of the above described system, respectively. Use the macro produce_item(i) to generate items. Formal Methods and Functional Programming, Endterm, SS09 7 Assignment 7: linear temporal logic (LTL), (1+1+1 points) Consider a pedestrian crossing with a traﬃc light for the cars and a pedestrian light. The traﬃc light has the signs red, yellow, and green. The pedestrian light has the signs red and green. Additionally, it has a button that the pedestrians can press when they want to cross the road. Formalize the following properties in LTL by using the following propositions. signal the button at the pedestrian light is pressed ped red the red sign of the pedestrian light is on ped green the green sign of the pedestrian light is on traf red the red sign of the traﬃc light is on traf yellow the yellow sign of the traﬃc light is on traf green the green sign of the traﬃc light is on (a) The pedestrian light always shows exactly one sign. (b) Whenever a pedestrian signals that she/he wants to cross the street, the pedestrian light eventually shows the green sign. (c) The traﬃc light always shows the red sign one time point before and one time point after the pedestrian light shows the green sign. You may assume that the pedestrian light is initially red.","libVersion":"0.5.0","langs":""}