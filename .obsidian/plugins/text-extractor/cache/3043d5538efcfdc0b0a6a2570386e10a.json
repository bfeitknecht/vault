{"path":"sem4/CN/VRL/extra/slides/19-Linear-Programming.pdf","text":"Computer Networks: Linear Programming Adrian Perrig Based on slides by Markus Legner and Ankit Singla Photo: ETH Zürich / Gian Marco Castelberg Motivation: optimization is a recurring problem in computer science  Linear Programming (LP) 2 • Many examples in all areas of computer science • Many examples in networking - Minimize path length - Maximize flow - … • Typical form: optimize some quantity subject to some constraints • Generic techniques developed for these kinds of problems • Specific subtype: linear optimization problems What is a linear program (LP)? 3 Variables: • e.g., flows on edges, distance from start, … Objective: • e.g., maximize total flow, minimize distances towards T, … Constraints: • e.g., flow on edge ≤ capacity of edge, … • Real values • Objective function Θ must be linear combination of variables • Each constraint must be a linear combination of variables • (Strict inequalities (<, >) are not allowed) Canonical form of an LP • Vector of variables: 𝑥 = 𝑥!, … , 𝑥\" #, 𝑥 ≥ 0 • Objective: maximize Θ = 𝑐# ⋅ 𝑥, where 𝑐 = 𝑐!, … , 𝑐\" # - Can be written as Θ = ∑$%! \" 𝑐$ ⋅ 𝑥$ • Constraints: 𝐴 ⋅ 𝑥 ≤ 𝑏, where 𝐴 = 𝑎$& is an 𝑚×𝑛 matrix and 𝑏 = 𝑏!, … , 𝑏' # - Corresponds to 𝑚 constraints (1 ≤ 𝑖 ≤ 𝑚): ∑&%! \" 𝑎$& ⋅ 𝑥& ≤ 𝑏$ • Note difference between variables (𝒙) and parameters (𝑨, 𝒃, 𝒄): - Parameters are externally defined by the problem instance; e.g., topology, capacities of links, … - Variables can be varied within this problem instance; e.g., how much traffic flows over particular link 4 Every LP can be transformed to canonical form Minimization: minimize Θ  maximize −Θ Greater-than constraint: 𝐴 ⋅ 𝑥 ≥ 𝑏  −𝐴 ⋅ 𝑥 ≤ −𝑏 Equality constraint: 𝐴 ⋅ 𝑥 = 𝑏  𝐴 ⋅ 𝑥 ≤ 𝑏 ∧ −𝐴 ⋅ 𝑥 ≤ −𝑏 Variables with undefined sign: • Introduce two variables 𝑥$ ( and 𝑥$ ) • Replace each occurrence of 𝑥 by 𝑥$ ( − 𝑥$ ) 5 Algorithms and complexity • Various algorithms exist for solving LPs: - Simplex: worst-case exponential complexity but fast in many practically relevant cases - Various interior-point methods have polynomial worst-case complexity - Karmarkar's algorithm is O 𝑛*., • Currently best complexity is O 𝑛-(!/!/ (https://arxiv.org/pdf/2004.07470.pdf) • Rule of thumb in practice: O 𝑛* 6 Linear programming: a nice generic tool • Many problems can be expressed as LPs (we will see examples in this lecture) • Disadvantage: LPs are typically much slower than specialized algorithms • Advantages: - Writing an LP is much easier than developing a specialized algorithm - Efficient LP solvers are widely available and ready to use (e.g., CPLEX, Gurobi) - LPs can often be adapted easily for variations of a problem; specialized algorithms often don’t work anymore (e.g., multi-commodity flow problem) 7 LP for flow problems 8 Max-flow problem as a linear program 9 S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 Max-flow problem as a linear program 10 S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 Objective: • Maximize flow from 𝑆 to 𝑇 Constraints: • Obey edge capacities, 𝑐𝑢𝑣 Max-flow LP: what are the variables? 11 S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 Variables: • Flow 𝑆 → 𝑇: 𝑓 • Flow on edge 𝑢 → 𝑣: 𝑓𝑢𝑣 Objective: • maximize 𝑓 Max-flow LP: given these variables and objective, what are the constraints? 12 Notation: • Outgoing edges of 𝑣: 𝐸( 𝑣 • Incoming edges of 𝑣: 𝐸) 𝑣 • Net outflow of 𝑣: 𝐹 𝑣 = C 0∈2! 3 𝑓30 − C 4∈2\" 3 𝑓43 Variables: • Flow 𝑆 → 𝑇: 𝑓 • Flow on edge 𝑢 → 𝑣: 𝑓𝑢𝑣 Objective: • maximize 𝑓 Max-flow LP 13 Constraints: 1. Edge capacities: ∀𝑢 → 𝑣 ∈ 𝐸: 0 ≤ 𝑓𝑢𝑣 ≤ 𝑐𝑢𝑣 2. Flow from 𝑆: 𝑓 = 𝐹 𝑆 3. Flow into 𝑇: 𝑓 = −𝐹 𝑇 4. Flow conservation: ∀𝑣 ∈ 𝑉 ∖ {𝑆, 𝑇}: 𝐹 𝑣 = 0 Variables: • Flow 𝑆 → 𝑇: 𝑓 • Flow on edge 𝑢 → 𝑣: 𝑓𝑢𝑣 Objective: • maximize 𝑓 Constraints: 1. Edge capacities: ∀𝑢 → 𝑣 ∈ 𝐸: 0 ≤ 𝑓𝑢𝑣 ≤ 𝑐𝑢𝑣 2. Flow from 𝑆: 𝑓 = 𝐹 𝑆 3. Flow into 𝑇: 𝑓 = −𝐹 𝑇 4. Flow conservation: ∀𝑣 ∈ 𝑉 ∖ {𝑆, 𝑇}: 𝐹 𝑣 = 0 Variables: • Flow 𝑆 → 𝑇: 𝑓 • Flow on edge 𝑢 → 𝑣: 𝑓𝑢𝑣 Objective: • maximize 𝑓 Max-flow LP 14 Complexity: ∼ O E ! Slower than Edmonds-Karp (O 𝑉 \" ⋅ 𝐸 )! Multi-commodity flow (MCF) problem • Multiple commodities 𝛼 that cannot be mixed: here 𝛼 ∈ {1, 2, 3} • Each commodity has its own source 𝑆5 and destination 𝑇5: - E.g., 𝑆! = A, 𝑇! = H • Multiple possible objectives: - Maximize sum of flows of all commodities - Maximize minimum of all commodities - Define demand for each commodity and maximize average “fulfillment ratio” • Best known solution is LP 15 B C G J Max-flow LP can be adapted easily to solve the MCF problem 16 Variables Objective Constraints • Flow 𝑆 → 𝑇: 𝑓 • Flow on edge 𝑢 → 𝑣: 𝑓43 • Flow for comm. 𝛼 𝑆5 → 𝑇5: 𝑓5 • Flow for comm. 𝛼 on edge 𝑢 → 𝑣: 𝑓5,43 maximize 𝑓 maximize ∑5 𝑓5 1. Edge capacities: ∀𝑢 → 𝑣 ∈ 𝐸: • 𝟎 ≤ 𝒇𝒖𝒗 • 𝒇𝒖𝒗 ≤ 𝒄𝒖𝒗 2. Flow from 𝑆: 𝒇 = 𝑭 𝑺 3. Flow conservation: ∀𝑣 ∈ 𝑉 ∖ {𝑆, 𝑇}: 𝑭 𝒗 = 𝟎 1. Edge capacities: ∀𝑢 → 𝑣 ∈ 𝐸: • 𝟎 ≤ 𝒇𝜶,𝒖𝒗 • ∑𝜶 𝒇𝛂,𝒖𝒗 ≤ 𝒄𝒖𝒗 2. Flow from 𝑆5: 𝒇𝜶 = 𝑭𝜶(𝑺𝜶) 3. Flow conservation: ∀𝛼, ∀𝑣 ∈ 𝑉 ∖ {𝑆5, 𝑇5}: 𝑭𝜶 𝒗 = 𝟎 Notation 𝐹 𝑣 = ∑0∈2! 3 𝑓30 − ∑4∈2\" 3 𝑓43 𝐹5 𝑣 = ∑0∈2! 3 𝑓5,30 − ∑4∈2\" 3 𝑓5,43 LP for shortest-path problems OK, let’s try shortest path S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 18 Shortest-path problem as LP S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 Objective: • Minimize ST path length (given edge lengths 𝑤43) Constraint: • “Path” = connected edges 19 Shortest-path LP: What are variables and objective? S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 Variables: • Is edge 𝑢 → 𝑣 on SP? 𝑥43 Objective: • minimize ∑4→3∈2 𝑥43𝑤43 Notation: • 𝑋 𝑣 = ∑0∈2! 3 𝑥30 − ∑4∈2\" 3 𝑥43 20 Shortest-path LP: What are the constraints? Constraints: 1. Path 𝑆 → 𝑇 is connected: ∀𝑣 ∈ 𝑉 ∖ {𝑆, 𝑇}: 𝑋 𝑣 = 0 2. Path starts at 𝑆: 𝑋 𝑆 = 1 3. Possible values for 𝑥? • 𝑥 ∈ 0,1 ? • 0 ≤ 𝑥 ≤ 1 is sufficient (lucky!) Variables: Is edge 𝑢 → 𝑣 on SP? 𝑥43 Objective: minimize ∑4→3∈2 𝑥43𝑤43 Notation: 𝑋 𝑣 = C 0∈2! 3 𝑥30 − C 4∈2\" 3 𝑥43 21 7 Shortest path LP: What if multiple shortest paths exist? 22 S A C E D B G F H T I J 10 4 3 2 9 6 6 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 0 Shortest path LP: What if multiple shortest paths exist? 23 S A C E D B G F H T I J 10 4 3 2 9 6 6 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 x=0.7 x=0.7 x=0.7 x=0.3 x=0.3 x=0.3 x=0.3 0 • Even the LP with 0 ≤ 𝑥 ≤ 1 (no integer constraints) has an integral solution • Even the non-integral solutions … - … still give correct SP length; - … are easy to recover SP from Shortest-path LP: alternative formulation Shortest path LP: alternative formulation 25 S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 • Define du as distance S→u - dS = 0 • for each u→v: dv ≤ du + wuv - dC ≤ 2 - dG ≤ dC + 8 - dG ≤ dA + 2 - … Shortest path LP: alternative formulation 26 S A C E D B G F H T I J 10 4 3 2 9 6 6 7 10 2 2 2 2 2 2 4 5 5 3 7 1 5 8 • Define du as distance S→u - dS = 0 • for each u→v: dv ≤ du + wuv minimize dT Incorrect! We have to maximize. minimize This has a neat physical interpretation! 27 1 S A C D B F T 2 2 12 12 5 9 7 4 3 6 Now pull S and T apart as far as possible S A C D B FT This has a neat physical interpretation! 28 1 S A C D B F T 2 2 12 12 5 9 7 4 3 6 S A C D B FT Finding the shortest path using linear programming https://www.youtube.com/watch?v=2XRSxa03V5g 29 Integer linear programming Integer linear programming • Variables are restricted to integers • General space of integer linear programs (ILPs) is NP hard • This does not mean that every problem that can be expressed as an ILP is hard: Counterexample: maximize 𝑥 subject to 𝑥 = 0 solved efficiently 31  Do not try to prove that a problem is hard by expressing it as an ILP! • In practice, many ILPs can still be solved efficiently Summary: Linear programming is a powerful generic tool 32 Many problems can be formulated as LPs • Formulation not always trivial • Specialized algorithms often faster Variants of a problem often have similar LPs Writing LPs is non-trivial • Correctness can be difficult to see/prove • Some formulations are more efficient than others • Think of it as a highly restricted programming language Efficient solvers exist and are ready to use Be careful with integer LPs","libVersion":"0.3.2","langs":""}