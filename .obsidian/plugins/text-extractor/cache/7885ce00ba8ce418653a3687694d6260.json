{"path":"sem3/A&D/UE/e/A&D-e-u02.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 30 September 2024 Johannes Lengler, David Steurer Kasper Lindberg, Lucas Slot, Hongjie Chen, Manuel Wiedmer Algorithms & Data Structures Exercise sheet 2 HS 24 The solutions for this sheet are submitted on Moodle until 6 October 2024, 23:59. Exercises that are marked by ∗ are challenge exercises. They do not count towards bonus points. You can use results from previous parts without solving those parts. Exercise 2.1 Induction. (a) Prove via mathematical induction that for all integers n ≥ 5, 2n > n 2 . In your solution, you should address the base case, the induction hypothesis and the induction step. (b) Let x be any real number. Prove via mathematical induction that for every positive integer n, we have (1 + x) n = n∑ i=0 ( n i ) xi , where (n i ) = n! i!(n − i)! . We use a standard convention 0! = 1, so (n 0) = (n n ) = 1 for every positive integer n. In your solution, you should address the base case, the induction hypothesis and the induction step. Hint: Y ou can use the following fact without proof: for every 1 ≤ i ≤ n, (n i ) + ( n i − 1 ) = (n + 1 i ) . Asymptotic Notation When we estimate the number of elementary operations executed by algorithms, it is often useful to ignore constant factors and instead use the following kind of asymptotic notation, also called O- Notation. We denote by R+ the set of all (strictly) positive real numbers and by N the set of all (strictly) positive integers. Let N be a set of possible inputs to our algorithm such that f : N → R+ represents its runtime given an input. Definition 1 (O-Notation). For f : N → R+, O(f ) := {g : N → R+ | ∃C > 0 ∀n ∈ N g(n) ≤ C · f (n)}. We write f ≤ O(g) to denote f ∈ O(g). Some textbooks use here the notation f = O(g). We believe the notation f ≤ O(g) helps to avoid some common pitfalls in the context of asymptotic notation. Instead of working with this definition directly, it is often easier to use limits in the way provided by the following theorem. Theorem 1. Let N be an infinite subset of N and f : N → R+ and g : N → R+. • If lim n→∞ f (n) g(n) = 0, then f ≤ O(g) and g ̸≤ O(f ). • If lim n→∞ f (n) g(n) = C ∈ R+, then f ≤ O(g) and g ≤ O(f ). • If lim n→∞ f (n) g(n) = ∞, then f ̸≤ O(g) and g ≤ O(f ). The following theorem can also be helpful when working with O-notation. Theorem 2. Let f, g, h : N → R+. If f ≤ O(h) and g ≤ O(h), then 1. For every constant c > 0, c · f ≤ O(h). 2. f + g ≤ O(h). Notice that for all real numbers a, b > 1, loga n = loga b · logb n (where loga b is a positive constant). Hence loga n ≤ O(logb n). So you don’t have to write bases of logarithms in asymptotic notation, that is, you can just write O(log n). Exercise 2.2 O-notation quiz (1 point). For all the following functions the variable n ranges over N. Prove or disprove the following statements. Justify your answer by computing a limit as in Theorem 1. (a) n5 + 4n4 ≤ O( 1 5 n6) (b) n10 − 10n9 − 100n8 ≤ O(1000n7) (c) 22n ≤ O(en) (d) n 6n+10 3n+2 ≤ O(n3) Exercise 2.3 O-notation mistake. (1 point). Let f : N → R+ be a function, with f (n) ≤ O(n). A colleague tried to prove that ef (n) ≤ O(en). You found their notes, in which they start with the statement they want to show, and derive a series of equivalent statements. The notes read: ef (n) ≤ O(en) justifications for “ ⇐⇒ ” : ⇐⇒ ef (n) ≤ C · e n, for some C > 0 Use Definition 1 on the first page (1) ⇐⇒ log (ef (n)) ≤ log (C · e n) Take the log on both sides (2) ⇐⇒ f (n) ≤ log C + n log(C · en) = log C + n (3) ⇐⇒ f (n) ≤ O(n) n + log C ≤ O(n) (4) 2 So we have proved ef (n) ≤ O(en) ⇐⇒ f (n) ≤ O(n). As f (n) ≤ O(n) is true by assumption, we are done! (a) Show that your colleague’s proof must contain a flaw by giving an example of a function f (n) ≤ O(n), for which ef (n) ≤ O(en) does not hold. (You do not have to justify your example). (b) Explain where in the proof (which equivalence) your colleague made a mistake, and what mistake they made. Exercise 2.4 Mathematical induction? (1 point). A colleague wants to prove that n! ≤ 2n for all integers n ≥ 1 using mathematical induction. You find their notes, which read: • Base Case. Let n = 1. Then: 1! = 1 ≤ 2 1, so the base case holds. • Induction Hypothesis. Assume that the property holds for a positive integer k ≥ 1, that is, k! ≤ 2k. • Inductive Step. We use the induction hypothesis for k = n + 1 to compute: n! = (n + 1)!/(n + 1) ≤IH 2 n+1/(n + 1) ≤ 2 n+1/2 = 2 n, (5) which is exactly what we wanted to show. So by the principle of induction, we are done. (a) Show that the proof above must contain a flaw with a simple computation. (b) Explain where in the proof your colleague made a mistake (which step), and what mistake they made. Exercise 2.5 Asymptotic growth of ln(n!). Recall that the factorial of a positive integer n is defined as n! = 1 · 2 · · · · · (n − 1) · n. For the following functions n ranges over N≥2. (a) Show that ln(n!) ≤ O(n ln n). Hint: You can use the fact that n! ≤ nn for n ∈ N≥2 without proof. (b) Show that n ln n ≤ O(ln(n!)). Hint: You can use the fact that ( n 2 ) n 2 ≤ n! for n ∈ N≥2 without proof. 3","libVersion":"0.3.2","langs":""}