{"path":"sem4/DMDB/VRL/extra/slides/DMDB-s19-data-replication.pdf","text":"Data Modeling and Databases Spring Semester 2025 Data Replication Data Replication Gustavo Alonso Institute of Computing Platforms Department of Computer Science ETH Zürich 1 Database Replication • What is database replication • The advantages of database replication • A taxonomy of replication strategies: • Synchronous • Asynchronous • Update everywhere • Primary copy • Discussion on the various replication strategies. 2Data Replication 3 Database Replication Why replication? • PERFORMANCE: Location transparency is difficult to achieve in a distributed environment. Local accesses are fast, remote accesses are slow. If everything is local, then all accesses should be fast. • FAULT TOLERANCE: Failure resilience is also difficult to achieve. If a site fails, the data it contains becomes unavailable. By keeping several copies of the data at different sites, single site failures should not affect the overall availability. • APPLICATION TYPE: Databases have always tried to separate queries form updates to avoid interference. This leads to two different application types OLTP and OLAP, depending on whether they are update or read intensive. NETWORK DB DB Replication is a common strategy in data management: RAID technology (Redundant Array of Independent Disks), Mirror sites for web pages, Back up mechanisms (1-safe, 2-safe, hot/cold stand by) Here we will focus our attention on replicated databases but many of the ideas we will discuss apply to other environments as well. Data Replication 4 Remote access to data? DATA Zurich London New York Tokyo LOAD RESPONSE TIME CRITICAL Data Replication 5 Replication DATA Zurich DATA London DATA New York DATA Tokyo LOAD RESPONSE TIME CRITICAL Data Replication How to replicate data? • There are two basic parameters to select when designing a replication strategy: where and when. • Depending on when the updates are propagated: • Synchronous (eager) • Asynchronous (lazy) • Depending on where the updates can take place: • Primary Copy (master) • Update Everywhere (group) 6 Sync Async master group Data Replication Synchronous Replication • Synchronous replication propagates any changes to the data immediately to all existing copies. Moreover, the changes are propagated within the scope of the transaction making the changes. The ACID properties apply to all copy updates. 7 Site 1 Site 2 Site 3 Site 4 Transaction updates commit Data Replication 8 Synchronous Replication DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 DATA Zurich Price = $ 50 DATA IS CONSISTENT AT ALL SITES Data Replication 9 Synchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 A SITE WANTS TO UPDATE THE PRICE ... Data Replication 10 Synchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 … IT FIRST CONSULTS WITH EVERYBODY ELSE ... Data Replication 11 Synchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 … AN AGREEMENT IS REACHED ... Data Replication 12 Synchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 100 Price = $ 100 Price = $ 100 Price = $ 100 … THE PRICE IS UPDATED AND PROCESSING CONTINUES. Data Replication Who uses synchronous replication? • Most database systems • Google Spanner • By now, almost all data storage systems although they might not do it as part of an application level transaction (the system implements the transaction that updates all the copies) • Even done across regions and availability zones (might not be completely synchronous) • It is expensive in terms of latency but experience over the years shows that it is better than the alternatives: it hides the fact that data is replicated from the application, otherwise consistency needs to be managed by the application 13Data Replication Asynchronous Replication • Asynchronous replication first executes the updating transaction on the local copy. Then the changes are propagated to all other copies. While the propagation takes place, the copies are inconsistent (they have different values). • The time the copies are inconsistent is an adjustable parameter which is application dependent. 14 Site 1 Site 2 Site 3 Site 4 Transaction updates commit Data Replication 15 Asynchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 DATA IS CONSISTENT AT ALL SITES Data Replication 16 Asynchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 A SITE WANTS TO UPDATE THE PRICE ... Data Replication 17 Asynchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 100 Price = $ 50 Price = $ 50 THEN IT UPDATES THE PRICE LOCALLY AND CONTINUES PROCESSING (DATA IS NOT CONSISTENT!)... Data Replication 18 Asynchronous Replication DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 100 Price = $ 100 Price = $ 100 Price = $ 50 THE UPDATE IS EVENTUALLY PROPAGATED TO ALL SITES (PUSH, PULL MODELS) Data Replication Who uses asynchronous replication? • Typically called “eventual consistency” in the cloud • Used in systems that can tolerate the lack of consistency: • Replication not necessarily used for increasing performance • Applications where data can be easily partitioned or sharded • To implement back-up style solutions • It helps with performance and scalability • Common in many no-SQL systems (Key Value Stores) • There is a growing understanding that it is not always a good idea because it pushes inconsistencies to the application level where they might be difficult to handle 19Data Replication Update Everywhere • With an update everywhere approach, changes can be initiated at any of the copies. That is, any of the sites which owns a copy can update the value of the data item 20 Site 1 Site 2 Site 3 Site 4 Transaction updates commit Site 1 Site 2 Site 3 Site 4 Transaction updates commit Data Replication 21 Update Everywhere DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 ALL SITES ARE ALLOWED TO UPDATE THEIR COPY Data Replication Who uses update everywhere? • Databases, file systems, object stores • Might not update “everywhere” but in a sufficiently large number of places (quorum based systems) • What is a quorum: • Read quorum R • Write quorum W • Number of copies N • N < R + W, N < W + W • Read from R copies • Write to W copies • It guarantees to always read the latest copy 22Data Replication Primary Copy With a primary copy approach, there is only one copy which can be updated (the master), all others (secondary copies) are updated reflecting the changes to the master. 23 Site 1 Site 2 Site 3 Site 4 Site 1 Site 2 Site 3 Site 4 Data Replication 24 Primary Copy DATA Zurich DATA London DATA New York DATA Tokyo Price = $ 50 Price = $ 50 Price = $ 50 Price = $ 50 ONLY ONE SITE IS ALLOWED TO DO UPDATES, THE OTHER ARE READ ONLY COPIES Data Replication Who uses primary copy approaches? • Databases (e.g., Amazon Aurora, Microsoft Azure SQL) • Solutions where the copies are there to provide back-ups or higher availability 25Data Replication 26 Forms of replication Synchronous • Advantages: • No inconsistencies (identical copies) • Reading the local copy yields the most up to date value • Changes are atomic • Disadvantages: A transaction has to update all sites (longer execution time, worse response time) Asynchronous • Advantages: A transaction is always local (good response time) • Disadvantages: • Data inconsistencies • A local read does not always return the most up to date value • Changes to all copies are not guaranteed • Replication is not transparent Update everywhere • Advantages: • Any site can run a transaction • Load is evenly distributed • Disadvantages: • Copies need to be synchronized Primary Copy • Advantages: • No inter-site synchronization is necessary (it takes place at the primary copy) • There is always one site which has all the updates • Disadvantages: • The load at the primary copy can be quite large • Reading the local copy may not yield the most up to date value Data Replication 27 Replication Strategies Synchronous (eager) Asynchronous (lazy) Primary copy Update everywhere synchronous primary copy synchronous update everywhere asynchronous update everywhere asynchronous primary copy The previous ideas can be combined into 4 different replication strategies: Data Replication Replication Strategies 28Synchronous Primary copy Update everywhere Advantages: Updates do not need to be coordinated No inconsistencies Disadvantages: Longest response time Only useful with few updates Local copies are can only be read Advantages: No inconsistencies Elegant (symmetrical solution) Disadvantages: Long response times Updates need to be coordinated Advantages: No coordination necessary Short response times Disadvantages: Local copies are not up to date Inconsistencies Advantages: No centralized coordination Shortest response times Disadvantages: Inconsistencies Updates can be lost (reconciliation) Data Replication Replication (Ideal) 29 Synchronous (eager) Asynchronous (lazy) Primary copy Update everywhere Globally correct Remote writes Globally correct Local writes Inconsistent reads Inconsistent reads Reconciliation Data Replication Replication (Practical) 30 Synchronous (eager) Asynchronous (lazy) Primary copy Update everywhere Too Expensive (usefulness?) Too expensive (does not scale) Feasible Feasible in some applications Data Replication Summary - I • Replication is used for performance and fault tolerant purposes. • There are four possible strategies to implement replication solutions depending on whether it is synchronous or asynchronous, primary copy or update everywhere. • Each strategy has advantages and disadvantages which are more or less obvious given the way they work. • There seems to be a trade-off between correctness (data consistency) and performance (throughput and response time). • The next step is to analyze these strategies in more detail to better understand how they work and where the problems lie. 31Data Replication Implementing Replication 32Data Replication Database Replication Strategies • Database environments • Managing replication • Technical aspects and correctness/performance issues of each replication strategy: • Synchronous - primary copy • Synchronous - update everywhere • Asynchronous - primary copy • Asynchronous - update everywhere 33Data Replication Basic Database Notation • A user interacts with the database by issuing read and write operations. • These read and write operations are grouped into transactions with the following properties: Atomicity: either all of the transaction is executed or nothing at all. Consistency: the transaction produces consistent changes. Isolation: transactions do not interfere with each other. Durability: Once the transaction commits, its changes remain. 34 User Database BoT r(x) r(y) r (z) w(x) w(y) EoT x y z Transaction Data Replication Isolation • Isolation is guaranteed by a concurrency control protocol. • In commercial databases, this is usually 2 Phase Locking (2PL): • conflicting locks cannot coexist (writes conflict with reads and writes on the same item) • Before accessing an item, the item must be locked. • After releasing a lock, a transaction cannot obtain any more locks. 35 User A Database BoT r(x) r(y) r (z) w(x) w(y) EoT x y z Transaction Write-lock user A Write-lock user A Read-lock user A Data Replication Atomicity • A transaction must commit all its changes. • When a transaction executes at various sites, it must execute an atomic commitment protocol, i.e., it must commit at all sites or at none of them. • Commercial systems use 2 Phase Commit: • A coordinator asks everybody whether they want to commit • If everybody agrees, the coordinator sends a message indicating they can all commit 36 User Database A BoT r(x) r(y) r (z) w(x) w(y) EoT Transaction Database B Database C x y z Data Replication Transaction Manager • The transaction manager takes care of isolation and atomicity. • It acquires locks on behalf of all transactions and tries to come up with a serializable execution, i.e., make it look like the transactions were executed one after the other. • If the transactions follow 2 Phase Locking, serializability is guaranteed. Thus, the scheduler only needs to enforce 2PL behaviour. 37 scheduler Transactions from different users Operations from the different transactions 2 Phase Locking is enforced Transactions are serializable Data Replication Managing Replication • When the data is replicated, we still need to guarantee atomicity and isolation. • Atomicity can be guaranteed by using 2 Phase Commit. This is the easy part. • The problem is how to make sure the serialization orders are the same at all sites, i.e., make sure that all sites do the same things in the same order (otherwise the copies would be inconsistent). 38 Scheduler A Scheduler B Data Replication Managing Replication • To avoid this, replication protocols are used. • A replication protocol specifies how the different sites must be coordinated in order to provide a concrete set of guarantees. • The replication protocols depend on the replication strategy (synchronous, asynchronous, primary copy, update everywhere). 39 Scheduler A Scheduler B Replication Protocol Data Replication Replication Strategies 40 Synchronous (eager) Asynchronous (lazy) Primary copy Update everywhere synchronous primary copy synchronous update everywhere asynchronous update everywhere asynchronous primary copy Now we can analyze the advantages and disadvantages of each strategy: Data Replication Cost of Replication 0 10 20 30 40 50 60 0 0.1 0.3 0.5 0.7 0.9 1 System with 50 nodes Available CPU ws (replication factor) 41 • Assume a 50 node replicated system where a fraction s of the data is replicated and w represents the fraction of updates made (ws = replication factor) • Overall computing power of the system: • No performance gain with large ws factor (many updates or many replicated data items) • Reads must be local to get performance advantages. N 1 w s (N 1)+   − Data Replication Synchronous – upd. everywhere Assume all sites contain the same data. READ ONE-WRITE ALL • Each sites uses 2 Phase Locking. • Read operations are performed locally. • Write operations are performed at all sites (using a distributed locking protocol). This protocol guarantees that every site will behave as if there were only one database. The execution is serializable (correct) and all reads access the latest version. This simple protocol illustrates the main idea behind replication, but it needs to be extended in order to cope with realistic environments: • Sites fail, which reduces the availability (if a site fails, no copy can be written). • Sites eventually have to recover (a recently recovered site may not have the latest updates). 42Data Replication Dealing with Site Failures Assume, for the moment, that there are no communication failures. Instead of writing to all copies, we could WRITE ALL AVAILABLE COPIES • READ = read any copy, if time-out, read another copy. • WRITE = send Write(x) to all copies. If one site rejects the operation, then abort. Otherwise, all sites not responding are “missing writes”. • VALIDATION = To commit a transaction • Check that all sites in “missing writes” are still down. If not, then abort the transaction. • Check that all sites that were available are still available. If some do not respond, then abort. 43Data Replication Dealing with Comm. Failures In practice, communications may fail leading to partitioned networks and inaccessible sites. The available copies algorithm assumes that when a site cannot be reached, it must have failed. To tolerate site and communication failures: QUORUM PROTOCOLS Quorums are sets of sites formed in such a way so as to be able to determine that it will have a non-empty intersection with other quorums: • Simple majorities (site quorums). • Weighted majorities (quorum consensus). • Logical structures (tree,, matrix, projective planes quorums). 44Data Replication Quorum Protocols Desirable properties of quorums: • Equal effort: all quorums should have about the same size. • Equal responsibility: all sites participate on the same number of quorums. • Dynamic reconfiguration: establishing a quorum should be dynamic to account for failures and configuration changes. • Low communication overhead: minimize the number of messages exchanged. • Graceful degradation: effort proportional to failures. 45Data Replication Weighted Quorums QUORUM CONSENSUS PROTOCOL • Each copy has a weight assigned to it. • The total weight of all copies is N. • Let RT and WT be read and write thresholds, respectively, such that: • 2 WT > N • RT + WT > N • A read quorum is a set of copies such that their total weight is greater or equal to RT. • A write quorum is a set of copies such that their total weight is greater or equal to WT. 46Data Replication Weighted Quorums • Each copy has a version number. • READ = contact sites until a read quorum is formed. then read the copy with the highest version number. • WRITE = contact sites until a write quorum is formed. Get the version number of the copy with the highest version number (k). Write to all sites in the quorum adding the new version number (k+1). Recovery is for free! but reading is no longer local and it is not possible to change the system dynamically (the copies must be known in advance). 47Data Replication Synchronous - Update Everywhere • Each site uses 2PL • Read operations are performed locally • Write operations involve locking all copies of the data item (request a lock, obtain the lock, receive an acknowledgement) • The transaction is committed using 2PC • Main optimizations are based on the idea of quorums (but all we will say about this protocol also applies to quorums) 48 SITE A SITE B SITE C BOT R(x) W(x) Lock Lock Upd Upd Upd ... ... request ack change Data Replication 49 Response Time and Messages centralized database update T= T= replicated database update: 2N messages 2PC The way replication takes place (one operation at a time), increases the response time and, thereby, the conflict profile of the transaction. The message overhead is too high (even if broadcast facilities are available). Data Replication The Deadlock Problem • Approximated deadlock rate: if the database size remains constant, or if the database size grows with the number of nodes. • Optimistic approaches may result in too many aborts. 50TPS Action_ Time Actions N 4 DB_ Size 2 5 3 2     TPS Action_ Time Actions N 4 DB_ Size 2 5 2     A B C BOT R(x) W(x) Lock D Lock W(x) BOT Data Replication 51 • Advantages: • No inconsistencies • Elegant (symmetrical solution) • Disadvantages: • Very high number of messages involved • Transaction response time is very long • The system will not scale because of deadlocks (as the number of nodes increases, the probability of getting into a deadlock gets too high) Synchronous - update everywhere Data consistency is guaranteed. Performance may be affected with this strategy. The system may also have scalability problems (deadlocks). High fault tolerance. Data Replication 52 Common solution today BEFORE AFTER Pre-Ordering Mechanism Scheduler Scheduler Scheduler Scheduler Data Replication Synchronous - primary copy • Advantages: • Updates do not need to be coordinated • No inconsistencies, no deadlocks. • Disadvantages: • Longest response time • Useful for mixed workloads • Local copies are good for analytics • Common architecture in the cloud 53 Similar problems to those of Sync - update everywhere. Less scalability problems. Data consistency is guaranteed. Fault tolerant. Data Replication Async - primary copy protocol • Update transactions are executed at the primary copy site • Read transactions are executed locally • After the transaction is executed, the changes are propagated to all other sites • Locally, the primary copy site uses 2 Phase Locking • In this scenario, there is no atomic commitment problem (the other sites are not updated until later) 54 SITE A SITE B SITE C BOT R(x) W(x) Upd Upd Upd ... ... change Txn EOT R(x) Data Replication Asynchronous - primary copy • Advantages: • No coordination necessary • Short response times (transaction is local) • Good for mixed OLTP/OLAP • Disadvantages: • Local copies are not up to date (a local read will not always include the updates made at the local copy) • Inconsistencies (different sites have different values of the same data item) 55 Performance is good (almost same as if no replication). Fault tolerance is limited. Data inconsistencies arise. Data Replication Async - update everywhere • All transactions are executed locally • After the transaction is executed, the changes are propagated to all other sites • Locally, a site uses 2 Phase Locking • In this scenario, there is no atomic commitment problem (the other sites are not updated until later) • However, unlike with primary copy, updates need to be coordinated 56 SITE A SITE B SITE C BOT W(x) Upd Upd EOT BOT W(x) EOT Data Replication Async / Update Everywhere Data Replication 57 • Probability of needing reconciliation: • What does it mean to commit a transaction locally? There is no guarantee that a committed transaction will be valid (it may be eliminated if “the other value” wins). DB 1 DB 3 DB 2 TPS Action_ time Actions N 2 DB_ Size 2 3 3    X=3 X=5 Reconciliation • Such problems can be solved using pre-arranged patterns: • Latest update win (newer updates preferred over old ones) • Site priority (preference to updates from headquarters) • Largest value (the larger transaction is preferred) • or using ad-hoc decision making procedures: • identify the changes and try to combine them • analyze the transactions and eliminate the non-important ones • implement your own priority schemas 58Data Replication 59 • Advantages: • No centralized coordination • Shortest response times • Disadvantages: • Inconsistencies • Updates can be lost (reconciliation) Asynchronous - update everywhere Performance is excellent (same as no replication). High fault tolerance. No data consistency. Reconciliation is a tough problem (to be solved almost manually). Data Replication Summary - II • We have seen the different technical issues involved with each replication strategy • Each replication strategy has well defined problems (deadlocks, reconciliation, message overhead, consistency) related to the way the replication protocols work • The trade-off between correctness (data consistency) and performance (throughput and response time) is now clear • The next step is to see how these ideas are implemented in practice 60Data Replication","libVersion":"0.5.0","langs":""}