{"path":"sem1/DMath/UE/s/DMath-u01-s.pdf","text":"ETH Z ¨urich, D-INFK HS 2023, 29. September 2023 Prof. Ueli Maurer Giovanni Deligios Diskrete Mathematik Solution 1 1.1 The Punctured Chessboard a) One only needs to consider 10 cases (since all other cases are symmetric). The cases are marked below. 1 2 3 4 5 6 7 8 9 10 b) The proof that P (7) = 1, including all cases, can be found on the following website: http://www.cut-the-knot.org/Curriculum/Games/TrominoPuzzleN.shtml. 1.2 A False Proof More precisely, the claim consists of two parts: “There exists the largest natural number n” and “n = 1”. Denote the ﬁrst statement by S and the second by T . The statement to prove is S and T , but the proof only shows S =⇒ T , which is true, because S is false. The proof is correct, but proves the wrong statement. Note that if a statement S is false, then the statement S =⇒ T is true for any T . In other words, it is possible to prove any statement T by starting with a false assumption. 1.3 Interpreting Propositional Formulas in Natural Language a) The formulas can be stated in the English language in the following way: i) F1: “If Mario is not getting evicted, he did not forget to pay his rent.” ii) F2: “Mario forgot to pay rent and is getting evicted, or Mario did not forget to pay his rent and is not getting evicted.” Equivalently, we could say “Mario is getting evicted if and only if he forgot to pay his rent.” b) The sentences can be written formally in the following way: i) F3 = ¬A ∧ ¬B ii) F4 = (¬A ∧ B) ∨ (A ∧ ¬B) c) i) ¬F3: Mario forgot to pay his rent or he is getting evicted. ¬F3 ≡ ¬(¬A ∧ ¬B) ≡ A ∨ B ii) ¬F4: Mario is getting evicted if and only if he forgot to pay his rent. ¬F4 ≡ (A ∧ B) ∨ (¬A ∧ ¬B) ≡ F2 1.4 Logical Equivalence via Function Tables a) A B C B → C ¬(A → C) ∧ ¬(A ∨ B) (B → C) → (¬(A → C) ∧ ¬(A ∨ B) ) 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 0 b) With the above function table, it becomes clear that the formula in a) is true if and only if B ∧ ¬C is true. Therefore, the simple equivalent formula is B ∧ ¬C. 1.5 One More Logical Operator a) The function table of the left-hand-side formula is A B C A ♥ B (A ♥ B) ♥C 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 1 0 1 and the function table of the right-hand-side formula is A B C B ♥ C A ♥ (B ♥ C) 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 0 1 and since the function tables are equal, the two formulas are equivalent (by Deﬁnition 2.6). b) The function table of the left-hand-side formula is A B A ♥ B ¬(A ♥ B) 0 0 0 1 0 1 1 0 1 0 1 0 1 1 0 1 and the function table of the right-hand-side formula is A B ¬A ¬B ¬A ∧ ¬B 0 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 and since the last row of the function tables is different, the formulas are not equiva- lent (Deﬁnition 2.6). c) One such formula is (A ♥ C) ♥ (B ♥ B). Observe that for all propositional symbols P one has P ♥ P ≡ ⊥. Furthemore, for all propositional symbols P one also has P ♥ ⊥ ≡ P . The claim follows from the observation that the function table given is the equal to the function table of A ♥ C. The logical operator ♥ is often referred to as exclusive or and a more commonly used symbol for it is ⊕. Later in the course you will see that this is simply addition in the ﬁnite ﬁeld GF(2). 1.6 Simplifying a Formula We choose the formula G = ¬A ∧ (¬B ∨ C). In the following, we prove that F ≡ G: ((¬A ∨ ¬B) ∧ ¬A ) ∧ ((¬B ∧ ¬A ) ∨ C) ≡ ((¬A ∨ ¬B) ∧ (¬A ∨ ¬A)) ∧ ((¬B ∧ ¬A) ∨ C) (idempotence (1)) ≡ (¬A ∨ (¬B ∧ ¬A )) ∧ ((¬B ∧ ¬A ) ∨ C) (distributive law (6)) ≡ ((¬B ∧ ¬A) ∨ ¬A) ∧ ((¬B ∧ ¬A ) ∨ C) (commutativity of ∨ ) ≡ (¬B ∧ ¬A) ∨ (¬A ∧ C) (distributive law (6)) ≡ (¬A ∧ ¬B) ∨ (¬A ∧ C) (commutativity of ∧ ) ≡ ¬A ∧ (¬B ∨ C) (distributive law (5))","libVersion":"0.3.1","langs":""}