{"path":"sem2/PProg/UE/s/PProg-u07-extra.pdf","text":"Parallel Programming Assignment 7: Supplementary Exercises Spring Semester 2024 Pipelining Let us assume that 4 people are at the airport. To prepare for departure, each of them has to first scan their boarding pass (which takes 1 min), and then to do the security check (which takes 10 minutes). a) Assume that there is only one machine for scanning the boarding pass and only one security line. Explain why this pipeline is unbalanced. Compute its throughput. b) Now assume that there are 2 security lines. Which is the new throughput? c) If there were 4 security lines opened, would the pipeline be balanced? Wait and Notify Consider the following implementation of a FairThreadCounter which implements the Round Robin policy for 2 threads (as described in exercise 3). 1 public class FairThreadCounter extends ThreadCounter { 2 3 public FairThreadCounter(Counter counter, int id, int numThreads, int numIterations) { 4 super(counter, id, numThreads, numIterations); 5 assert numThreads == 2 6 } 7 8 public void run() { 9 for (int i = 0; i < numIterations; i++) { 10 synchronized (counter) { 11 counter.increment(); 12 counter.notify(); 13 try { 14 counter.wait(); 15 } catch (InterruptedException e) { 16 e.printStackTrace(); 17 } 18 } 19 } 20 } 21 } 22 23 public static void main(String[] args) { 24 Counter counter = new SequentialCounter(); 25 count(counter, 2, ThreadCounterType.FAIR, 10); 26 System.out.println(\"Counter: \" + counter.value()); 27 } a) What will be printed in the console after running the program? b) Does the solution behave as expected? If not, explain why and fix the errors. 2","libVersion":"0.3.2","langs":""}