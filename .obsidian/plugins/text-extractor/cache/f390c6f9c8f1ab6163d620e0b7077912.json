{"path":"sem2/DDCA/PV/exams/frank/exams/DDCA-FS14-exam.pdf","text":"Name: First Name: Student ID: 1st session examination Design of Digital Circuits SS2014 (252-0014-00S) Srdjan Capkun, Frank K. Gürkaynak Examination Rules: 1. Written exam, 90 minutes total. 2. No books, no calculators, no computers or communication devices. Six pages of hand- written notes are allowed. 3. Write all your answers on this document, space is reserved for your answers after each question. Blank pages are available at the end of the exam. 4. Put your Student ID card visible on the desk during the exam. 5. If you feel disturbed, immediately call an assistant. 6. Answers will only be evaluated if they are readable 7. Write with a black or blue pen (no pencil, no green or red color). 8. Show all your work. For some questions, you may get partial credit even if the end result is wrong due to a calculation mistake. Question: 1 2 3 4 5 6 7 Total Points: 5 9 10 10 15 14 12 75 Score: Design of Digital Circuits 20th of August 2014 This page intentionally left blank First Session Exam Page 1 of 21 Design of Digital Circuits 20th of August 2014 1. (a) (2 points) For the following four numbers given in hexadecimal notation, write the corresponding binary number. 0x42: (0100 0010)2 0xF 9: (1111 1001)2 0x85: (1000 0101)2 0x7E: (0111 1110)2 (b) (3 points) Sort the four numbers given above from the smallest to largest assuming that the binary numbers are coded using: Unsigned: 0x42, 0x7E, 0x85, 0xF 9 Two’s complement: 0x85, 0xF 9, 0x42, 0x7E Sign Magnitude: 0xF 9, 0x85, 0x42, 0x7E First Session Exam Page 2 of 21 Design of Digital Circuits 20th of August 2014 2. In this question, you will be asked to derive the Boolean Equations for two 4-input logic functions. Please use the Truth Table below for this part. Input Output D3 D2 D1 D0 A B 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 1 0 0 0 0 1 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 0 1 1 0 0 0 0 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 First Session Exam Page 3 of 21 Design of Digital Circuits 20th of August 2014 (a) (4 points) The output A is one when there are at least three consecutive 1’s or 0’s in the word D3, D2, D1, D0 (for example 1110), output is zero otherwise. Write the simpliﬁed Boolean equation for A using the Product of Sums form. (Hint: use a Karnaugh map) Solution: 1 1 0 0 0 1 1 0 0 D1D0 D3D2 00 01 11 10 00 A 0 0 01 0 0 A = D2 D1 D0 + D3 D2 D1 + D2 D1 D0 + D3 D2 D1 (b) (4 points) The output B is one when there are three or more zeroes in the 4-bit input word D3, D2, D1, D0, output is zero otherwise (for example 0100). Write the simpliﬁed Boolean equation for B using the Sum of Products form. (Hint: use a Karnaugh map) Solution: 1 1 0 0 1 0 0 D1D0 D3D2 00 01 11 10 00 B 0 0 0 0 1 1 0 B = (D3 + D2) · (D1 + D0) · (D2 + D0) · (D2 + D1) · (D3 + D0) · (D3 + D1) (c) (1 point) In general, how many diﬀerent 4-input Boolean functions can be deﬁned? Solution: A 4-input logic function has 2 4 = 16 diﬀerent combinations of its inputs. The truth table therefore contains 16 entries, and there could be a total First Session Exam Page 4 of 21 Design of Digital Circuits 20th of August 2014 of 2 16 = 65, 536 diﬀerent truth tables. First Session Exam Page 5 of 21 Design of Digital Circuits 20th of August 2014 3. In this question you will be asked to design a Finite State Machine that implements a simple vending machine for a product that costs 3 CHF. The vending machine accepts only two types of coins 1 CHF and 2 CHF. There are two inputs to the state machine: the signal coin is 1 when a new coin is inserted and 0 when there is no new coin. The signal value is 1 when the machine has detected a 2 CHF coin and 0 when a 1 CHF coin has been detected. The state machine has two outputs. A logic-1 on the product signal activates the mech- anism to release a product. The signal return will activate a system that will return the customer 1 CHF should he chose to enter two 2 CHF coins in a row. Simplifying assumptions • It is assumed that there is an inﬁnite supply of 1 CHF coins available to return the money. • The system has been designed so that while product and/or return signals are active, no new coins will be accepted and the user will not be able to add more coins during this time. In other words, as soon as the user enters either 3 CHF or 4 CHF, the machine will no longer accept new coins until the product is delivered. (a) (4 points) Draw a State Transition Diagram using a Moore type FSM. (Hint: Label the states \"INIT\" for the initial state and \"ONE\", \"TWO\", \"THREE\", and \"FOUR\" for the remaining states which correspond to the total amount of coins entered by the customer.). Solution: First Session Exam Page 6 of 21 Design of Digital Circuits 20th of August 2014 coin=0 reset INIT product=0 return=0 ONE product=0 return=0 TWO product=0 return=0 THREE product=1 return=0 FOUR product=1 return=1 coin=1, value=0 coin=0 coin=0 coin=1, value=0 coin=1, coin=1, coin=1,coin=1, First Session Exam Page 7 of 21 Design of Digital Circuits 20th of August 2014 (b) (4 points) Draw State Transition Diagram using a Mealy type FSM. (Hint: A sim- ple solution would have only three states: \"INIT\", \"ONE\", and \"TWO\") Solution: coin=0/ product=0, return=0 reset INIT ONE TWO coin=1, value=0/ product=0, return=0 coin=1, value=1/ product=0, return=0 coin=1, value=0/ product=0, return=0 coin=0/ product=0, return=0 coin=0/ product=0, return=0 coin=1, value=1/ product=1, return=0 coin=1, value=1/ product=1, return=1 coin=1, value=0/ product=1, return=0 First Session Exam Page 8 of 21 Design of Digital Circuits 20th of August 2014 (c) (2 points) Complete the following extended State Transition Table with outputs of the Mealy type FSM. The ﬁrst entry has been provided for you as an example. Present State Inputs Next State Outputs name coin value name product return INIT 0 X INIT 0 0 INIT 1 0 ONE 0 0 INIT 1 1 TWO 0 0 ONE 0 X ONE 0 0 ONE 1 0 TWO 0 0 ONE 1 1 INIT 1 0 TWO 0 X TWO 0 0 TWO 1 0 INIT 1 0 TWO 1 1 INIT 1 1 First Session Exam Page 9 of 21 Design of Digital Circuits 20th of August 2014 This page intentionally left blank First Session Exam Page 10 of 21 Design of Digital Circuits 20th of August 2014 4. You have been asked to design a single-port SRAM memory for a microcontroller with 1024 entries of 32-bit words each. (a) (2 points) Answer the following short questions about this memory: How many kiloBytes can this memory store? 4Kilobytes How many bits will the address input have? 10 How does the SRAM know when there is a write access? A writeenable signal is used Is an SRAM a combinational or a sequential circuit? Sequential (b) (8 points) To build your 1024-entry, 32-bit word memory, you only have access to a single-port SRAM memory with 512-entries of 32-bit words that has the following connections. ADDR DO 512x32 SRAM Draw a schematic that shows how the 1024-entry memory can be designed by com- bining two 512-entry memories. You can use any combinational logic gates such as AND, OR, NOT gates and multiplexers as necessary. Make sure to label the address and data connections properly. (Hint:Consider the read and write operations separately) First Session Exam Page 11 of 21 Design of Digital Circuits 20th of August 2014 This page intentionally left blank Solution: ADDR DO 512x32 SRAM ADDR DO 512x32 SRAM 0 MUX 32 32 32 9 bits = ADDR[8:0]10 1 bit = ADDR[9] 32 9 9 32 32 ADDR DI WE CLK DO 1024x32 SRAM First Session Exam Page 12 of 21 Design of Digital Circuits 20th of August 2014 5. (a) (8 points) In this question you are required to write the Verilog code that imple- ments the following block diagram. 0 MUX 0 MUX reset DFF clk clr sel data rst 16’b0 inA Sum adder inA Sum adder out i_first i_second add2 inc next accu add1 16 16 16 16 16 16 calculate The block called calculate has one 16-bit input (data), two 1-bit control signals (sel, clr) as well as two signals for clock and reset. It is a sequential circuit that generates a single 16-bit output called out. The circuit contains two instances of a combinational adder block called (adder). The following is the declaration part of this module: 1 module adder ( input [15:0] inA , input [15:0] inB, 2 output [15:0] Sum); 3 // definition of the adder 4 5 endmodule Notes: • The ﬂip-ﬂop and the multiplexers are not instantiated, you have to write the corresponding Verilog code. • The ﬂip-ﬂop uses an asynchronous reset, the output is zero when reset is one. • Note that Verilog is case sensitive. • Write legibly. First Session Exam Page 13 of 21 Design of Digital Circuits 20th of August 2014 1 module calculate ( 2 input clk, rst, 3 input [15:0] data, 4 input sel, clr, 5 output [15:0] out); 6 7 // Define internal signals 8 wire [15:0] add1, add2, inc, next; 9 10 // The value of accu will be assigned in a process 11 reg [15:0] accu; 12 13 // instantiate the module ’adder’ two times 14 adder i_first (.inA(data), .inB(accu), .Sum(add1) ); 15 adder i_second (.inA(data), .inB(add1), .Sum(add2) ); 16 17 // The multiplexers 18 assign inc = (sel) ? add1 : add2; 19 assign next = (clr) ? 16’b0: inc; 20 21 22 // The FF 23 always @ (posedge clk, posedge rst) 24 if (rst) accu <= 16’b0; 25 else accu <= next; 26 27 // Output assignment 28 assign out = accu; 29 30 endmodule First Session Exam Page 14 of 21 Design of Digital Circuits 20th of August 2014 (b) (2 points) In one sentence or two, brieﬂy explain what this circuit does. Solution: This circuit implements an accumulator. At every cycle the input is added (accumulated) depending on the sel signal either once or twice to the internal register. (c) (5 points) Derive a more eﬃcient version of the circuit that does exactly same thing using only one instance of the adder and without using additional clock cycles. Draw either a block diagram or write the corresponding Verilog code (it is suﬃcient to draw/write only the parts that will change). Solution: 1 module calculate ( 2 input clk, rst, 3 input [15:0] data, 4 input sel, clr, 5 output [15:0] out); 6 7 // Define internal signals 8 wire [15:0] add1, add2, inc, next; 9 10 // The value of accu will be assigned in a process 11 wire reg [15:0] accu; 12 13 // select the input or twice the input 14 assign inc = (sel) ? data : data <<1; 15 16 // instantiate the module adder only once ! 17 adder i_first (.inA(inc), .inB(accu), .Sum(add1) ); 18 19 // The multiplexer for clr 20 assign next = (clr) ? 16’b0: add1; 21 22 23 // The FF 24 always @ (posedge clk, posedge rst) 25 if (rst) accu <= 16’b0; 26 else accu <= next; 27 28 // Output assignment 29 assign out = accu; 30 31 endmodule First Session Exam Page 15 of 21 Design of Digital Circuits 20th of August 2014 6. In this question, you are required to answer questions about the Multicycle architecture of the MIPS processor and calculate diﬀerent timing paths for the implementation given below. Use the following table to calculate timing related questions. Assume that the control unit is not part of any timing path. Prop. Delay Cont. Delay Setup Time Hold Time Block (pd) (cd) (su) (ho) Register 0.3 ns 0.1 ns 0.1 ns 0.2 ns Instr/DataMemory (A) 2.5 ns 2.2 ns n.a. n.a. Instr/DataMemory (WD) n.a. n.a. 0.2 ns 0.4 ns Register File (A1, A2) 2.3 ns 1.0 ns n.a. n.a. Register File (A3, WD3) n.a. n.a. 0.3 ns 0.3 ns Control Unit 0.0 ns 0.0 ns 0.0 ns 0.0 ns ALU 2.1 ns 1.2 ns n.a. n.a. 2:1 Multiplexer 0.5 ns 0.3 ns n.a. n.a. 4:1 Multiplexer 0.6 ns 0.4 ns n.a. n.a. Sign Extend 0.0 ns 0.0 ns n.a. n.a. «2 0.0 ns 0.0 ns n.a. n.a. AND/OR 0.1 ns 0.0 ns n.a. n.a. Hint: 1 1 ns = 1 GHz, a clock with 1 GHz has a period of 1 ns. 1 GHz = 1000 MHz First Session Exam Page 16 of 21 Design of Digital Circuits 20th of August 2014 (a) (2 points) Name two advantages of a multi-cycle architecture when compared to a single-cycle architecture. Solution: • Area critical components are re-used reducing area • Instructions that are simpler will ﬁnish faster than more complex instruc- tions • Critical path is reduced allowing the circuit to be clocked at a higher frequency. (b) (1 point) Name at least one disadvantage of a multi-cycle architecture when com- pared to a single-cycle architecture. Solution: • More complex control, higher control overhead • Not necessarily faster, depends on the average cycles per instruction, and the speedup of the clock speed. If the clock is 3x faster but the average CPI is 4, it will be slower, if the clock is 4.5 times faster it will be faster than the single cycle architecture. (c) (6 points) We will attempt to determine the critical path. In such a circuit, there are several candidates; we therefore need to determine the length of all these paths and determine the longest one. Identify the critical path starting with the registers that drive the following signals. The ﬁrst one has been completed for you, you need to determine the remaining three. ALU out → pdreg,ALU out → pdM ux2 → pdM em,A → sureg,Instr P C → pdreg,P C → pdM ux2 → pdALU → pdM ux2 → sureg,P C Instr → pdreg,Instr → pdM ux4 → pdALU → pdM ux2 → sureg,P C Data → pdreg,Data → pdM ux2 → suRegF,W D3 First Session Exam Page 17 of 21 Design of Digital Circuits 20th of August 2014 (d) (2 points) What is the critical path of this architecture and how long is this path? (Hint: It will be one of the paths you have determined in the previous question) Solution: In this example, the path that starts from Instr (or B) register and goes through the 4-input MUX, the ALU, the 2-input MUX and ends at the register P C is the longest path. CriticalP ath = pdreg,Instr + pdsignext + pd<<2 + pdM ux4 + pdALU + pdM ux2 + sureg,P C = 0.3 + 0 + 0 + 0.6 + 2.1 + 0.5 + 0.1 = 3.6 ns (e) (3 points) What is the shortest path of this circuit? What condition does this path have to satisfy? Is this condition satisﬁed in this circuit? If not, what can be done? Solution: The shortest path starts from the B register and directly arrives at the W D input of the Instr/Data Memory. The fastest path should not violate the hold timing condition : cdreg,B > homem,W D. This does not hold true. A delay of at least 0.3 ns should be inserted between the B register and the W D input of the Instr/Data Memory. Otherwise the circuit will not function properly. First Session Exam Page 18 of 21 Design of Digital Circuits 20th of August 2014 7. You are analyzing a performance problem of a software running on a 5-stage pipelined MIPS architecture (the same one covered in class) that uses a direct mapped cache with a capacity of 256 words and a block size of 16 words. The assembly code of the problematic part (the subroutine comparr) is given below. Answer the questions based on this code. 1 2 comparr: addi $sp, $sp, -4 3 sw $ra, 4($sp) 4 5 addi $s0, $0, 1024 # initialize values 6 addi $s1, $0, 0 7 addi $s2, $0, 0x6000 8 loop: beq $s0, $0, done 9 add $s3, $s2, $s0 10 11 lw $a0, 0x1000($s3) # load Y[$s1] 12 jal round # round (Y[$s1]) 13 add $a1, $v0, $0 14 15 lw $a0, 0x2000($s3) # load Z[$s1] 16 jal round # round (Z[$s1]) 17 add $a2, $v0, $0 18 19 lw $a0, 0($s3) # load X[$s1] 20 jal round # round(X[$s1]) 21 add $a0, $v0, $0 22 23 jal compute 24 add $s1, $s1, $v0 25 addi $s0, $s0, -4 26 j loop 27 28 done: add $v0, $s1, $0 29 lw $ra, 4($sp) 30 addi $sp, $sp, 4 31 jr $ra 32 33 round: addi $v0, $a0, 16 34 sll $v0, $v0, 5 35 sra $v0, $v0, 5 36 jr $ra 37 38 compute: # code that does not interest us. First Session Exam Page 19 of 21 Design of Digital Circuits 20th of August 2014 (a) (4 points) What is a data hazard in a pipelined processor? Which part of the code would be aﬀected by a data hazard ? Brieﬂy explain why. Solution: A data hazard occurs, when the processor needs to access data that has not yet been written back. In the example code, the round function accesses the $v0 register twice right after it has been changed. At the time the sra instruction fetches its operands, $v0 has not been written back to the register ﬁle. (b) (1 point) Consider the lw instructions in the main loop (lines 8 to 26). How many lw instructions will be executed within this loop in total? Solution: The loop will execute 256 times. Each iteration will execute 3 lw operations, in total 768 lw instructions. (c) (2 points) Approximately, what percentage of the lw instructions will result in a cache miss? Why? Solution: All lw accesses will result in a cache miss. The three lw instructions load from addresses [0x1000 + 0x6000 + 0x0400], [0x2000 + 0x6000 + 0x0400], and [0 + 0x6000 + 0x0400]. In a direct mapped cache with only 256 capacity all of these accesses will map to the same cache location. The ﬁrst access will result in a compulsory miss, the remaining two accesses will create a conﬂict miss. (d) (5 points) Is there any way to reduce the cache miss rate without modifying the hardware and the cache structure? Explain. Solution: If the data structure in the memory was modiﬁed so that the data to be accessed was stored in consecutive locations, the ﬁrst lw would be a compulsory miss, but the following 15 accesses would be a cache hit. One solution would be the following: addi $s0, $0, 3072 # counter x 3 ... lw $a0, 0[$s3] # load Y[$s1] ... lw $a0, 4[$s3] # load Z[$s1] ... lw $a0, 8[$s3] # load X[$s1] ... addi $s0, $s0, -12 # decrement address by 12. j loop # continue loop First Session Exam Page 20 of 21 Design of Digital Circuits 20th of August 2014 Instead of storing the data at three diﬀerent locations, it will store the data consecutively in one location. A second alternative could be to manipulate the start addresses of the three arrays so that the similarly indexed elements of the array do not map on the same cache location. Since the code does not read from the same location twice, it is suﬃcient that they are separated by 16 words so that once a block is loaded for one array, it does not overwrite the current block. 16 words requires 16*4 == 64 == 0x40 oﬀset when you consider the words are 32 bits long. In our code the base addresses for the three arrays were at 0x6000, 0x7000 and 0x8000. So placing them at 0x6000, 0x7040 and 0x8080 would prevent the consecutive lw commands creating a conﬂict miss. Of course any oﬀset that would result the three values to be mapped to diﬀerent cache locations would work as well. First Session Exam Page 21 of 21","libVersion":"0.3.2","langs":""}