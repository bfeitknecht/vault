{"path":"sem4/DMDB/VRL/extra/slides/DMDB-s05-recursion,integrity-constraints.pdf","text":"Data Modeling and Databases Spring Semester 2025 Nulls and Views Recursion - Integrity Constraints Gustavo Alonso Institute of Computing Platforms Department of Computer Science ETH Z√ºrich 1 Lessons learned so far ‚Ä¢ Last lecture we looked into ‚Ä¢ Nulls ‚Ä¢ Views ‚Ä¢ In this lecture we continue exploring aspects of SQL that are not directly based on the relational model but are needed in practical systems ‚Ä¢ Connections to several previous topics (entity relationship model, cardinality) ‚Ä¢ NULLS ‚Ä¢ KEYS Recursion - Integrity Constraints 2 Recursive queries Recursion - Integrity Constraints 3 Limitation of SQL Queries ‚Ä¢ SELECT ... FROM ... WHERE ‚Ä¢ Aggregation ‚Ä¢ Subquery ‚Ä¢ NULL ‚Ä¢ Views ‚Ä¢ ‚Ä¶ ‚Ä¢ Can you construct a query that we cannot answer using what we have learned so far? Q: Return ALL ancestors of D Recursion - Integrity Constraints 4 Limitation of SQL Queries ‚Ä¢ How is answering this query hard? ‚Ä¢ There does not exist one single SQL query that works for all possible DB instances -- we don't know how many generations this DB contains. Q: Return ALL ancestors of D SELECT parent FROM ParentOf WHERE child = D; Parent C SELECT p2.parent as grandparent FROM ParentOf p1, ParentOf p2 WHERE p1.child = D AND p1.parent = p2.child Grandparent B SELECT p3.parent as greatgrandparent FROM ParentOf p1, ParentOf p2, ParentOf p3 WHERE p1.child = D AND p1.parent = p2.child AND p2.parent = p1.child; GreatGrandparent A Recursion - Integrity Constraints 5 Limitation of SQL Queries ‚Ä¢ How is answering this query hard? ‚Ä¢ There does not exist one single SQL query that works for all possible DB instances -- we don't know how many hops this DB contains. Q: What is the cheapest way to get from PEK to ZRH? SELECT min(price) FROM Flight WHERE orig = PEK AND desk = ZRH; price 100 SELECT min(f1.price + f2.price) FROM Flight f1, Flight f2 WHERE f1.orig = PEK AND f2.dest = ZRH AND f1.dest = f2.orig price 30 orig dest price PEK ZRH 100 PEK MUC 10 MUC ZRH 20 MUC LUX 30 PEK SFO 1000 SFO ZRH 1000 Recursion - Integrity Constraints 6 Recursion ‚Ä¢ Observation: The functionality that we need is to execute the same query again and again, until it converges: ‚Ä¢ Ancestor example: reach the first generation ‚Ä¢ Flight example: no more N+1-stop flights SELECT parent FROM ParentOf WHERE child = D; ancestor C SELECT p2.parent FROM Ancestor1 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B Ancestor1 Ancestor2 SELECT p2.parent FROM Ancestor2 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B A Ancestor3 SELECT p2.parent FROM Ancestor3 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B A Ancestor4 ‚ÄúConverged‚Äù ‚Äì We get our answer.Recursion - Integrity Constraints 7 Recursion ‚ñ™ SQL provides an easy way to express the above process. ‚ñ™ Set R = Empty ‚ñ™ Run (base query UNION recursive query) and set it as the new R ‚ñ™ Repeat until R does not change. SELECT parent FROM ParentOf WHERE child = D; ancestor C SELECT p2.parent FROM Ancestor1 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B Ancester1 Ancester2 SELECT p2.parent FROM Ancestor2 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B A Ancester3 SELECT p2.parent FROM Ancestor3 p1 ParentOf p2 WHERE p1.ancester = p2.child; ancestor C B A Ancester4 ‚ÄúConverged‚Äù ‚Äì We get our answer. WITH RECURSIVE R AS (base query UNION recursive query) <Query involving R and other tables) WITH RECURSIVE AncestorOfD(ancester) AS (SELECT parent FROM ParentOf WHERE D = child UNION SELECT p2.parent FROM AncesterOfD p1, ParentOf p2 WHERE p1.ancestor = p2.child) SELECT * FROM AncesterOfD; 8 Recursion ‚Äì examples and corner cases ‚Ä¢ Recursion can be tricky. WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r FROM R) SELECT * FROM R r R r 1 R r 1 R Answer Recursion - Integrity Constraints 9 Recursion ‚Äì examples and corner cases WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r+1 FROM R) SELECT * FROM R r R r 1 R r 1 2 R Won‚Äôt terminater 1 2 3 R r 1 2 3 4 R ‚Ä¶ Recursion - Integrity Constraints 10 Recursion ‚Äì examples and corner cases WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r+1 FROM R) SELECT * FROM R LIMIT 10; r R r 1 R r 1 2 R Answer r 1 2 3 R r 1 2 3 4 R ‚Ä¶ r 1 2 3 4 5 6 7 8 9 10 R Recursion - Integrity Constraints 11 Recursion ‚Äì examples and corner cases WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r+1 FROM R) SELECT min(r) FROM R LIMIT 10; r R r 1 R r 1 2 R r 1 2 3 R r 1 2 3 4 R ‚Ä¶ Won‚Äôt terminate (You cannot evaluate min(r) without the whole R) Recursion - Integrity Constraints 12 Recursion ‚Äì examples and corner cases WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r+1 FROM R WHERE r<5) SELECT min(r) FROM R LIMIT 1; r R r 1 R r 1 2 R r 1 2 3 R r 1 2 3 4 R r 1 2 3 4 5 R r 1 2 3 4 5 R Answer Recursion - Integrity Constraints 13 Recursion r R r 1 R r 1 1 R r 1 1 1 R r 1 1 1 1 R WITH RECURSIVE R(r) AS (SELECT 1 UNION ALL SELECT r FROM R) SELECT * FROM R WITH RECURSIVE R(r) AS (SELECT 1 UNION SELECT r FROM R) SELECT * FROM R instead of ‚Ä¶ Won‚Äôt terminate Recursion - Integrity Constraints 14 Recursion: Fundamental Limitation of Relational Model ‚Ä¢ Recursion is a natural operation in programming ‚Ä¢ Recursion is possible in SQL (but \"ugly\") ‚Ä¢ If your find workloads containing lot of recursion queries, you might want to look into graph databases ‚Ä¢ All previous two examples are essentially asking about transitive closure queries over Graphs ‚Ä¢ Why is this such a fundamental limitation of relational DB? ‚Ä¢ The SQL subset we have been learning essentially implements first-order logic. ‚Ä¢ But first-order logic cannot express transitive closure. orig dest price PEK ZRH 100 PEK MUC 10 MUC ZRH 20 MUC LUX 30 PEK SFO 1000 SFO ZRH 1000 Recursion - Integrity Constraints 15 Recursion: GraphDB & SPARQL ‚Ä¢ In Semantic Web, SPARQL is a query language for getting information from RDF graphs ‚Ä¢ SPARQL = SPARQL Protocol and RDF Query Language ‚Ä¢ matches graph patterns - so also a graph matching language SELECT ?player ?club WHERE {?player :position :striker . ?player :playsFor ?club . ?club :region :Barcelona } Match the DB (a graph) with the query (a graph) Recursion - Integrity Constraints 16 Recursion: GraphDB & SPARQL ‚Ä¢ In Semantic Web, SPARQL is a query language for getting information from RDF graphs ‚Ä¢ SPARQL = SPARQL Protocol and RDF Query Language ‚Ä¢ matches graph patterns - so also a graph matching language SELECT ?member WHERE { ?member :hasParent :Joe } SELECT ?member WHERE {?c :hasParent :Joe . ?member :hasParent ?c . } SELECT ?member WHERE { ?member :hasParent* :Joe .} Recursion - Integrity Constraints 17 Recursion: Example ‚Ä¢ Q: All pre-requisite class of Databases ‚Ä¢ The following SQL does not answer this query (for a general DB) select l1.prerequisite from requires l1, requires l2, Lecture l where l1.Follow-up = l2.prerequisite and l2.Follow-up = l.Nr and l.Title=`Databases¬¥; Recursion - Integrity Constraints 18 Recursion: Example ‚Ä¢ Q: All pre-requisite class of Databases ‚Ä¢ The following SQL does answer this query with RECURSIVE TransLecture (First, Next) as (select prerequisite, follow-up from requires union all select t.First, r.follow-up from TransLecture t, requires r where t.Next= r.prerequisite) select Title from Lecture where Nr in (select First from TransLecture where Next in (select Nr from Lecture where Title = `Database¬¥) ); Q1 Q2 19 Integrity Constraints Recursion - Integrity Constraints 20 Constraints in DB ‚Ä¢ Constraints: Define the set of valid DB instance. ‚Ä¢ We already have some ways to constrain what can be put in a DB: ‚Ä¢ E.g., Key Constraints ‚Ä¢ E.g., Type Constraints ‚Ä¢ E.g., Schema defines the shape (you cannot insert a triple into a 2-ary relation) ‚Ä¢ Can we do better? ‚Ä¢ Integrity constraints: ‚Ä¢ The way that DB makes sure changes are consistent and do not cause troubles later on. ‚Ä¢ Control the content of the data and its consistency as part of the schema. CREATE TABLE Professor( PersNr integer, Name varchar (30) Level character (2) default \"AP‚Äù, PRIMARY KEY (PersNr) ); ‚ñ™ Formally, given a relation ùëÖ(ùëò: ùê∑ùëò, ùëé: ùê∑ùëé, ùëè: ùê∑ùëè) ‚ñ™ All valid instances: ùêº ‚äÜ ùê∑ùëò √ó ùê∑ùëé √ó ùê∑ùëè ‚àß ‚àÄ ùëò, ùëé, ùëè , ùëò‚Ä≤, ùëé‚Ä≤, ùëè‚Ä≤ ‚àà ùêº, ùëò = ùëò‚Ä≤ ‚áí ùëé, ùëè = (ùëé‚Ä≤, ùëè‚Ä≤) Key Constraint ‚ñ™ Formally, given a relation ùëÖ(ùëò: ùê∑ùëò, ùëé: ùê∑ùëé, ùëè: ùê∑ùëè) ‚ñ™ All valid instances: ùêº ‚äÜ ùê∑ùëò √ó ùê∑ùëé √ó ùê∑ùëè ‚àß ‚àÄ ùëò, ùëé, ùëè , ùëò‚Ä≤, ùëé‚Ä≤, ùëè‚Ä≤ ‚àà ùêº, ùëò = ùëò‚Ä≤ ‚áí ùëé, ùëè = (ùëé‚Ä≤, ùëè‚Ä≤) Type Constraint Recursion - Integrity Constraints 21 Constraints in DB ‚Ä¢ Examples of Constraints: ‚Ä¢ Key ‚Ä¢ Cardinality ‚Ä¢ Attribute Domains ‚Ä¢ Subset relationship for generalization: ‚Ä¢ Professor IDs is a subset of Person IDs ‚Ä¢ Referential integrity ‚Ä¢ Course needs to be taught by a Prof whose ID is in the Professor table ‚Ä¢ We will talk about two ways that DB provides to specify constraints: ‚Ä¢ Integrity Constraints Enforced by Schema ‚Ä¢ (User Defined) Trigger Recursion - Integrity Constraints 22 NOT NULL Constraints CREATE TABLE Student (sID int, sName text, GPA real not null); INSERT (1, ‚Äúb‚Äù, 3.2); INSERT (NULL, ‚Äúd‚Äù, 3.4); INSERT (3, ‚Äúf‚Äù, NULL); UPDATE Student SET GPA = null where sID=1; UPDATE Student SET GPA = null where sID=10; Recursion - Integrity Constraints 23 PRIMARY KEY Constraints CREATE TABLE Student (sID int PRIMARY KEY sName text, GPA real); INSERT (1, ‚Äúb‚Äù, 3.2); INSERT (NULL, ‚Äúd‚Äù, 3.4); INSERT (3, ‚Äúf‚Äù, NULL); UPDATE Student SET id = 1 where GPA IS NULL; INSERT (1, ‚Äúg‚Äù, 2.8); UPDATE Student SET id = id - 2; What if we do: Tricky: because of immediate constraint checking, it might not be deterministic as it might depend on the specific order of how data are stored. See the following example: http://sqlfiddle.com/#!17/497c44/1 Recursion - Integrity Constraints 24 KEY Constraints ‚Ä¢ A certain attribute needs to be (1) unique and (2) not NULL. ‚Ä¢ Can define PRIMARY KEY over multiple attributes. ‚Ä¢ But you can only define ONE PRIMARY KEY per relation. CREATE TABLE Student (sID int, sName text, GPA real PRIMARY KEY (sID, sName) ); INSERT INTO Student VALUES (1, NULL, 2); INSERT INTO Student VALUES (2, 2, 2); INSERT INTO Student VALUES (2, 2, 2); INSERT INTO Student VALUES (2, 3, 2); Tricky: The ‚Äúcombination‚Äù needs to be unique; all attributes need to be NOT NULL. Recursion - Integrity Constraints 25 UNIQUE Constraints - Attributes CREATE TABLE Student (sID int PRIMARY KEY sName text UNIQUE, GPA real); INSERT INTO Student VALUES (NULL, 1, 2); INSERT INTO Student VALUES (1, NULL, 2); INSERT INTO Student VALUES (2, NULL, 3); INSERT INTO Student VALUES (4, 1, 3); INSERT INTO Student VALUES (3, 1, 2); Tricky: Different from Primary Key, UNIQUE can be NULL. Recursion - Integrity Constraints 26 UNIQUE Constraints - Attributes CREATE TABLE Student (sID int, sName text, GPA real UNIQUE (sID, sName) UNIQUE (Sid, GPA) ); INSERT INTO Student VALUES (NULL, NULL, NULL); INSERT INTO Student VALUES (NULL, NULL, NULL); INSERT INTO Student VALUES (NULL, NULL, NULL); Tricky: UNIQUE columns can have multiple NULLs. Recursion - Integrity Constraints 27 CHECK Constraints ‚Ä¢ One can also conduct local checking of the value of attributes. ‚Ä¢ (Local in the sense that you take as input a tuple and check whether it satisfies some constraints) CREATE TABLE Student (sID int PRIMARY KEY sName text, GPA real, semester int, check((GPA <= 4.0 and GPA > 0.0) OR (semester <20 and semester > 0))); INSERT INTO Student VALUES (1, 1, 1.2, 5); INSERT INTO Student VALUES (2, 1, 5, 5); INSERT INTO Student VALUES (3, 1, 1.2, 20); INSERT INTO Student VALUES (4, 1, NULL,5); sID, sName, GPA, Sem. Recursion - Integrity Constraints 28 CHECK Constraints ‚Ä¢ One can also conduct local checking of the value of attributes. ‚Ä¢ Corner case: CHECK accepts Unknown & True (Only reject False) CREATE TABLE Student ( sID int, sName text, GPA real, semester int, check (NULL IS NOT NULL) ); CREATE TABLE Student ( sID int, sName text, GPA real, semester int, check (NULL = NULL) );=> False => Unknown Reject ALL inputs Accept ALL inputs http://sqlfiddle.com/#!17/47723/1 Recursion - Integrity Constraints 29 CHECK Constraints ‚Ä¢ One can also conduct local checking of the value of attributes. ‚Ä¢ Check what happens at tuple level. CREATE TABLE Student (sID int, sName text, GPA real, semester int, check (GPA + semester = 10) ); INSERT INTO Student VALUES (1, 1, 5, 5); UPDATE Student SET GPA = GPA - 1; UPDATE Student SET GPA = GPA - 1, semester = semester +1; sID, sName, GPA, Sem. Recursion - Integrity Constraints 30 CHECK Constraints ‚Ä¢ You can also conduct local checking of the value of attributes. ‚Ä¢ Not all DB engines care about CHECK equally. ‚Ä¢ When something weird happens, Google it! (it might not be your fault) ‚Ä¢ http://sqlfiddle.com/#!9/08c040/1 ‚Ä¢ https://bugs.mysql.com/bug.php?id=3464 ‚Ä¢ In principle, CHECK could be more powerful, but most systems do not allow it ‚Ä¢ E.g., most systems do not allow subqueries (also, in exam we assume no subqueries in check) ‚Ä¢ E.g., you cannot do these two queries in most systems. CREATE TABLE T ( A int check (A not in (SELECT A from T)) ); CREATE TABLE T ( A int check ( (SELECT count(distinct A) from T) = (SELECT count(*) from T) ); Recursion - Integrity Constraints 31 ER Diagram is a (Graphical) Constraint Language ‚àÄùëé, ùëè, ùëê: ùëÖ ùëé, ùëè, ùëê ‚áí ùê¥ ùëé ‚àß ùêµ ùëè ‚àß ùê∂(ùëê) ‚àÄùëé, ùëè, ùëê: ùëÖ ùëé, ùëè, ùëê ‚áí ¬¨‚àÉùëê‚Ä≤. ùëÖ ùëé, ùëè, ùëê‚Ä≤ ‚àß ùëê‚Ä≤ ‚â† ùëê ‚àÄùëé, ùëè, ùëê: ùëÖ ùëé, ùëè, ùëê ‚áí ¬¨‚àÉùëè‚Ä≤. ùëÖ ùëé, ùëè‚Ä≤, ùëê ‚àß ùëè‚Ä≤ ‚â† ùëè A(a) B(b) C(c) R(a, b, c) Enforced by keys What should we do about these? Recursion - Integrity Constraints 32 REFERENTIAL Constraints ‚Ä¢ Foreign Keys. ‚Ä¢ Refer to tuple from a different relation ‚Ä¢ PersNr in Lecture refers to a Professor ‚Ä¢ PersNr cannot take a value that does not correspond to a Professor ‚Ä¢ Definition ‚Ä¢ For every foreign key one of the following two conditions much hold: ‚Ä¢ The value of the foreing key is NULL ‚Ä¢ the referenced tuple must exist INSERT INTO attends VALUES (1, NULL); INSERT INTO attends VALUES (NULL, NULL); Recursion - Integrity Constraints 33 REFERENTIAL Constraints ‚Ä¢ Foreign Keys. ‚Ä¢ Refer to tuple from a different relation ‚Ä¢ PersNr in Lecture refers to a Professor ‚Ä¢ PersNr cannot take a value that does not correspond to a Professor ‚Ä¢ We can define in SQL DDL. ‚Ä¢ S.ka references R.a ‚Ä¢ S.ka is called ‚Äúforeign key‚Äù ‚Ä¢ R.a is usually required to be primary key, or at least unique. CREATE TABLE R (a integer primary key, b varchar(30) unique); CREATE TABLE S (..., ka integer references R); CREATE TABLE T (..., kb varchar(30) references R(b)); Recursion - Integrity Constraints 34 REFERENTIAL Constraints ‚Ä¢ Foreign Keys. ‚Ä¢ There are implementation-dependent caveats. CREATE TABLE R (a integer primary key, b varchar(30) unique); CREATE TABLE S (..., ka integer references R); CREATE TABLE T (..., kb varchar(30) references R(b)); Recursion - Integrity Constraints 35 ‚ñ™ What if we delete Student with Legi = 24002. ‚ñ™ What if we delete Lecture with Title = \"Database\". REFERENTIAL Constraints: Maintainance Recursion - Integrity Constraints 36 REFERENTIAL Constraints: Maintainance ‚Ä¢ Different actions in SQL 2003: ‚Ä¢ Cascade ‚Ä¢ Propagate update or delete ‚Ä¢ Restrict ‚Ä¢ Prevent deletion of the primary key before trying to do the change, cause an error ‚Ä¢ No Action ‚Ä¢ Prevent modifications after attempting the change, cause an error ‚Ä¢ Set default, set null: ‚Ä¢ Set references to NULL or to a default value Recursion - Integrity Constraints 37 REFERENTIAL Constraints: Maintainance Cascade ‚Ä¢ Propagate update or delete Cascade Recursion - Integrity Constraints 38 REFERENTIAL Constraints: Maintainance Restrict ‚Ä¢ Prevent deletion of the primary key before trying to do the change, cause an error Restrict Throw Error Recursion - Integrity Constraints 39 REFERENTIAL Constraints: Maintainance ‚Ä¢ No Action ‚Ä¢ Prevent modifications after attempting the change, cause an error No Action Throw Error Recursion - Integrity Constraints 40 REFERENTIAL Constraints: Maintainance ‚Ä¢ Set default, set null: ‚Ä¢ Set references to NULL or to a default value SET NULL NULL NULL Recursion - Integrity Constraints 41 REFERENTIAL Constraints: Maintainance ‚Ä¢ Different actions in SQL 2003: ‚Ä¢ Cascade ‚Ä¢ Propagate update or delete ‚Ä¢ Restrict ‚Ä¢ Prevent deletion of the primary key before trying to do the change, cause an error ‚Ä¢ No Action ‚Ä¢ Prevent modifications after attempting the change, cause an error ‚Ä¢ Set default, set null: ‚Ä¢ Set references to NULL or to a default value create table Lecture ( ..., PersNr integer references Professor on delete {cascade | restrict | no action | set null | set default} on update {cascade | restrict | no action | set null | set default} ); Recursion - Integrity Constraints 42 REFERENTIAL Constraints: Maintainance ‚Ä¢ Restrict vs. No Action ‚Ä¢ Very subtle, in many DBMS, no different at all. ‚Ä¢ In principle: ‚Ä¢ Restrict: throw error immediately ‚Ä¢ No Action: throw error after trying ‚Ä¢ One example difference in SQLite ‚Äì when you have a transaction (think about transaction as a ‚Äúgroup‚Äù of queries between BEGIN/COMMIT). PRAGMA foreign_keys = ON; CREATE TABLE B ( b int primary key); CREATE TABLE A ( a int REFERENCES B(b) ON UPDATE RESTRICT DEFERRABLE INITIALLY DEFERRED); INSERT INTO B VALUES (1); INSERT INTO A VALUES (1); BEGIN; UPDATE B SET b = b + 1; UPDATE A SET a = a + 1; COMMIT; PRAGMA foreign_keys = ON; CREATE TABLE B ( b int primary key); CREATE TABLE A ( a int REFERENCES B(b) ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED); INSERT INTO B VALUES (1); INSERT INTO A VALUES (1); BEGIN; UPDATE B SET b = b + 1; UPDATE A SET a = a + 1; COMMIT; Throw an error Check constraints here, fine. Recursion - Integrity Constraints 43 REFERENTIAL Constraints: Example create table Student ( Legi integer primary key, Name varchar(30) not null, Semester integer check Semester between 1 and 13) ); create table Professor ( PersNr integer primary key, Name varchar(30) not null, Level character(2) check (Level in ('AP','CP','FP')), Room integer unique ); Recursion - Integrity Constraints 44 REFERENTIAL Constraints: Example create table Lecture (Nr integer primary key, Title varchar(30), CP integer, PersNr integer references Professor on delete set null); Recursion - Integrity Constraints 45 REFERENTIAL Constraints: Example create table attends ( Legi integer references Student on delete cascade, Nr integer references Lecture on delete cascade, primary key (Legi, Nr)); create table requires ( Prerequisite integer references Lecture on delete cascade, Follow-up integer references Lecture on delete cascade, primary key (Prerequisite, Follow-up) ); Recursion - Integrity Constraints 46 REFERENTIAL Constraints: Example create table tests ( Legi integer references Student on delete cascade, Nr integer references Lecture, PersNr integer references Professor on delete set null, Grade numeric (3,2) check (Grade between 1.0 and 6.0), primary key (Legi, Nr) ); Recursion - Integrity Constraints 47 Can we Enforce 1:1 Relationship? ‚Ä¢ How can we encode that: ‚Ä¢ One Employee can have at most 1 Office ‚Ä¢ One Office can be assigned to at most 1 Employee (i.e., 1:1 relationship between Employee and Office) ‚Ä¢ The example on the right has problems: ‚Ä¢ Office(O1, E1) ‚Ä¢ Employee(E1, O2) ‚Ä¢ Office(O2, E2) ‚Ä¢ Employee(E2, O1) create table Office ( room varchar(30) primary key; profid varchar(30) references Employee ); create table Employee ( profid varchar(30) primary key; room varchar(30) references Office ); O1 E1 O2 E2 Recursion - Integrity Constraints 48 Can we Enforce 1:1 Relationship? ‚Ä¢ How can we encode that: ‚Ä¢ One Employee can have at most 1 Office ‚Ä¢ One Office can be assigned to at most 1 Employee (i.e., 1:1 relationship between Employee and Office) ‚Ä¢ We show one example implementation on the right hand side. CREATE TABLE Employee (emp_id VARCHAR(20) NOT NULL UNIQUE); CREATE TABLE Office (room varchar(20) NOT NULL UNIQUE); CREATE TABLE HasOffice (emp_id VARCHAR(20) NOT NULL UNIQUE REFERENCES Employee (emp_id), room VARCHAR(20) NOT NULL UNIQUE REFERENCES Office (room) ); Recursion - Integrity Constraints 49 Lessons learned ‚Ä¢ We have seen two important concepts ‚Ä¢ Recursion as an example of an operation that is difficult in the relational model and needs to be solved with some syntactic sugar (and an expensive implementation) ‚Ä¢ Integrity constraints as a mechanism to protect the data from errors in data entry and data manipulation. ‚Ä¢ Enforcing the semantics of a schema ‚Ä¢ Enforcing cardinality constraints ‚Ä¢ Make sure data is consistent Recursion - Integrity Constraints 50","libVersion":"0.3.2","langs":""}