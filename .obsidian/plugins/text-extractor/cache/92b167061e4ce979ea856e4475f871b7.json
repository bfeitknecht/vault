{"path":"sem3/A&D/VRL/extra/lecture-notes/A&D-notes-v05.pdf","text":"Problem : Sotiereneinos Arrays A- [ 1. in ] Algorithms bisher : ¥ Lr o b lit ét _Bubble sort 0Cn4 0h ) gut selection sort OCNY 0cm ) 0111 gut insertion sort Ocnlogn ) an y 041 gut merge sort Ocnlogn ) Ocnbgn ) > Oln ) got- I - inder Regelamwichtigsten Algorithms springers nicht hannvhbomtwildimlpeiohwwaden.athinund her GEH T ES BESSER ? aberkompliu.at Antwon : NEW litnnahmeirrrgleichsbanirtessotilrm) Bemis : Betrachtecntnheidungsbaumfiireinenbdiebigen Algorithms ( wie bethlehem) ↑ AEikA Tiefeh YES/ V0 # Knoth = # Vergleiche imwomtcase As☐=A! A[y . ≤ 2K\" % § YES/ To ↓ ; : : : Esmungdten :# Knoth ≥ # miiglicheowtpc-ri.UmordnungenvmA.z.is . HÑA → 2h\" ≥ # Knotek ≥ n ! lAÑNn → h ≥ login !) -1 ≥DCnloyn ) |AG HAhHAR t : rtltematirrnuevhergesat Erinmrung : Wknyesatiteilevtrray Sortino links sotierenahts É ← ~ > merge merge↓ Arbeit+ Extrapolate Thi isthiu Idle : Entscheideentiwekhecclementenachlinksbowrechts gehiren . Quickest : 1) Wiihleein Element p C' ' Pirotekment \" , 2. B. p÷A[ n ]) 2) Finck lunette Position fiirp 3) that allellementeapnaaeine.my#p-I?-ifrttelk und alle Clemente ipnalhnelhts Bf 'Ép 4) fortiaerekmivlinhenundruhtm-k.ee Vemchmehennichtnibwendiy Quicksotl All,r ) ifl-rk-vtufteilin.CA/l,r11lr-aumtACl...rJsoum,danQuickSot(A,l,k - 1) Ali ] ≤ Ask ] finite . . .k-1 Quickest ( A,k t1 r) Ali ] > AIK ] fiir-i-k-H.ir Beispiel : #7 → É \" B:EÑi¥-#A)HilfsamayB HartI __ 5 Aufteilenrwaihle Pivot / 2. B. p=A[r] Aufteilen IA .hr ) Laupeitocr - led p← A[r] wiihlepivot , diewahl-xisirtbebiebigk-2-ahlderflomentec-pin-N.li] ✗ Pivotwirdmitgeniihlt B-cnewarraymitr-l-12-dlenkselbefpioisewie-kl.ir] BLK ]← p i. ← 1 , j-k-YNAnfanyvonlinhemlrw.rechtem-ilifors-li.ir-1 { if Als ]≤ p:B[ i ]← A[ s ] ✗Als ] gehiitnachlinhs i. ← i -11 else :B [j]← A[s ] I/ Als]gehiitnalhrelhhlaufoitocr-l.tn) j-j-ykopiereBnachAIl.ir] Alternative : vtufteilenin - place Cohnetusutramay) Beispiel.it#s-T-I--1tauschePivotan nichtigettelle e) ltjndementligneteslaaruumrsaunhen> plinhsmit element .<prahts)É Laufseitvonitafteikn inbeidenlkmionen : - Ocr -1+1) Laulpeit : Behunin hñngt damn ab , wer Pinot bandit gut : 1T € Tln ) ≤ 2T (7 ) + on ≤ Ocnlcgnl Schlecht:-# T ( n ) ≤ Te n - 1) + en ≤ 0 ( ni) T.HN?ewtwar.Lo-nmy:Wennwirpuifatligwiihbn , sind wir imguten Fall . → nandomisierk Algorithms : naihstes semester = HEAIISORI Grimacing : Selectionsort invariant : next Finder des Maximum Kotto Zeit Oci) → Laufseit 0 ( ni) GEHT ES BESSER ? Idle : vtrrangiere die Dater so , class wir das maximum Schnell finder binmen → Imax -Heap [ MAX -7 HEAP : vtnordnuny der Oaten in einem Baumgardner : volhtiinidiger Krater ohne Bimarbaum : atom : Wa rd → ⑧/ 5%-7 okindsmteno% ⑧ I \\ I ④ ʳᵗʰ¥¥⑤ I \\⑤%%⑥⑧ § rrmotenohne Kinder : Blatt i Datensatritihhinel / Went einnim tem Tleapbedinguny : 9chhinelliknoten) ≥ Schlemiel th inker) mᵈᵈᵈY gchliinelctksfahr) ≥ ekhliinelcvkukkomme → Maximum ist an der Wand Zwmsotieren Meinen wir Wei Operationenausfiihren binmen : 1) Array in Reap umwandeln 2) M ¥ indn underntfemon mail.emumausbleaplo-ikhen-C.EU - mailman / ④ ← Maxirtanderwamd ⑧ horuistelkn : Emetsewunel¥ ¥2 ⑤④ʰau?hmˢµ .IM?ht;eaawihhr- * ⑤ ⑤ ' ⑧ to ↓ eimiger ! ) diertleapbedingung ④ÉÉÉjʰ .IE?:-eaiea-caes ⑤ ⑤ ¥ & Lining : Taunhedenittmtenmitdom groiseren kind 1 Problem new goxhaftpn, ,⑧ f Problem beholden⑤④y@ ⑦ ② É% _ , ' ② ⑤ ' ④ → ⑤⑦ ④⑤ ④ ' ⑧ ④ ' ⑤ ' ⑧ ④ ⑤ ⑤ ' ⑧ Living : Tteriere (iohsickerekno-hn.nl Problemgelirt, sobald derrknotonein Blatt ist Laufeit :O Clogn ) Date nfandnioariante .li - Startem itleerem Heap - Fñge Element nacheinandorein-vmert.CH/p)N1iigeeinenneahiknotonmitschliindpinltein Emeuglnluenrknotenvmitekhliindplitnnahmew irhennen annaihsterfneierltelle die2-ahlknoten.int Vertaunhevsolangemitcdtembnoten, bisdiekeapbedingunyerfiillt.at . Heapbedingamg erfiillt Beispidiimatll-1,60J 1890 1890¥ H ⑧ ⑧ ⑧ ⑧ / \\ / \\ ④ ⑦ ⑤ ④ ⑦ 6 42£ ⑦ ④ ⑤ ⑤ ' ⑧ ①⑤ ④É⑧⑤ ④ ⑤ ⑤ ' ⑧ ⑥④ Laufseit : Oclogn) promised Heapsort (A) H= emptyHeap for E- 1 . . _ n : insert CH,A [ i ] ) for i=n . . -1 : Ali ] ← ExtractMax (1-1) Lanpeitinx insert → Ocntogn) nxooxtractmaxmocneogn , } imglsamtocnecgn) Dateninlleapumwanddn-Varian.li 2 ( optional ) Input : Array A- [ 1. - n ] Ziel : Emerge Heap Mit schlieren All ], _ , Ahn ] CreateHeap (A) Emerge volhtiindigon BiniarbaummitschliinelnAll ] , . . .,A[ n ] and Tide T : =Llogan ] ( ohne Tleaptedingang) for t= T . . -0 : fiir alle Vvnotenv in Tiefet : Venickerev Invariants : Wack Rundent. . . terfiillen alternator in Tide ≥ t die Heap - Bedingung . Bemis : Tnduhtion ( Ñhbung Lanford : OC n - login) ↑ ↑ riknoten Laufseitfiir Venickem Genevieve Analyse aigt : Laufseitistsogar 0cm) ( Skript) Damtellunyeinesbiniirbaumsimtpeicherw.ir speichemdiiknotonineinemikray : ent Levell, damn Leveller . . . . ' ⑤ \\ Index -1 2 3 4 5 6 7 8 9 -1 0 1 1 1 2 3280 → 189187128-1421721512514*671729 / \\ 4 ④ 5072 6/057¥ 8¥ ①n Beobachtung : Die Kinder vo n Alk ] stehenin A[ 2k ] , -112km] ( Solange 2k , 2k -11 ≤ n ) Beweisdumhrtnduhtionnackktitbuny Alle Heap - Operationenkinnenindemitrraydunhgefihrt warden Beispeil : Teston der Heap - Bedinguny for Knoth ASK] : Satisfies HeapCondition ( K ) if 2k > n return true NAIK ] ist ein Blatt, Heapbedingomy automatism esfiillt if 2k = n and A- [ 2k ] ≤ Ask] return true knew ein kin d if 2K - n and A[2k]≤ Alk ] and 1-[211+1] ≤ Alk ] return true return false ✓ Tortile / Waihteile vo n Neapsat + Laufseit 0cm log ni + in place - schlechter Lokalitatcspmingtvidumhw) Reapsat wird in der Praslin etwa s ulterior vemvendetals Merge sort and Quick Sat Heapsat, Merges at and lrandominirtn Quick sort haben Laufseitolnlogn) DATENSTRUKTUREN-tleapi.gschickte Organisation vo n Oaten erlaubt efficient men 2-ugrift aufMmmw! Was , wenn wir an etwm andhom interment Sind ? → verschiedene Datentrustmen AlrtrahteDatentypenlAt beschmiben die Zille : WI Wollen wir Mit den Doten tan ? ADT : Objehte + Operational Bei uns : Objehte = Schwind c- IN Tn der Praxis biangf an einem Objeht oft ein Datemats , bow . ein Pointer , der angibt, no im Speicher die Datenstehen Beispiel : tstwdierendendatensiatre ikhliind = Matvilalnummor 8- 1 = Implementirony lines ADT Wig realisation wir einen ADT in Speicher ? t.ADTListe-llrashcourr.Detailsspiiter.me Prog) enthiiltobjehtotkhliissdinfestertheihenfolge Operationencvtunrahl) : insertck.LI/fiogt0bjettmitkhliinelkamsndederLisbon gettin ✗ gibti-tenhhlu-ndausdeletelo.LI/l-oieheOlgittoausListe inseh-Aftercoik.LY/fiigeObjettmitkhliissdKhinter oein Datenstmrhtwoenfiir ADT Lisle Array Cfallsmaximaletangebehannt ) verhdteteListe_ Climbed lis t) • → Fh € → t → . . _ → t 4 ekhliinel tplochorort ↑ desñaihsten Ende der Lisle ekhhineh ( \" null pointer \" ) (Zeiger, Pointer) doppeltverhdtdohiste : Zeigeranfvkuhfolgwundltorgiingor•Ñ ← insert get delete imertvtfter Array 011 ) Old 0cm ) Oln ) einfachvetattetihiste 0cm) 0in 0C doppeltverhethte Liste 0cm 0cm 0cmo% sofemwirfpoicherntvonobjettohennen 2.ADTStapdcstwckpushcx.SI: legtxaufstapds ☒Ñv # ☐ A pop CS) : entfemtlundliefertobentes Element top Cx ) : liefertobentes Element Datenstruhtwrivenhdtdo Lisle → alle Opsin OCD • → t.tt#s.--IHobenunter 3.ADTTchlangecwanteschlange.Queueenqueuecx.SI: feige Shintaro an degueue ( s ) : entfemelundlieftrevordemtes Element ᵈea%DTDÑ% Datemtnuttur : 2. B. doppeltverhetteteLike → beideopsin OH 4.ADTPnioritatsnhlangeCPriorityQueue)_ insert Cx, P) liigexmit Went ( Pnioritiitpein extractMax CP) entfemeumdliefere) Maximum tatemtmihtur : Map → bride 0ps in Oclognt","libVersion":"0.5.0","langs":""}