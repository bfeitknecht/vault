{"path":"sem4/CN/VRL/extra/slides/CN-s02-layering.pdf","text":"Computer Networks: Overview & Principles Adrian Perrig Slides adapted from Ankit Singla, Brighten Godfrey, Jennifer Rexford, Scott Shenker, Laurent Vanbever Photo: ETH Zürich / Gian Marco Castelberg Computer Networks What is a network made of? How is it shared? How does communication happen? How do we characterize it? #1 #2 #3 #4 Part 1: Overview 2 Modularity is a key component of any good system Problem can’t build large systems out of spaghetti code hard (if not, impossible) to understand, debug, update need to bound the scope of changes evolve the system without rewriting it from scratch Solution Modularity is how we do it …and understand the system at a higher-level 13 Modularity, based on abstraction, is the way things get done. — Barbara Liskov, MIT Photo: Donna Coveney 14 To provide structure to the design of network protocols, network designers organize protocols in layers which the network “stack” implements 15 Internet communication can be decomposed in 5 independent layers (or 7 layers for the OSI model) Application Transport Network Link Physical L5 L4 L3 L2 L1 layers 16 Each layer provides a service to the layer above by using the services of the layer directly below it network access end-to-end delivery (reliable or not) global best-effort delivery local best-effort delivery physical transfer of bits service provided Application Transport Network Link Physical L5 L4 L3 L2 L1 layer 17 Each layer has a unit of data exchanges messages between processes transports segments between end-systems moves bits across a physical medium Application Transport Network Link Physical L5 L4 L3 L2 L1 layer role moves frames across a link moves packets around the network 18 Each layer (except for L3) is implemented with different protocols HTTP, SMTP, FTP, SIP, … TCP, UDP, SCTP Twisted pair, fiber, coaxial cable, … Application Transport Network Link Physical L5 L4 L3 L2 L1 layer protocol Ethernet, Wifi, (A/V)DSL, WiMAX, LTE, … IP 19 The Internet Protocol (IP) acts as a unifying network layer HTTP, SMTP, FTP, SIP, … TCP, UDP, SCTP Twisted pair, fiber, coaxial cable, … Application Transport Network Link Physical L5 L4 L3 L2 L1 layer protocol Ethernet, Wifi, (A/V)DSL, WiMAX, LTE, … IP 20 Each layer provides a service to the layer above by using the services of the layer directly below it Applications …built on… …built on… …built on… …built on… Reliable (or unreliable) transport Best-effort global packet delivery Best-effort local packet delivery Physical transfer of bits 21 The end-to-end principle The fate-sharing principle The need for stable interfaces What is the right modularity? 35 Each layer is implemented with different protocols and technologies L5 L4 L3 L2 L1 layer technology Application Transport Network Link Physical software hardware 36 The interfaces between layers should be durable Applications …built on… …built on… …built on… …built on… Reliable (or unreliable) transport Best-effort global packet delivery Best-effort local packet delivery Physical transfer of bits Interfaces changing often implies broken layering 39 The end-to-end principle But what if the network layer tried to provide reliable delivery? What if no reliable transport is provided? Every application that needs reliability has to engineer it from scratch • Programmer burden • Much higher likelihood of bugs • Most likely suboptimal performance • Wasteful effort 41 What if the network layer tried to provide reliable delivery? 42 …built on… Reliable (or unreliable) transport Best-effort global packet delivery Reliable #1: My voice call wants speedy delivery, even if it’s lossy … What if the network layer tried to provide reliable delivery? 43 …built on… Reliable (or unreliable) transport Best-effort global packet delivery Reliable #2: Can the network even achieve this at all? Example: reliably transfer file from host A to B Solution 1: Check reliability at every step (involving network layer) Solution 2: Allow unreliable steps (network layer is best-effort) B checks and tells A to retry on failure A B 44 A B Example: reliably transfer file from host A to B Solution 1: Check reliability at every step (involving network layer) Problem: Bugs, failures are a truth of life 45 A B It’s not reliable transfer, if A-B depend on network that can fail Example: reliably transfer file from host A to B Solution 1: Check reliability at every step (involving network layer) Problem: Bugs, failures are a truth of life [fowiki.com] 46 A B Example: reliably transfer file from host A to B Solution 2: Allow unreliable steps (network layer is best-effort). B checks correctness. On failure, B tells A to retry. Can still fail, but only if A / B themselves fail. Solution 2 depends only on what end-points themselves control 47 A B IEEE ICDCS, 1981 Example: reliably transfer file from host A to B “the end-to-end check of the file transfer application must still be implemented no matter how reliable the communication system becomes” 48 A B P (error) = 0.1 Question: should we ever implement reliability in the network? 49 A B Perhaps, to reduce the number of end-end retries needed. P (retry) = 1 - 0.9010 = 0.65 Total 10 links P (retry) = 1 - 0.9910 = 0.10 Question: should we ever implement reliability in the network? 50 Implementing reliability in the network … … does not reduce end-host complexity … does increase network complexity … often imposes overhead for apps that don’t need it … but can enhance performance in some cases 51 Hosts are not the only stakeholders! Beyond a host-centric view … Networks require protection from malicious hosts Some functionality need to be implemented in- network (e.g., DDoS defense) 53 The fate-sharing principle A distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable. — Leslie Lamport, Microsoft Research Photo: lamport.org How do we prevent this? 55 When storing state in a distributed system, co-locate it with entities that rely on that state. The fate-sharing principle State is lost only if those entities fail; then it doesn’t matter. Example: network connection state at end hosts. 56 Food for thought … When do we break layering? How do we define “end”? • TCP vs. application? • iPhone vs. iWatch? • Distributed applications? When do we break the end-to-end argument? 57 Putting everything together Alice while (...) { message = ...; send(message, ...); } WoW client while (...) { message = receive( ... ); } WoW server Internet Bob 58 Putting everything together TCP/UDP OS: OK, sending message App WoW to OS: where is Alice? OS: Alice is at this address X WoW to OS: OK, send X this message while (...) { message = ...; send(message, ...); } WoW client OS to NIC: Send these packets to X IP NIC: OK, I’ll ask the switch to do it Ethernet NIC: Switch, deliver this frame to our network router Bob 59 Putting everything together while (...) { message = ...; send(message, ...); } WoW clienteth0eth1eth2 Switch: Sending to the next switch Switch: I know the next switch to send this to Bob 60 Putting everything together while (...) { message = ...; send(message, ...); } WoW client Router: This frame contains IP packetseth0eth1eth2 Router: I know the next router to send this to IP Bob 61 Putting everything together while (...) { message = ...; send(message, ...); } WoW server while (...) { message = receive( ... ); } WoW client Bob Alice 62 Putting everything together App WoW to OS: where is Alice? OS: Alice is at this address X while (...) { message = ...; send(message, ...); } WoW client DNS — domain name service: from names to IP addresses wowserver.alice.com ⟷ 123.67.191.21 Bob 63 Putting everything together TCP/UDP WoW to OS: OK, send X this message while (...) { message = ...; send(message, ...); } WoW client Sockets — API between applications and transport App Bob 64 Putting everything together TCP/UDP OS: OK, sending message while (...) { message = ...; send(message, ...); } WoW client Reliable (TCP) or unreliable (UDP) transport implementation Bob 65 Putting everything together while (...) { message = ...; send(message, ...); } WoW clienteth0eth1eth2Switch: I know the next switch to send this to Switch tables are populated by link layer mechanisms Bob 66 Putting everything together while (...) { message = ...; send(message, ...); } WoW client Bob Router: I know the next router to send this to IP Internet’s BGP routing protocol populates router tables 67 What is a network made of? How is it shared? How does communication happen? How do we characterize it? #1 #2 #3 #4 Part 1: Overview Computer Networks 68 Performance = bandwidth?2,200 Km 70 [Pearson Scott Foresman] To get many megabits-per-second … 71 [Pearson Scott Foresman] 4400 km 80 Km / hour 1 TB USB stick = 40 Mbps … but 55 hours To get many megabits-per-second … 72 A network connection is characterized by its delay (or latency), loss rate, and throughput throughputloss delay (latency) How long does it take for a packet to reach the destination What fraction of packets sent to a destination are dropped? At what rate is the destination receiving data from the source? 73 A network connection is characterized by its delay, loss rate, and throughput throughputlossdelay 74 Sources of network delays Each packet suffers from several types of delays at each node along the path transmission propagation processing queuing delay delay delay delay total delay ⊕ ⊕ ⊕ = due to link properties due to traffic mix & switch internals 76 Overall, the main culprits for the overall delay are the transmission, propagation and queuing delays transmission propagation processing queuing delay delay delay delay total delay ⊕ ⊕ ⊕ = tend to be tiny 77 transmission propagation queuing processing transmission propagation queuing processing transmission propagation 78 Transmission delay = packet size link bandwidth [#bits] [#bits/sec][sec] 100 Mbps 1000 bits 10 μsecExample The transmission delay is the amount of time required to push all of the bits onto the link 79 Propagation delay = link length propagation speed [m] [m/sec][sec] (fraction of speed of light) 2.108 m/sec 30 000 m 150 μsecExample (speed of light in fiber) The propagation delay is the amount of time required for a bit to travel to the end of the link 80 How long does it take for a 100 Byte packet to travel from A to B? (not considering queuing for now) A B Time 1Mbps, 1ms Time to transmit one bit = 10-6s Time to transmit 800 bits=800x10-6s Time when that bit reaches B: 10-6+10-3s The last bit reaches B at (800x10-6)+10-3s = 1.8ms 82 A B Time 1Gbps, 1ms Time to transmit one bit = 10-9s Time to transmit 800 bits=800x10-9s Time when that bit reaches B: 10-9+10-3s The last bit reaches B at (800x10-9)+10-3s = 1.0008ms If we have a 1 Gbps link, the total time decreases to 1.0008ms 83 Time A B 1Gbps, 1ms The last bit reaches B at (107x800x10-9) +10-3s = 8001ms 107 x 100B packets If we now exchange a 1GB file split into 100B packets 84 Often, we can’t know in advance which one matters! transmission delay dominates propagation delay dominates both matter 1x100B 107x100B 1Gbps link 1Gbps link 1x100B 1Mbps link pkt pkt pkt Different transmission characteristics imply different tradeoffs in terms of which delay dominates 85 The queuing delay is the amount of time a packet waits (in a buffer) to be transmitted on a link It is characterized with statistical measures e.g., average delay & variance, probability of exceeding x Queuing delay is the hardest to evaluate as it varies from packet to packet 86 Queuing delay depends on the traffic pattern 87 No overload 88 Queue Transient overload! Queuing delay depends on the traffic pattern 8990919293 Queues absorb transient bursts, but introduce queueing delays 94 The time a packet has to wait in a buffer before being processed or sent depends on the traffic pattern arrival rate at the queue transmission rate of the outgoing link traffic burstiness 95 average packet arrival rate a transmission rate of outgoing link average bits arrival rate R fixed packet length L La traffic intensity La/R [packet/sec] [bit/sec] [bit/packet] [bit/sec] 96 When the traffic intensity is >1, the queue will increase without bound, and so does the queuing delay Golden rule Design your queuing system, so that it operates far from that point 97 When the traffic intensity is <=1, queueing delay depends on the burst size La/R 1 Average queuing delay Burstier traffic 98 Why does delay matter? Can you perceive… 1 second? 100 milliseconds? 10 milliseconds? 500 milliseconds? spoken syllable ~150 - 200 ms 100 spoken syllable ~150 - 200 ms Can you perceive… 1 second? 100 milliseconds? 10 milliseconds? 500 milliseconds? Hiromi Uehara “Kung Fu World Champion” 101 Can you perceive… 1 second? 100 milliseconds? 10 milliseconds? 500 milliseconds? spoken syllable ~150 - 200 ms Hiromi Uehara 88 ms per note 102 Delay Result Amazon +100ms -1% revenue Bing +500ms -1.2% revenue Google +400ms -0.7% searches In online services In gaming [L. Pantel, L.C. Wolf, “On the impact of delay on real-time multiplayer games”, NOSSDAV ’02] Added latency (ms) Lap time (s) In a racing game We care about very small delays! 103[San Jose Mercury News] 105106Via Colin Scott (https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html) What is a nanosecond, a microsecond, … ? 107 What is a nanosecond, a microsecond, … ? “Amazing Grace” Hopper 108 What is a nanosecond, a microsecond, … ? 109 What are Internet delays like? [~]$ ping google.ch PING google.ch (172.217.16.131): 56 data bytes 64 bytes from 172.217.16.131: icmp_seq=0 ttl=56 time=6.428 ms 64 bytes from 172.217.16.131: icmp_seq=1 ttl=56 time=1.215 ms 64 bytes from 172.217.16.131: icmp_seq=2 ttl=56 time=1.200 ms 64 bytes from 172.217.16.131: icmp_seq=3 ttl=56 time=1.180 ms 64 bytes from 172.217.16.131: icmp_seq=4 ttl=56 time=1.195 ms 64 bytes from 172.217.16.131: icmp_seq=5 ttl=56 time=1.144 ms 64 bytes from 172.217.16.131: icmp_seq=6 ttl=56 time=1.156 ms 64 bytes from 172.217.16.131: icmp_seq=7 ttl=56 time=1.096 ms 64 bytes from 172.217.16.131: icmp_seq=8 ttl=56 time=1.175 ms 64 bytes from 172.217.16.131: icmp_seq=9 ttl=56 time=1.181 ms 64 bytes from 172.217.16.131: icmp_seq=10 ttl=56 time=1.138 ms 64 bytes from 172.217.16.131: icmp_seq=11 ttl=56 time=1.130 ms 64 bytes from 172.217.16.131: icmp_seq=12 ttl=56 time=1.227 ms 64 bytes from 172.217.16.131: icmp_seq=13 ttl=56 time=1.162 ms ^C --- google.ch ping statistics --- 14 packets transmitted, 14 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 1.096/1.545/6.428/1.355 ms What do Internet delays look like in practice? 112 What do Internet delays look like in practice? [~]$ ping google.ch PING google.ch (172.217.16.131): 56 data bytes 64 bytes from 172.217.16.131: icmp_seq=0 ttl=56 time=6.428 ms 64 bytes from 172.217.16.131: icmp_seq=1 ttl=56 time=1.215 ms 64 bytes from 172.217.16.131: icmp_seq=2 ttl=56 time=1.200 ms 64 bytes from 172.217.16.131: icmp_seq=3 ttl=56 time=1.180 ms 64 bytes from 172.217.16.131: icmp_seq=4 ttl=56 time=1.195 ms 64 bytes from 172.217.16.131: icmp_seq=5 ttl=56 time=1.144 ms 64 bytes from 172.217.16.131: icmp_seq=6 ttl=56 time=1.156 ms 64 bytes from 172.217.16.131: icmp_seq=7 ttl=56 time=1.096 ms 64 bytes from 172.217.16.131: icmp_seq=8 ttl=56 time=1.175 ms 64 bytes from 172.217.16.131: icmp_seq=9 ttl=56 time=1.181 ms 64 bytes from 172.217.16.131: icmp_seq=10 ttl=56 time=1.138 ms 64 bytes from 172.217.16.131: icmp_seq=11 ttl=56 time=1.130 ms 64 bytes from 172.217.16.131: icmp_seq=12 ttl=56 time=1.227 ms 64 bytes from 172.217.16.131: icmp_seq=13 ttl=56 time=1.162 ms ^C --- google.ch ping statistics --- 14 packets transmitted, 14 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 1.096/1.545/6.428/1.355 ms 113 What do Internet delays look like in practice? Minimum RTT to Google servers (milliseconds) CDF [The QUIC Transport Protocol: Design and Internet-Scale Deployment, Langley et. al, SIGCOMM 2017] (100, 0.64) 114 Us at ETH 36% of connections over 100ms What do Internet delays look like in practice? Minimum RTT to Google servers (milliseconds) CDF [The QUIC Transport Protocol: Design and Internet-Scale Deployment, Langley et. al, SIGCOMM 2017] 1150 100 ms 10000100010010 40,000 domains 100+ ms Caveat: There are some obvious geolocation errors 116 A network connection is characterized by its delay, loss rate, and throughput throughputlossdelay 118 In practice, queues are not infinite. There is an upper bound on queuing delay. queue N+1 packets packet size L transmission rate: R queuing delay upper bound: N*L/R 119 If the queue is persistently overloaded, it will eventually drop packets (loss) 120 Why does loss matter? Sometimes, it doesn’t! e.g., losing a negligible part of conversation Sometimes, translates into service delays “This packet didn’t arrive? I’ll try again.” Can also send redundant information in advance A, B, A ⊕ B — incurs a capacity penalty 121 What does loss on the Internet look like? [The QUIC Transport Protocol: Design and Internet-Scale Deployment, Langley et. al, SIGCOMM 2017] Minimum RTT to Google servers (milliseconds) Avg. loss % (retransmissions) 122 A network connection is characterized by its delay, loss rate, and throughput throughputlossdelay 123 The throughput is the rate at which a host receives data Average throughput = data size transfer time [#bits] [sec][#bits/sec] 124 To compute throughput, one has to consider the bottleneck link RS RL transmission rate server client F file size … Average throughput = transmission rate of the bottleneck link min(RS, RL) 125 To compute throughput, one has to consider the bottleneck link and the intervening traffic the bottleneck is now in the core, providing each download R/4 of throughput if 4*min(RS,RL) > R RL R Internet RS 126 Why does throughput matter? Some applications need little bandwidth e.g., gaming typically needs few kbps Some need a lot more e.g., HD video streaming often needs 5+ Mbps (c) copyright 2008, Blender Foundation / www.bigbuckbunny.org, CC-BY-3.0 127 What does throughput on the Internet look like? [fast.com] 128 What does throughput on the Internet look like? Average Mbps [Akamai’s State of the Internet, 2017] 129 What does throughput on the Internet look like? % with 10+ Mbps [Akamai’s State of the Internet, 2017] 130 A network connection is characterized by its delay, loss rate, and throughput throughputlossdelay 132 As technology improves, throughput increases & delay decreases, except for propagation (speed of light) Data in fiber moves at ≈ 2c / 3 Significant room for improvement here! 133 Because of propagation delays, Content Delivery Networks move content closer to you http://wwwnui.akamai.com/gnet/globe/index.html — link no longer functional 134 Readings for this week Kurose-Ross (KR) sections 1.5 Protocol layers and their service models IEEE ICDCS, 1981 135","libVersion":"0.3.2","langs":""}