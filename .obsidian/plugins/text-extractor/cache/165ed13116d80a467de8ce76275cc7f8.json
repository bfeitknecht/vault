{"path":"sem4/FMFP/PV/exams/01-endterms/FMFP-FS24.pdf","text":"Computer Science Department D. Basin & P. M¨uller Formal Methods and Functional Programming Part II Midterm Exam, SS24 May 14, 2024, 10:15 – 10:45 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. This booklet consists of 5 pages. After the exam begins, check that your exam papers are complete (3 tasks and 1 page of background material). 2. Only write on the exam paper. Write your first and last name and your student number on every sheet of exam paper that you write on. 3. This is a closed book exam: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil or red. 4. If a task has a negative number of points, it will be counted as 0 points. 5. You have 30 minutes to complete the exam. Assignment 1 2 3 ∑ Max 2 6 8 16 Points 1 CONDITIONAL EXPRESSIONS (2 POINTS) 2 1 Conditional Expressions (2 points) We extend the language of arithmetic expressions defined in the lectures (Aexp) with conditional expressions. Formally, we add the expression e ? e1 : e2 to arithmetic expressions, where e, e1, and e2 are arithmetic expressions, and define its meaning as follows: A[[e ? e1 : e2]]σ = { A[[e1]]σ if A[[e]]σ ≥ 0 A[[0 - e ? e2 : e1]]σ otherwise (1) Determine whether the following statements are true (T) or false (F) (each correct answer adds 1 point, each wrong answer removes 1 point). T F (a) The definition of A extended with (1) is inductive. □ □ (b) The definition of A extended with (1) is total. □ □ 2 Double Assignments (6 points) We now extend the IMP language with a double assignment statement, which intuitively performs two assignments ”simultaneously”. Formally, the semantics of this statement are given by the following rule: (DAssNS) ⟨(x, y := e1, e2), σ⟩ → σ[x ↦→ A[[e1]]σ][y ↦→ A[[e2]]σ] Recall that two statements s1 and s2 are semantically equivalent, written s1 ≃ s2, if and only if ∀σ, σ′. ( ⊢ ⟨s1, σ⟩ → σ′ ⇔ ⊢ ⟨s2, σ⟩ → σ′ ). For each of the following formulas, determine whether they hold. If so, provide a proof. If not, provide a counterexample, which here means concrete states and expressions for which the equivalence does not hold. You may use results from the lectures and exercises without proofs. 2 DOUBLE ASSIGNMENTS (6 POINTS) 3 (a) ∀x, y. x ̸≡ y ⇒ (x, y := e1, e2) ≃ (x := e1; y := e2) (b) ∀x, y, e. (x, y := x, e) ≃ (y := e) 3 NATURAL SEMANTICS (8 POINTS) 4 3 Natural Semantics (8 points) Let s be the statement while i < 2 do a, b := b, a + b; i := i + 1 end; b := 0-2 ? 0 : b Let [va, vb, vi] def = σzero[a ↦→ va][b ↦→ vb][i ↦→ vi]. Using the rules of natural semantics, construct a derivation tree with root ⟨s, [0, 1, 1]⟩ → [1, 1, 2]. In your derivation tree, how many times do each of the following elements appear? (a) Application of the rule WhFNS (b) Application of the rule WhTNS (c) Application of the rule SeqNS (d) Application of the rule AssNS (e) Application of the rule DAssNS (f) The state [0, 1, 1] (g) The state [1, 1, 1] (h) The state [1, 1, 2] Each transition contains exactly two states. In the transition ⟨skip, σ⟩ → σ, the state σ occurs twice. In ⟨x := 1, σzero⟩ → σzero[x ↦→ 1], the state σzero[x ↦→ 1] appears once and the state σzero also appears once. The number of states (the answers to (f) - (h)) should thus equal double the number of rule applications (the answers to (a) - (e)). 3 NATURAL SEMANTICS (8 POINTS) 5 Syntax and Semantics of IMP Syntax The statements s (Stm) and arithmetic expressions e (Aexp) of the programming language IMP are given by the grammar s ::= skip ∣ ∣ x := e ∣ ∣ s;s ∣ ∣ if b then s else s end ∣ ∣ while b do s end e ::= n ∣ ∣ x ∣ ∣ e op e where n ranges over numerals (Numeral), x ranges over variables (Var), b ranges over boolean expressions (Bexp), and op ranges over arithmetic operators (Op). Free Variables and Substitution FV(e) =    ∅ if e ≡ n for some numeral n {x} if e ≡ x for some variable x FV(e1) ∪ FV(e2) if e ≡ e1 op e2 for some e1, e2, and op e[x ↦→ e′] ≡    n if e ≡ n for some numeral n e ′ if e ≡ y for some variable y with y ≡ x y if e ≡ y for some variable y with y ̸≡ x e1[x ↦→ e ′] op e2[x ↦→ e′] if e ≡ e1 op e2 for some e1, e2, and op Natural Semantics (Big-Step Semantics) (SkipNS) ⟨skip, σ⟩ → σ (AssNS) ⟨x := e, σ⟩ → σ[x ↦→ A[[e]]σ] ⟨s1, σ⟩ → σ′ ⟨s2, σ′⟩ → σ′′ (SeqNS) ⟨s1;s2, σ⟩ → σ′′ ⟨s1, σ⟩ → σ′ (IfTNS) ⟨if b then s1 else s2 end, σ⟩ → σ′ if B[[b]]σ = tt ⟨s2, σ⟩ → σ′ (IfFNS) ⟨if b then s1 else s2 end, σ⟩ → σ′ if B[[b]]σ = ff ⟨s, σ⟩ → σ′ ⟨while b do s end, σ′⟩ → σ′′ (WhTNS) ⟨while b do s end, σ⟩ → σ′′ if B[[b]]σ = tt (WhFNS) ⟨while b do s end, σ⟩ → σ if B[[b]]σ = ff","libVersion":"0.5.0","langs":""}