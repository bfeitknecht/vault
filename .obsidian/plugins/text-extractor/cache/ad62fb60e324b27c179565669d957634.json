{"path":"sem4/CN/VRL/extra/slides/CN-s04-HTTP.pdf","text":"Computer Networks: The Web Adrian Perrig Some slides adapted from Ankit Singla, Jennifer Rexford, Scott Shenker, Laurent Vanbever Photo: ETH Zürich / Gian Marco Castelberg Where we are in the course … Part 1: Overview & Principles Part 2: Applications Part 3: Transport Part 4: Algorithms 2 Part 5: Network Layer Part 6: Link & Physical Layers Part 7: Advanced Topics Part 8: Next-generation Internet Computer Networks 2025 Computer networks Video: How does video streaming work?#3 Part 2: Applications The Web: How do you see weather.com? #2 DNS: How do we name and discover services?#1 3 Created ~1990, by Tim Berners-Lee, physicist at CERN Provide distributed access to data Tim Berners-Lee Photo: CERN The World Wide Web (WWW): Goal: A distributed database of “pages” linked together via the Hypertext Transport Protocol (HTTP) 4 The Web was successful as it enabled everyone to self-publish content 5 People weren’t looking for technical perfection “good enough” often suffices Self-publishing on the Web was easy, independent & free and accessible, to everyone People essentially wanted to make their mark and find something neat… Today, the “web” is much more an application platform Many applications now run in a browser Web protocols are now used for general Remote Procedure Call (RPC) Even servers exchange information using HTTP(S) 6 The WWW is made of three key components ProtocolsContentImplementations Clients/Browser Servers Proxies, caches URL: naming content HTTP: transporting content Objects files, pictures, videos, … organized in Web sites a collection of objects 7 The WWW is made of three key components ProtocolsContentImplementations Clients/Browser Servers Proxies, caches URL: naming content HTTP: transporting content Objects files, pictures, videos, … organized in Web sites a collection of objects 8 A Uniform Resource Locator (URL) refers to an Internet resource 9 protocol://hostname[:port]/directory_path/resourceprotocol://hostname[:port]/directory_path/resource URL Syntax 10 HTTP(S) FTP SMTP MAGNET … protocol://hostname[:port]/directory_path/resource URL Syntax 11 DNS Name IP address protocol://hostname[:port]/directory_path/resource URL Syntax 12 default to protocol’s standard HTTP:80, HTTPS:443 URL Syntax 13 identify the resource on the destination protocol://hostname[:port]/directory_path/resource URL Syntax 14 More generally, these additional fields are possible: • Userinfo, separated by @ • Query, separated by ? • Fragment, separated by # The WWW is made of three key components ProtocolsContentImplementations Clients/Browser Servers Proxies, caches URL: naming content HTTP: transporting content Objects files, pictures, videos, … organized in Web sites a collection of objects 15 HTTP is a rather simple synchronous request-response protocol HTTP is text-based (ASCII) and line-oriented human readable, easy to reason about HTTP is layered over a bidirectional byte stream currently TCP, but in HTTP/3 only QUIC HTTP is stateless it maintains no information about past client requests 16 PerformanceProtocol 17 PerformanceProtocol 18 HTTP clients make requests to servers method URL version<sp> <sp> … body header field name: header field name: <cr> HTTP request: value value <cr><lf> <cr><lf> <cr><lf> <lf> 19 HTTP Request format 20 … body header field name: value header field name: value <cr> method URL version<sp> <sp> <cr><lf> <cr><lf> <cr><lf> <lf> HTTP Request, first line: 21 method GET return resource HEAD return headers only POST send data to server (forms) URL relative to server version 1.0, 1.1, 2.0, 3.0 (e.g., /index.html) HTTP Request format method URL version<sp> <sp> … body header field name: header field name: <cr> HTTP request: value value <cr><lf> <cr><lf> <cr><lf> <lf> 22 Request headers are of variable lengths, but still, human readable 23 Uses: Authorization info Acceptable document types/encoding From (user email) If-Modified-Since Referrer (cause of the request) User Agent (client software) HTTP Response format 24 version status phrase<sp> <cr><lf><sp> … body header field name: <cr><lf> header field name: <cr><lf> <cr><lf> HTTP response: value value HTTP Response format 25 version status phrase<sp> <cr><lf><sp> … body header field name: value <cr><lf> header field name: value <cr><lf> <cr><lf> HTTP Response, first line 26 Status 1XX 2XX 3XX 4XX 5XX 3 digit response code Reason phrase informational success redirection client error server error 200 OK 301 Moved Permanently 303 Moved Temporarily 304 Not Modified 404 Not Found 505 Not Found HTTP Response format 27 version status phrase<sp> <cr><lf><sp> … body header field name: value <cr><lf> header field name: value <cr><lf> <cr><lf> Uses Like request headers, response headers are of variable lengths and human-readable 28 Location (for redirection) Allow (list of methods supported) Content encoding (e.g., gzip) Content-Length Content-Type Expires (caching) Last-Modified (caching) • Server-side scalability • Failure handling is simplified • Some applications need state! (shopping cart, user profile, tracking, etc.) HTTP is a stateless protocol, Þ each request treated independently How can you maintain state in a stateless protocol? Advantages Disadvantages 29 HTTP maintains state at the client by means of so-called cookies • Client stores small state • on behalf of the server X • Client sends state in all future requests to X • Can provide authentication as well as state 30 HTTP/1.1 200 OK Date: Sun, 01 May 2016 14:10:30 GMT Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 Server: gws Set-Cookie: NID=79=g6lgURTq_BG4hSTFhEy1gTVFmSncQVsyTJI260B3x yiXqy2wxD2YeHq1bBlwFyLoJhSc7jmcA6TlFIBY7- dW5lhjiRiQmY1JxT8hGCOtnLjfCL0mYcBBkpk8X4NwAO28; expires=Mon, 31-Oct-2016 14:10:30 GMT; path=/; domain=.google.ch; HttpOnly telnet google.ch 80 GET / HTTP/1.1 Host: www.google.ch request answer browser will relay this value in following requests 31 PerformanceProtocol 32 Web pages are far from simple! 33 Dependencies in a simple page 34 [Example adapted from: Speeding up Web Page Loads with Shandian, Wang et al., NSDI 2016] <html> <body onload=\"done();\"> <link src=\"1.css\"> <script src=\"d3.js\"></script> <script src=\"2.js\"></script> <div id=\"main\"></div> </body> </html> Dependencies in a simple page 35 [Example adapted from: Speeding up Web Page Loads with Shandian, Wang et al., NSDI 2016] <html> <body onload=\"done();\"> <link src=\"1.css\"> <script src=\"d3.js\"></script> <script src=\"2.js\"></script> <div id=\"main\"></div> </body> </html> Dependencies in a simple page 36 html 1.css d3.js 2.js Time network time local/compute time <html> <body onload=\"done();\"> <link src=\"1.css\"> <script src=\"d3.js\"></script> <script src=\"2.js\"></script> <div id=\"main\"></div> </body> </html> Dependencies in a simple page 37 Browser has to be conservative, unless it is clear that two resources are independent html 1.css d3.js 2.js Time block block block <html> <body onload=\"done();\"> <link src=\"1.css\"> <script src=\"d3.js\"></script> <script src=\"2.js\"></script> <div id=\"main\"></div> </body> </html> Real pages can be very complex! 38 [Polaris: Faster Page Loads Using Fine-grained Dependency Tracking, Netravali et. al, NSDI 2016] And complexity may be increasing … 39 http://httparchive.org/trends.php DateSize (kB)# requests And complexity may be increasing … 40 http://httparchive.org/trends.php Date# domainsMax # requests A closer look at the dependencies Time html 1.css d3.js 2.js 41 What determines load time? Load time 43 A time-annotated dependency graph 200 40 40 Note: the length of the bars is no longer meaningful (only the delay numbers on the arrows will be used). 44 A time-annotated dependency graph 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 Note: the length of the bars is no longer meaningful. 45 Is this the load time? 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 This path is not a valid execution path — it misses many dependencies. 46 Is this the load time? 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 This is the longest path from start to finish, and computes the time to finish. 47 We want the longest FIN-Start path A 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 How do we compute the longest path between A and start? 48 What is the longest A-start distance? A 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 max ( d + 30, d + 60 ) 49 For each edge u → v, we need dv to compute du A 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 Topological sort: (u → v) ⇒ u comes before v in the ordering 50 Let’s first label the nodes (arbitrarily) H E F B K D A G C I J 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 sorting direction G 51 Topological sort: (u → v) ⇒ u comes before v in the ordering G has no incoming edges except from A H E F B K D AC I J 200 40 30 40 400 30 30 30 FIN 50 60 40120 230 220 sorting direction G 52 Topological sort: (u → v) ⇒ u comes before v in the ordering Adding nodes this way yields the ordering H E F B K D AC I J 200 40 30 40 400 30 30 FIN 50 60 40120 230 220 G E F 30 53 Topological sort: (u → v) ⇒ u comes before v in the ordering Adding nodes this way yields the ordering H F B K D AC I J 200 40 30 40 400 30 30 FIN 50 60 120 230 220 G 40 E 30 54 Topological sort: (u → v) ⇒ u comes before v in the ordering Adding nodes this way yields the ordering HB D AC I J 200 40 30 400 30 FIN 50 60 120 230 220 GEF 3040 K 40 55 30 Topological sort: (u → v) ⇒ u comes before v in the ordering We can obtain longest paths in order HB D AC I J 200 40 30 40 400 30 30 FIN 50 60 120 230 220 GEF 3040 K dB 0 dC dB + 200 200 dK dC + 40 240 dI dC + 40 240 dJ dI + 30 270 dD dI + 30 270 dH dK + 400 640 dF dJ + 30 300 dE dH + 120, dD + 230 760 dG dF + 220, dE + 40 800 dA dG + 60, dJ + 30 860 dFI dA + 50 910 56 “Critical path” analysis • Represent a process as a dependency graph • Nodes are individual tasks • Edges indicate a “must happen before” relationship • Annotate edges with “costs” • Typically, the time it takes for the preceding task • Find the longest path • First, sort the nodes using a topological sort • Process tasks in reverse-sort order • Each task’s finish time is max over tasks it depends on 57 “Critical path” analysis • Represent a process as a dependency graph • Nodes are individual tasks • Edges indicate a “must happen before” relationship • Annotate edges with “costs” • Typically, the time it takes for the preceding task • Find the longest path • First, sort the nodes using a topological sort • Process tasks in reverse-sort order • Each task’s finish time is max over tasks it depends on 58 Q: Given a dependency graph G(V, E), what’s the complexity of finding the critical path? Using the critical path 200 40 30 40 400 30 30 30 FIN 50 60 40 120 230 220 59 Using the critical path 200 40 30 40 200 30 30 30 FIN 50 60 40 120 230 220 Is this still the critical path? What’s the load time now? 60 We can obtain longest paths in order HB D AC I J 200 40 30 40 30 30 FIN 50 60 120230 220 GEF 3040 K 61 200 We can obtain longest paths in order 62 HB D AC I J 200 40 30 200 30 30 FIN 50 60 120 220 GEF 3040 K 40 230 dB 0 dC dB + 200 200 dK dC + 40 240 dI dC + 40 240 dJ dI + 30 270 dD dI + 30 270 dH dK + 200 440 dF dJ + 30 300 dE dH + 120, dD + 230 560 dG dF + 220, dE + 40 600 dA dG + 60, dJ + 30 660 dFI dA + 50 710 Using the critical path 200 40 30 40 20 30 30 30 FIN 50 60 40 120 230 220 How about now? Is this still the critical path? 63 We can obtain longest paths in order HB D AC I J 200 40 30 40 20 30 30 FIN 50 60 120 230 220 GEF 3040 K 64 dH dK + 20 260 dF dJ + 30 300 dE dH + 120, dD + 230 500 dG dF + 220, dE + 40 540 dA dG + 60, dJ + 30 600 dFI dA + 50 650 Using the critical path 200 40 30 40 20 30 30 30 FIN 50 60 40 120 230 220 The critical path has changed now! 65 Speeding up any task on the critical path will … speed up the end-to-end process; or / and expose a different critical path. 66 Many notions of load time 67 Load time Last resource loaded? Last visual change? Last visible change? Search text box is loaded? First visual change? html 1.css d3.js 2.js Time block block block Even a single request is non-trivial DNS “Hi” Data transfer 68 Recall our data on latency … Minimum RTT to Google servers (milliseconds) CDF 36% of connections over 100ms Potentially ~1 second for just one request! DNS “Hi” Data transfer 69 Measuring fetch times for small objects • 186 PlanetLab nodes as clients • Fetch (using cURL) thousands of Web pages each • Only HTML of the landing pages • Typically tens of KB 70 Inflation over c-latency CDF Measuring fetch times for small objects 71 c-latency: speed of light along shortest client-server path on Earth’s surface Measuring fetch times for small objects 72 37x Inflation over c-latency CDF c-latency: speed of light along shortest client-server path on Earth’s surface How to speed this up? block block block Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 74 Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 75 Simplify, restructure, redesign Web pages • Compress using gzip and more efficient image codecs like WebP • In-line JSS, CSS • Tag “async” resources (explicitly identifying lack of dependencies) 76 [Polaris: Faster Page Loads Using Fine-grained Dependency Tracking, Netravali et. al, NSDI 2016] apple.com Top web sites have decreased in size because they care about performance 77 https://mobiforge.com/research-analysis/the-web-is-doom Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 78 Use faster computing devices Sunspider: popular JavaScript/Web benchmark Smartphone models over years Speedup [Mobile CPU’s Rise to Power: Quantifying the Impact of Generational Mobile CPU Design Trends on Performance, Energy, and User Satisfaction, Halpern et. al, HPCA 2016] Caveat: 79 Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 81 Increase network bandwidth Significant gains up to a few Mbps 82 Load time (s) 3.5 3 2.5 2 1.5 1 Bandwidth DNS “Hi” Data transfer [Study by Mike Belshe, Google. Figure via hpbn.co, Ilya Grigorik / O'Reilly Media, Inc] Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 83 Making network RTTs smaller Large, linear impact 84 Network RTT (ms) Load time (s) 40 35 30 25 20 15 10 5 0 Reducing RTTs can be difficult in a single-path Internet, but becomes possible in a multi-path Internet Many possibilities to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 85 Client Server TCP Syn TCP syn + ack TCP ack + HTTP GET ... Establish connection Request response Client request Close connection DNS “Hi” Data transfer TCP forces an HTTP client to open a connection before exchanging anything 86 Fetching n objects requires ~2n RTTs TCP establishment HTTP request/response Most Web pages have multiple objects, naive HTTP opens one TCP connection for each… 87 R1 R2 R3 T1 T2 T3 Server-side burden of concurrent connections Bandwidth contention among connections One solution to that problem is to use multiple TCP connections in parallel 88 Allow TCP to learn more accurate RTT estimate and with it, more precise timeout value Avoid overhead of connection set-up and teardown clients or servers can tear down the connection Allow TCP congestion window to increase and therefore to leverage higher bandwidth More later Another solution is to use persistent connections across multiple requests 89 (default in HTTP/1.1) Client Server Request 1 Request 2 Request 3 Transfer 1 Transfer 2 Transfer 3 • batch requests and responses to reduce the number of packets • multiple requests can be packed into one TCP segment Yet another solution is to pipeline requests & replies asynchronously, on one connection 90 Considering the time to retrieve n small objects, pipelining wins one-at-a-time M concurrent persistent pipelined # RTTs ~2n ~2n/M ~n+1 2 Efficient implementation must make sure some requests don’t block others 91 Google’s ongoing work on QUIC is addressing the handshake 92 Client Server TCP Syn TCP syn + ack TCP ack + HTTP GET ... Establish connection Request response Client request Close connection DNS “Hi” Data transfer handshake state in a “transport cookie” Many options to speed up Web browsing • Simplify, restructure, redesign Web pages • Use faster computing devices • Increase network bandwidth • Make network RTTs smaller • Simplify network protocols • Caching • Obviously, not all of this is strictly “networking” 93 Caching leverages the fact that highly popular content largely overlaps Just think of how many times you request the Facebook logo per day how often it actually changes Vs. Caching saves time for your browser and decreases network and server load 94 Caching leverages the fact that highly popular content largely overlaps Can also cache DNS responses DNS “Hi” Data transfer 95 Caching saves time for your browser and decreases network and server load Yet, a significant portion of the HTTP objects are “uncachable\" dynamic data scripts cookies SSL advertising Examples stock prices, scores, ... results based on parameters results may be based on passed data cannot cache encrypted data wants to measure # of hits ($$$) 96 To limit staleness of cached objects, HTTP enables a client to validate cached objects • Server hints when an object expires (kind of TTL) as well as the last modified date of an object • Client conditionally requests a resource using the “if-modified-since” header in the HTTP request • Server compares this against “last modified” time of the resource and returns: • Not Modified if the resource has not changed • OK with the latest version 97 Caching can and is performed at different locations client close to the client close to the destination forward proxy Content Distribution Network (CDN) reverse proxy browser cache 98 Many clients request the same information clients request 99 clients request This increases servers and network’s load, while clients experience unnecessary delays 100 Reverse proxies cache documents close to servers, decreasing their load 101 reverse proxy This is typically done by content provider clients request 102 forward proxies This is typically done by ISPs or enterprises Forward proxies cache documents close to clients, decreasing network traffic, server load and latencies","libVersion":"0.5.0","langs":""}