{"path":"sem3/TI/UE/s/TI-s-u01.pdf","text":"Departement Informatik Theoretische Informatik Prof. Dr. Juraj Hromkoviˇc Dr. Hans-Joachim B¨ockenhauer Prof. Dr. Dennis Komm Exemplary Solutions – Sheet 1 Z¨urich, September 27, 2024 Solution to Task 1 (a) First, we count how many words of length n over {a, b, c} do not satisfy the condition from the exercise. These are all those words that contain at most two of the letters. There are 2 n different words that contain only the letters a and b because one of the two letters can be chosen for each for each of the n positions. Analogously, there are 2 n different words containing only a and c and 2 n different words containing only b and c. Among these 3 · 2 n words, we have counted the words an, bn, and cn twice, thus there are in total 3 · 2 n − 3 words that do not satisfy the condition from the the exercise. Since there are in total 3 n words of length n over {a, b, c}, we have in total 3 n − 3 · 2 n + 3 words containing each of the three letters at least once. (b) Let Σ = {0, 1} and n ∈ N. We denote by Ln the set of words from Σ n not containing the subword 11 and set N (n) = |Ln|. We want to determine N (n) recursively. Evidently, we have N (0) = 1 since there is only the word λ of length 0 over {0, 1} and it does not contain 11 as a subword. Moreover, we have N (1) = 2 since the words 0 and 1 both do not contain 11 as a subword. If we consider a word w ∈ Ln+1 with n ≥ 1, then we can write w as w = xab with a, b ∈ {0, 1} and x ∈ Ln−1. If b = 0, then xa can be an arbitrary word from Ln. If b = 1, then we must have a = 0, but x can be an arbitrary word from Ln−1. Thus we obtain for N (n) the recurrence equation N (n + 1) = N (n) + N (n − 1) . This is evidently the known recurrence of the Fibonacci numbers, which are defined by F (0) = 0, F (1) = 1, and F (n) = F (n − 1) + F (n − 2) for all n ≥ 2. Because of the initial conditions N (0) = 1 and N (1) = 2 we have N (n) = F (n + 2) . The sequence of Fibonacci numbers can be described explicitly by the Binet’s formula as F (n) = φ n − (1 − φ) n √5 , where φ = 1+ √5 2 . Thus we obtain for N (n) the explicit representation N (n) = φ n+2 − (1 − φ)n+2 √ 5 . Solution to Task 2 (a) The statement is true. Suppose L ̸= ∅, L ̸= {λ} and L is finite. Since L is finite and nonempty, we find w ∈ L such that w has maximal length among all the words in L, i.e., |w| = max{|u| : u ∈ L}. Since L ̸= {λ} we have |w| ≥ 1. Note that ww ∈ L2 and that |ww| = 2 · |w| > |w|. Thus, ww /∈ L and hence L2 ⊈ L. (b) This statement is false and we provide a counterexample. Let L1 = {λ} and L2 = {a} ∗. Then L2 − L1 = {a} +, and thus L2(L2 − L1) = {a}∗{a}+ = {a}+. However, (L2) 2 = {a} ∗{a}∗ = {a}∗ and L2L1 = {a} ∗{λ} = {a} ∗, and thus (L2) 2 − (L2L1) = {a} ∗ − {a} ∗ = ∅. Solution to Task 3 (a) We choose Σ = {a} and L1 = {a, aa, . . . , a k} = {ai | 1 ≤ i ≤ k} . For L2 = {λ, a} , we then have L1 · L2 = L1 · {λ} ∪ L1 · {a} = L1 ∪ {aia | 1 ≤ i ≤ k} = L1 ∪ {ai | 2 ≤ i ≤ k + 1} = {ai | 1 ≤ i ≤ k + 1} , hence, |L1L2| = k + 1. (b) Here, we can construct an example analogously to subtask (a). We again choose Σ = {a} and L1 = {a, aa, . . . , a k} = {ai | 1 ≤ i ≤ k} . For L2 = {λ, a, aa, aaa, aaaa, aaaaa} , we then have that L1 · L2 = 5⋃ j=0 L1 · {aj} = 5⋃ j=0 {aiaj | 1 ≤ i ≤ k} = {ai | 1 ≤ i ≤ k + 5} , hence, |L1L2| = k + 5. 2 (c) We choose Σ = {a, b} and L1 = {ai | 1 ≤ i ≤ k} and L2 = {bi | 1 ≤ i ≤ l} Then, L1L2 = {aibj | 1 ≤ i ≤ k and 1 ≤ j ≤ l} , and thus |L1L2| = k · l. (d) To reach the same size of L1 · L2 over a one-letter alphabet, we have to make sure that every pair of words from L1 and L2 produces a different concatenated word. We can reach this goal by carefully choosing the lengths of the words in L1 such that, for each v ∈ L1, concatenating an arbitrary word from L2 gives a word that is still shorter than the next word in L1. The idea thus is to keep the words in L2 as short as possible and make the differences of word lengths in L1 sufficiently large. Let Σ = {a}. We define L1 = {ali | 0 ≤ i ≤ k − 1} and L2 = {aj | 0 ≤ j ≤ l − 1} . Then, L1L2 = {aliaj | 0 ≤ i ≤ k − 1 and 0 ≤ j ≤ l − 1} . All words in L1L2 have pairwise distinct lengths since all word lengths in L1 are multiples of l and all words in L2 are shorter than l. Hence, |L1L2| = k · l. 3","libVersion":"0.3.2","langs":""}