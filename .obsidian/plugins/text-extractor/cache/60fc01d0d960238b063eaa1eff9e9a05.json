{"path":"sem2a/PProg/VRL/extra/benji/PProg-w13-benji.pdf","text":"Parallel Programming Exercise Session 13 1 Outline 2 1. Feedback: Assignment 12 2. Lecture Recap / Assignment 13 Feedback: Assignment 12 3 Assignment 12 • Multisensor System. 4 Multisensor System 5 LockedSensors 6 Lock implementation 7 LockFreeSensors 8 Correctness Overarching goal of today So far we looked at how to write parallel programs But we never defined what it means for a program to be correct. We will look at several consistency models. 10 Program correctness in a sequential world Objects encapsulate some representation of state 11 Essential Program correctness in a sequential world Objects encapsulate some representation of state • We don’t reason about the representation directly, but about its visibility from outside (via public methods) (e.g. stack.top()==3) 12 Essential Program correctness in a sequential world Objects encapsulate some representation of state • We don’t reason about the representation directly, but about its visibility from outside (via public methods) (e.g. stack.top()==3) • State must be consistent, i.e., according to the public class invariant (e.g., forall x. stack.push(x).pop()==x) 13 Essential Program correctness in a sequential world Objects encapsulate some representation of state • We don’t reason about the representation directly, but about its visibility from outside (via public methods) (e.g. stack.top()==3) • State must be consistent, i.e., according to the public class invariant (e.g., forall x. stack.push(x).pop()==x) • Each method satisfies its post-condition, given its pre-condition 14 Essential Program correctness in a concurrent world 15 Program correctness in a concurrent world 16 Essential 17 Execution Essential 18 Execution Essential Execution One specific execution is called a history. It consists of method invocations and responses. A: stack.push(42) B: stack.push(7) A: void B: void A: s.pop() B: s.pop() A: 7 B: 42 19 Execution One specific execution is called a history. It consists of method invocations and responses. A: stack.push(42) B: stack.push(7) A: void B: void A: s.pop() B: s.pop() A: 7 B: 42 20 Execution An invocation is pending if it has no matching response. A history is complete if and only if it has no pending invocations. A: stack.push(42) B: stack.push(7) A: void B: void C: stack.push(24) A: s.pop() B: s.pop() A: 7 B: 42 21 Execution An invocation is pending if it has no matching response. A history is complete if and only if it has no pending invocations. A: stack.push(42) B: stack.push(7) A: void B: void C: stack.push(24) A: s.pop() B: s.pop() A: 7 B: 42 C: void 22 Execution A history is sequential if every invocation is followed immediately by a matching response. A: stack.push(42) B: stack.push(7) A: void B: void A: s.pop() B: s.pop() A: 7 B: 42 23 Quiescent Consistency Quiescent consistency requires non-overlapping operations to appear to take effect in their real- time order, but overlapping operations might be reordered 25 Quiescent consistency requires non-overlapping operations to appear to take effect in their real- time order, but overlapping operations might be reordered 26 Sequential Consistency Sequential consistency A multiprocessing system has sequential consistency if: \"...the results of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program.\" - Leslie Lamport (inventor of sequential consistency) 28 Essential Sequential consistency requirements 1. All instructions are executed in order. 29 Essential Sequential consistency requirements 1. All instructions are executed in order. 2. Every write operation becomes instantaneously visible throughout the system. 30 Essential Sequential consistency requirements 1. All instructions are executed in order. 2. Every write operation becomes instantaneously visible throughout the system. 31 Essential Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 32 Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 33 T1 T2 q.enq(x) q.enq(y) q.deq() -> y Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 34 T1 T2 q.enq(x) q.enq(y) q.deq() -> y NOT quiescentially consistent : there is a quiescent period between these operations which should “synchronize” operations Sequentially consistent (can move T1!) Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 35 T1 T2 q.enq(x) q.enq(y) q.deq() -> y Sequentially consistent (can move T1) Quiescentially consistent (no quiescent period between these operations, can move T1) Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 36 T1 q.deq() -> yq.enq(x) q.enq(y) Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 37 NOT sequentially consistent (T1 has reordered operations) NOT quiescentially consistent : there is a quiescent period between these operations which should “synchronize” operations T1 q.deq() -> y q.enq(x) q.enq(y) Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 38 T1 T2 q.deq() -> y q.enq(z) q.enq(x) q.enq(y) Sequential consistency vs Quiescent consistency sequential consistency and quiescent consistency are incomparable: there exist sequentially consistent executions that are not quiescently consistent, and vice versa 39 T1 T2 q.deq() -> y q.enq(z) q.enq(x) NOT sequentially consistent (T1 has reordered operations) Quiescentially consistent (no quiescent period between these operations, all is good) q.enq(y) Linearizability Consistency model: Linearizability • Linearizability provides the illusion that each operation applied by concurrent processes takes effect instantaneously between its invocation and its response. 41 Essential Consistency model: Linearizability • Linearizability provides the illusion that each operation applied by concurrent processes takes effect instantaneously between its invocation and its response. • An object for which this is true for all possible executions is called linearizable 42 Essential Is this linearizable? q.enq(x) q.enq(y) q.deq() -> x q.deq() -> y Example with FIFO Queue (1) 43time Essential Is this linearizable? q.enq(x) q.enq(y) q.deq() -> x time q.deq() -> y Yes! Example with FIFO Queue (1) 44 Essential Is this linearizable? q.enq(x) q.deq() -> y q.enq(y) Example (2) 45time Essential Is this linearizable? q.enq(x) q.deq() -> y time q.enq(y) No! Example (2) 46 Essential Is this linearizable? q.enq(x) q.enq(y) q.deq() -> q q.deq() -> x Example (3) 47time Essential Is this linearizable? q.enq(x) q.enq(y) q.deq() -> y time q.deq() -> x Here we got multiple orders! Yes! Example (3) 48 Essential Is this linearizable? Write(0) Read(1) Write(2) Write(1) Example (4) 49 Read(1) time Essential Is this linearizable? Write(0) Read(1) time Write(2) Write(1) No! Example (4) 50 Read(1) Essential Is this linearizable? Write(0) Write(2) Write(1) Read(1) Example (4.5) 51time Essential Is this linearizable? Write(0) time Write(2) Write(1) Yes! Read(1) Example (4.5) 52 Essential Difference between SC and Linearizability? 53 In SC we can reorder events – as long as per-thread order is preserved! Essential What are projections? 54 We write H|A and to say: All events in H by thread A Essential What are projections? 55 We write H|q and to say: All events in H on object q Essential Equivalence? 56 Histories H1 and H2 are equivalent if their per-thread projections are the same. Essential Linearization Point The linearization point is the point where the method takes effect. Linearization Point The linearization point is the point where the method takes effect. Linearization Point The linearization point is the point where the method takes effect. Linearization Point The linearization point is the point where the method takes effect. Linearization Point The linearization point is the point where the method takes effect. Extra material • The Art of Multiprocessor Programming, Chapter 3 Kahoot • https://create.kahoot.it/share/pprog13/f5450311-ed7c-43f1-8802-8c b0c4d28ed1","libVersion":"0.3.2","langs":""}