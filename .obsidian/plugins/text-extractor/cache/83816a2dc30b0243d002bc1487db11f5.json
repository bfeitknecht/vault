{"path":"sem2a/DDCA/UE/e/slides/DDCA-LAB01-circuits.pdf","text":"Digital Design & Computer Arch. Lab 1 Supplement: Drawing Basic Circuits Frank K. Gürkaynak Seyyedmohammad Sadrosadati (Presentation by Aaron Zeller) ETH Zurich Spring 2024 5 March 2024 Lab Sessions n Where? q On-site n When? (Presentation happens every week) q Tuesday 16:15-18:00 Start in ML E12, then move to the labs q Wednesday 16:15-18:00 Start in HG E19, then move to the labs q Friday 08:15-10:00 Start in HG G1, then move to the labs q Friday 10:15-12:00 Start in HG G1, then move to the labs 2 DDCA Course Catalogue Web Page Supplementary material presentations Grading n 10 labs, 30 points in total n 70% final exam grade + 30% lab grade n Grading Policy q In-class evaluation (70%) and mandatory lab reports (30%) q Labs are to be finished within 1 week after being announced q Late submissions incur a point deduction 3 General Information n Read the lab manual carefully as it contains information which will save you time n All labs are meant to be solved during the lab sessions q If you are stuck ask your TAs for help n For questions q digitaltechnik@lists.inf.ethz.ch (Emails are sent to all TAs) q Moodle forum (per lab / assignment) 4 Follow the Lab Manuals n Solutions may work but they might break when they are included inside of a top-module in future labs n Read carefully before implementing 5 (Do not attempt this) 5 What We Will Learn? 6 Logic Gates Boolean Algebra What We Will Learn? n In Lab 1, you will design simple combinatorial circuits n We will cover a tutorial about: q Boolean Equations n Logic operations with binary numbers q Logic Gates n Basic blocks that are interconnected to form larger units that are needed to construct a computer 7 Boolean Equations and Logic Gates 8 Simple Equations: NOT / AND / OR 9 A B A • B A • B (reads “A and B”) is 1 iff A and B are both 1 A B A + B A + B (reads “A or B”) is 1 iff either A or B is 1 A 𝑨 𝑨 (reads “not A”) is 1 iff A is 0 𝑨 𝑨 0 1 1 0 𝑨 𝑩 𝑨 • 𝑩 0 0 0 0 1 0 1 0 0 1 1 1 𝑨 𝑩 𝑨 + 𝑩 0 0 0 0 1 1 1 0 1 1 1 1 Boolean Algebra: Big Picture n An algebra on 1’s and 0’s q with AND, OR, NOT operations n What you start with q Axioms: basic stuff about objects and operations you just assume to be true at the start n What you derive first q Laws and theorems: allow you to manipulate Boolean expressions q …also allow us to do some simplification on Boolean expressions n What you derive later q More “sophisticated” properties useful for manipulating digital designs represented in the form of Boolean equations 10 George Boole Common Logic Gates 11 Boolean Algebra: Axioms 12 1. B contains at least two elements, 0 and 1, such that 0 ≠ 1 2. Closure a,b ∈ B, (i) a + b ∈ B (ii) a • b ∈ B 3. Commutative Laws: a,b ∈ B, (i) a + b = b + a (ii) a • b = b • a 4. Identities: 0, 1 ∈ B (i) a + 0 = a (ii) a • 1 = a 5. Distributive Laws: (i) a + (b • c) = (a + b) • (a + c) (ii) a • (b + c) = a • b + a • c 6. Complement: (i) a + a' = 1 (ii) a • a' = 0 English version Result of AND, OR stays in set you start with For primitive AND, OR of 2 inputs, order doesn’t matter There are identity elements for AND, OR, give you back what you started with • distributes over +, just like algebra …but + distributes over •, also (!!) There is a complement element, ANDing, ORing give you an identity Formal version Math formality... Boolean Algebra: Duality n Interesting observation q All the axioms come in “dual” form q Anything true for an expression also true for its dual q So any derivation you could make that is true, can be flipped into dual form, and it stays true n Duality -- More formally q A dual of a Boolean expression is derived by replacing n Every AND operation with... an OR operation n Every OR operation with... an AND n Every constant 1 with... a constant 0 n Every constant 0 with... a constant 1 n But don’t change any of the literals or play with the complements! 13 ➙ a + (b • c) = (a + b) • (a + c) a • (b + c) = (a • b) + (a • c) Example Boolean Algebra: Useful Laws 14 Operations with 0 and 1: Idempotent Law: Involution Law: Laws of Complementarity: Commutative Law: 1. X + 0 = X 2. X + 1 = 1 3. X + X = X 4. = X 5. X + = 1 6. X + Y = Y + X AND, OR with identities gives you back the original variable or the identity AND, OR with self = self double complement = no complement AND, OR with complement gives you an identity Just an axiom… 1D. X • 1 = X 2D. X • 0 = 0 3D. X • X = X 5D. X • = 0 6D. X • Y = Y • X Dual $𝐗$𝐗 ($𝑿) Distributive Laws: Simplification Theorems: 9. X • Y + X • = X 10. X + X • Y = X 11. (X + ) • Y = X • Y 9D. (X + Y) • (X + ) = X 10D. X • (X + Y) = X 11D. (X • ) + Y = X + Y #𝒀 #𝒀 #𝒀 #𝒀 Useful Laws (cont.) 15 8. X • (Y+ Z) = (X • Y) + (X • Z) 8D. X + (Y• Z) = (X + Y) • (X + Z) Associative Laws: 7. (X + Y) + Z = X + (Y + Z) = X + Y + Z 7D. (X • Y) • Z = X • (Y • Z) = X • Y • Z Parenthesis order doesn’t matter Axiom Useful for simplifying expressions Actually worth remembering — they show up a lot in real designs… DeMorgan’s Law 16 ¢ Think of this as a transformation § Let’s say we have: F = A + B + C § Applying DeMorgan’s Law (12), gives us: DeMorgan's Law: 12. 12D. (𝑿 . 𝒀. 𝒁. … ) = *𝑿 + *𝒀 + *𝒁 + … (𝑿 + 𝒀 + 𝒁 + ⋯ ) = *𝑿. *𝒀. *𝒁. … 𝑭 = (𝑨 + 𝑩 + 𝑪) = ($𝑨. $𝑩. $𝑪) DeMorgan’s Law (cont.) 17 X Y 𝑿𝒀 #𝑿 #𝒀 !𝑿 + !𝒀 0 0 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 𝑿 𝒀 𝑿 + 𝒀 #𝑿 #𝒀 #𝑿#𝒀 0 0 1 1 1 1 0 1 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 0 NOR is equivalent to AND with inputs complemented NAND is equivalent to OR with inputs complemented X Y X Y A A X Y X Y B B Interesting — these are conversions between different types of logic That’s useful given you don’t always have every type of gate 𝑨 = (𝑿 + 𝒀) = $𝑿$𝒀 𝑩 = (𝑿𝒀) = $𝑿 + $𝒀 Part 1: A Comparator Circuit q Design a comparator that receives two 4-bit numbers A and B, and sets the output bit EQ to logic-1 if A and B are equal q Hints: n First compare A and B bit by bit n Then combine the results of the previous steps to set EQ to logic-1 if all A and B are equal 18 Comparator 1 A B EQ (A=B) 4 bits 4 bits Part 2: A More General Comparator n Design a circuit that receives two 1-bit inputs A and B, and: q sets its first output (O1) to 1 if A>B, q sets the second output (O2) to 1 if A=B, q sets the third output (O3) to 1 if A<B. 19 Comparator 2 A B O1 (A>B) O2 (A=B) O3 (A<B) Part 3: Circuits with Only NAND Gates n Design the circuit of Part 2 using only NAND gates n Logical Completeness: q The set of gates {AND, OR, NOT} is logically complete because we can build a circuit to carry out the specification of any combinatorial logic we wish, without any other kind of gate q NAND and NOR are also logically complete 20 Circuit Drawing n Circuits can be drawn on paper / tablet / latex / using software q Online circuit drawer: logic.ly § Uses switches for inputs (on=1, off=0) § Uses light bulbs for outputs (on=1, off=0) q Latex circuit drawing: tikzmaker 21 Last Words n In this lab, you will draw the schematics of some simple operations n Part 1: A comparator circuit n Part 2: A more general comparator circuit n Part 3: Designing circuits using only NAND gates n You will find more exercises in the lab report 22 Report Deadline 23 [22. March 2024 23:59] Digital Design & Computer Arch. Lab 1 Supplement: Drawing Basic Circuits Frank K. Gürkaynak Seyyedmohammad Sadrosadati ETH Zurich Spring 2024 5 March 2024","libVersion":"0.3.2","langs":""}