{"path":"sem4/FMFP/PV/exams/midterms/FMFP-FS17.pdf","text":"Computer Science Department D. Basin P. M¨uller Formal Methods and Functional Programming Quiz 1 March 21, 2017, 10:15–10:45 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. This booklet consists of 4 pages; the back page of this booklet is page 4. After the quiz begins, check that your quiz papers are complete (3 assignments). 2. Only write on the quiz paper and extra paper sheets which are given by the assistants. Do not take any of this paper out of the quiz: submit it all. Write your ﬁrst and last name and your student number on every sheet of paper that you write on. 3. This is a closed book quiz: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. You may use any functions from the Haskell Prelude in your solutions (without giving their deﬁnitions). 5. Write clearly in the sense of logic, language, and readability. Label all rule applica- tions in your derivation trees. The clarity of your arguments and explanations aﬀects your grade. 6. You have 30 minutes to complete the quiz. Assignment 1 2 3 ∑ Max. points 5 3 2 10 Your points Formal Methods and Functional Programming, Quiz 1, SS17 2 Assignment 1: Natural Deduction (5 points) We recall the following rules from natural deduction for ﬁrst order intuitionistic logic: Γ, A Ø A Ax Γ, A Ø B Γ Ø A → B → I Γ Ø A → B Γ Ø A Γ Ø B → E Γ Ø Œ Γ Ø A ŒE Γ, A Ø Œ Γ Ø ¬A ¬I Γ Ø ¬A Γ Ø A Γ Ø B ¬E Γ Ø A Γ Ø B Γ Ø A ∧ B ∧I Γ Ø A ∧ B Γ Ø A ∧EL Γ Ø A ∧ B Γ Ø B ∧ER Γ Ø A Γ Ø A ∨ B ∨IL Γ Ø B Γ Ø A ∨ B ∨IR Γ Ø A ∨ B Γ, A Ø C Γ, B Ø C Γ Ø C ∨E Γ Ø A(x) Γ Ø ∀x. A(x) ∀I ∗ Γ Ø ∀x. A(x) Γ Ø A(t) ∀E Γ Ø A(t) Γ Ø ∃x. A(x) ∃I Γ Ø ∃x. A(x) Γ, A(x) Ø B Γ Ø B ∃E∗∗ Side conditions: (*) x does not occur free in any formula in Γ and (**) x does not occur free in any formula in Γ or B. Prove using the above rules that (∃y. ∀x. P (x, y)) → (∀x. ∃y. P (x, y)) holds. Label each inference step with the name of the corresponding rule. Formal Methods and Functional Programming, Quiz 1, SS17 3Formal Methods and Functional Programming, Quiz 1, SS17 4 Assignment 2: Alternating Numbers (3 points) A number is even-alternating if it is even and its digit are alternately even and odd. For example, 81634 is even-alternating, however 2345 and 9134 are not. Fill out the following template of a Haskell function that checks if a given natural number is even-alternating. (You are not allowed to change the template itself.) evenAlt :: Int -> Bool evenAlt x | x < 0 = error \" negative argument \" | otherwise = go x where go :: Int -> Bool -> Bool go x b | x < 10 = | otherwise = Assignment 3: Padding (2 points) Write a Haskell function pad2 :: Char -> String -> String, such that pad2 c s is the result of inserting the character c twice between every two consecutive characters in s. For example: pad2 ’* ’ \" hello \" == \" h**e**l**l**o \" pad2 ’* ’ \"++\" == \"+**+\" pad2 ’* ’ \" x \" == \" x \" pad2 ’* ’ \"\" == \"\"","libVersion":"0.5.0","langs":""}