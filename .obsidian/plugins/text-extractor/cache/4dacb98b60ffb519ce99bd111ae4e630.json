{"path":"sem2a/DDCA/VRL/slides/DDCA-L01-FPGA.pdf","text":"Digital Design & Computer Arch. Introduction to the Labs and FPGAs Mohammad Sadrosadati Frank K. Gürkaynak (Lecture by Ataberk Olgun) ETH Zurich Spring 2024 22 February 2024 Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 2 Lab Sessions (First session starts on 05.03.2024) n Where? q On-site n When? q Tuesday 16:15-18:00 Start in ML E12, then move to the labs q Wednesday 16:15-18:00 Start in HG E19, then move to the labs q Friday 08:15-10:00 Start in HG G1, then move to the labs q Friday 10:15-12:00 Start in HG G1, then move to the labs 3 HG E19 HG E26.1 HG E26.3 HG E27 HG E19 HG E26.1 HG E26.3 HG E27 HG D11 HG D12 HG E26.3 HG E27 HG E19 HG E26.1 HG E26.3 HG E27 Tuesday Wednesday Friday - 1 Friday - 2 DDCA Course Catalogue Web Page Supplementary material presentations Lab Groups n You will work in groups of two q Option 1: Declare your lab partner q Option 2: Get randomly assigned to a partner n Every group will receive an FPGA board to work with q Attend the first week of the labs to receive your FPGA board q We will collect the boards on the exam day n Follow Moodle for details 4 Grading n 10 labs, 30 points in total n We will put the lab manuals online q https://safari.ethz.ch/ddca/spring2024/doku.php?id=labs n Grading Policy q In-class evaluation (70%) and mandatory lab reports (30%) n 1-point penalty for late submission of the report q You should finish the labs within 1 week after they are announced q You can use your grades for labs from past years n You can find your grades in last year’s Moodle page: https://moodle- app2.let.ethz.ch/grade/report/user/index.php?id=19395 n For questions q digitaltechnik@lists.inf.ethz.ch (Emails are sent to all TAs) q Moodle forum (per lab/assignment) 5 Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 6 What Will We Learn? 7 Micro-architecture SW/HW Interface Program/Language Algorithm Problem Logic Devices System Software Electrons The Transformation Hierarchy Touch on implementation details Hands-on experience in digital circuit design and implementation Understanding how a processor works underneath the software layer What Will We Learn? (2) 8 n How to make trade-offs between performance and area/complexity in your hardware implementation n Hands-on experience on: q Hardware Prototyping on Field Programmable Gate Arrays (FPGAs) q Debugging Your Hardware Implementation q Hardware Description Language (HDL) q Hardware Design Flow q Computer-Aided Design (CAD) Tools Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 9 What is an FPGA? n Field Programmable Gate Array: FPGA n FPGA is a software-reconfigurable hardware substrate q Reconfigurable functions q Reconfigurable interconnection of functions q Reconfigurable input/output (IO) 10 © Raimond Spekking / CC BY-SA 4.0 (via Wikimedia Commons) FPGAs & Other Integrated Circuits CPUs Flexibility Programming Ease GPUs FPGAs ASICs Efficiency VivoSoC 3Apple M1 Nvidia GTX 1070 11 Xilinx Spartan http://asic.ethz.ch/2018/ Vivosoc3.html Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 12 FPGAs in Today’s Systems: Project Brainwave n “Microsoft’s Project Brainwave is a deep learning platform for real-time AI inference in the cloud and on the edge. A soft Neural Processing Unit (NPU), based on a high-performance field-programmable gate array (FPGA), accelerates deep neural network (DNN) inferencing, with applications in computer vision and natural language processing. Project Brainwave is transforming computing by augmenting CPUs with an interconnected and configurable compute layer composed of programmable silicon.” 13 https://www.microsoft.com/en-us/research/project/project-brainwave/ https://www.microsoft.com/en-us/research/blog/microsoft-unveils-project-brainwave/ FPGAs in Today’s Systems: Amazon EC2 F1 n “Amazon EC2 F1 instances use FPGAs to enable delivery of custom hardware accelerations. F1 instances are easy to program and come with everything you need to develop, simulate, debug, and compile your hardware acceleration code, including an FPGA Developer AMI and supporting hardware level development on the cloud. Using F1 instances to deploy hardware accelerations can be useful in many applications to solve complex science, engineering, and business problems that require high bandwidth, enhanced networking, and very high compute capabilities.” 14 https://aws.amazon.com/ec2/instance-types/f1/ https://caslab.csl.yale.edu/courses/EENG428/19-20a/slides/eeng428_lecture_001_intro.pdf FPGAs in Today’s Systems: DNA Sequencing n DRAGEN’s suite of analysis pipelines are engineered to run on FPGAs, offering hardware-accelerated implementations of genomic analysis algorithms, including BCL conversion, mapping and alignment, sorting, duplicate marking and haplotype variant calling. 15 https://www.illumina.com/products/by-type/informatics-products/dragen-bio-it-platform.html Illumina NextSeq 2000 Illumina DRAGEN (Dynamic Read Analysis for GENomics) Bio-IT Platform FPGAs in Today’s Systems: More Bioinformatics 16 Alser+, \"GateKeeper: A New Hardware Architecture for Accelerating Pre-Alignment in DNA Short Read Mapping”, Bioinformatics, 2017. Alser+, \"SneakySnake: A Fast and Accurate Universal Genome Pre- Alignment Filter for CPUs, GPUs, and FPGAs”, Bioinformatics, 2020. Alignment Filter st 1 FPGA-based Alignment Filter. n Mohammed Alser, Zulal Bingol, Damla Senol Cali, Jeremie Kim, Saugata Ghose, Can Alkan, and Onur Mutlu, \"Accelerating Genome Analysis: A Primer on an Ongoing Journey\" IEEE Micro (IEEE MICRO), Vol. 40, No. 5, pages 65-75, September/October 2020. [Slides (pptx)(pdf)] [Talk Video (1 hour 2 minutes)] 17 Accelerating Genome Analysis [IEEE MICRO 2020]FPGAs in Today’s Systems: Genomic Basecaller (I) 18 ~16X basecalling speedup FPGAs in Today’s Systems: Genomic Basecaller (II) 19 arxiv.org/abs/2211.03079 Accelerating Climate Modeling Using FPGAs n Gagandeep Singh, Dionysios Diamantopoulos, Christoph Hagleitner, Juan Gómez-Luna, Sander Stuijk, Onur Mutlu, and Henk Corporaal, \"NERO: A Near High-Bandwidth Memory Stencil Accelerator for Weather Prediction Modeling\" Proceedings of the 30th International Conference on Field-Programmable Logic and Applications (FPL), Gothenburg, Sweden, September 2020. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (23 minutes)] One of the four papers nominated for the Stamatis Vassiliadis Memorial Best Paper Award. 20 n Gagandeep Singh, Mohammed Alser, Damla Senol Cali, Dionysios Diamantopoulos, Juan Gómez-Luna, Henk Corporaal, and Onur Mutlu, \"FPGA-based Near-Memory Acceleration of Modern Data-Intensive Applications\" IEEE Micro (IEEE MICRO), 2021. 21 Near-Memory Acceleration using FPGAsNear-Memory Acceleration using FPGAs IBM POWER9 CPU HBM-based FPGA board OCAPI Source: AlphaDataSource: IBM FPGA-based Near-Memory Accelerator 22 5-27× performance vs. a 16-core (64-thread) IBM POWER9 CPU 12-133× energy efficiency vs. a 16-core (64-thread) IBM POWER9 CPU FPGAs in Today’s Systems: SoftMC and DRAM Bender 23 n An open-source FPGA-based infrastructure for experimental studies on DRAM n Flexible n Easy to Use (C++ API) n Open-source github.com/CMU-SAFARI/SoftMC github.com/CMU-SAFARI/DRAM-Bender Hassan+, “SoftMC: A Flexible and Practical Open-Source Infrastructure for Enabling Experimental DRAM Studies,” HPCA 2017. SoftMC on Github 24 github.com/CMU-SAFARI/SoftMC DRAM Bender on Github 25 github.com/CMU-SAFARI/DRAM-Bender DRAM Bender Extended Version on arXiv arxiv.org/abs/2211.05838 26 DRAM Bender 27 RowHammer: Eight Years Ago… 28 n Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu, \"Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors\" Proceedings of the 41st International Symposium on Computer Architecture (ISCA), Minneapolis, MN, June 2014. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Source Code and Data] [Lecture Video (1 hr 49 mins), 25 September 2020] One of the 7 papers of 2012-2017 selected as Top Picks in Hardware and Embedded Security for IEEE TCAD (link). RowHammer in 2021 (I) n Lois Orosa, Abdullah Giray Yaglikci, Haocong Luo, Ataberk Olgun, Jisung Park, Hasan Hassan, Minesh Patel, Jeremie S. Kim, and Onur Mutlu, \"A Deeper Look into RowHammer’s Sensitivities: Experimental Analysis of Real DRAM Chips and Implications on Future Attacks and Defenses\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (21 minutes)] [Lightning Talk Video (1.5 minutes)] [arXiv version] 29 RowHammer in 2021 (II) n Hasan Hassan, Yahya Can Tugrul, Jeremie S. Kim, Victor van der Veen, Kaveh Razavi, and Onur Mutlu, \"Uncovering In-DRAM RowHammer Protection Mechanisms: A New Methodology, Custom RowHammer Patterns, and Implications\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (25 minutes)] [Lightning Talk Video (100 seconds)] [arXiv version] 30 U-TRR on Github github.com/CMU-SAFARI/U-TRR 31 RowHammer in 2022 n A. Giray Yağlıkçı, Haocong Luo, Geraldo F. de Oliviera, Ataberk Olgun, Minesh Patel, Jisung Park, Hasan Hassan, Jeremie S. Kim, Lois Orosa, and Onur Mutlu, \"Understanding RowHammer Under Reduced Wordline Voltage: An Experimental Study Using Real DRAM Devices\" Proceedings of the 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Baltimore, MD, USA, June 2022. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [arXiv version] [Talk Video (34 minutes, including Q&A)] [Lightning Talk Video (2 minutes)] 32 RowPress (2023) n Haocong Luo, Ataberk Olgun, Giray Yaglikci, Yahya Can Tugrul, Steve Rhyner, M. Banu Cavlak, Joel Lindegger, Mohammad Sadrosadati, and Onur Mutlu, \"RowPress: Amplifying Read Disturbance in Modern DRAM Chips\" Proceedings of the 50th International Symposium on Computer Architecture (ISCA), Orlando, FL, USA, June 2023. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Lightning Talk Video (3 minutes)] [RowPress Source Code and Datasets (Officially Artifact Evaluated with All Badges)] Officially artifact evaluated as available, reusable and reproducible. Best artifact award at ISCA 2023. 33 True Random Number Generation in DRAM (I) n Ataberk Olgun, Minesh Patel, A. Giray Yaglikci, Haocong Luo, Jeremie S. Kim, F. Nisa Bostanci, Nandita Vijaykumar, Oguz Ergin, and Onur Mutlu, \"QUAC-TRNG: High-Throughput True Random Number Generation Using Quadruple Row Activation in Commodity DRAM Chips\" Proceedings of the 48th International Symposium on Computer Architecture (ISCA), Virtual, June 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Talk Video (25 minutes)] [SAFARI Live Seminar Video (1 hr 26 mins)] 34 True Random Number Generation in DRAM (II) github.com/CMU-SAFARI/QUAC-TRNG 35 FPGAs in Today’s Systems: Characterizing Flash Memories 36Cai+, “Error Characterization, Mitigation, and Recovery in Flash Memory Based Solid State Drives”, Proc. IEEE 2017. USB Jack Virtex-II Pro (USB controller) Virtex-V FPGA (NAND Controller) HAPS-52 Mother Board USB Daughter Board NAND Daughter Board 1x-nm NAND Flash [DATE 2012, ICCD 2012, DATE 2013, ITJ 2013, ICCD 2013, SIGMETRICS 2014, HPCA 2015, DSN 2015, MSST 2015, JSAC 2016, HPCA 2017, DFRWS 2017, PIEEE 2017, HPCA 2018, SIGMETRICS 2018] 37 https://arxiv.org/pdf/1706.08642 Proceedings of the IEEE, Sept. 2017 Intelligent Flash Controllers [PIEEE’17]FPGAs for Processing-in-Memory Prototyping: PiDRAM (I) 38 Ataberk Olgun, Juan Gómez Luna, Konstantinos Kanellopoulos, Behzad Salami, Hasan Hassan, Oğuz Ergin, Onur Mutlu, \"PiDRAM: A Holistic End-to-end FPGA-based Framework for Processing-in-DRAM\" Transactions on Architecture and Code Optimization (TACO), November 2022. [Github Link] Real System Evaluation In-DRAM data copy In-DRAM true random number generation FPGAs for Processing-in-Memory Prototyping: PiDRAM (II) 39 https://github.com/CMU-SAFARI/PiDRAM FPGAs for Prototyping New Architectures: MetaSys (I) 40 Nandita Vijaykumar, Ataberk Olgun, Konstantinos Kanellopoulos, Nisa Bostanci, Hasan Hassan, Mehrshad Lotfi, Phillip B Gibbons, Onur Mutlu, \"MetaSys: A Practical Open-Source Metadata Management System to Implement and Evaluate Cross-Layer Optimizations\" Transactions on Architecture and Code Optimization (TACO), 2022. [Github Link] Xilinx Zedboard FPGAs for Prototyping New Architectures: MetaSys (II) 41 safari.ethz.ch/hipeac-best-paper-award-for-metasys/ FPGAs for Prototyping New Architectures: MetaSys (III) 42 https://github.com/CMU-SAFARI/MetaSys Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 43 Basys 3: Our FPGA Board Switches LEDs Seven-segment displays microUSB (power/programming) Power switch Video out (VGA) FPGA chip Push-buttons USB 44 https://reference.digilentinc.com/reference/programmable-logic/basys-3/start High Level Labs Summary n At the end of the exercises, we will have built a 32-bit microprocessor running on the FPGA board q It will be a small processor, but it will be able to execute pretty much any program n Each week we will have a new exercise q Not all exercises will require the FPGA board n You are encouraged to experiment with the board on your own q We may have some extra boards for those who are interested – unlikely, but ask q It is not possible to destroy the board by programming! 45 Lab 1: Drawing a Basic Circuit n Comparison is a common operation in software programming q We usually want to know the relation between two variables (e.g., <, >, ==, …) n We will compare two electrical signals (inputs), and find whether they are same q The result (output) is also an electrical signal n No FPGA programming involved q We encourage you to try later 46 Lab 2: Mapping Your Circuit to FPGA n Another common operation in software programming? q Addition n Design a circuit that adds two 1-bit numbers n Reuse the 1-bit adder multiple times to perform 4-bit addition n Implement the design on the FPGA board q Input: switches q Output: LEDs 47 Lab 3: Verilog for Combinatorial Circuits n Show your results from Lab 2 on a Seven Segment Display 48 https://reference.digilentinc.com/reference/programmable- logic/basys-3/reference-manual Lab 4: Finite State Machines n Blinking LEDs for a car’s turn signals q Implement and use memories q Change the blinking speed 49 turning left turning right Lab 5: Implementing an ALU n Towards implementing your very first processor n Implement your own Arithmetic and Logic Unit (ALU) n An ALU is an important part of the CPU q Arithmetic operations: add, subtract, multiply, compare, … q Logic operations: AND, OR, … 50 Source: https://en.wikipedia.org/wiki/Arithmetic_logic_unit Lab 6: Testing the ALU n Simulate your design from Lab 5 n Learn how to debug your implementation to resolve problems 51 Lab 7: Writing Assembly Code n Programming in assembly language q MIPS n Implement a program which you will later use to run on your processor n Image manipulation 52 Lab 8: Full System Integration n Will be covered in two weeks n Learn how a processor is built n Complete your first design of a MIPS processor n Run a “snake” program 53 Lab 9: The Performance of MIPS n Improve the performance of your processor from Lab 8 by adding new instructions q Multiplication q Bit shifting 54 Lab Supplementary Material Presentations n We will present supplementary material before every lab session n Attend these to make sure you get introduced to the lab of the week! n When and where? q Tuesday 16:15-18:00 Start in ML E12, then move to the labs q Wednesday 16:15-18:00 Start in HG E19, then move to the labs q Friday 08:15-10:00 Start in HG G1, then move to the labs q Friday 10:15-12:00 Start in HG G1, then move to the labs 55 Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 56 What is an FPGA? n Field Programmable Gate Array: FPGA n FPGA is a software-reconfigurable hardware substrate q Reconfigurable functions q Reconfigurable interconnection of functions q Reconfigurable input/output (IO) 57 © Raimond Spekking / CC BY-SA 4.0 (via Wikimedia Commons) FPGAs & Other Integrated Circuits CPUs Flexibility Programming Ease GPUs FPGAs ASICs Efficiency Cerebras WSE-2Apple M1 Nvidia GTX 1070 58 Xilinx Spartan A High-Level Overview of FPGAs We configure logic blocks, their connections, and IO blocks to create hardware circuits and map programs onto those circuits 59Image source: https://www.electronicdesign.com/technologies/fpgas/article/21801527/the-principles-of-fpgas FPGA Architecture - Looking Inside an FPGA 60 n Two main building blocks: q Look-Up Tables (LUT) and Switches Andre DeHon, “The Density Advantage of Configurable Computing”, Computer, 2000 n 3-bit input LUT (3-LUT) How Do We Program LUTs? 61 input (3 bits) output (1 bit) Data Input Multiplexer (Mux): Chooses one of the 8 data inputs that corresponds to the 3-bit select input 3 Select Input 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 3-LUT can implement any 3-bit input function n Let’s implement a function that outputs ‘1’ when there are at least two ‘1’s in a 3-bit input An Example of Programming a LUT 62input (3 bits) output (1 bit) Data Input 3 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 Configuration Memory 0 0 0 1 0 1 1 1 int count = 0; for(int i = 0; i < 3; i++) { count += input & 1; input = input >> 1; } if(count > 1) return 1; return 0; In C: In an FPGA: switch(input){ case 0: case 1: case 2: case 4: return 0; default: return 1;} How to Implement Complex Functions? 63Andre DeHon, “The Density Advantage of Configurable Computing”, Computer, 2000 n FPGAs are composed of many LUTs and switches FPGA Chip Modern FPGA Architectures n Typically use LUTs with 6-bit select input (6-LUT) q Thousands of them n MegaBytes of distributed on-chip memory n Hard-coded special-purpose hardware blocks for high-performance operations q Memory interface q Low latency and high bandwidth off-chip I/O q … n Even a general-purpose processor embedded within the FPGA chip 64 An Example Modern FPGA Platform: Xilinx Zynq Ultrascale+ 65 https://www.xilinx.com/products/silicon-devices/soc/zynq-ultrascale-mpsoc.html https://www.pressebox.com/pressrelease/enclustra-gmbh/Xilinx-Zynq-UltraScale-high-bandwidth-MPSoC-module/boxid/934771 Advantages & Disadvantages of FPGAs (I) CPUs Flexibility Programming Ease GPUs FPGAs ASICs Efficiency Cerebras WSE-2Apple M1 Nvidia GTX 1070 66 Xilinx Spartan Advantages & Disadvantages of FPGAs (II) n Advantages q An algorithm can be implemented directly in hardware n High specialization à high performance, high energy efficiency q Low development cost (vs. a custom hardware design) q Short time to market (vs. a custom hardware design) n Reconfigurable in the field q Usable and reusable for many purposes n Good for both prototyping and application acceleration n Disadvantages q Not as fast and power efficient as dedicated hardware customized for an algorithm q Reconfigurability comes at a cost: significant area and latency overhead 67 Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 68 Computer-Aided Design (CAD) Tools n FPGAs have many resources (e.g., LUTs, switches) n They are hard to program manually n How can we q represent a high-level functional description of our hardware circuit using the FPGA resources? q select the resources to map our circuit to? q optimally configure the interconnect between the selected resources? q generate a final configuration file to properly configure an FPGA? 69 FPGA Design Flow 70 Problem Definition Hardware Description Language (HDL) Verilog, VHDL Your task! Logic Synthesis Placement and Routing Bitstream Generation Automated by Xilinx Vivado tools Vivado n A software tool that helps us throughout the FPGA design flow n Provides tools to simulate our designs q Validate the correctness of the implementation q Debugging 71 n Provides drivers and graphical interface to easily program the FPGA using a USB cable n Installed in computer rooms in HG (E 19, E 26.1, E 26.3, E 27) Tutorial and Demo n We will see how to q use Vivado to write Verilog code q follow the FPGA design flow steps q download the bitstream into the FPGA n Simple Keyboard q A simple hardware that you will easily be able to develop at the end of semester n Link to source files 72 https://reference.digilentinc.com/learn/programmable-logic/tutorials/basys-3-keyboard-demo/start Simple Keyboard Demo 73http://www.youtube.com/watch?v=33_Z6vrd9qQ Agenda n Logistics n What Will We Learn? n What is an FPGA? n FPGAs in Today’s Systems n Overview of the Lab Exercises n More about FPGAs n Programming an FPGA n Tutorial and Demo 74 Keep in mind n You do NOT need to install Vivado on your laptop q Lab PCs already have it installed n Do NOT ask TAs to grade your labs outside of lab hours n Submit your lab files in the correct format (as instructed by the manuals) q Double check your uploaded files q Incorrectly submitted reports receive 0 points n Double-check your grades! 75 Digital Design & Computer Arch. Introduction to the Labs and FPGAs Mohammad Sadrosadati Frank K. Gürkaynak (Lecture by Ataberk Olgun) ETH Zurich Spring 2024 22 February 2024","libVersion":"0.3.2","langs":""}