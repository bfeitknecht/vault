{"path":"sem1/A&D/UE/e/AuD-u00-e.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 25 September 2023 Johannes Lengler, David Steurer Lucas Slot, Manuel Wiedmer, Hongjie Chen, Ding Jingqiu Algorithms & Data Structures Exercise sheet 0 HS 23 The solutions for this sheet do not have to be submitted. The sheet will be solved in the first exercise session on 25.09.2023. Exercises that are marked by ∗ are challenge exercises. Exercise 0.1 Induction. a) Prove by mathematical induction that for any positive integer n, 1 + 2 + · · · + n = n(n + 1) 2 . b) (This subtask is from August 2019 exam). Let T : N → R be a function that satisfies the following two conditions: T (n) ≥ 4 · T ( n 2 ) + 3n whenever n is divisible by 2; T (1) = 4. Prove by mathematical induction that T (n) ≥ 6n2 − 2n holds whenever n is a power of 2, i.e., n = 2k with k ∈ N0. Asymptotic Growth When we estimate the number of elementary operations executed by algorithms, it is often useful to ignore smaller order terms, and instead focus on the asymptotic growth defined below. We denote by R+ the set of all (strictly) positive real numbers and by R+ 0 the set of nonnegative real numbers. Definition 1. Let f, g : N → R+ be two functions. We say that f grows asymptotically faster than g if lim n→∞ g(n) f (n) = 0. This definition is also valid for functions defined on R+ instead of N. In general, lim n→∞ g(n) f (n) is the same as lim x→∞ g(x) f (x) if the second limit exists. Exercise 0.2 Comparison of functions part 1. Show that a) f (n) := n log n grows asymptotically faster than g(n) := n. b) f (n) := n3 grows asymptotically faster than g(n) := 10n2 + 100n + 1000. c) f (n) := 3n grows asymptotically faster than g(n) := 2n. The following theorem can be useful to compute some limits. Theorem 1 (L’Hˆopital’s rule). Assume that functions f : R+ → R+ and g : R+ → R+ are differentiable, lim x→∞f (x) = lim x→∞g(x) = ∞ and for all x ∈ R+, g′(x) ̸= 0. If lim x→∞ f ′(x) g′(x) = C ∈ R+ 0 or lim x→∞ f ′(x) g′(x) = ∞, then lim x→∞ f (x) g(x) = lim x→∞ f ′(x) g′(x) . Exercise 0.3 Comparison of functions part 2. Show that a) f (n) := n1.01 grows asymptotically faster than g(n) := n ln n. b) f (n) := en grows asymptotically faster than g(n) := n. c) f (n) := en grows asymptotically faster than g(n) := n2. d)∗ f (n) := 1.01n grows asymptotically faster than g(n) := n100. e)∗ f (n) := log2 n grows asymptotically faster than g(n) := log2 log2 n. f)∗ f (n) := 2 √log2 n grows asymptotically faster than g(n) := log100 2 n. g)∗ f (n) := n0.01 grows asymptotically faster than g(n) := 2 √log2 n. Exercise 0.4 Simplifying expressions. Simplify the following expressions as much as possible without changing their asymptotic growth rates. Concretely, for each expression f (n) in the following list, find an expression g(n) that is as simple as possible and that satisfies lim n→∞ f (n) g(n) ∈ R+. It is guaranteed that all functions in this exercise take values in R+ (you don’t have to prove it). a) f (n) := 5n3 + 40n2 + 100 b) f (n) := 5n + ln n + 2n3 + 1 n c) f (n) := n ln n − 2n + 3n2 d) f (n) := 23n + 4n log5 n6 + 78√n − 9 2 e) f (n) := log2 √n5 + √ log2 n5 f)∗ f (n) := 2n3 + ( 4√n)log5 log6 n + ( 7√n)log8 log9 n Exercise 0.5∗ Finding the range of your bow. To celebrate your start at ETH, your parents gifted you a bow and (an infinite number of) arrows. You would like to determine the range of your bow, in other words how far you can shoot arrows with it. For simplicity we assume that all your arrow shots will cover exactly the same distance r, and we define r as the range of your bow. You also know that this range is at least r ≥ 1 (meter). You have at your disposition a ruler and a wall. You cannot directly measure the distance covered by an arrow shot (because the arrow slides some more distance on the ground after reaching distance r), so the only way you can get information about the range r is as follows. You can stand at a distance ℓ (of your choice) from the wall and shoot an arrow: if the arrow reaches the wall, you know that ℓ ≤ r, and otherwise you deduce that ℓ > r. By performing such an experiment with various choices of the distance ℓ, you will be able to determine r with more and more accuracy. Your goal is to do so with as few arrow shots as possible. a) What is a fast strategy to find an upper bound on the range r ? In other words, how can you find a distance D ≥ 1 such that r < D, using few arrow shots ? The required number of shots might depend on the actual range r, so we will denote it by f (r). Good solutions should have f (r) ≤ 10 log2 r for large values of r. b) You are now interested in determining r up to some additive error. More precisely, you should find an estimate ˜r such that the range is contained in the interval [˜r − 1, ˜r + 1], i.e. ˜r − 1 ≤ r ≤ ˜r + 1. Denoting by g(r) the number of shots required by your strategy, your goal is to find a strategy with g(r) ≤ 10 log2 r for all r sufficiently large. c) Coming back to part (a), is it possible to have a significantly faster strategy (for example with f (r) ≤ 10 log2 log2 r for large values of r) ? 3","libVersion":"0.5.0","langs":""}