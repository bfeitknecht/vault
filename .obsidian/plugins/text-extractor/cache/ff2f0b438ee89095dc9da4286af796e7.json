{"path":"var/other/ZHAW/ZHAW-decidability.pdf","text":"Theoretische Informatik Teil 8 Entscheidbarkeit Frühlingssemester 2024 (Version: 25. Januar 2024) E. Bazzi L. R. Büchi D. Flumini O. Stern 1 Überblick Berechenbarkeit Teil 1 - Modelle der Berechenbarkeit Church-Turing-These und der Berechenbarkeitsbegriﬀ Ansätze zur Formalisierung des Berechenbarkeitsbegriﬀes Rekursive und primitiv rekursive Funktionen LOOP und WHILE berechenbare Funktionen. Turing-berechenbare Funktionen Die verschiedenen Ansätze im Vergleich LOOP Berechenbarkeit und primitiv rekursive Funktionen Turingvollständigkeit Ackermannfunktion LOOP-Interpreter 2 Überblick Berechenbarkeit Teil 2 - Entscheidbarkeit und Semi-Entscheidbarkeit Entscheidbarkeit Abschlusseigenschaften entscheidbarer Mengen Reduktionen von entscheidbaren Mengen Semi-Entscheidbarkeit Charakterisierung von Entscheidbarkeit durch semi-Entscheidbarkeit Rekursiv aufzählbare Mengen Reduktionen von semi-entscheidbaren Mengen Das Halteproblem Satz von Rice 3 (Semi-) Entscheidbarkeit Deﬁnition (Entscheidbarkeit) Eine Sprache A ⊂ Σ∗ heisst entscheidbar, wenn eine Turingmaschine T existiert, die das Entscheidungsproblem (Σ, A) löst. Bemerkung Ist eine Sprache A ⊂ Σ∗ entscheidbar, dann gibt es eine Turingmaschine T , die sich wie folgt verhält: Wenn T mit Bandinhalt x ∈ A gestartet wird, dann hält T nach endlich vielen Schritten mit Bandinhalt “1”(Ja) an. Wenn T mit Bandinhalt x ∈ Σ∗ \\ A gestartet wird, dann hält T nach endlich vielen Schritten mit Bandinhalt “0” (Nein) an. Insbesondere muss die Turingmaschine T bei jeder Eingabe x ∈ Σ∗ nach endlich vielen Schritten halten. 4 (Semi-) Entscheidbarkeit Deﬁnition (Semi-Entscheidbarkeit) Eine Sprache A ⊂ Σ∗ heisst semi-entscheidbar, wenn eine Turingmaschine T existiert, die sich wie folgt verhält: Wenn T mit Bandinhalt x ∈ A gestartet wird, dann hält T nach endlich vielen Schritten mit Bandinhalt “1”(Ja) an. Wenn T mit Bandinhalt x ∈ Σ∗ \\ A gestartet wird, dann hält T nie an. Bemerkung Informell kann man sagen, dass zu einer semi-entscheidbaren Sprache A eine Turingmaschine existiert, die zum Entscheidungsproblem (Σ, A) nur die positiven (“Ja”) Antworten liefert und anstelle von negativen Antworten (“Nein”) gar keine Antwort zurückgibt. 5 (Semi-) Entscheidbarkeit Bemerkung (Konvention) Wie bereits erwähnt werden natürliche Zahlen mit ihrer Binärdarstellung identiﬁziert. Eine Teilmenge X ⊂ N betrachten wir also genau dann als (semi-) entscheidbar, wenn die Sprache {bin(x) | x ∈ X} ⊂ {0, 1} ∗ (semi-) entscheidbar ist. 6 (Semi-) Entscheidbarkeit Bemerkung (Folgerungen in Bezug auf Turing-vollständigkeit) Eine Sprache A ⊂ Σ∗ ist genau dann entscheidbar, wenn das Entscheidungsproblem (Σ, A) mit einem WHILE-Programm gelöst werden kann. Ein solches WHILE-Programm nennen wir ein Entscheidungs- verfahren für A. Eine Sprache A ⊂ Σ∗ ist genau dann semi-entscheidbar, wenn ein WHILE-Programm existiert, das bei Eingabe von einem zu A gehörenden Wort stets terminiert und “Ja” zurückgibt und bei Eingabe von Wörtern, die nicht zu A gehören, nicht terminiert. Ein solches WHILE-Programm nennen wir ein semi-Entscheidungs- verfahren für A. 7 (Semi-) Entscheidbarkeit Beispiele Die Menge aller geraden natürlichen Zahlen ist entscheidbar, da die Funktion, F (x) = mod2(x + 1), berechenbar ist. Die Menge aller Primzahlen ist entscheidbar, da folgender Pseudocode das entsprechende Entscheidungsproblem löst: INPUT ( n ) FOR i = 2 to n -1 DO IF Mod (n , i ) = 0 THEN return 0 END return 1 Bemerkung Der Befehl “return” beendet die Ausführung der Schleife. 8 (Semi-) Entscheidbarkeit Satz Jede entscheidbare Sprache ist auch semi-entscheidbar. Aufgabe Beweisen Sie den Satz: 9 (Semi-) Entscheidbarkeit Satz Eine Sprache A ⊂ Σ∗ ist genau dann entscheidbar, wenn sowohl A als auch A semi-entscheidbar ist. Bemerkung Der Ausdruck A steht für das Komplement von A in Σ∗: A = Σ∗ \\ A = {w ∈ Σ∗ | w /∈ A} 10 (Semi-) Entscheidbarkeit Beweis (⇒). Wenn wir ein Entscheidungsverfahren für die Menge A haben, dann ist A gemäss dem vorherigen Satz auch semi-entscheidbar. Wenn wir ein Entscheidungsverfahren für die Menge A haben, dann erhalten wir durch Verneinung der Ausgabe auch ein Entscheidungsverfahren für A. Somit ist mit jeder entscheidbaren Sprache A auch das Komplement A entscheidbar und somit auch semi-entscheidbar. 11 (Semi-) Entscheidbarkeit Fortsetzung Beweis (⇐). Wir müssen zeigen, dass für jede semi-entscheidbare Sprache mit semi-entscheidbarem Komplement ein Entscheidungsverfahren existiert. Dies erreichen wir durch folgenden Algorithmus (Pseudocode): INPUT ( w ) n = 0; WHILE true DO n = n + 1; IF A (w , n ) THEN return 1; IF B (w , n ) THEN return 0 END Anmerkungen: A(w,n) bedeutet, dass das semi-Entscheidungsverfahren von A nach n Schritten terminiert; B(w,n): Wie A(w,n) aber mit der Komplementärmenge von A. 12 (Semi-) Entscheidbarkeit Satz (Abschlusseigenschaften) Ist A ⊂ Σ∗ eine entscheidbare Sprache, dann ist auch A eine entscheidbare Sprache. Sind A, B (semi-) entscheidbare Sprachen, dann sind auch A ∪ B und A ∩ B (semi-) entscheidbare Sprachen. Beweis. Die erste Tatsache folgt sofort aus dem soeben bewiesenen Satz. Die zweite Behauptung ist als Übung zu beweisen. 13 (Semi-) Entscheidbarkeit Satz (Charakterisierungen) Folgende Aussagen für A ⊂ Σ∗ sind äquivalent: A ist rekursiv aufzählbar. A ist semi-entscheidbar1. A ist der Wertebereich einer totalen berechenbaren Funktion. A ist der Deﬁnitionsbereich einer berechenbaren Funktion. 1Hält genau für alle w ∈ A 14 Reduktion Wir betrachten zwei Entscheidungsprobleme: Problem P1 Gegeben: Eine natürliche Zahl x. Gefragt: Ist x eine Primzahl? Problem P2 Gegeben: Ein Paar (x, y) von natürlichen Zahlen. Gefragt: Ist x der kleinste Primfaktor von y? 15 Reduktion Fragestellung: Können wir ein Lösungsverfahren vom Problem P2 auch dazu verwenden das Problem P1 zu lösen? Ansatz: Für jede natürliche Zahl x gilt: x erfüllt P1 ⇔ (x, x) erfüllt P2. Die Frage ob x zu P1 gehört, lässt sich also auf die Frage reduzieren ob das Paar (x, x) zu P2 gehört. Bemerkung Oﬀenbar können wir jede Instanz des Problems P1 zu einer (gleichwertigen) Instanz des Problems P2 umformulieren. Solch eine Umformulierung nennt man eine Reduktion von P1 auf P2. 16 Reduktion Deﬁnition Eine Sprache A ⊂ Σ∗ heisst auf eine Sprache B ⊂ Γ ∗ reduzierbar, wenn es eine totale, Turing-berechenbare Funktion F : Σ∗ → Γ ∗ gibt, so dass für alle w ∈ Σ∗ w ∈ A ⇐⇒ F (w) ∈ B gilt. Ist die Sprache A auf die Sprache B reduzierbar, dann schreiben wir A ≼ B. 17 Reduktion Aufgabe (Weitere einfache Beispiele zur Reduktion) a) P1: Gegeben ist eine Zahl n. Frage: Ist n durch 3 teilbar? P2: Gegeben ist eine Zahl n. Frage: Ist n durch 6 teilbar? b) P1: Gegeben sind die Zahlen n und x. Ist x die Quadratwurzel von n? P2: Gegeben sind die Zahlen n, x, y. Ist n das Produkt von x und y? Geben Sie F (w) an, so dass P1 auf P2 reduziert werden kann. 18 Reduktion Satz (Transitivität) Für beliebige Sprachen A, B und C gilt A ≼ B und B ≼ C ⇒ A ≼ C. Beweis. Dies folgt aus der Tatsache, dass die Komposition (Einsetzung) von totalen, Turing-berechenbaren Funktionen total, Turing-berechenbar ist. 19 Reduktion Satz Für beliebige Sprachen A ⊂ Σ∗ und B ⊂ Γ ∗ gilt: Ist B entscheidbar und A ≼ B, dann ist auch A entscheidbar. Ist B semi-entscheidbar und A ≼ B, dann ist auch A semi-entscheidbar. Beweis. Wir gehen von einem Entscheidungsverfahren P für B und einer totalen berechenbaren Funktion F : Σ∗ → Γ ∗ mit w ∈ A ⇐⇒ F (w) ∈ B aus. Wir müssen auf dieser Grundlage ein Entscheidungsverfahren für A angeben. 20 Reduktion Fortsetzung Beweis. Da die Funktion F berechenbar ist, können wir sie in unserem Entscheidungsverfahren aufrufen (Pseudocode). INPUT ( w ) u = F ( w ) RETURN P ( u ) Aus der Totalität von F folgt, dass dieses Programm das Entscheidungs- problem (Σ, A) löst. Somit ist A entscheidbar. Der Beweis von der zweiten Behauptung geht analog. 21 Das Halteproblem Bemerkung (Erinnerung) Wir ordnen jeder Turingmaschine einen Code aus w ∈ {0, 1}∗ zu. Für jeden Code w ∈ {0, 1}∗ sei Tw die Turing-Maschine mit Code w. Es sei M eine beliebige2 aber feste Turing-Maschine. Für alle Wörter w ∈ {0, 1}∗, die nicht Code einer Turing-Maschine sind, setzen wir Tw = M . Somit ist jedes Binärwort der Code einer Turing-Maschine. Bemerkung (Konvention) Ist T eine Turing-Maschine mit Code w, dann schreiben wir für die von T berechnete Funktion auch Fw. 2Z.B. M = ({q0}, {0}, {0, }, ∅, q0, , ∅) 22 Das Halteproblem Im Rahmen des allgemeinen Halteproblems “wird gefragt”, ob eine gegebene Turingmaschine auf einem gegebenen Input anhält. Das allgemeine Halteproblem kann man wie folgt als Entscheidungsproblem formulieren: Allgemeines Halteproblem H Gegeben: Der Code w ∈ {0, 1}∗ einer Turing-Maschine Tw und ein Input x. Gefragt: Hält die Turing-Maschine Tw an, wenn man sie auf x ansetzt? 23 Das Halteproblem Das allgemeine Halteproblem als Sprache formuliert. Deﬁnition (Das allgemeine Halteproblem) Das allgemeine Halteproblem ist die Sprache H := {w#x ∈ {0, 1, #}∗ | Tw angesetzt auf x hält}. Bemerkung Die Funktion des Zeichens # ist das Trennen des Inputstrings in zwei Inputs. 24 Das Halteproblem Beim leeren Halteproblem ist man bloss darin interessiert, ob eine gegebene Turingmaschine auf dem leeren Band anhält. Das Halteproblem auf leerem Band kann man wie folgt als Entscheidungsproblem formulieren: Halteproblem auf leerem Band H0 Gegeben: Der Code w ∈ {0, 1}∗ einer Turing-Maschine Tw. Gefragt: Hält die Turing-Maschine Tw an, wenn man sie auf das leere Band ansetzt? 25 Das Halteproblem Das Halteproblem auf leerem Band als Sprache formuliert. Deﬁnition (Das leere Halteproblem) Das leere Halteproblem ist die Sprache H0 := {w ∈ {0, 1}∗ | Tw angesetzt auf das leere Band hält}. 26 Das Halteproblem Das spezielle Halteproblem, auch Selbstanwendungsproblem genannt, ist der Spezialfall des allgmeinen Halteproblems bei dem der Inputstring gerade dem Code der gegebenen Turingmaschine entspricht. Das spezielle Halteproblem kann man wie folgt als Entscheidungsproblem formulieren: Spezielles Halteproblem HS Gegeben: Der Code w ∈ {0, 1}∗ einer Turing-Maschine Tw. Gefragt: Hält die Turing-Maschine Tw an, wenn man sie auf ihren eigenen Code w (als Input) ansetzt? 27 Das Halteproblem Das spezielle Halteproblem als Sprache formuliert. Deﬁnition (Das spezielle Halteproblem) Das spezielle Halteproblem ist die Sprache HS := {w ∈ {0, 1} ∗ | Tw angesetzt auf w hält}. Bemerkung Das spezielle Halteproblem HS wird auch als Selbstanwendungsproblem bezeichnet. 28 Das Halteproblem Im folgenden werden wir die Unentscheidbarkeit der eingeführten Halteprobleme beweisen. Wir gehen dabei wie folgt vor: 1 Wir zeigen, dass HS nicht entscheidbar ist. 2 Wir reduzieren HS auf H und folgern daraus, dass H nicht entscheidbar ist (siehe Bemerkung unten). 3 Wir reduzieren H auf H0 und folgern daraus, dass H0 nicht entscheidbar ist. Bemerkung Lässt sich ein unentscheidbares Problem A auf ein Problem B reduzieren, i.e. gilt A ≼ B, dann ist auch das Problem B unentscheidbar. 29 Das Halteproblem Satz (Unentscheidbarkeit von HS) Das spezielle Halteproblem ist nicht entscheidbar. Widerspruchsbeweis. Wir nehmen an, dass es eine Turing-Maschine T das Halteproblem HS entscheidet. Wir konstruieren, ausgehend von T , eine neue Turing-Maschine P . Die TM P : TM T Bandinhalt? Band := 1 Halt 0 1 30 Das Halteproblem Fortsetzung Beweis. Nun sei w der Code der Turing-Maschine P , i.e. Tw = P . Aus der Konstruktion von P erhalten wir P angesetzt auf w hält ⇔ T (w) = 0. Weil T das spezielle Halteproblem entscheidet, erhalten wir auch T (w) = 0 ⇔ Tw angesetzt auf w hält nicht ⇔ P angesetzt auf w hält nicht und damit den gesuchten Widerspruch. 31 Das Halteproblem Wir zeigen, dass HS nicht entscheidbar ist.✓ Wir reduzieren HS auf H und folgern daraus, dass H nicht entscheidbar ist. Wir reduzieren H auf H0 und folgern daraus, dass H0 nicht entscheidbar ist. 32 Das Halteproblem Theorem (Unentscheidbarkeit von H) Das allgemeine Halteproblem ist nicht entscheidbar. Beweis. Oﬀensichtlich ist die Funktion F : {0, 1}∗ → {0, 1, #}∗ die durch die Zuordnung F (x) = x#x gegeben ist, eine Reduktion von HS auf H. Die Unentscheidbarkeit von H folgt damit aus der Unentscheidbarkeit von HS. Bemerkung (Unmittelbare Konsequenz) Man kann allgemein nicht algorithisch überprüfen (d. h. per Programm), ob ein gegebenes Programm für eine konkrete Eingabe terminiert. 33 Das Halteproblem Wir zeigen, dass HS nicht entscheidbar ist.✓ Wir reduzieren HS auf H und folgern daraus, dass H nicht entscheidbar ist.✓ Wir reduzieren H auf H0 und folgern daraus, dass H0 nicht entscheidbar ist. 34 Das Halteproblem Theorem (Unentscheidbarkeit von H0) Das Halteproblem auf leerem Band ist nicht entscheidbar. Beweisidee. Das allgemeine Halteproblem H wird auf das Halteproblem auf leerem Band reduziert. Anschaulich funktioniert die Reduktion wie folgt. Die Entscheidung, ob eine Turing-Maschine T auf dem Input x anhält, ist äquivalent zur Entscheidung, ob die Turing-Maschine T ′ auf dem leeren Band anhält. Die TM T ′: Band := x T (Die TM T ′ schreibt zunächst die Eingabe x auf das leere Band und verhält sich dann wie die TM T .) 35 Das Halteproblem Wir zeigen, dass HS nicht entscheidbar ist.✓ Wir reduzieren HS auf H und folgern daraus, dass H nicht entscheidbar ist.✓ Wir reduzieren H auf H0 und folgern daraus, dass H0 nicht entscheidbar ist. ✓ 36 Das Halteproblem Satz Die Probleme H0, HS und H sind semi-entscheidbar. Beweisidee. Wegen Hs ≼ H ≼ H0 genügt es nachzuweisen, dass H0 semi-entscheidbar ist. Ein semi-Entscheidungsverfahren für H0 kann gemäss dem folgenden Schema mit Hilfe einer universellen Turing-Maschine U angegeben werden: U Band := 1 37 Überblick 38 Satz von Rice Satz Ist R die Menge aller berechenbaren Funktionen und S ⊂ R eine echte, nichtleere Teilmenge, dann ist die Sprache C(S) = {w ∈ {0, 1}∗ | Fw ∈ S} unentscheidbar. Beweis. Für einen Beweis sei auf das Buch «Theoretische Informatik – kurz gefasst» (Seiten 122 und 123) von Uwe Schöning verwiesen. 39 Satz von Rice Bemerkung (Konsequenzen) Es ist (im Allgemeinen) unmöglich mechanisch zu überprüfen, ob ein gegebenes Programm eine bestimmte Speziﬁkation erfüllt. Es ist (im Allgemeinen) unmöglich mechanisch zu überprüfen, ob ein gegebenes Programm frei von “bugs” ist. Es ist (im Allgemeinen) unmöglich mechanisch zu überprüfen, ob ein gegebenes Programm bei jeder Eingabe terminiert. Es ist (im Allgemeinen) unmöglich mechanisch zu überprüfen, ob zwei gegebene Programme dieselbe Funktionalität haben. 40 (Semi-) Entscheidbarkeit Beispiel (Collatz-Zahlen) Gegeben: Eine natürliche Zahl n > 0 Bildungsvorschrift: Ist n gerade, setze n = n/2 Ist n ungerade: setze n = 3n + 1 Gefragt: Mündet die Folge mit Startwert n in den Zyklus 4, 2, 1 ? Für n = 8 : 8 → 4 → 2 → 1 Für n = 9 : 9 → 28 → 14 → 7 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1 41 (Semi-) Entscheidbarkeit Aufgabe (Collatz-Zahlen) Frage: Sind 27, 6‘171 und 837‘799 Collatz-Zahlen? 42","libVersion":"0.3.2","langs":""}