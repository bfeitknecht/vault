{"path":"sem4/CN/UE/e/CN-u04-e.pdf","text":"Exercise 4: Transport Protocols Question 1: Reliable transport (exam-style question).[1] [1] Adapted from exercises of Communication Networks (227-0120-00L). Consider a Go-Back-N sender and receiver directly connected by a 10 Mbps (= 10 ∗ 106 bits) link with a propagation delay of 100 milliseconds. The retransmission timer is set to 3 seconds. The retransmission timer restarts on every received ACK (including duplicate ones). The window has a length of 4 segments. An ACK is transmitted as soon as the last bit of the corresponding data segment is received, and the size of the ACK is very small. (The number of an ACK is always RCV.NXT, i.e., +1 of the highest sequence number until it has received everything) You can neglect: • transmission delay for ACK packets • processing delay for all packets • queuing delay for all packets Draw a time-sequence diagram showing the transmission of 10 segments where each segment contains 10 000 bits. Question 1.1 Draw the time-sequence diagram for the case where there are no losses. (You can fill in and complete the following figure which already contains the segment “0”). 1 Time-sequence diagram answer template Question 1.2 Draw the time-sequence diagram for the case where the 3rd (segment “2”) and last segment (segment “9”) are lost once i.e. their first transmission fails but 2 their second succeeds. No ACK’s are lost. Time-sequence diagram answer template 3 Question 2: TCP [Previous Exam Question (adapted slightly)][2] [2] Operating Systems & Networks (252-0062-00L); Spring Semester 2016 (FS16). Question 9. https://exams.vis.ethz.ch/category/OperatingSystemsandComputerNetworks The Transmission Control Protocol (TCP) uses congestion control in order to moderate the rate at which traffic enters the network. The following figure shows how the size of the congestion window (y-axis) fluctuates as time passes (x-axis). Timeouts are not explicitly shown, but you should be able to determine this based on the plot. Based on the figure, answer the following questions. Congestion window (cwnd) For your convenience you find the simplified TCP congestion control algorithm from the lecture slides below (2022 - lecture 06 - Internet Transport). Note: cwnd = congestion window, ssthresh = slow start threshold: 4 TCP congestion control algorithm Question 2.1 Identify the time intervals when congestion control is operating in slow start. Briefly explain slow start and what triggers it. Question 2.2 Identify the time intervals when congestion control is operating in congestion avoidance, i.e., it uses additive increase. Briefly explain additive increase and what triggers congestion avoidance. Question 2.3 The fast retransmit and fast recovery algorithms usually operate in conjunction. Question 2.3.1 Identify at which point(s) in time there is fast retransmission and explain why. Question 2.3.2 Briefly explain how fast retransmission and fast recovery work and the main intuition behind them. 5 Question 3: Unreliable transport protocol In the lecture, you have learned how a reliable transport protocol can be built on top of a best-effort delivery network. Question 3.1 What are the characteristics of best-effort and reliable transport? Question 3.2 What could be advantages of using an unreliable transport protocol? Question 3.3 What type of applications are suitable to use unreliable transport protocols? Question 3.4 The User Datagram Protocol (UDP) only provides unreliable transport. Assume you are forced to use a network which only supports UDP as a transport protocol. You must transmit an important document which eventually should be correctly transmitted. Is it possible to implement reliable transport mechanisms despite using UDP? Question 4: QUIC Question 4.1 At what layer does QUIC operate? Can, and if so how, does it offer the same functionality as the TCP+TLS stack? Note: TLS is a protocol used to establish an encrypted connection on top of the reliable transport TCP. It is not covered in the lecture in detail. Question 4.2 What are the advantages of QUIC over TCP+TLS? Name at least three. Question 4.3 Why did QUIC not design its own custom transport layer header instead of UDP? Question 5: Packet Switching In packet-switching networks, the source host segments long application-layer messages (for example images or music files) into smaller packets and sends the packets into the network. The receiver re-assembles the packets back into the 6 original message. This figure illustrates the end-to-end transmission of a message with and without segmentation: Transmission (a) without message segmentation, and (b) with message segmentation Consider a 7.5 * 10ˆ6 bits long message that is to be sent from the source to the destination as shown in the figure. We assume that each link has capacity 1.5 Mbps and ignore propagation, queuing and processing delays. Question 5.1 Consider sending the message from source to destination without message segmentation. Keep in mind that each packet switch uses a store and forward packet switching. i) How long does it take to move the message from the source host to the first packet switch? ii) What is the total time to move the message from the source host to the destination host? Question 5.2 Now suppose that the message is segmented into 5,000 packets, with each packet being 1500 bits long. How long does it take to move the the first packet from the source host to the first packet switch? Question 5.3 How long does it take to move the file from the source host to the destination host when message segmentation is used? Compare and comment. 7 Question 5.4 What are the drawbacks of message segmentation? Question 6: Timeout Value In the following questions, we want to see how we can calculate a good timeout value. Question 6.1 What happens, if the timeout is larger than the RTT, what if it’s smaller than the RTT? I.e., timeout = a * RTT and timeout = 1/a * RTT respectively, where a > 1. Question 6.2 • To get a good estimation for the RTT to calculate the timeout, current TCP implementations use a form of averaging over the samples. Do they use exponential or linear averaging of RTT samples? • We calculate the SampleRTT as follows: SampleRT T = AckRcvdT ime − SendP acketT ime Fill in the gaps for the EstimatedRTT formula: EstimatedRT T = α · EstimatedRT T + ................................. where 0 ≤ α ≤ 1 Question 6.3 For the following two examples, fill in the gaps for the EstimatedRTT. What role does alpha play? What if SampleRTT always stays the same? For α = 0.5 8 Smoothed RTT (α = 0.5) For Alpha = 0.3 Smoothed RTT (α = 0.3) 9","libVersion":"0.5.0","langs":""}