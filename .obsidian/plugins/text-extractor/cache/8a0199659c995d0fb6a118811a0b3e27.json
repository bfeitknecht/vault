{"path":"sem4/FMFP/UE/slides/CN-u03-slides.pdf","text":"Computer Networks - Exercise 3 Transport Principles and Internet Transport ETH Z√ºrich Slides by Alice La Porta and Jo√´l V√∂gtlin Based on the work of BinicƒÉ Nicolae and Diego de los Santos March 2025 - Sockets (Lecture Material) - Recap: - Transport Principles - Internet Transport - (Kahoot!) - Exercise #3 Table of contents 3 Transport Principles - Multiplexing/Demultiplexing - File/byte-stream abstractions - Reliable transfer (if needed) - Flow control (Receiver Window) - Congestion control (Sender Window) 5 What should the transport layer provide? They can get - Lost - Corrupted - Reordered - Delayed - Duplicated 6 What can happen to packets - Correctness: Ensure data is delivered in order and untouched - Timeliness: Minimize time until data is transferred - EfÔ¨Åciency: Optimal use of bandwidth - Fairness: Play well with concurrent communications 7 Goals of reliable transfer 1. ACKs 8 How to deal with lost packets Alice Bob ‚Ä¶ ACK 1 packet 1 ACK 2 packet 2 1. ACKs 2. Timeouts 9 How to deal with lost packets Alice Bob ‚Ä¶ ACK 1 packet 1 ACK 1 packet 1 timeout Tradeoff Large timeouts: High efÔ¨Åciency, low timeliness Small timeouts: Low efÔ¨Åciency, high timeliness. Problem: Sending one packet at a time is slow Idea: Send multiple packets at the same time to improve timeliness A new problem arises: This might overwhelm the receiver ‚Üí Flow control 10 Flow control Sliding window approach: - Sender sets sending window - Receiver sets receiving window - Sending window ‚â§ receiving window 11 Flow control ‚Äì Sliding Window 0 1 2 3 4 5 6 7 8 9 ACKed Sent but not ACKed Available to send Unavailable to send 12 Flow control ‚Äì Sliding Window 0 1 2 3 4 5 6 7 8 9 ACKed Sent but not ACKed Available to send Unavailable to send 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 ACK 2 ACK 3 ? - Individual: ACK all packets - Cumulative: ACK the in-order packet with highest sequence number - Full information: Highest cumulative ACK and additional packets 13 Types of ACKsTypes of ACKs Individual Cumulative Full Information Advantages Disadvantages + Know fate of each packet + Simple window algorithm + Not sensitive to reordering + Good in-between + Information can be inferred from duplicate ACKs - Causes too many retrans- missions if an ACK is lost - Duplicate ACKs are tricky (lack information for receiver) + Complete information + Resilient form of individual ACKs - Large overhead Principle: Simple receiver - One sliding window (for sender) - Cumulative ACKs - Single timeout (for the whole window) - In-order delivery to the upper layer 15 Example: Go-Back-N Timeout: - Is reset with every ACK (inside the window) - If triggered, resend whole window Principle: Avoid unnecessary retransmissions Two sliding windows: Sender - Per-packet timeout - Resend only the packet upon timeout Receiver - Individual ACKs - Buffer out-of-order packets Play around yourself with them here! Example: Selective Repeat 16 Internet Transport 18 TCP vs. UDP TCP UDP Multiplexing/Demultiplexing File/byte-stream abstractions Reliable transfer Flow control Congestion control (can have checksums) ports segments ACKs, checksums receiver window sender window - Simple, connectionless protocol Why? - Finer control over what data is sent and when - No delay for connection establishment - Greater scalability (No connection state, buffers, timers) - Small per-packet overhead (headers are minimal) Where? - Apps that - prefer timely information over out-of-date information: Gaming, VoIP - can handle packet loss themselves: DNS 19 UDP ‚Äì User Datagram Protocol - Reliable, in-order delivery - ACKs: carry byte sequence numbers, cumulative - One Timer: resend Ô¨Årst unACKed segment on timeout, double the timer value - ‚ÄúFast retransmit‚Äù: on three duplicate ACKs - Requires ‚Äúconnections‚Äù (bytestreams) and associated state at end hosts - Connection State (what is saved): - Sender: Packets sent but not ACKed, related timer - Receiver: non-contiguous packets buffer ‚û° no reordering - Flow control: Sliding window ‚â§ Receiver window ‚û° Limits bytes in Ô¨Çight - Congestion control: Dynamic adaptation to network path‚Äôs capacity - NOT Provided: Delay/Bandwidth guarantees, Sessions that survive IP changes 20 TCP ‚Äì Transmission Control Protocol 21 Connections - Initial Sequence Number (ISN): random number for the Ô¨Årst byte - Needs 3-way-handshake: SYN ‚û° SYNACK ‚û° ACK (Exchange ISNs) - Connection Teardown: - Both sides must send a FIN Packet - it must be ACKed by the other side - Abrupt Termination: - A crashes ‚û° A sends RST to B and B doesn‚Äôt ACK it - If RST lost ‚û° B sends data ‚û° A sends RST 22 Three way handshake Alice Bob ‚Ä¶ SYN ACK SYN ACK 1 ACK packet 1 RTT estimation Alice Bob ‚Ä¶ ACK 1 packet 1 ACK 1 packet 1 timeout Alice Bob ‚Ä¶ ACK 1 packet 1 timeoutRTT RTT packet 1 Timeout should be set slightly higher than RTT ‚Üí RTT estimation needed InefÔ¨Åcient Duplicate packets 23 - SampleRTT = AckRcvdTime - SendPacketTime - EstimatedRTT = ùõº * EstimatedRTT + (1-ùõº) * SampleRTT; with 0 < ùõº ‚â§ 1 - Karn/Partridge Algorithm: - SampleRTT only from original transmissions - Timeout = 2 * EstimatedRTT - On timeout ‚Üí Double the timeout (up to a maximum of 60 sec) - On success ‚Üí Timeout = 2 * EstimatedRTT - Jacobson/Karels Improvement: - Deviation = |SampleRTT - EstimatedRTT| - EstimatedDeviation = ùõΩ * EstimatedDeviation + (1-ùõΩ) * Deviation - Timeout = EstimatedRTT + 4 * EstimatedDeviation 24 RTT estimation KahootExercise #3 Question 1: Bandwidth delay product 40 Alice and Bob have a 100 Mbps connection, which has a constant 5 ms RTT.1) What would be the ideal congestion window size W in kilobytes? The ideal congestion window size W is the product of the bandwidth and the delay (RTT). Question 2: Sliding window 41 A sliding window is used in a transport protocol to enable high throughput. Part of such a protocol is to negotiate the sender/receiver window size. 1) Why is it a desirable property that sender window ‚â§ receiver window? EfÔ¨Åciency It is pointless for the sender to send more data than the receiver can receive (the receiver would just drop packets) ‚áí Having sender window > receiver window would only overwhelm and congest the network 42 Question 2: Sliding window 2) Consider the sliding window shown, and assume ‚óè Smallest, indivisible unit ‚Üí Packet ‚óè SND.UNA:Lowest unacknowledged packet sequence number ‚óè SND.NXT: Lowest packet sequence number that hasn‚Äôt been sent out yet 43 Question 2: Sliding window 1. What is the current window size? (In other words, how many data packets are outstanding in the network?) - SND.NXT - SND.UNA - SND.NXT - SND.UNA - SND.UNA - SND.NXT - SND.NXT - SND.UNA - SND.NXT - SND.UNA - SND.UNA - SND.NXT 44 Question 2: Sliding window 2. Which invariant must hold? (MAXWND is the maximum window size) - SND.NXT ‚â§ SND.UNA + MAXWND - SND.NXT ‚â• SND.UNA + MAXWND - SND.NXT ‚â§ MAXWND - SND.NXT ‚â• MAXWND - SND.NXT ‚â§ SND.UNA + MAXWND (current window size ‚â§ MAXWND) - SND.NXT ‚â• SND.UNA + MAXWND - SND.NXT ‚â§ MAXWND - SND.NXT ‚â• MAXWND 45 Question 3: AIMD (Additional Increase Multiplicative Decrease) - Link fully utilized by machine 2 Link fully utilized by machine 1Link fully utilized by machine 2 Assume two machines having one Ô¨Çow going over the same link: - The decreasing line intersects the axes at a value for throughput that fully utilizes the link with the respective machine. - Both use AIMD to control their rates. Throughput Machine 1Throughput Machine 2 A 46 Question 3: AIMD (Additional Increase Multiplicative Decrease) E fÔ¨Åciency E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A 1) Label the two perpendicular lines that are drawn inside the graph 2) Point A shows the current bandwidth of machines 1 and 2. Which machine is using more bandwidth, and is the link saturated? Machine 1 is using more bandwidth and the link is not saturated The decreasing line is the line where the sum of the throughputs (x+y) is the capacity of the link. All points on this line describe a scenario where the two machines fully utilize the link. The increasing line describes a scenario where the machines have equal bandwidth. 47 Question 3: AIMD (Additional Increase Multiplicative Decrease) - Both machines increase their window size by one MSS (Maximum Segment Size) - At some time congestion occurs - The window size of both machines are cut in half - Resulting vector should point halfway between point B and the origin 3) Following AIMD, draw the vector resulting from point A until the state of the algorithm changes. Do this one more time. Explain your reasoning. E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A 48 Question 3: AIMD (Additional Increase Multiplicative Decrease) Yes AIMD will lead to an oscillation over the fairness line 4) Will AIMD convergence to fair sharing in this case? E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A - Both machines decrease their window size by 1 MSS 49 Question 4: MIAD (Multiplicative Increase Additive Decrease) -Assume two machines having one Ô¨Çow going over the same link: - Both use MIAD to control their rates. 1) Following MIAD, draw the vector resulting from point A until the state of the algorithm changes. Do this one more time. Explain your reasoning. E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A - The window size of both machines is multiplied with a constant factor (here 1.5) - Congestion occurs 50 Question 4: MIAD (Multiplicative Increase Additive Decrease) No :( MIAD converges to a totally unfair allocation, favoring the Ô¨Çow with a greater rate at the beginning 2) Will MIAD converge to fair sharing in this case? What will happen? E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A 51 Question 4: MIAD (Multiplicative Increase Additive Decrease) In a real-life scenario, one would prefer AIMD. MIAD would lead to an unfair allocation where the whole bandwidth gets allocated to one machine 3) If you compare the result of AIMD against MIAD, which one would be better in a real life application? E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A E fÔ¨Åciency F airnes s Throughput Machine 1Throughput Machine 2 A 52 1) List three signals that warn about congestion in the network, and mention one advantage and one disadvantage of using each signal. Packet loss + Can be detected easily by using timers. - Feedback takes at least one RTT to arrive at sender. - Only considers binary feedback (i.e., packet either arrives at sender or not). - Loss can also be caused by other factors (i.e. cosmic radiation in a satellite link), careful parametrization is needed. Packet latency + Can be detected easily + Relatively quick feedback on a continuous signal. - Many factors in the network can affect latency, not only congestion, careful parametrization is needed. Question 5: Congestion signals (Exam question FS16 Q9a) 53 1) List three signals that warn about congestion in the network, and mention one advantage and one disadvantage of using each signal. In-network marketing (i.e. ECN ‚Äì Explicit Congestion NotiÔ¨Åcation) Indicate congestion through setting a bit in packet. + Early signal of congestion. - Requires support in the network by i.e. the routers/switches. Question 5: Congestion signals (Exam question FS16 Q9a) 54 1) Name Ô¨Åve undesirable effects the network can have on packets and/or a stream of packets when attempting to deliver them to the destination. Packets can get lost, corrupted, reordered, delayed, or duplicated 2) What are the four goals of reliable transfer? Describe them shortly. Correctness Ensure data is delivered, in order, and untouched Timeliness Minimize time until data is transferred EfÔ¨Åciency Optimal use of bandwidth Fairness Play well with concurrent communication Question 6: Reliable transport protocol 55 3) What mechanism is used to detect corrupted packets in TCP/UDP? Shortly explain. Checksums: Each packet contains a checksum of its contents in its header, the receiver can then calculate the checksum itself and compare it to the stored checksum. If they don‚Äôt match, the packet was corrupted. 4) You already know that packets can get duplicated by the network i.e., multiple identical packets can arrive at the receiver. How would a reliable transport protocol detect duplicated packets? Sequence numbers: Each packet (or byte) is numbered. A receiver will only pass packets (or speciÔ¨Åc bytes within them) to the application, if it hasn‚Äôt already accepted the corresponding sequence numbers before. If the sequence numbers were already accepted, the packet will be dropped. Question 6: Reliable transport protocol 56 1) In reliable transmission, what is the effect of setting a too short or too long timeout? Too short timeouts will lead to unnecessary transmissions ‚áí Network capacity is wasted. A timeout occurring could also make the system reduce the transmission rate. Too long timeouts will lead to slow transmission because it will take a long time before the sender discovers a packet has been dropped. The receiver will not accept and forward packets to the application layer during this time, as it forces an in-order stream of data. 2) RTT (Round Trip Time) is mainly used to decide what the re-transmission timeout should be set to. Which four network delays determine the RTT? Transmission, Propagation, Processing and Queuing Delay Question 7: Timeouts 57 3) Of these four network delays, what changes in the network can you do to reduce the RTT? Transmission delay Increase the link capacity Propagation delay If possible, use data replication to shorten the client-server distance. Improving routing (shorter paths) or physical transmission media (media that has a higher propagation speed) also helps. Processing delay Processing delays are typically negligible in comparison to other delays and there is little room for improvement here. Queuing delay Better load balancing (i.e. via routing), reduce queue size Question 7: Timeouts 58 4) When a timeout is triggered in the sender, can the sender be sure that the receiver has really not received the packet? If yes, how? It cannot be sure. Triggered timeouts are only an indicator, but not proof of packet loss. It could just as well be that the ACK got lost or that the ACK would arrive just after we have resent the packet. In these cases the sender will resend the packet even though it was already received, as seen above this is handled in the receiver with sequence numbers. Question 7: TimeoutsQuestion 8: Go-Back-N 59 For each of the following statements indicate if it is true or false. 1) Go-Back-N acknowledges only the last in-order packet it has received. 2) Go-Back-N senders maintain a timer for each packet sent out. 3) If a Go-Back-N receiver receives an out-of-order packet, it is possible to move the sliding receiver window along. You can Ô¨Ånd an interactive demo here.","libVersion":"0.5.0","langs":""}