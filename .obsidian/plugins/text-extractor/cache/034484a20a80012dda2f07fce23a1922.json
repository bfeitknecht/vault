{"path":"sem4/DMDB/VRL/extra/slides/DMDB-s01-relational-algebra.pdf","text":"Data Modeling and Databases Spring Semester 2025 Relational Model And Algebra Relational Model and Algebra Gustavo Alonso Institute of Computing Platforms Department of Computer Science ETH Zürich 1 From last lecture = Lessons learned • The history of the relational model contains several important lessons: • How you store, place in memory, and query data are three different things • If they are tied together, things become difficult (physical data independence) • Writing programs for extracting knowledge out of data is not efficient • Writing queries that involve knowing how the data is organized is not efficient • The relational model won because it provided physical (and logical) data independence, and adopted relational algebra to reason about how data is manipulated and combined. Relational Model and Algebra 2 This and Next Lecture • What is relational model? How to model your data with relational model? • Two ways of manipulate data in relational model: • Relational algebra: Set operations, imperative • Relational calculus: Logic, declarative • Know the difference between being imperative and being declarative Relational Model and Algebra 3 What is Data? • It is not really a sequence of 0s and 1s -- It is the knowledge we have about our world. • How can we represent our knowledge? • How can we infer new knowledge from old ones? • Different answers to the above two questions will lead to different database management system. • This course, we focus on a specific combinations – we represent knowledge as a collection of facts, and doing inference using mathematical logic. • That gives us the Relational Model. Relational Model and Algebra 4 Relational Model Relational Model and Algebra 5 Relational Model - Schema • Relational Model - Schema • Database Schema: A Set of Relation Schemas • Relation Schema: • Name • A Set of Attributes/Fields/Columns • Field/Attribute: • Name • Domain/Type (e.g., Integer, String) Column Attributes, entities Row One instance of relationships between entities/attributes Table Students(sid: string, name: string, login: string, age: int, gpa: float) sid name login age gpa Students Note that “Schema” does not include the “Content”, it only contains the “Header” Relational Model and Algebra 6 Relation = Table Relational Model and Algebra 7 Relational Model - Instance • Relational Model - Instance • For Relation 𝑅(𝑓1: 𝐷1, … , 𝑓𝑛: 𝐷𝑛), an instance 𝐼𝑅 is a Set of tuples: 𝐼𝑅 ⊆ 𝐷1 × ⋯ × 𝐷𝑛 • Intuitively, an instance is the “Content” of a relation if you think about it as a “Table” sid name login age gpa 0 A D 21 3.5 1 B E 32 4.2 2 C F 18 5.3 StudentsStudents(sid: string, name: string, login: string, age: int, gpa: float) Schema Instance Note that a Relation Instance is a Set – (1) we cannot have duplicated tuples in a relation; (2) the order does not matter Engines are different (allow duplicate tuples but, in this course, we by default assume the Set Semantics for Relational Model) Relational Model and Algebra 8 Relational Model – Primary Keys • Schema for Relation R • Candidate Key: minimal set of fields that identify each tuple uniquely • Primary Key: one candidate key; marked in Schema by underlining. • Every Relation must have a key • Always possible because a Relation is a set sid name login age gpa 0 A D 21 3.5 1 A E 32 4.2 2 C F 18 5.3 Students(sid: string, name: string, login: string, age: int, gpa: float) Schema Valid Instance Why? Cannot uniquely identify tuple sid name login age gpa 0 A D 21 3.5 0 A E 32 4.2 2 C F 18 5.3 Invalid Instance ▪ Formally, given a relation 𝑅(𝑘: 𝐷𝑘, 𝑎: 𝐷𝑎, 𝑏: 𝐷𝑏) ▪ All valid instances: 𝐼 ⊆ 𝐷𝑘 × 𝐷𝑎 × 𝐷𝑏 ∧ ∀ 𝑘, 𝑎, 𝑏 , 𝑘′, 𝑎′, 𝑏′ ∈ 𝐼, 𝑘 = 𝑘′ ⇒ 𝑎, 𝑏 = (𝑎′, 𝑏′) ▪ This is just one way to constrain the set of “Valid Instances”, we will see other ways of doing it later in the course Relational Model and Algebra 9 An example of a Relational Model Relational Model and Algebra 10 Relational Model • A database stores information for a University. • Professor – has PersNr, Name, Level, Office • Student – has PersNr, Name, current semester • Lecture – has LectureID, Title, # Credit Points, who teaches the lecture • Some lectures are pre-requisites to other lectures • Students attend lectures • Some students take tests in lectures and get a Grade • How to store all this information in the relational model? • Q1: How to design the schema? • Q2: What are valid instances? • Note that the process of designing schemas will have a more principled (and intuitive) process in later lectures, this is just to illustrate the relational model. Relational Model and Algebra 11 Relational Model • A database stores information for University. Professor – has PersNr, Name, Level, Room Relation: Professor Schema: • PersNr: Int • Name: String • Level: String • Room: Int => Professor(PersNr: Int, Name: String, Level: String, Room: Int) PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Instance: Set of (PersNr, Name, Level, Room) tuples PersNr Name Level Room 2125 John AP 226 2125 David FP 232 Violate Key Constraint Valid Instance Relational Model and Algebra 12 Relational Model Student – has PersNr, Name, current semester Relation: Student Schema: • PersNr: Int • Name: String • Semester: Int => Student(PersNr: Int, Name: String, Semester: Int) PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Instance: Set of (PersNr, Name, Semester) tuples PersNr Name Semester 24002 Peter 8 24002 Peter 8 Invalid, Relations are SETs Valid Instance Relational Model and Algebra 13 LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 LectureID Title CP ProfNr 5001 Databases 4 2125 5002 Databases 4 2125 Relational Model • Lecture – has LectureID, Title, # Credit Points, who teaches the lecture Relation: Lecture Schema: • LectureID: Int • Title: String • CP: Int • ProfNr: Int (Prof’s PersNr) => Lecture(LectureID: Int, Title: String, CP: Int, PersNr: Int) Instance: Set of (LectureID, Title, CP, PersNr) tuples Valid Instance (Though weird in real-world) Valid Instance Relational Model and Algebra 14 Prerequisite Follow-up 5001 5041 5001 5043 Relational Model • Some lectures are pre-requisites to other lectures Relation: Requires Schema: • Prerequisite: Int. (key?) • Follow-up: Int. (key?) What is the key? Option 1. (Prerequisite, Follow-up) Option 2. (Prerequisite, Follow-up) Option 3. (Prerequisite, Follow-up) Prerequisite Follow-up 5001 5041 5002 5041 Option 1: Invalid Option 2: Valid Option 3: Valid Option 1: Valid Option 2: Invalid Option 3: Valid Option 3 seems to be a more natural choice for the data we want to store. We have Requires(Prerequisite, Follow-up)Relational Model and Algebra 15 PersNr LectureID 26120 5001 27550 5001 Relational Model • Students attend lectures Relation: Attends Schema: • PersNr: Int. (key?) • LectureID: Int. (key?) What is key? Option 1. (PersNr, LectureID) Option 2. (PersNr, LectureID) Option 3. (PersNr, LectureID) PersNr LectureID 26120 5001 26120 5041 Option 1: Valid Option 2: Invalid Option 3: Valid Option 1: Invalid Option 2: Valid Option 3: Valid Option 3 seems to be a more natural choice for the data we want to store. We have Attends(PersNr, LectureID)Relational Model and Algebra 16 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 Relational Model • Some students take tests in lectures and get a Grade Relation: Tests Schema: • PersNr: Int. • LectureID: Int. • Grade: Float What is key? Tests(PersNr, LectureID, Grade) What is the underlying assumption we have on the data in this design? A student only takes the exam of a lecture once. Why? Otherwise, you will have (p, l, g1), (p, l, g2) in DB, violating the key constraints. What if this assumption is not true? Change the schemaRelational Model and Algebra 17 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 Relational Model • One Possible Design of the Schema: • Professor(PersNr: Int, Name: String, Level: String, Room: Int) • Student(PersNr: Int, Name: String, Semester: Int) • Lecture(LectureID: Int, Title: String, CP: Int, PersNr: Int) • Requires(Prerequisite, Follow-up) • Attends(PersNr, LectureID) • Tests(PersNr, LectureID, Grade) One Possible Instance: Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP PersNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Relational Model and Algebra 18 Relational Model -- Schemas • There are multiple ways to design a Schema • Different designs might have different pros and cons • We will see how to design a good schema later in the course. Relational Model and Algebra 19 TPC-C Real schemas are quite complex … Relational Model and Algebra 20 Lesson learned • Is it now clear why it is not a good idea to have to write code for every query and every possible way to organize the data? Relational Model and Algebra 21 Relational Algebra Relational Model and Algebra 22 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 One Instance: Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Query Q Query is a function that takes as input a DB instance, outputs a new relation. A Query Language consists of a set of functions that you can express in that language. Relational Model and Algebra 23 Relational Algebra: Operators • Relation Instances are Sets, let’s query it using Set Operations. • Basic Operators: • Union: ∪ • Difference: − • Selection: 𝜎 • Projection: Π • Cartesian Product: × • Renaming: 𝜌 • Join: ⋈ • … Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 Purchase pid cid store 0 0 A 0 1 B 1 1 C Customer cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Relational Model and Algebra 24 Relational Algebra: Union Product1 pid name price 0 iPhone 110 ▪ Union: ∪ Product2 pid name price 1 Blackberry 120 2 Android 130 ▪ Difference: − 𝑃𝑟𝑜𝑑𝑢𝑐𝑡1 ∪ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 = pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 𝑥 ∈ 𝑅1 ∪ 𝑅2 ⟺ 𝑥 ∈ 𝑅1 ∨ 𝑥 ∈ 𝑅2 Product3 pid name price 1 Blackberry 120 0 iPhone 110 𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 − 𝑃𝑟𝑜𝑑𝑢𝑐𝑡3 = pid name price 2 Android 130 𝑥 ∈ 𝑅1 − 𝑅2 ⟺ 𝑥 ∈ 𝑅1 ∧ ¬(𝑥 ∈ 𝑅2) Not valid if the schema of the two relations does not match • R(pid, name) ∪ S(pid, title) : CANNOT UNION • R(pid, name) ∪ S(name, pid): OK – Attributes are SETs (order doesn’t matter) Relational Model and Algebra 25 Relational Algebra: Intersection • Intersection: ∩ 𝑅1 ∩ 𝑅2 = 𝑅1 − (𝑅1 − 𝑅2) Product1 pid name price 0 iPhone 110 Product2 pid name price 1 Blackberry 120 2 Android 130 𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 ∩ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡3 = pid name price 1 Blackberry 120 Product3 pid name price 1 Blackberry 120 0 iPhone 110 Relational Model and Algebra 26 Relational Algebra: Selection • Selection: 𝜎 • Return tuples which satisfy a given condition 𝑥 ∈ 𝜎𝑐 𝑅 ⟺ 𝑥 ∈ 𝑅 ∧ 𝑐 𝑥 = 𝑇𝑟𝑢𝑒 Product1 pid name price 0 iPhone 110 Product2 pid name price 1 Blackberry 120 2 Android 130 𝜎𝑝𝑟𝑖𝑐𝑒>125𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 = pid name price 2 Android 130 Product3 pid name price 1 Blackberry 120 0 iPhone 110 𝜎𝑛𝑎𝑚𝑒=“𝐵𝑙𝑎𝑐𝑘𝑏𝑒𝑟𝑟𝑦”𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 = pid name price 1 Blackberry 120 𝜎𝑛𝑎𝑚𝑒=“𝐵𝑙𝑎𝑐𝑘𝑏𝑒𝑟𝑟𝑦”∧𝑝𝑟𝑖𝑐𝑒>125𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 = pid name price Relational Model and Algebra 27 Relational Algebra: Projection • Projection: Π𝐴1,…,𝐴𝑛(𝑅) • Only keep a subset of columns Product1 pid name price 0 iPhone 110 Product2 pid name price 1 Blackberry 120 2 Android 130 Π𝑝𝑖𝑑,𝑛𝑎𝑚𝑒𝑃𝑟𝑜𝑑𝑢𝑐𝑡2 = pid name 2 Android 1 Blackberry Product3 pid name price 1 Blackberry 120 0 iPhone 110 Recall that Relation is a SET. So there is no ordering between pid=1 and pid=2! Relational Model and Algebra 28 Relational Algebra: cartesian product • Cartesian Product: × • Mainly used to express joins 𝑥, 𝑦 ∈ 𝑅1 × 𝑅2 ⟺ 𝑥 ∈ 𝑅1 ∧ 𝑦 ∈ 𝑅2 𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 × 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒 = pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer cid1 name city pid cid2 store 0 John Zurich 0 0 A 1 Anna Munich 0 0 A 2 Kevin Geneva 0 0 A 0 John Zurich 0 1 B 1 Anna Munich 0 1 B 2 Kevin Geneva 0 1 BWhat’s the key of the output relation? (cid1, pid, cid2) – Why? Relational Model and Algebra 29 Relational Algebra: renaming • Renaming: 𝜌𝐵1,…,𝐵𝑛(𝑅) • Change the name of the attributes of 𝑅 to 𝐵1, … , 𝐵𝑛 𝜌𝑎,𝑏,𝑐𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒 = pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer a b c 0 0 A 0 1 B Only the names of the attributes changed! E.g., Can be used such that when you do Cartesian Product the name of the attributes don’t repreat. Relational Model and Algebra 30 Relational Algebra: Natural join (inner) • Natural Join: ⋈ 𝑅1(𝐴, 𝐵) ⋈ 𝑅2 (𝐵, 𝐶) = Π𝐴,𝐵,𝐶(𝜎𝑅1.𝐵=𝑅2.𝐵 𝑅1 × 𝑅2 ) • Step 1 Selection – check equality on all common attributes • Step 2 Projection – eliminate duplicated common attributes 𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 ⋈ 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒 = pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer cid name city pid store 0 John Zurich 0 A 1 Anna Munich 0 B Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 (𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 ⋈ 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒) ⋈ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡 = cid name city pid store name price 0 John Zurich 0 A iPhone 110 1 Anna Munich 0 B iPhone 110 Relational Model and Algebra 31 Relational Algebra: Natural join • Natural Join: ⋈ 𝑅1(𝐴, 𝐵) ⋈ 𝑅2 (𝐵, 𝐶) = Π𝐴,𝐵,𝐶(𝜎𝑅1.𝐵=𝑅2.𝐵 𝑅1 × 𝑅2 ) • Corner Cases: • 𝑅 𝐴, 𝐵, 𝐶 , 𝑆(𝐷, 𝐸) [No shared attributes] 𝑅 ⋈ 𝑆 = 𝑅 × 𝑆 • 𝑅 𝐴, 𝐵, 𝐶 , 𝑆 𝐴, 𝐵, 𝐶 [Share all attributes] 𝑅 ⋈ 𝑆 = 𝑅 ∩ 𝑆 pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 Relational Model and Algebra 32 Relational Algebra: join variations • Theta Join: ⋈𝜃: 𝑅1 ⋈𝜃 𝑅2 = 𝜎𝜃 𝑅1 × 𝑅2 • Equi-Join: 𝑅1 ⋈𝐴=𝐵 𝑅2 = 𝜎𝐴=𝐵 𝑅1 × 𝑅2 • There are more… • Outer-join • Left join • Right join • We will talk about them later! (We are missing some concepts to talk about them) pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 Relational Model and Algebra 33 pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 Relational Algebra: writing queries • Relational Algebra expression • Q: Cutomers who bought an iPhone • Π𝑐𝑖𝑑𝜎𝑃𝑟𝑜𝑑𝑢𝑐𝑡.𝑛𝑎𝑚𝑒=𝑖𝑃ℎ𝑜𝑛𝑒((𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 ⋈ 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒) ⋈ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡) ⋈ 𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒 ⋈ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡 Π The output of each intermediate node is a relation. Relational Model and Algebra 34 Relational Algebra: relational division • Q: Find students who take all lectures. • We can already express this query using what we already know. • 𝐴𝑙𝑙𝑆𝑡𝑢𝑑𝑒𝑛𝑡 = Π𝑠𝑖𝑑𝐴𝑡𝑡𝑒𝑛𝑑𝑠 • 𝑀𝑖𝑠𝑠𝑖𝑛𝑔𝐿𝑒𝑐𝑡𝑢𝑟𝑒 = 𝐴𝑙𝑙𝑆𝑡𝑢𝑑𝑒𝑛𝑡 × 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 − 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 • 𝑆𝑡𝑢𝑑𝑒𝑛𝑡𝑀𝑖𝑠𝑠𝐿𝑒𝑐𝑡𝑢𝑟𝑒𝑠 = Π𝑠𝑖𝑑𝑀𝑖𝑠𝑠𝑖𝑛𝑔𝐿𝑒𝑐𝑡𝑢𝑟𝑒 • 𝑄 = 𝐴𝑙𝑙𝑆𝑡𝑢𝑑𝑒𝑛𝑡 − 𝑆𝑡𝑢𝑑𝑒𝑛𝑡𝑀𝑖𝑠𝑠𝐿𝑒𝑐𝑡𝑢𝑟𝑒𝑠 • There is a shorter version of this: 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 ÷ 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 • We call this operator Relational Divison sid lecture 0 A 0 B 0 C 1 B 2 A 2 C lecture A B C Attends Lecture Relational Model and Algebra 35 Relational Algebra – Relational division • We call this operator Relational Divison: 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 ÷ 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 • What is divison? Inverse of Multiplication. • 𝑅 ÷ 𝑆 = 𝑇: 𝑇 is the largest relation such that 𝑆 × 𝑇 ⊆ 𝑅. • 𝑅 ÷ 𝑆 = Π𝑅−𝑆𝑅 − Π𝑅−𝑆 (Π𝑅−𝑆𝑅 × 𝑆 − 𝑅) sid lecture 0 A 0 B 0 C 1 B 2 A 2 C lecture A B C Attends Lecture Attends ÷ Lecture = all sid in “Attends” who have attended all lectures in “Lecture” Relational Model and Algebra 36 Relational Algebra: semi-join • Semi-Join: 𝑅1 ⋉𝐶 𝑅2 (returns columns only from one side if there is a match in the join) • 𝑅1 𝐴1, … , 𝐴𝑛 , 𝑅2(𝐵1, … , 𝐵𝑚) • 𝑅1 ⋉𝐶 𝑅2 = Π𝐴1,…,𝐴𝑛(𝑅1 ⋈𝐶 𝑅2) • One useful trick called “semi-join reduction”, especially useful in distributed DB. • Join 𝑅(𝐴, 𝐵) with 𝑆 𝐵, 𝐶 on 𝐵; R and S are on different machines. • 𝑅 ⋈ 𝑆 = (𝑅 ⋉ Π𝐵𝑆) ⋈ 𝑆 pid cid store 0 0 A 0 1 B cid name city 0 John Zurich 1 Anna Munich 2 Kevin Geneva Purchase Customer Product pid name price 0 iPhone 110 1 Blackberry 120 2 Android 130 Send what matters in S to R Send what matters in R to S Save communications between different machines, compared with sending the whole S to R or sending the whole R to S Relational Model and Algebra 37 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 DB Instance Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Q. All Students who take Databases Π𝑃𝑒𝑟𝑠𝑁𝑟𝜎𝑇𝑖𝑡𝑙𝑒=“𝐷𝑎𝑡𝑎𝑏𝑎𝑠𝑒”( ) 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 ⋈ 𝐿𝑒𝑐𝑡𝑢𝑟𝑒) 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 ⋈ 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 PersNr Name Sem. LectureID 26120 Frey 2 5001 26120 Frey 2 5041 PersN r Name Se m. Lectur eID Title C P Prof Nr 26120 Frey 2 5001 Databases 4 2125 26120 Frey 2 5041 Networks 4 2126 PersNr 26120 Relational Model and Algebra 38 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 DB Instance Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Q. Profs who don’t teach. Π𝑃𝑒𝑟𝑠𝑁𝑟 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 ⋈𝑃𝑒𝑟𝑠𝑁𝑟=𝑃𝑟𝑜𝑓𝑁𝑟 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 PersNr PersNr 2125 2126 2127 Π𝑃𝑒𝑟𝑠𝑁𝑟𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 − Π𝑃𝑒𝑟𝑠𝑁𝑟 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 ⋈𝑃𝑒𝑟𝑠𝑁𝑟=𝑃𝑟𝑜𝑓𝑁𝑟 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 First get all profs who teach: Relational Model and Algebra 39 PersNr LectureID Grade 26120 5001 3.0 27550 5001 5.5 26120 5041 5.75 DB Instance Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Π𝑃𝑒𝑟𝑠𝑁𝑟,𝐹𝑜𝑙𝑙𝑜𝑤−𝑢𝑝(൫ ൯ 𝜎𝐺𝑟𝑎𝑑𝑒<4.0( ) 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝑇𝑒𝑠𝑡𝑠 ⋈𝐿𝑒𝑐𝑡𝑢𝑟𝑒𝐼𝐷=𝑃𝑟𝑒𝑟𝑒𝑞𝑢𝑖𝑠𝑖𝑡𝑒 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠) 𝜎𝐺𝑟𝑎𝑑𝑒<4.0 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝑇𝑒𝑠𝑡𝑠 PersNr Name Sem. LectureID Grade 26120 Frey 2 5001 3.0 ൫ ൯ 𝜎𝐺𝑟𝑎𝑑𝑒<4.0( ) 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝑇𝑒𝑠𝑡𝑠 ⋈𝐿𝑒𝑐𝑡𝑢𝑟𝑒𝐼𝐷=𝑃𝑟𝑒𝑟𝑒𝑞𝑢𝑖𝑠𝑖𝑡𝑒 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠) PersN r Name Se m. LectureID Grade Follo w-up 26120 Frey 2 5001 3.0 5041 26120 Frey 2 5001 3.0 5043 PersNr Follow-up 26120 5041 26120 5043 Relational Model and Algebra 40 ▪ Not Declarative ➢ There are different ways to implement the same query Query Language 1: Relational Algebra Q. All Students who take Database. Π𝑃𝑒𝑟𝑠𝑁𝑟𝜎𝑇𝑖𝑡𝑙𝑒=“𝐷𝑎𝑡𝑎𝑏𝑎𝑠𝑒” 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 ⋈ 𝐴𝑡𝑡𝑒𝑛𝑑𝑠 ⋈ 𝐿𝑒𝑐𝑡𝑢𝑟𝑒) PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Π𝑃𝑒𝑟𝑠𝑁𝑟𝜎𝑇𝑖𝑡𝑙𝑒=“𝐷𝑎𝑡𝑎𝑏𝑎𝑠𝑒” 𝑆𝑡𝑢𝑑𝑒𝑛𝑡 × 𝐿𝑒𝑐𝑡𝑢𝑟𝑒 ⋈ 𝐴𝑡𝑡𝑒𝑛𝑑𝑠) Could be very large! ▪ In real-world DB systems, user does NOT write Relational Algebra – We hope to have a query language in which the user does not need to worry about different ways of implementing the same thing – We want the system to figure it out by itself. Relational Model and Algebra 41 Lessons learned • Relational model defines an abstract representation for the data (attributes, tuples, tables) • Tables are sets of tuples • In principle, it does not assign any structure among the tables • Relational algebra provides a mathematical basis for the operations performed • Establishes a basic query language with precise meaning • Enables optimization by reasoning about equivalence of queries Relational Model and Algebra 42","libVersion":"0.3.2","langs":""}