{"path":"sem1/A&D/UE/e/AuD-u08-e.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 13 November 2023 Johannes Lengler, David Steurer Lucas Slot, Manuel Wiedmer, Hongjie Chen, Ding Jingqiu Algorithms & Data Structures Exercise sheet 8 HS 23 The solutions for this sheet are submitted at the beginning of the exercise class on 20 November 2023. Exercises that are marked by ∗ are challenge exercises. They do not count towards bonus points. You can use results from previous parts without solving those parts. We first recall some definitions from the lecture and introduce some new ones. Definition 1. Let G = (V, E) be a graph. • A sequence of vertices (v0, v1, . . . , vk) (with vi ∈ V for all i) is a walk (german “Weg”) if {vi, vi+1} is an edge for each 0 ≤ i ≤ k − 1. We say that v0 and vk are the endpoints (german “Startknoten” and “Endknoten”) of the walk. • A sequence of vertices (v0, v1, . . . , vk) is a closed walk (german “Zyklus”) if it is a walk, k ≥ 2 and v0 = vk. • A sequence of vertices (v0, v1, . . . , vk) is a path (german “Pfad”) if it is a walk and all vertices are distinct (i.e., vi ̸= vj for 0 ≤ i < j ≤ k). • A sequence of vertices (v0, v1, . . . , vk) is a cycle (german “Kreis”) if it is a closed walk, k ≥ 3 and all vertices (except v0 and vk) are distinct. • A Eulerian walk (german “Eulerweg”) is a walk that contains every edge exactly once. • A Hamiltonian path (german “Hamiltonweg”) is a path that contains every vertex. • A Hamiltonian cycle (german “Hamiltonkreis”) is a cycle that contains every vertex. • A graph G is connected (german “zusammenh¨angend”) if for every two vertices u, v ∈ V there exists a path with endpoints u and v.1 • A graph G is a tree (german “Baum”) if it is connected and has no cycles. Exercise 8.1 Introduction to graphs (1 point). In this exercise, we want to prove the following statement: Among any six people, there are either three that all know each other or three that all do not know each other (or both). We assume that this relation is symmetric, so if person A knows person B, then also B knows A. We model the problem as a graph. We define G = (V, E) to be a graph on 6 vertices, where the vertices correspond to the six people and two people are connected by an edge if they know each other. 1We will see in exercise 8.5 that this definition is equivalent to the one given in the lecture (which was that a graph G is connected if for every two vertices u, v ∈ V there exists a walk with endpoints u and v) (a) Prove the above statement, i.e. that in every possible graph on 6 vertices, there are three vertices that are all pairwise adjacent or there are three vertices that are all pairwise not adjacent. Hint: Start with one vertex and notice that this vertex is either adjacent to (at least) three vertices or not adjacent to (at least) three vertices. (b) Is the statement also true for five people? In other words, does the following hold: For any graph G = (V, E) with 5 vertices, there are either three vertices that are all pairwise adjacent or there are three vertices that are all pairwise not adjacent (or both). Provide a proof or a counterexample. Exercise 8.2 Domino. (a) A domino set consists of all possible (6 2 ) + 6 = 21 different tiles of the form [x|y], where x and y are numbers from {1, 2, 3, 4, 5, 6}. The tiles are symmetric, so [x|y] and [y|x] is the same tile and appears only once. Show that it is impossible to form a line of all 21 tiles such that the adjacent numbers of any consecutive tiles coincide. (b) What happens if we replace 6 by an arbitrary n ≥ 2? For which n is it possible to line up all (n 2) + n different tiles along a line? Exercise 8.3 Star search, reloaded. A star in an undirected graph G = (V, E) is a vertex that is adjacent to all other vertices. More formally, v ∈ V is a star if and only if {{v, w} | w ∈ V \\ {v}} ⊆ E. In this exercise, we want to find a star in a graph G by walking through it. Initially, we are located at some vertex v0 ∈ V . Each vertex has an associated flag (a Boolean) that is initially set to False. We have access to the following constant-time operations: • countNeighbors() returns the number of neighbors of the current vertex • moveTo(i) moves us to the ith neighbor of the current vertex, where i ∈ {1..countNeighbors()} • setFlag() sets the flag of the current vertex to True • isSet() returns the value of the flag of the current vertex • undo() undoes the latest action performed (the movement or the setting of last flag) Assume that G has exactly one star and |G| = n. Give the pseudocode of an algorithm that finds the star, i.e., your algorithm should always terminate in a configuration where the current vertex is a star in G. Your algorithm must have complexity O(|V | + |E|), and must not introduce any additional datastructures (no sets, no lists etc.). Show that your algorithm is correct and prove its complexity. The behavior of your algorithm on graphs that do not contain a star or contain several stars can be disregarded. Exercise 8.4 Introduction to Trees. 2 In this exercise the goal is to prove a few basic properties of trees. (a) A leaf is a vertex with degree 1. Prove that in every tree G with at least two vertices there exists a leaf. Hint: Consider the longest path in G. Prove that its endpoint is a leaf. (b) Prove that every tree with n vertices has exactly n − 1 edges. Hint: Prove the statement by using induction on n. In the induction step, use part (a) to find a leaf. Disconnect the leaf from the tree and argue that the remaining subgraph is also a tree. Apply the induction hypothesis and conclude. (c) Prove that a graph with n vertices is a tree if and only if it has n − 1 edges and is connected. Hint: One direction is immediate by part (b). For the other direction (every connected graph with n−1 edges is a tree), use induction on n. First, prove there always exists a leaf by considering the average degree. Then, disconnect the leaf from the graph and argue that the remaining graph is still connected and has exactly one edge less. Apply the induction hypothesis and conclude. (d) Write the pseudocode of an algorithm that is given a graph G as input and checks whether G is a tree. As input, you can assume that the algorithm has access to the number of vertices n, the number of edges m, and to the edges {a1, b1}, {a2, b2}, . . . , {am, bm} (i.e., the algorithm has access to 2m integers a1, . . . , am, b1, . . . , bm, where each edge of G is given by its endpoints ai and bi). You can assume that the graph is valid (specifically, 1 ≤ ai, bi ≤ n and ai ̸= bi). The algorithm outputs “YES” or “NO”, corresponding to whether G is a tree or not. Your algorithm must always complete in time polynomial in n (e.g., even O(n10m10) suffices). You do not have to show the correctness of your algorithm or what the running time of your algorithm is. Hint: Use part (c). There exists a (relatively) simple O(n + m) solution. However, the official solution is O(n · m) for brevity and uses recursion to check if G is connected. Example 1: n = 6 m = 5 a1, b1 = 1, 3 a2, b2 = 6, 1 a3, b3 = 3, 5 a4, b4 = 2, 3 a5, b5 = 4, 1 3 1 6 4 5 2 Output: YES Example 2: n = 5 m = 4 a1, b1 = 1, 3 a2, b2 = 4, 5 a3, b3 = 5, 2 a4, b4 = 2, 4 4 5 2 3 1 Output: NO Exercise 8.5 Short questions about graphs (2 points). In the following, let G = (V, E) be a graph, n = |V | and m = |E|. 3 (a) Let v ̸= w ∈ V . Prove that if there is a walk with endpoints v and w, then there is a path with endpoints v and w. For each of the following statements, decide whether the statement is true or false. If the statement is true, provide a proof; if it is false, provide a counterexample. (b) Every graph with m ≥ n is connected. (c) If G contains a Hamiltonian path, then G contains a Eulerian walk. (d) If every vertex of a non-empty graph G has degree at least 2, then G contains a cycle. (e) Suppose in a graph G every pair of vertices v, w has a common neighbour (i.e., for all distinct vertices v, w, there is a vertex x such that {v, x} and {w, x} are both edges). Then there exists a vertex p in G which is a neighbour of every other vertex in G (i.e., p has degree n − 1). (f) Let G be a connected graph with at least 3 vertices. Suppose there exists a vertex vcut in G so that after deleting vcut, G is no longer connected. Then G does not have a Hamiltonian cycle. (Deleting a vertex v means that we remove v and any edge containing v from the graph). 4","libVersion":"0.5.0","langs":""}