{"path":"sem4/DMDB/VRL/extra/slides/DMDB-s03-entity-relationship-model.pdf","text":"Data Modeling and Databases Spring Semester 2025 Administrative Introduction Entity-Relationship Model Gustavo Alonso Institute of Computing Platforms Department of Computer Science ETH Zürich 1 Lectures so far = lessons learned • Relational Model provides physical data independence • Relational Algebra provides a way to reason about the operations over relations using an imperative language • Relational Calculus provides a way to reason about the operations over relations using a declarative language • With constraints, relational algebra (it gives us the operators) and relational calculus (it gives us the language) are equivalent • The next step is to learn how to build a schema of relations that is suitable to the application we want to develop Entity-Relationship Model 2 From data to organized information Entity-Relationship Model 3 Implementing a Real World Schema Entity-Relationship Model 4 Example: Application Entity-Relationship Model 5 Conceptual Modeling Entity-Relationship Model 6 Logical Modeling Entity-Relationship Model 7 Physical Modeling Entity-Relationship Model 8 Entity Relationship Model Entity-Relationship Model 9 Entity-Relationship Model • Entity-Relationship Model models an application in the following three element types: • Entity sets • A set of similar entities • Entity: An object in the real world that is distinguishable from other objects. • \"Similar\": Entities in the same Entity Set share the same attributes. • E.g., Professor is an Entity Set. “Prof A” is an entity. • If you are familiar with object-oriented programming: • (Entity :: EntitySet ~ Object :: Class) • (But ER-model is a data model that does not contain associated methods/functions) • Attributes: E.g., ID/name of a professor • Relationships • Relationships are connections among two or more entity sets. • E.g., Relationship between Professor & Lecture; Student & Lecture. • ER-Diagram is a graphical way of representing entities and the relationships among them. Entity-Relationship Model 10 ER-Diagram: Entity Set and Attributes Entity Set Attribute Attribute Attribute Person Name Passport # National ID Entity-Relationship Model 11 ER-Diagram: Relationships Entity Set Entity SetRelationship Person Name Passport # National ID Lecture ID Takes Teach Entity-Relationship Model 12 ER-Diagram: Keys • Not all attributes are the same. • Key: a minimal set of attributes whose values uniquely identify (i.e., at least one, and no more than one) an entity in the set • Set – multiple attributes together could form a key. • There might be multiple keys, e.g., {National ID}, {Passport #} • All are called Candidate key • Only one is called Primary key. • Underline it • Each entity set must have a primary key. Person National ity Passport # National ID Unique Identifier Unique Identifier Name Entity-Relationship Model 13 ER-Diagram: Keys • Is this example OK? • Problem 1: Passport # contains nationality info therefore {Nationality, Passport #} is not the minimal set of attributes forming unique identifier. Person Nationality Passport # National ID Name Entity-Relationship Model 14 ER-Diagram: Keys • Dual Citizenship? • If we set “NationalID” as the primary key, this DB might have problems in storing all data (where should we put all National IDs of a single person?) • Again, a “model” is a reflection of the assumptions you have on your application. • It does not necessarily reflect all the aspects of the real-world. • It only reflect the parts that you care about. • If in your application all Person comes from a single country, this is a good model. • Otherwise, this might not be a good model for this application. Person National ity Passport # National ID Name Entity-Relationship Model 15 ER-Diagram: Role • Each Entity Set can have a Role when it participates in a Relationship. • E.g., how to model parent_of? • One “Person” has the Role as “Child” • One “Person” has the Role as “Parent” Person National ID Name Parent_ Of Child Parent Entity-Relationship Model 16 ER-Diagram: Weak Entity • Some entity’s existence relies on other entities. • E.g., both building CAB and HG have room with # F 1. • What would be the key of each room. • Room # cannot be the key as multiple rooms can have the same ID. • Weak entity: Room is a weak entity relying on Building • Key of Room is (Bld #, Room #) • What is the cardinality of the \"located\" relation? • This also implies that there cannot be a room without a building. Building located 1 Room N Bld # Room # Entity-Relationship Model 17 ER-Diagram: Generalization • How can we represent the information that \"professor & student are both \"person\"\"? • “is_a” relation. • This means that both Professor and Student share Person’s attribute (and primary key). Professor Person ID is_a Student Nationality Passport # Entity-Relationship Model 18 ER-Diagram: Example • Model “University” using the concepts that we learned so far: • Entity Set • Attribute • Relationship • Key • Role • What does this diagram tell us? Entity-Relationship Model 19 ER-Diagram: Example • What does this diagram NOT tell us? • Student A and B are friends? • Assistant – Lectures? • How many lectures each professor can teach? • ER-Diagram does not contain information that it does not model (no matter how natural it is in the real world). Entity-Relationship Model 20 Multiway Relationship • The following two diagrams model different things. Professor suggest Course Textbook Professor suggest Course Used_in Textbook Assume: “suggest” on the left means that a Prof teachs a Course and Suggest a Book for this course. Entity-Relationship Model 21 Multiway Relationship Professor suggest Course Textbook Professor suggest Course teaches Textbook Entity-Relationship Model 22 Multiway Relationship Professor suggest Course Textbook Professor Course Used in Textbook teaches Entity-Relationship Model 23 Multiway Relationship Professor suggest Course Textbook Professor suggests Course Used in Textbook teaches Entity-Relationship Model 24 Multiway Relationship Professor suggest Course Textbook Professor Course Textbook Recommend ation You can have (Prof, R), (Course, R), but no (Textbook, R) You always have (Prof, Course, Textbook) together Entity-Relationship Model 25 ER Model: formal semantics Entity-Relationship Model 26 ER-Diagram: Formal Semantics • ER-Diagram is a constraint language, defining the set of Valid DB instances. • All values we can take 𝒟 = ℬ ∪ Δ • Concrete Values (Int, String, Floating Point, etc.): ℬ • Abstract Values (Corresponding to an entity): Δ • Entity Set 𝐸 => 1-ary Predicate 𝐸 𝑥 . [E(x) = True if x is of Entity Type E] • Attribute 𝐴 => binary Predicate 𝐴 𝑥, 𝑦 . [A(x, y) = True if x has attribute y] • n-ary Relation 𝑅 => n-ary Predicate 𝑅 𝑥1, … , 𝑥𝑛 . [R(x1…xn) = True if (x1…xn) participate in R] Entity-Relationship Model 27 ER-Diagram: Formal Semantics • Each subgraph introduces a first-order logic sentence. • This tells us that a valid DB instance should satisfy: (x1, x2) participates in relation R implies that x1 belongs to entity type E1 and x2 belongs to entity type E2. • I.e., a Relationship is simply a type constraint. E1 R E2 ∀𝑥1 ∈ Δ, 𝑥2 ∈ Δ. 𝑅 𝑥1, 𝑥2 ⇒ 𝐸1 𝑥1 ∧ 𝐸2(𝑥2) Entity-Relationship Model 28 ER-Diagram: Formal Semantics • Each subgraph introduces a first-order logic sentence. • This tells us that a valid DB instance should satisfy: If x belongs to entity set E, then it can be uniquely associated with a concrete value y. • I.e., an Attribute specifies unique association between abstract values (entities) and concrete values. E A ∀𝑥, 𝐸 𝑥 ⇒ ∃ =1 𝑦. 𝐴 𝑥, 𝑦 ∧ 𝑦 ∈ ℬ. (∃ =1: uniquely exists) Entity-Relationship Model 29 ER-Diagram: Formal Semantics Professor suggest Course Textbook Name ∀𝑝, 𝑐, 𝑡. 𝑠𝑢𝑔𝑔𝑒𝑠𝑡 𝑝, 𝑐, 𝑡 ⇒ 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 𝑝 ∧ 𝐶𝑜𝑢𝑟𝑠𝑒 𝑐 ∧ 𝑇𝑒𝑥𝑡𝑏𝑜𝑜𝑘(𝑡) ∀𝑝. 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 𝑝 ⇒ ∃=1𝑛. 𝑁𝑎𝑚𝑒 𝑝, 𝑛 ∧ 𝑛 ∈ 𝑆𝑡𝑟𝑖𝑛𝑔 Entity-Relationship Model 30 ER-Diagram: Multiway Relationship can be Tricky Professor suggest Course Textbook Professor RP Course RC Textbook RT Recommend ation ∀𝑝, 𝑐, 𝑡. 𝑠𝑢𝑔𝑔𝑒𝑠𝑡 𝑝, 𝑐, 𝑡 ⇒ 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 𝑝 ∧ 𝐶𝑜𝑢𝑟𝑠𝑒 𝑐 ∧ 𝑇𝑒𝑥𝑡𝑏𝑜𝑜𝑘(𝑡) ∀𝑝, 𝑟. 𝑅𝑃 𝑝, 𝑟 ⇒ 𝑃𝑟𝑜𝑓𝑒𝑠𝑠𝑜𝑟 𝑝 ∧ 𝑅𝑒𝑐𝑜𝑚𝑚𝑒𝑛𝑑𝑎𝑡𝑖𝑜𝑛(𝑟) ∀𝑐, 𝑟. 𝑅𝐶 𝑐, 𝑟 ⇒ 𝐶𝑜𝑢𝑟𝑠𝑒 𝑐 ∧ 𝑅𝑒𝑐𝑜𝑚𝑚𝑒𝑛𝑑𝑎𝑡𝑖𝑜𝑛(𝑟) ∀𝑡, 𝑟. 𝑅𝑇 𝑡, 𝑟 ⇒ 𝑇𝑒𝑥𝑡𝑏𝑜𝑜𝑘 𝑡 ∧ 𝑅𝑒𝑐𝑜𝑚𝑚𝑒𝑛𝑑𝑎𝑡𝑖𝑜𝑛(𝑟) Entity-Relationship Model 31 ER-Diagram: Cardinality • How to represent the knowledge that one professor only teaches one course per semester? • 1-to-many relationship – A is in a 1-to-many relationship with B if (1) 1 A entity can have relationship with multiple B entities; and (2) 1 B entity can only have relationship with only one A entity. We use the 1/N notation in ER-diagram for 1-to-many relationship. Professor teaches Course Cannot have this link A B N 1 Entity-Relationship Model 32 TEACHES TEACHES ER-Diagram: Cardinality • How to represent the knowledge that one course can only be taught by one professor? • many-to-1 relationship – A is in a many- to-1 relationship with B if (1) 1 B entity can have relationship with multiple A entities; and (2) 1 A entity can only have relationship with only one B entity. Professor teaches Course Cannot have this link A B N1 Entity-Relationship Model 33 TEACHES TEACHES ER-Diagram: Cardinality • How to represent the knowledge that one course can only be taught by one professor while one prof can only teach one course? • 1-to-1 relationship – A is in a 1-to-1 relationship with B if (1) 1 A entity can only have relationship with 1 B entities; and (2) 1 B entity can only have relationship with only one A entity. Professor teaches Course A B 11 Entity-Relationship Model 34 TEACHES TEACHES ER-Diagram: Cardinality • Many-to-many relationship – A is in a many-to-many relationship with B if (1) 1 A entity can have relationships with multiple B entities; and (2) 1 B entity can have relationships with multiple A entities. Professor teaches Course A B NN Entity-Relationship Model TEACHES TEACHES TEACHES 35 ER-Diagram: Cardinality • For each “1” in the diagram, it is associated with one FOL constraint. • The ER-diagram on the right specifies two constraints, expressed in FOL: • ∀𝑥𝐴, 𝑥𝐵, 𝑥𝐶, 𝑥𝐷. 𝑅 𝑥𝐴, 𝑥𝐵, 𝑥𝐶, 𝑥𝐷 ⇒ ¬∃𝑥𝐴 ′ . 𝑅 𝑥𝐴 ′ , 𝑥𝐵, 𝑥𝐶, 𝑥𝐷 ∧ 𝑥𝐴 ′ ≠ 𝑥𝐴 • ∀𝑥𝐴, 𝑥𝐵, 𝑥𝐶, 𝑥𝐷. 𝑅 𝑥𝐴, 𝑥𝐵, 𝑥𝐶, 𝑥𝐷 ⇒ ¬∃𝑥𝐶 ′ . 𝑅 𝑥𝐴, 𝑥𝐵, 𝑥𝐶 ′ , 𝑥𝐷 ∧ 𝑥𝐶 ′ ≠ 𝑥𝐶 • A valid database instance need to satisfy the above two sentences. • Intuitively, this means that – If I know (A, B, D), this uniquely identifies C; If I know (B, C, D), this uniquely identifies A. A R B N1 C D N 1 Entity-Relationship Model 36 ER-Diagram: Cardinality • Are the following instances possible? Student R Professor 1N Topic 1 Student 1 Professor 1 Topic 1 Student 1 Professor 1 Topic 2 Student 1 Professor 1 Topic 1 Student 1 Professor 2 Topic 1 Student 1 Professor 1 Topic 1 Student 1 Professor 2 Topic 2 Student 1 Professor 1 Topic 1 Student 2 Professor 1 Topic 1 Entity-Relationship Model 37 ER-Diagram: Cardinality Entity-Relationship Model 38 From ER to Tables Entity-Relationship Model 39 ER-Diagram: Design Principles • A Good Design should Reflect Reality Things that can fly Belongs to Person Professor Teaches Course Entity-Relationship Model 40 ER-Diagram: Design Principles • Avoid Redundancy Entity-Relationship Model 41 ER-Diagram: Design Principles • Keep it simple Entity-Relationship Model 42 ER-Diagram: Design Principles • Rules of thumb: • Attribute vs. Entity • Entity if the concept has more than one relationship • Attribute if the concept has only one 1:1 relationship • Partitioning of ER Models • Most realistic models are larger than a page • Partition by domains (library, research, finances, …) • No good automatic graph partitioning tool • Good vs. Bad models • Do not model redundancy or tricks to improve performance • Less entities is better (the fewer, the better) Entity-Relationship Model 43 PersNr LectureID Grade 26120 5001 5.0 27550 5001 5.5 26120 5041 5.75 Tests PersNr Name Level Room 2125 John AP 226 2126 David FP 232 2127 Anna FP 310 Professor PersNr Name Semester 24002 Peter 8 25403 Mary 6 26120 Frey 2 Student LectureID Title CP ProfNr 5001 Databases 4 2125 5041 Networks 4 2126 5043 Theory 4 2127 Lecture Prerequisite Follow-up 5001 5041 5001 5043 Requires PersNr LectureID 26120 5001 27550 5001 26120 5041 Attends Query Q Π𝑝𝑖𝑑,𝑐𝑖𝑑((𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 ⋈ 𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒) ⋈ 𝑃𝑟𝑜𝑑𝑢𝑐𝑡) (𝑝𝑖𝑑, 𝑐𝑖𝑑) ∃𝑛, 𝑝 𝑃𝑟𝑜𝑑𝑢𝑐𝑡 𝑝𝑖𝑑, 𝑛, 𝑝 ∧ ∃𝑐𝑛, 𝑐 𝐶𝑢𝑠𝑡𝑜𝑚𝑒𝑟 𝑐𝑖𝑑, 𝑐𝑛, 𝑐 ∧ ∃𝑠 (𝑃𝑢𝑟𝑐ℎ𝑎𝑠𝑒(𝑝𝑖𝑑, 𝑐𝑖𝑑, 𝑠))} Relational Model Relational Algebra Relational Calculus Entity-Relationship Model 44 ER-Model to Relational Model: Principles • Entities become relations. • Relationships become relations. • Merge relations with the same key. • Generalization. • Weak Entities. Entity-Relationship Model 45 Entity Sets to Tables • entity sets become tables • attributes of entity set become attributes of the table ssn name age Employees Entity-Relationship Model 46 Relationships to Tables • When there is no cardinality constraints, relationship becomes a table, containing the keys of all participating entity sets. • Why is (ssn, did, address) a key? Set semantics in ER-model ssn address did since Works_in Entity-Relationship Model 47 Relationships to Tables • Role can be used to distinguish columns with the same entity type. supervisor_ssn subordinate_ssn Reports_to Entity-Relationship Model 48 Relationships to Tables • Cardinality can be tricky. • The following schema is problematic. • Why? Given address, ssn, we can determine did, as a result (ssn, did, address) is not a key. • (address, ssn) is a key. ssn did address since Works_in Entity-Relationship Model 49 Relationships to Tables • Consider the following two relations • It can be merged into • What’s the benefit/disadvantage of merging? ssn did since Works_in ssn name Employees ssn name did since Employees Entity-Relationship Model 50 Relationships to Tables • Consider the following two relations • Can we merge it into: • This is often bad. (redundancy of data (budget)) ssn did since Works_in did budget Department ssn did since budget Works_in_Dept Entity-Relationship Model 51 Relationships to Tables • Cardinality can be tricky. • What’s the key of R? • R(a, b, c):  • R(a, b, c):  • R(a, b, c):  • R(a, b, c): OK • R(a, b, c):  • R(a, b, c): OK • R(a, b, c):  • R(a, b, c):  Entity-Relationship Model 52 Weak Entities • We do not really need Located_in. bid Building rid bid Room Entity-Relationship Model 53 Generalization • Two ways to presentation generalization PersNr Name Employee PersNr Level Professor PersNr Area Assistant Entity-Relationship Model 54 Generalization • Two ways to presentation generalization PersNr Name Employee PersNr Level Name Professor PersNr Area Name Assistant Entity-Relationship Model 55 ER-Model to Relational Model: Example Entity-Relationship Model 56","libVersion":"0.3.2","langs":""}