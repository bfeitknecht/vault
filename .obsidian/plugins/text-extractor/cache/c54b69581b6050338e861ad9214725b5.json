{"path":"sem2/DDCA/UE/e/slides/DDCA-LAB07-asm.pdf","text":"Digital Design & Computer Arch. Lab 7 Supplement: Writing Assembly Code (Presentation by Aaron Zeller) Frank K. G√ºrkaynak Seyyedmohammad Sadrosadati ETH Zurich Spring 2024 [30. April 2024] Writing Assembly Code ‚óº In Lab 7, you will write MIPS Assembly code ‚óº You will use the MARS simulator to run your code ‚óº References ‚ùë H&H Chapter 6 ‚ùë Lectures 12 to 15 ‚óº https://safari.ethz.ch/ddca/doku.php?id=schedule ‚ùë MIPS Cheat Sheet ‚óº https://safari.ethz.ch/ddca/spring2024/lib/exe/fetch.php?media=mips_reference_data.pdf 2 Writing Assembly Code: Mars Simulator ‚óº You will use the MARS simulator to run your code ‚ùë Provided in the course website OR ‚ùë Can be downloaded from this website. ‚óº Once downloaded navigate to the Downloads folder in the Terminal / Console / Cmd and execute it. ‚ùë java -jar Mars4_5.jar (Version may vary) 3 Writing Assembly Code: Mars Simulator ‚óº Under Settings -> Memory Configuration make sure to select the \"Compact\" memory configuration. 4 Writing Assembly Code: Mars Simulator 5 create new file open file Save current file Save all open files Writing Assembly Code: Mars Simulator 6 ‚óº Before you can compile your MIPS assembly code you must first save the file. o The option to compile will not be available until you save your code. o The option to run your code will not be available until you compile your code. Writing Assembly Code: Mars Simulator 7 compile run run next instruction Change execution speed go back one instruction Writing Assembly Code: Mars Simulator 8 ‚óº You can change the speed of execution using the slider. ‚óº The speed ranges from to ‚óº Default speed is (all instructions are executed immediately) Writing Assembly Code: Mars Simulator 9 ‚óº In the memory view you want to see decimal or ASCII values. o Select the option to do so depending on the task, i.e. whether you want to see number or characters. unselect this for decimal Select this for ASCII An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 10 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 11 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 12 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 13 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 14 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly An Example of MIPS Assembly Code ‚óº Add all the even numbers from 0 to 10 ‚ùë 0 + 2 + 4 + 6 + 8 + 10 = 30 15 int sum = 0; for(int i = 0;i <= 10;i += 2) { sum += i; } # i=$s0; sum=$s1 addi $s0, $0, 0 addi $s1, $0, 0 addi $t0, $0, 12 loop: beq $s0, $t0, done add $s1, $s1, $s0 addi $s0, $s0, 2 j loop done: High-level code MIPS assembly ‚óº We first load the base address of the array into a register (e.g., $s0) using lui and ori Recall: Arrays (Code Example) 16 int array[5]; array[0] = array[0] * 2; array[1] = array[1] * 2; # array base address = $s0 # Initialize $s0 to 0x12348000 lui $s0, 0x1234 ori $s0, $s0, 0x8000 lw $t1, 0($s0) sll $t1, $t1, 1 sw $t1, 0($s0) lw $t1, 4($s0) sll $t1, $t1, 1 sw $t1, 4($s0) High-level code MIPS assembly Recall: MIPS R-Type Instructions 17 Description: Add two registers and store the result in a register $d. Operation: $d = $s + $t; advance_pc (4); Syntax: add $d, $s, $t Description: Subtract $t from $s and store the result in $d. Operation: $d = $s - $t; advance_pc (4); Syntax: sub $d, $s, $t Description: If $s is less than $t, $d is set to one. $d gets zero otherwise. Operation: if $s < $t: $d = 1; advance_pc (4); else: $d = 0; advance_pc (4); Syntax: slt $d, $s, $t Description: Bitwise and of $s and $t and store the result in the register $d. Operation: $d = $s & $t; advance_pc (4); Syntax: and $d, $s, $t Description: Bitwise logic or of $s and $t and store the result in $d. Operation: $d = $s | $t; advance_pc (4); Syntax: or $d, $s, $t Description: Exclusive or of $s and $t and store the result in $d. Operation: $d = $s ^ $t; advance_pc (4); Syntax: xor $d, $s, $t ADD SUB SLT XOR AND OR Recall: MIPS I-Type Instructions 18 Description: Add sign-extended immediate to register $s and store the result in $t. Semantics: $t = $s + imm; PC=PC+4; Syntax: addi $t, $s, imm Description: Branch if the contents of $s and $t are equal. Semantics: if $s == $t: advance_pc (offset << 2)); else: PC=PC+4; Syntax: beq $s, $t, offsetADDI BEQ Recall: MIPS J-Type Instructions 19 Description: Jump to the address. Semantics: PC = nPC; nPC = (PC & 0xf0000000) | (target << 2); Syntax: j target J Writing Assembly Code: Extra Resources ‚óº The lecture contains all information needed. ‚óº For students that would like to see more about MIPS the following resource is a good starting point. ‚ùë Additional Resource (not needed for exam / lecture) 20 Lab 7: Exercise 1 ‚óº Write MIPS assembly code to compute the sum ùê¥ + ùê¥ + 1 + ‚ãØ ùêµ ‚àí 1 + ùêµ, given two inputs ùê¥ and ùêµ. ‚óº Example ‚ùë ùê¥ = 5, ùêµ = 10 ‚ûî ùëÜ = 5 + 6 + 7 + 8 + 9 + 10 = 45 ‚óº For this exercise, you can use a subset of MIPS instructions: ADD, SUB, SLT, XOR, AND, OR and NOR, which are the instructions supported by the ALU you designed in the previous labs ‚óº Additionally, you are allowed to use J, ADDI and BEQ 21 Lab 7: Exercise 2 ‚óº Write MIPS assembly code to compute the Sum of Absolute Differences of two images ‚óº Hints ‚ùë Recall the function calls and the use of the stack in Lecture 10 ‚ùë Read how to implement recursive function calls in H&H 6.4 22 I1 I2 S(x, y) = I1 x, y ‚àí I2(x, y) S ‚àí = Lab 7: Assembly Basics ‚óº Respect calling conventions ‚Äì they are your friend. 23 Image taken from: https://courses.cs.washington.edu/courses/cse410/09sp/examples/MIPSCallingConventionsSummary.pdf Lab 7: Assembly Basics ‚óº Using the stack may seem a bit counterintuitive at first. ‚óº Any function call shares the same registers hence you must: ‚ùë Store the state of the current function call before any other function call. ‚ùë Restore the state from stack when returning from a function call. 24 Last Words ‚óº In this lab, you will do what a compiler does: transforming high level code to MIPS assembly ‚óº Exercise 1: Write simple code and get familiar with the MARS simulator ‚óº Exercise 2: Sum of Absolute Differences of two images ‚óº Find Exercise 3 in the lab report 25 Report Deadline 26 [24. Mai 2024 23:59] Digital Design & Computer Arch. Lab 7 Supplement: Writing Assembly Code Frank K. G√ºrkaynak Seyyedmohammad Sadrosadati ETH Zurich Spring 2024 [30. April 2024]","libVersion":"0.3.1","langs":""}