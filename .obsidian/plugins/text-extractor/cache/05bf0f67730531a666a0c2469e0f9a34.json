{"path":"sem4/DMDB/VRL/extra/slides/DMDB-functional-s08-dependencies.pdf","text":"Data Modeling and Databases Spring Semester 2025 Nulls and Views Functional Dependencies Gustavo Alonso Institute of Computing Platforms Department of Computer Science ETH Zürich 1 Lessons learned so far • In the last two lectures we saw different extension to SQL and how data is manipulated to deal with special cases • We also saw how to enforce constraints to guarantee that the semantics of the schema are preserved and to prevent errors in the data • In this and the next lecture we will cover functional dependencies and normal forms as a way to provide a more formal basis for designing schemas and deciding what constraints are needed when organizing data. Functional Dependencies 2 Entity Relationship Model (looking back) Functional Dependencies 3 Logical Modelling Entity- relationship Model Relational Model ▪ Relational Model - Schema ➢ Database Schema: A Set of Relation Schemas ➢ Relation Schema: Name, A Set of Attributes/Fields/Colu mns, Primary key ➢ Field/Attribute: Name, Domain (e.g., Integer, String) Students(sid: string, name: string, login: string, age: int, gpa: float) sid name login age gpa Students Functional Dependencies 4 ER Diagram is a (Graphical) Constraint Lanaguage ∀𝑎, 𝑏, 𝑐: 𝑅 𝑎, 𝑏, 𝑐 ⇒ 𝐴 𝑎 ∧ 𝐵 𝑏 ∧ 𝐶(𝑐) ∀𝑎, 𝑏, 𝑐: 𝑅 𝑎, 𝑏, 𝑐 ⇒ ¬∃𝑐′. 𝑅 𝑎, 𝑏, 𝑐′ ∧ 𝑐′ ≠ 𝑐 ∀𝑎, 𝑏, 𝑐: 𝑅 𝑎, 𝑏, 𝑐 ⇒ ¬∃𝑏′. 𝑅 𝑎, 𝑏′, 𝑐 ∧ 𝑏′ ≠ 𝑏 A(a) B(b) C(c) R(a, b, c) Enforced by the primary key UNIQUE Foreign Keys Functional Dependencies 5 Merging tables with the same key • Cardinality can be tricky. • Consider the following two relations • It can be merged into • What’s the benefit/disadvantage of merging? ssn did since Works_in ssn name Employees ssn name did since Employees Functional Dependencies 6 How to capture redundancy? • Cardinality can be tricky. • Consider the following two relations • Can we merge it into: • This is often bad. (redundancy of data (budget)) ssn did since Works_in did budget Department ssn did since budget Works_in_Dept Functional Dependencies 7 Database Design Theory • What is a good database design? • How to formally model and enforce the properties we want in a good design? • Answer • Functional dependencies • Normal forms Application Design 1 Design 1 Design N… Functional Dependencies 8 Functional Dependencies Functional Dependencies 9 A Bad Database Schema • What are the problems of this schema? • Update-Anomaly • What happens when student 1 changes address? • Insert-Anomaly • Delete-Anomaly • What if student 1 drops all courses • Data Redundancy is the problem here sid course grade name address 1 A 4 Smith Home 1 B 5 Smith Home 1 C 6 Smith Home Functional Dependencies 10 Problems with Redundancy • Waste of storage space • Additional work to keep multiple copies of data consistent • Multiple updates in order to accommodate one event • Additional code to keep multiple copies of data consistent • Somebody needs to implement the logic sid course grade name address 1 A 4 Smith Home 1 B 5 Smith Home 1 C 6 Smith Home Functional Dependencies 11 Redundancy is not Always Bad • Through redundancy it is possible to improve locality • Space (memory, disk) is no longer the problem it used to be => tradeoff space/performance • Sometimes, redundancy is needed => fault tolerance, availability sid course grade name address 1 A 4 Smith Home 1 B 5 Smith Home 1 C 6 Smith Home Functional Dependencies 12 Redundancy • No matter whether redundancy is good or bad, we want to understand: • How to model data redundancy? • How to reason about redundancy? • One type of redundancy: • {sid} decides name, address • {sid, course} decides grade • One notion: Functional Dependency sid course grade name address 1 A 4 Smith Home 1 B 5 Smith Home 1 C 6 Smith Home Functional Dependencies 13 Functional Dependency • Schema: Relation e.g., ℛ(𝐴:𝐷_𝐴,𝐵:𝐷_𝐵,𝐶:𝐷_𝐶,𝐷:𝐷_𝐷) • Instance: 𝑅⊆𝐷_𝐴×𝐷_𝐵×𝐷_𝐶×𝐷_𝐷 • Let 𝛼⊆ℛ, 𝛽⊆ℛ • 𝛼 is a subset of columns/attributes, e.g., 𝛼={𝐴, 𝐶}. • Functional Dependency: 𝛼→𝛽 iff. ∀𝑟, 𝑠∈𝑅:𝑟.𝛼=𝑠.𝛼⇒𝑟.𝛽=𝑠.𝛽 • i.e., 𝛼→𝛽 iff., for any two tuples r and s in DB instance R, if r and s share the same value on columns 𝛼, then they share the same values on on column 𝛽 • i.e., there is a function mapping values in columns 𝛼 to values in columns in 𝛽 • We write 𝑅⊨𝛼→𝛽 if 𝑅 satisfies 𝛼→𝛽. Functional Dependencies 14 Functional Dependency • Schema: Relation ℛ(𝐴:𝐷_𝐴,𝐵:𝐷_𝐵,𝐶:𝐷_𝐶,𝐷:𝐷_ ) • Instance: 𝑅⊆𝐷_𝐴×𝐷_𝐵×𝐷_𝐶×𝐷_𝐷 • Let 𝛼⊆ℛ, 𝛽⊆ℛ • 𝛼 is a subset of columns, e.g., 𝛼={𝐴, 𝐶}. • Functional Dependency: 𝛼→𝛽 iff. ∀𝑟, 𝑠∈𝑅:𝑟.𝛼=𝑠.𝛼⇒𝑟.𝛽=𝑠.𝛽 A B C D a4 b2 c4 d3 a1 b1 c1 d1 a1 b1 c1 d2 a2 b2 c3 d2 a3 b2 c4 d3 𝑅 Find all FDs: • 𝑅 ⊨ {A} -> {B} • 𝑅 ⊨ {C, D} -> {B} • 𝑅 ⊭ {B} -> {C} • Convention: CD -> B for {C, D} -> {B} Functional Dependencies 15 Functional Dependency - Example Find all FDs: • Child -> Father, Mother • Child, Grandpa -> Grandma • Child, Grandma -> Grandpa Functional Dependencies 16 Analogy to Functions • f1: Child -> Father • E.g., f1(Niklas) = Alfons • FD1: Child -> Father Functional Dependencies 17 Keys: Defined via Functional Dependency • 𝛼⊆ℛ is a superkey iff • 𝛼→ℛ. (ℛ here means all columns) • This means that if we know the value of columns 𝛼, we know the value for the rest of the columns in ℛ. => 𝛼 must be a superset of a key. • 𝛼→𝛽 is minimal iff • ∀𝐴∈𝛼:(𝛼−{𝐴})↛𝛽 • Notation for minimal functional dependencies: • 𝛼→^. 𝛽 • 𝛼⊆ℛ is a candidate key iff 𝛼→^. ℛ Functional Dependencies 18 Keys - Example • Find FDs: • Name, Canton -> AreaCode, Population • Name, AreaCode -> Canton, Population • Keys of town: • {Name, Canton} • {Name, AreaCode} • Note that two small towns may have the same area code Functional Dependencies 19 Keys and Cardinalities • Cardinalities define functional dependencies • Functional dependencies determine keys • Not all functional dependencies are derived from the cardinality information Lecture teaches Professor 1N Department 1 • Professor, Lecture -> Department • Department, Lecture -> Professor • Lecture -/-> Department, Professor Functional Dependencies 20 Working with Functional Dependencies Functional Dependencies 21 Which functional dependencies? • Input: We are given a set of FDs F • How to find new FDs that can be “implied” from this set of FDs? (Inference) • The fundamental question: Will we “have” 𝛼→𝛽 given F? • Two ways to define “have”: • 𝐹 ⊨𝛼→𝛽: Semantics – Any R that satisfies F will also satisfy 𝛼→𝛽 • 𝐹⊢𝛼→𝛽: Syntax – We can derive 𝛼→𝛽 by applying a set of inference rules over F • Armstrong’s Axioms • Fundamental result: • 𝐹 ⊨𝛼→𝛽⟺𝐹⊢𝛼→𝛽. (when ⊢ is defined by Armstrong’s Axioms) Functional Dependencies 22 Inference of functional dependencies • Input: We are given a set of FDs • How to find new FDs that can be “implied” from this set of FDs? (Inference) • More precisely: • Let 𝐹 be a set of FDs on scheme ℛ and𝛼→𝛽be another FD on ℛ. Then, 𝑭 implies 𝜶→𝜷, denoted by 𝐹 ⊨𝛼→𝛽, if every relation instance 𝑹 of 𝓡 that satisfies all FDs in 𝑭 also satisfies𝛼→𝛽. • Let 𝐹 be a set of FDs on scheme ℛ. Then, the closure of 𝐹, denoted by 𝐹^+, is the set of all FDs implied by 𝐹. • Let 𝐹 and 𝐺 be sets of FDs on scheme ℛ. Then, 𝐹 and 𝐺 are equivalent, denoted by 𝐹\"≡G\", if 𝐹 ⊨𝐺 and 𝐺⊨𝐹. • Is there a systematic way to compute the closure? Is there a systematic way to do inference? Is there a systematic way to check 𝐹 ⊨𝑓 and 𝐹\"≡G\"? Functional Dependencies 23 Armstrong Axioms: Inference of FDs • Reflexivity • 𝛼⊆𝛽⇒𝛽→ 𝛼 • Special case: ℛ→ 𝛼 • We call these FDs trivial FDs. • Augmentation • 𝛼→ 𝛽⇒𝛼𝛾→ 𝛽𝛾 • (Notation 𝛼𝛾 := 𝛼 ∪ 𝛾) • Transitivity • 𝛼→ 𝛽∧𝛽→ 𝛾⇒𝛼→ 𝛾 • These three axioms are both complete and sound. All possible other FDs can be implied from these axioms. Functional Dependencies 24 Armstrong Axioms: Inference of FDs • Reflexivity • 𝛼 ⊆ 𝛽 ⇒ 𝛽→𝛼 • “Semantic Soundness”: • Assume that 𝛼 ⊆ 𝛽, we hope to prove that ∀𝑡1, 𝑡2 ∈ 𝑅, 𝑡1 𝛽 = 𝑡2 𝛽 ⇒ 𝑡1 𝛼 = 𝑡2[𝛼] • Let 𝑡1, 𝑡2 be two arbitrary tuples such that 𝑡1 𝛽 = 𝑡2[𝛽], assume 𝑡1 𝛼 ≠ 𝑡2[𝛼] • This implies that there exists a column 𝑐 ∈ 𝛼, 𝑡1 𝑐 ≠ 𝑡2[𝑐] • Because 𝛼 ⊆ 𝛽, 𝑐 ∈ 𝛽 , therefore 𝑡1 𝛽 ≠ 𝑡2[𝛽]. Contradict. We must have 𝑡1 𝛼 = 𝑡2[𝛼]. Functional Dependencies 25 Armstrong Axioms: Inference of FDs • Augmentation • 𝛼→𝛽 ⇒ 𝛼𝛾→𝛽𝛾 • “Semantic Soundness”: • Prove by contradiction. Assume that: • 𝛼 → 𝛽 is true • 𝛼𝛾 → 𝛽𝛾 is false. • Because 𝛼𝛾 → 𝛽𝛾 is false, we have that there exists 𝑡1, 𝑡2: 𝑡1 𝛼𝛾 = 𝑡2[𝛼𝛾] and 𝑡1 𝛽𝛾 ≠ 𝑡2[𝛽𝛾]. As a result: • 𝑡1 𝛼 = 𝑡2[𝛼]. (from 𝑡1 𝛼𝛾 = 𝑡2[𝛼𝛾]) • 𝑡1 𝛽 ≠ 𝑡2[𝛽]. • This contradicts with “𝛼 → 𝛽” Functional Dependencies 26 Armstrong Axioms: Inference of FDs • Transitivity • 𝛼→𝛽 ∧ 𝛽→𝛾 ⇒ 𝛼→𝛾 • “Semantic Soundness”: • From 𝛼→𝛽, we know that • ∀𝑡1, 𝑡2, 𝑡1 𝛼 = 𝑡2 𝛼 ⇒ 𝑡1 𝛽 = 𝑡2[𝛽] • From 𝛽→𝛾, we know that • ∀𝑡1, 𝑡2, 𝑡1 𝛽 = 𝑡2 𝛽 ⇒ 𝑡1 𝛾 = 𝑡2[𝛾] • Combine both, we get • ∀𝑡1, 𝑡2, 𝑡1 𝛼 = 𝑡2 𝛼 ⇒ 𝑡1 𝛾 = 𝑡2[𝛾] Functional Dependencies 27 Armstrong Axioms: Inference of FDs • Reflexivity • Augmentation • Transitivity • All proofs are simple and natural. • What is very useful in practice: • These three axioms are both complete and sound. All possible other FDs can be implied from these axioms. Functional Dependencies 28 Armstrong Axioms: Soundness • Let 𝐹 be a set of FDs on scheme ℛ and 𝑓 be another FD on ℛ. Then, 𝑭 derives 𝜶 → 𝜷, denoted by 𝐹 ⊢ 𝛼 → 𝛽, if there is a derivation for 𝒇 using only Armstrong’s axioms. • Let 𝐹 be a set of FDs on scheme ℛ and 𝑓 be another FD on ℛ. Then, 𝑭 implies 𝜶 → 𝜷, denoted by 𝐹 ⊨ 𝛼 → 𝛽, if every relation instance 𝑹 of 𝓡 that satisfies all FDs in 𝑭 also satisfies 𝒇. • Soundness: • 𝐹 ⊢ 𝛼 → 𝛽 ⇒ 𝐹 ⊨ 𝛼 → 𝛽 • This is relatively easy to see: • Prove by induction • start from a formula derived with 𝐾 − 1 applications of Armstrong’s axioms • Prove that the one derived by applying one more axiom (𝐾 applications) is still correct. Functional Dependencies 29 Armstrong Axioms: Completeness • Completeness: • 𝐹 ⊨ 𝛼 → 𝛽 ⇒ 𝐹 ⊢ 𝛼 → 𝛽 • How to prove it? • [Closure] Let 𝐹 be a set of FDs over ℛ, 𝛼 ⊆ ℛ is a set of attributes of ℛ. The closure of 𝜶 with respect to 𝑭, 𝜶 +, is the set of all attributes 𝑦 ∈ ℛ such that 𝛼 → 𝑦 can be derived from 𝐹 using Armstrong’s axioms. I.e., 𝛼+ = 𝑦 ∈ ℛ 𝐹 ⊢ 𝛼 → 𝑦} • 𝐹 ⊢ 𝛼 → 𝛽 ⇔ 𝛽 ⊆ 𝛼+ • Proof: • (=>) Assume 𝐹 ⊢ 𝛼 → 𝛽 and ∀𝑦 ∈ 𝛽, • 𝐹 ⊢ 𝛽 → 𝑦 (Reflexivity) • 𝐹 ⊢ 𝛼 → 𝑦 (Transitivity) As a result:𝑦 ∈ 𝛼+. Therefore 𝛽 ⊆ 𝛼+ Functional Dependencies 30 Armstrong Axioms: Completeness • Completeness: • 𝐹 ⊨ 𝛼 → 𝛽 ⇒ 𝐹 ⊢ 𝛼 → 𝛽 • How to prove it? • [Closure] Let 𝐹 be a set of FDs over ℛ, 𝛼 ⊆ ℛ is a set of attributes of ℛ. The closure of 𝜶 with respect to 𝑭, 𝜶+, is the set of all attributes 𝑦 ∈ ℛ such that 𝛼 → 𝑦 can be derived from 𝐹 using Armstrong’s axioms. I.e., 𝛼+ = 𝑦 ∈ ℛ 𝐹 ⊢ 𝛼 → 𝑦} • 𝐹 ⊢ 𝛼 → 𝛽 ⇔ 𝛽 ⊆ 𝛼+ • Proof: • (<=) Assume 𝛽 ⊆ 𝛼+, prove that ∀𝑦 ∈ 𝛽: 𝐹 ⊢ 𝛼 → 𝑦. • It is easy to prove that 𝑋 → 𝑌 ∧ 𝑋 → 𝑍 ⇒ 𝑋 → 𝑌𝑍 (go back to the definition of FD) • Therefore (∀𝑦 ∈ 𝛽: 𝐹 ⊢ 𝛼 → 𝑦) ⇒ 𝐹 ⊢ 𝛼 → 𝛽 Functional Dependencies 31 Armstrong Axioms: Completeness • Completeness: • 𝐹 ⊨ 𝛼 → 𝛽 ⇒ 𝐹 ⊢ 𝛼 → 𝛽 • Proof • Suppose 𝐹 ⊨ 𝛼 → 𝛽 but 𝐹 ⊬ 𝛼 → 𝛽 (i.e., 𝛼 → 𝛽 cannot be inferred from the axioms, even it holds under F) • We know that 𝛽 ⊈ 𝛼+. (From 𝐹 ⊢ 𝛼 → 𝛽 ⇔ 𝛽 ⊆ 𝛼+) • Our goal is to construct a relation instance 𝑅, such that 𝐹 holds but 𝛼 → 𝛽 does not (i.e., 𝐹 ⊭ 𝛼 → 𝛽) • Step 1: Prove that 𝑅 does not satisfy 𝛼 → 𝛽 • Easy: 𝛼 is a subset of 𝛼+, 𝛽 is not a subset of 𝛼+ • Step 2: Prove that 𝑅 satisfies 𝐹: • Suppose 𝛾 → 𝜃 ∈ 𝐹. If 𝛾 ⊆ 𝛼+, then we have 𝐹 ⊢ 𝛼 → 𝛾, by transitivity, 𝐹 ⊢ 𝛼 → 𝜃. Therefore 𝜃 ⊆ 𝛼+. We have 𝑅 ⊨ 𝛾 → 𝜃 • If 𝛾 ⊈ 𝛼+, we have 𝛾 will take different values in 𝑅, thus 𝑅 ⊨ 𝛾 → 𝜃 • Put these two steps together, we get a counter example of 𝐹 ⊨ 𝛼 → 𝛽 given 𝐹 ⊬ 𝛼 → 𝛽. 𝜶+ 𝓡 \\ 𝜶+ 111111…111 000….000 111111…111 111…111 R Functional Dependencies 32 Other Rules • Union of FDs: • 𝛼 → 𝛽 ∧ 𝛼 → 𝛾 ⇒ 𝛼 → 𝛽𝛾 • Proof (using Armstrong’s Axioms): • 𝛼 → 𝛽. (given) • 𝛼 → 𝛾. (given) • 𝛼 → 𝛼𝛾. (augmentation) • 𝛼𝛾 → 𝛽𝛾. (augmentation) • 𝛼 → 𝛽𝛾. (transitivity) Functional Dependencies 33 Other Rules • Decomposition: • 𝛼 → 𝛽𝛾 ⇒ 𝛼 → 𝛽 ∧ 𝛼 → 𝛾 • Proof (using Armstrong’s Axioms): • 𝛼 → 𝛽𝛾. (given) • 𝛽𝛾 → 𝛽. (reflexivity) • 𝛼 → 𝛽. (transitivity) • Similar we can prove 𝛼 → 𝛾. Functional Dependencies 34 Other Rules • Pseudo transitivity: • 𝛼 → 𝛽 ∧ 𝛽𝛾 → 𝜃 ⇒ 𝛼𝛾 → 𝜃 • Proof (using Armstrong’s Axioms): • 𝛼 → 𝛽. (given) • 𝛼𝛾 → 𝛽𝛾. (augmentation) • 𝛽𝛾 → 𝜃. (given) • 𝛼𝛾 → 𝜃. (transitivity) Functional Dependencies 35 More about Closure • [Closure] Let 𝐹 be a set of FDs over ℛ, 𝛼 ⊆ ℛ is a set of attributes of ℛ. The closure of 𝜶 with respect to 𝑭, 𝜶 +, is the set of all attributes 𝑦 ∈ ℛ such that 𝛼 → 𝑦 can be derived from 𝐹 using Armstrong’s axioms. I.e., 𝛼+ = 𝑦 ∈ ℛ 𝐹 ⊢ 𝛼 → 𝑦} • Given 𝐹 be a set of FDs over ℛ, 𝛼 ⊆ ℛ is a set of attributes of ℛ, how to find 𝛼+? • An algorithm: • 𝛼+ := 𝛼; • repeat • 𝛼𝑜𝑙𝑑 + := 𝛼+ ; • for each FD 𝛽 → 𝛾 ∈ 𝐹 • if 𝛽 ⊆ 𝛼+ then 𝛼+ ≔ 𝛼+ ∪ 𝛾 • until (𝛼+ = 𝛼𝑜𝑙𝑑 + ) • output 𝛼+ Functional Dependencies 36 More about Closure • How to check if 𝐹 ⊢ 𝛼 → 𝛾? • Calculate 𝛼+ and check 𝛾 ∈ 𝛼+ • How to check if 𝐹 ⊢ 𝐺? • For each 𝛼 → 𝛾 ∈ 𝐺, check 𝐹 ⊢ 𝛼 → 𝛾. • How to check if 𝐹 is equivalent to 𝐺? • Check 𝐹 ⊢ 𝐺 and 𝐺 ⊢ 𝐹 • How to check if 𝐾 ⊆ ℛ is a superkey given FDs 𝐹? • Check 𝐹 ⊢ 𝐾 → ℛ • As we can see, all these questions can be answered easily given an algorithm to compute the closure 𝛼+. Functional Dependencies 37 Minimal Basis (Minimal Cover) • Let 𝐹 be a set of FDs • A->BC, B->D, A->D there might be redundant FDs (e.g., A->D) that can be derived from other FDs. It is natural to ask, how to “simplify” 𝐹 to remove such redundant FDs? • 𝐹 is a set of FDs. A Minimal Cover of 𝐹 is a set of FDs 𝐺 that has the following properties: • 𝐺 is equivalent to 𝐹. (𝐹 ⊨ 𝐺 and 𝐺 ⊨ 𝐹) • All FDs in 𝐺 have the form X → A, where A is a single attribute • It is not possible to make G ”smaller” • Deleting a FD. i.e. G − {X → A} ≢ G, for any FD X → A ∈ G • Deleting an attribute from the left hand side of a FD. i.e. G − {XA → B} + {X → B} ≢ G, for any FD XA → B ∈ G. Functional Dependencies 38 Computing the Minimum Basis • Step 1: Let G be the set of FDs obtained from F by decomposing the right hand sides of each FD to a single attribute. • Step 2: Remove FDs that are trivial • Step 3: Remove all redundant attributes from the left hand sides of FDs in G. • How? For each X -> Y, take each attribute x in X, if X-{x} -> Y implies X -> Y, then replace X -> Y with X-{x} - > Y • Step 4: From the resulting set of FDs, remove all redundant FDs. • Output the resulting set of FDs AB->C A->BC B->C A->B AB->C A->B A->C B->C A->B B->C A->B A->C B->C A->B B->C A->B Functional Dependencies 39 Using Functional Dependencies Functional Dependencies 40 Decomposition of Relations • Bad relations combine several concepts • decompose them so that each concept in one relation • 𝑅 ⇝ 𝑅1 … 𝑅𝑛 • Lossless Decomposition • 𝑅 = 𝑅1 ⋈ 𝑅2 … ⋈ 𝑅𝑛 • Preservation of Dependencies • 𝐹𝐷 𝑅 + = 𝐹𝐷 𝑅1 ∪ ⋯ ∪ 𝐹𝐷 𝑅𝑛 + Functional Dependencies 41 Decomposition of Relations • When is a decomposition lossless? • Let ℛ = ℛ1 ∪ ℛ2 • Consider the decomposition of 𝑅: • 𝑅1 = Πℛ1(𝑅) • 𝑅2 = Πℛ2(𝑅) • This decomposition is lossless (i.e., 𝑅 = 𝑅1 ⋈ 𝑅2), if • (ℛ1∩ ℛ2) → ℛ1 OR • (ℛ1∩ ℛ2) → ℛ2 Functional Dependencies 42 Decomposition of Relations • Not lossless • Why? • Guest -/-> Beer (D drinks two types of beer) • Guest -/> Pub (D goes to two pubs) • We lose the actual dependency Guest,Pub -> Beer Pub Guest Beer A D F A E G C D G Drink Pub Guest A D A E C D Visitor Guest Beer D F E G D G Drinks Π Pub Guest Beer A D F A E G C D G C D F A D G R ⋈ A guests drinks a given beer at a given pub Functional Dependencies 43 Decomposition of Relations • Lossless • Why? • Child ->Mother • Child -> Father • In this example, {Child} is a key of all three relations • With respect to loss of information, we can always decompose with a key • Might not always be beneficial in practical. Father Mother Child Johann Martha Else Johann Maria Theo Heinz Martha Cleo Parents Father Child Johann Else Johann Theo Heinz Cleo Father Mother Child Martha Else Maria Theo Martha Cleo Mother Π Father Mother Child Johann Martha Else Johann Maria Theo Heinz Martha Cleo R ⋈ Functional Dependencies 44 Decomposition – Preservation of FDs ▪ Let ℛ be decomposed into ℛ1… ℛ𝑛 ▪ 𝐹𝐷 𝑅 + = 𝐹𝐷 𝑅1 ∪ ⋯ ∪ 𝐹𝐷 𝑅𝑛 + ▪ (We cannot specify FDs across relations) ▪ Example: ➢ ZipCodes: {Street, City, Canton, Zip} ➢ FD(ZipCodes): • Zip -> City, Canton • Street, City, Canton -> Zip ➢ Think about this decomposition ➢ Lossless? YES • Why? Zip -> City, Canton ➢ Preserve FDs? -- No • Lose Street, City, Canton -> Zip Functional Dependencies 45 Lessons learned • Functional dependencies provide information on the relationships between attributes in a relation and across relations • They can be used to identify • The key • Redundancy • Relations that can be merged • Capture cardinality • And to define normal forms • Normal forms is the next lecture Functional Dependencies 46","libVersion":"0.3.2","langs":""}