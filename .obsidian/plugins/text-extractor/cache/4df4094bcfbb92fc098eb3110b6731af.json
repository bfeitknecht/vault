{"path":"sem4/FMFP/PV/pvw/FMFP-pvw-s01.pdf","text":"Formal Methods and Functional Programming PVW July 14-19, 2025 Montag Über mich ▶ Ramon Wick ▶ Informatik Masterstudent ▶ Du-Kultur ▶ Mail: rawick@ethz.ch, Discord: the_ray_man Figure: https://n.ethz.ch/∼rawick FMFP Überblick Exams Figure: Punkte nach Aufgabentyp WochenplanHeute auf dem Programm ▶ Lists ▶ Normal Lists ▶ List Comprehensions ▶ Higher Order Functions ▶ Map, Filter, Fold ▶ Lambda Expressions ▶ Algebraic Data Types (ADT) ▶ Fold over ADT ▶ Typing ▶ Haskell Typing ▶ Typing in Mini-Haskell Haskell Lists Listen Facts: ▶ homogeneous (alle Elemente haben den gleichen Type) ▶ [1,2,3] = 1:2:3:[] ▶ [1..5] , [1..] , [1,3..] Haskell Programming Typing Exercises ▶ Haskell Typing (informal) ▶ Mini-Haskell: What is the type? (formal) ▶ Mini-Haskell: Is this type correct? (formal) Haskell Typing (FS23) Recall the following functions from the Haskell Prelude library. zipWith :: (a−> b−> c)−> [a]−> [b]−> [c] (.) :: (b−> c)−> (a−> b)−> a−> c Determine whether the following expressions are well-typed or not, and if they are, state the most general type. No other justification is needed. ▶ \\x y −> x (y,y) ▶ (.) zipWith (\\ x y −> x y) Haskell Typing (FS23) Recall the following functions from the Haskell Prelude library. zipWith :: (a−> b−> c)−> [a]−> [b]−> [c] (.) :: (b−> c)−> (a−> b)−> a−> c Determine whether the following expressions are well-typed or not, and if they are, state the most general type. No other justification is needed. ▶ \\x y −> x (y,y) ▶ (.) zipWith (\\ x y −> x y) Haskell Typing (FS23) Recall the following functions from the Haskell Prelude library. zipWith :: (a−> b−> c)−> [a]−> [b]−> [c] (.) :: (b−> c)−> (a−> b)−> a−> c Determine whether the following expressions are well-typed or not, and if they are, state the most general type. No other justification is needed. ▶ \\x y −> x (y,y) ▶ (.) zipWith (\\ x y −> x y) Mini-Haskell Was ist der Type von der folgenen expression? λx.λy .(x 1, iszero (x y )) Mini-Haskell Was ist der Type von der folgenen expression? λx.λy .(x 1, iszero (x y )) Hands-On PVW, Hands-On 5 ▶ 5.1a, 5.1c ▶ 5.2d ▶ 5.3c ▶ 5.5 Evaluation Order (Selten in Prüfungen) Lazy evaluation strategy To evaluate (t1 t2): 1. Evaluate t1 2. If the result of t1 is (λx. u), return u[x/t2] 3. Then evaluate the result of the substitution To evaluate (λx. t), return it unchanged. Eager evaluation strategy To evaluate (t1 t2): 1. Evaluate t1, then evaluate t2 to t ′ 2 2. If the result of t1 is (λx. u), return u[x/t ′ 2] 3. Then evaluate the result of the substitution To evaluate (λx. t), evaluate t to t ′ and return (λx. t ′). Exercise: (λx. λy. x) y (λz. (λx.x) z) Evaluation Order (Selten in Prüfungen) Lazy evaluation strategy To evaluate (t1 t2): 1. Evaluate t1 2. If the result of t1 is (λx. u), return u[x/t2] 3. Then evaluate the result of the substitution To evaluate (λx. t), return it unchanged. Eager evaluation strategy To evaluate (t1 t2): 1. Evaluate t1, then evaluate t2 to t ′ 2 2. If the result of t1 is (λx. u), return u[x/t ′ 2] 3. Then evaluate the result of the substitution To evaluate (λx. t), evaluate t to t ′ and return (λx. t ′). Exercise: (λx. λy. x) y (λz. (λx.x) z) Evaluation Order (Selten in Prüfungen) Lazy evaluation strategy To evaluate (t1 t2): 1. Evaluate t1 2. If the result of t1 is (λx. u), return u[x/t2] 3. Then evaluate the result of the substitution To evaluate (λx. t), return it unchanged. Eager evaluation strategy To evaluate (t1 t2): 1. Evaluate t1, then evaluate t2 to t ′ 2 2. If the result of t1 is (λx. u), return u[x/t ′ 2] 3. Then evaluate the result of the substitution To evaluate (λx. t), evaluate t to t ′ and return (λx. t ′). Exercise: (λx. λy. x) y (λz. (λx.x) z) Falls noch Zeit ▶ Train on Code Expert: Focus on ADT ▶ Week 5, Assignment 2 ▶ Week 6, Assignment 1 ▶ Ex Sheet 1, exercise 1 ▶ Ex Sheet 5","libVersion":"0.5.0","langs":""}