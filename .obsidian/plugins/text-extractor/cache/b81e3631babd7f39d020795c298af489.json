{"path":"sem4/FMFP/PV/exams/midterms/FMFP-FS18-B.pdf","text":"Computer Science Department D. Basin P. M¨uller Formal Methods and Functional Programming Quiz 1 March 13, 2018, 10:15–10:45 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. This booklet consists of ?? pages; the back page of this booklet is page ??. After the quiz begins, check that your quiz papers are complete (2 assignments). 2. Only write on the quiz paper and extra paper sheets which are given by the assistants. Do not take any of this paper out of the quiz: submit it all. Write your ﬁrst and last name and your student number on every sheet of paper that you write on. 3. This is a closed book quiz: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. You may use any functions from the Haskell Prelude in your solutions (without giving their deﬁnitions). 5. Write clearly in the sense of logic, language, and readability. Label all rule applica- tions in your derivation trees. The clarity of your arguments and explanations aﬀects your grade. 6. You have 30 minutes to complete the quiz. Assignment 1 2 ∑ Max. points 5 5 10 Your points Formal Methods and Functional Programming, Quiz 1, SS18 2 Assignment 1: Natural Deduction (6 points) We recall the following rules from natural deduction for ﬁrst order intuitionistic logic: Γ, A Ø A Ax Γ, A Ø B Γ Ø A → B → I Γ Ø A → B Γ Ø A Γ Ø B → E Γ Ø Œ Γ Ø A ŒE Γ, A Ø Œ Γ Ø ¬A ¬I Γ Ø ¬A Γ Ø A Γ Ø B ¬E Γ Ø A Γ Ø B Γ Ø A ∧ B ∧I Γ Ø A ∧ B Γ Ø A ∧EL Γ Ø A ∧ B Γ Ø B ∧ER Γ Ø A Γ Ø A ∨ B ∨IL Γ Ø B Γ Ø A ∨ B ∨IR Γ Ø A ∨ B Γ, A Ø C Γ, B Ø C Γ Ø C ∨E Γ Ø A(x) Γ Ø ∀x. A(x) ∀I ∗ Γ Ø ∀x. A(x) Γ Ø A(t) ∀E Γ Ø A(t) Γ Ø ∃x. A(x) ∃I Γ Ø ∃x. A(x) Γ, A(x) Ø B Γ Ø B ∃E ∗∗ Side conditions: (*) x does not occur free in any formula in Γ and (**) x does not occur free in any formula in Γ or B. Prove using the above rules that (∀x. ¬P ∨ Q(x)) → (P → (∀z. Q(z))) holds. Label each inference step with the name of the corresponding rule. Solution: Let • Γ ∶= ∀x. ¬P ∨ Q(x), P , Γ Ø ∀x. ¬P ∨ Q(x) Ax Γ Ø ¬P ∨ Q(x) ∀E Γ, ¬P Ø ¬P Ax Γ, ¬P Ø P Ax Γ, ¬P Ø Q(x) ¬E Γ, Q(x) Ø Q(x) Ax Γ Ø Q(x) ∨E Γ Ø ∀x. Q(x) ∀I ∗ Γ Ø ∀z. Q(z) rename ∀x. ¬P ∨ Q(x) Ø P → (∀z. Q(z)) → I Ø (∀x. ¬P ∨ Q(x)) → (P → (∀z. Q(z))) → I ∗ : x is not free in Γ Formal Methods and Functional Programming, Quiz 1, SS18 3 Assignment 2: Lazy Caterer’s Numbers (5 points) If we write the natural numbers according to the tri- angular pattern shown on the right, then the num- bers placed on the triangle’s left edge (shown bold) are called the lazy caterer’s numbers. Write a Haskell function lazycat :: Int -> Bool that given an in- put n > 0 decides whether n is a lazy caterer’s number. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ⋮ Solution: triangular :: Int -> Bool triangular n = go 1 0 where go x y | x > n = False | 1 + y == n = True | otherwise = go (x + 1) (x + y)","libVersion":"0.5.0","langs":""}