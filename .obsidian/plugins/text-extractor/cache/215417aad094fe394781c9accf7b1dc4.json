{"path":"sem2/PProg/VRL/extra/Exam_Preparation_24_with_notes.pdf","text":"Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Loading… Speedup, Amdahl, Gustafson here : E = /s p = 11 Fo r m u la s : Va n a b le s : = Si = F + 11/1 - f) Sp = E = fr ec tion of = = + 11(z ) = E = g no n- pa r a l l el i z a bl e wo r k And : Sp , E P = # pr o c es ses P Tp = ex e c u t io n time Gu s : Sp = # + p( 1 - f) On p pr o c es so r s Speedup, Amdahl, Gustafson he re ·f = 1 - 7 = ! 0 Sp = = = E = 2 p = ? & Anda hl : T1 = 4 +p = 2 Sp = 2 = = - 2(3 + p) = 4p = 22 6 ( = P23 Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Speedup, Amdahl, Gustafson limit of sp e e d up : eim pio her e , unit o Sp is th o s a Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Id e al cas e v Sp = 0 0 = + = p -> line a r in te r m s of p => b Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Exam Preparation Session Julianne Orel & Finn Heckman Parallele Programmierung 09.04.2024 Outline ● Speedup, Amdahl, Gustafson ● Pipelining ● Task Graph ● Break (: ● Threads & Wait/Notify ● Fork/Join Framework Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Loading… Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson S p = ½ + ½ p Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson Speedup, Amdahl, Gustafson: Tips and Tricks ● Remember and understand the formulas ● Detect which formula to use (if necessary) ○ keywords constant Time / Work ○ Given constant Time T \u0000 use Gustafson ○ Given constant Work / Programm \u0000 Amdahl ● Identify what is p, f and Sp ● The rest is basic math Pipelining: Tips and Tricks Pipelining: Tips and Tricks Assumption: no duplicated stages Latency: if pipeline is balanced: sum of all steps Throughput : 1 / longest step (Full Utilization) #Units/ TimeToProcessUnits (With Lead In / Lead Out) Balanced / Unbalanced Pipeline: Pipeline is balanced if first step >= other steps ● Understand what latency and throughput is ● Understand what makes a pipeline balanced ● Stay organized ○ use drawings if necessary Pipelining: Tips and Tricks Task Graph Task Graph Task Graph 50 + 20 + 100 + 10 = 180 Task Graph Task Graph Time: 0 Task Graph Time: 50 Task Graph Time: 70 Task Graph Time: 90 Loading… Task Graph Time: 120 Task Graph Time: 120 3 Processors! Task Graph Task Graph: Tips and Tricks ● TSE := Time Sequential Execution = Sum of all Nodes ● MaxSpeedUp = TSE / longest path ● Brute force strategy for finding out longest path ● Keep an overview of which Thread does what when ○ e.g with different colors and having a line through the tree which indicates a certain moment in time Wait/Notify ● Read instructions carefully! ○ You will save time and gain points by doing this. ○ Usually you don’t have to handle exceptions. ○ Usually you will lose points if you synchronize too much. ○ Usually small syntax errors like capitalization don’t deduct points ■ As long as it’s clear what you meant Threads & Wait/Notify Sp e e d u p , Am d a h l, Gu s ta fs o nSp e e d u p , Am d a h l, Gu s ta fs o nSp e e d u p , Am d a h l, Gu s ta fs o n : T i p s a n d T ri c k s ● Re me mb e r and u n d e r st a n d the for m ul as ● D e t e ct w h i ch f o r m u l a t o u se ( i f nec es s ar y ) ○ ke yw o r d s co n st a n t T i m e / W o r k ○ Gi v e n c o n s ta n t T i m e T à us e G us t af s on ○ Gi v e n co n st a n t Wo r k / Pr o g r a m m à Am d a h l ● Identify wh a t is p, f and S p ● Th e r e st is b a si c ma t h Pip e lin in g : T ip s a n d T r ic k sPip e lin in g : T ip s a n d T r ic k s As s u m p t i o n : n o d u p l i c a t e d s t a g e s La te nc y : i f p i p e l i n e i s b a l a n ce d : su m o f a l l st e p s Throughput : 1 / l o n g e st st e p ( F u l l U t i l i za t i o n ) # U n i t s/ T i m e T o P r o ce ssU n i t s (Wit h L e a d I n / L e a d O u t ) Ba la nc e d / Unba la nc e d P ipe line : P i p e l i n e i s b a l a n ce d i f f i r st st e p > = o t h e r st e p s ● U n d e r st a n d wh a t l a t e n cy and thr oughput is ● U n d e r st a n d wh a t m a ke s a pi pel i ne bal anced ● Stay or gani zed ○ u se draw i ngs if nec es s ary Pip e lin in g : T ip s a n d T r ic k sTas k Gra p hTas k Gra p hTas k Gra p h 50 + 20 + 100 + 10 = 180 Tas k Gra p hTas k Gra p h Ti m e : 0 Tas k Gra p h Ti m e : 50 Tas k Gra p h Ti m e : 70 Tas k Gra p h Ti m e : 9 0 Tas k Gra p h Ti m e : 12 0 Tas k Gra p h Ti m e : 12 0 3 Pr o c e s s o r s ! Tas k Gra p hTas k G r aph: Ti ps and Tr i c k s ● T S E : = T i m e S e q u e n t i a l E xe cu t i o n = S u m o f a l l N o d e s ● M a xS p e e d U p = T S E / l o n g e st p a t h ● B r u t e f o r ce st r a t e g y f o r f i n d i n g o u t l o n g e st p a t h ● K e e p a n o ve r vi e w o f w h i ch T h r e a d d o e s w h a t w h e n ○ e.g wit h d if f e re n t co lo rs and hav i ng a l i ne thr ough the tr ee wh ich in d ica t e s a ce rt a in mo me n t in t ime Wa i t / N o t i f y ● R ead i n st r u ct i o n s car ef ul l y! ○ You will sa ve tim e and gai n poi nts by doi ng thi s. ○ Us ua lly yo u don’ t h a ve to handl e excepti ons. ○ Us ua lly yo u will l o se poi nts if yo u syn ch r o n i ze too mu ch . ○ Us ua lly sm a l l syn t a x er r or s l i ke ca p i t a l i za t i o n don’ t d e d u ct poi nts ■ As lo n g as it’s cl e a r wh a t yo u me a n t Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y de que ue ? Thr eads & Wa i t / N o t i f y de que ue ? Thr eads & Wa i t / N o t i f y is E m p t y ? Thr eads & Wa i t / N o t i f y is E m p t y ? Thr eads & Wa i t / N o t i f y en que ue ? Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y A l w a ys w h i l e , n o t i f f o r w a i t i n g o n a co n d i t i o n ! Thr eads & Wa i t / N o t i f y T h e o b j e ct w e w a i t o n i s a l so : 1) T h e o b j e ct w e syn ch r o n i ze o n 2) T h e o b j e ct t h a t n o t i f i e s t h i s t h r e a d Thr eads & Wa i t / N o t i f y T h e o b j e ct w e w a i t o n i s a l so : 1) T h e o b j e ct w e syn ch r o n i ze o n 2) T h e o b j e ct t h a t n o t i f i e s t h i s t h r e a d Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f y < - n o t i f i ca t i o n Thr eads & Wa i t / N o t i f y n o t i f y a l so w o r ks, n o d i f f e r e n ce b e ca u se e a ch cu st o m e r g o e s t o e xa ct l y o n e p o st o f f i ce Thr eads & Wa i t / N o t i f y w a i t / n o t i f y/ A l l m u st b e ca l l e d w i t h i n syn ch r o n i ze d ! } I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y < - n o t i f i ca t i o n Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cu st o m e r t h r e a d : Thr eads & Wa i t / N o t i f y I n cu st o m e r t h r e a d : Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y I n cu st o m e r t h r e a d : Thr eads & Wa i t / N o t i f y I n cu st o m e r t h r e a d : I n cr e a se n u m b e r W a i t f o r cu st o m e r S e r ve cu st o m e r POST OFFIC E W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 2 W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 1 Thr eads & Wa i t / N o t i f y : C o n c e p t W a i t f o r m y n u m b e r I n f o r m p o st o f f i ce CUS TOME R 0 Thr eads & Wa i t / N o t i f yThr eads & Wa i t / N o t i f y Thr eads & Wa i t / N o t i f y ● Re me mb e r the imp o rta n t things to check: ○ wh a t to s y n c h r o n i ze on : M o s tl y o n a r e fe r e n c e s h a r e d b y a l l th r e a d s ○ wh a t not to syn ch r o n i ze on: no wr a p p e r ty p e s lik e I n t e g e r or Fl o a t , no in t et c . ○ wa it / n o t if y al w ays wit h in a syn ch r o n i ze d bl oc k ○ not i f y or not i f y A l l ○ No t if y as so o n as yo u wr it e to so m e t h i n g th a t ca n ch a n g e a wa it in g co n d i t i o n ○ wa it in a wh ile lo o p : c h e c k c o n d i ti o n s w i th w h i l e , N OT w i th i f ● If yo u h a ve the tim e, go thr ough the e xe cu t i o n st e p by ste p ● Do the co d i n g exer ci ses ● Pr acti ce the paper - coding with old exams F o r k/ Jo i n Fr am ew or kF o r k/ Jo i n Fr am ew or kF o r k/ Jo i n Fr am ew or kF o r k/ Jo i n Fr am ew or k Fork Joi n Ske l e t on public class ExampleForkJoin extends RecursiveTask/Action <> { protected ____ compute () { if ( // work is small (smaller than cutoff) ) // do the work directly else { // split work into pieces // fork/compute/join the pieces and wait for the results // return statement if needed } } } mi g h t n e e d t o b e a d a p t e d t o t h e s i t u a t i o n ! F o r k/ Jo i n Fr am ew or k ? F o r k/ Jo i n Fr am ew or kF o r k/ Jo i n Fr am ew or k F o r k/ Jo i n Fr am ew or k B a si c st r u ct u r e ? F o r k/ Jo i n Fr am ew or k B a si c st r u ct u r e ? F o r k/ Jo i n Fr am ew or k B a se ca se ? F o r k/ Jo i n Fr am ew or k B a se ca se ? F o r k/ Jo i n Fr am ew or k Wh e r e do we sp l i t ? F o r k/ Jo i n Fr am ew or k Wh e r e do we sp l i t ? F o r k/ Jo i n Fr am ew or k Ho w do we sp l i t ? F o r k/ Jo i n Fr am ew or k Ho w do we sp l i t ? F o r k/ Jo i n Fr am ew or k Ho w do we sp l i t ? F o r k/ Jo i n Fr am ew or k Ho w do we sp l i t ? F o r k/ Jo i n Fr am ew or k halfSize ); F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k halfSize ); W a t ch o u t w h e n sp l i t t i n g t h e a r r a y! th i s .l e n g th = 8 hal f S i z e = 4 th i s .l e n g th = 7 hal f S i z e = 3 F o r k/ Jo i n Fr am ew or k No w do th e fo r k i n g ! F o r k/ Jo i n Fr am ew or k No w do th e fo r k i n g ! 2x fo r k an d 2x jo in is al so o kay F o r k/ Jo i n Fr am ew or k ● Re me mb e r the b a si c structure ○ Pa y at t ent i on to co r r e ct l y orderi ng f o r k( ) and jo in ( ) ● Do n ’t m a ke m i st a ke s wh e n sp l i t t i n g the in p u t ! ○ Pa y at t ent i on wh e t h e r we are u si n g le n g t h or in d ic e s ○ Us e sm a l l va l u e s fo r le n g t h fo r fi g u r i n g out th e appropri at e paramet ers ● U n d e r st a n d Re cu rsive Ta sk and Re cu rsive A ct io n ● 2x for k and 2x jo in or 1 for k / jo in and 1 compute ar e both correct ! ( on the ja va version we ar e usi ng ) ● Do the co d i n g e xe r ci se s :) Ge n e ra l R e m a r ks ● Yo u don’ t need to sco re a l l poi nt s to re a ch a good ( bes t ) g ra d e ● Re a d th e ta s k des c r i pt i on ca re f u l l y ● Kn o w th e im p o r t a n t fo r m u l a s by hear t ! ● So l ve th e ex er c i s es and ol d ex am s Questions?","libVersion":"0.3.1","langs":""}