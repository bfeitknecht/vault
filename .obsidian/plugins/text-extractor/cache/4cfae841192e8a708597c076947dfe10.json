{"path":"sem3/EProg/PV/exams/theory/HS23.pdf","text":"Herbst 2023 252-0027 \u0015 Einf√ºhrung in die Programmierung Departement Informatik ETH Z√ºrich 5. Februar 2024 \u0015 Schriftliche Pr√ºfung ID: 3144 Nachname: Vorname: Legi-Nummer: \u0015 \u0015 Sie d√ºrfen diese Pr√ºfung oder die Aufgaben f√ºr die Programmierpr√ºfung erst √∂Àônen, nachdem die Aufsicht die Pr√ºfung gestartet hat. Wenn Sie diese Dokumente vorher √∂Àônen, gilt dies als T√§uschungsversuch. Mit Ihrer Unterschrift best√§tigen Sie, dass Sie die hier aufgef√ºhrte Person sind, Sie die Hinweise zur Kenntnis genommen haben, Sie die Aufgaben selbst√§ndig gel√∂st haben, Sie Ihre eigene L√∂sung abgeben, Sie keine Kopie der Pr√ºfung mitnehmen, und dass Sie alle technischen Probleme, gesund- heitlichen Probleme (die Ihre Leistungen in dieser Pr√ºfung beeintr√§chtigten) und etwaige st√∂rende √§ussere EinÀõ√ºsse gemeldet haben bzw. wissen, dass Sie diese melden sollen. Unterschrift: Hinweise 1. √ñÀônen Sie diese Pr√ºfung und die Aufgabenstellung f√ºr die Programmierpr√ºfung erst, wenn die Aufsicht den Beginn der Pr√ºfung bekannt gibt. 2. Schreiben Sie zuerst Ihren Namen und Ihre Legi-Nummer auf das Kontrolblatt dieser Pr√ºfung. √úberpr√ºfen Sie, dass die Zahl auf dem Kontrolblatt mit der Zahl auf der ersten Seite der schriftlichen Pr√ºfung √ºbereinstimmt. 3. Vergessen Sie nicht Ihre Unterschrift nach dem Ende der schriftlichen Pr√ºfung. 4. Der schriftliche Teil der Pr√ºfung dauert 40 Minuten. Falls Sie sich durch irgendjemanden oder irgendetwas gest√∂rt f√ºhlen, melden Sie dies sofort einer Aufsichtsperson. 5. Die schriftliche Pr√ºfung hat 12 Seiten (inkl. Kontrolblatt). Vergewissern Sie sich, dass Ihr Exemplar vollst√§ndig ist. 6. In dieser Pr√ºfung gibt es 40 Punkte. Benutzen Sie die Anzahl der Punkte als Hinweis , wie Sie Ihre Zeit einteilen k√∂nnen. Fehler bei der Bearbeitung einer Aufgabe haben keinen EinÀõuss auf die Punkte, die Sie f√ºr andere Aufgaben erhalten. Sie k√∂nnen die Aufgaben in beliebiger Reihenfolge l√∂sen. 7. Lesen Sie die Aufgabenstellungen genau durch. 8. Tragen Sie Ihre Antwort(en) direkt in die Pr√ºfungsb√∂gen ein. Falls Sie mehr Platz brauchen, ist Ihre Antwort wahrscheinlich zu lang. 9. Benutzen Sie einen Stift (blau oder schwarz), der nicht ausradiert werden kann. Bitte schreiben Sie deutlich und leserlich! Wenn Sie etwas durchstreichen wollen, so machen Sie dies bitte klar und eindeutig. 10. Trennen Sie nicht die zusammengeheftete Pr√ºfung. Mit losen Bl√§ttern riskieren Sie, ein Blatt zu verlieren. 11. Es ist wichtig, dass Ihre Antworten die Aufgaben klar und unzweideutig behandeln. Die Klarheit der Antworten beeinÀõusst Ihre Note. Eine fehlende Antwort wird als falsche Antwort bewertet. Wenn Sie Annahmen (√ºber die in den Aufgaben aufgef√ºhrten hinaus) treÀôen, so geben Sie diese bitte an. 12. Wenn Sie zur Toilette m√ºssen, melden Sie dies einer Aufsichtsperson durch Handzeichen. Es darf zur gleichen Zeit immer nur eine Person zur Toilette. 13. Wir beantworten keine inhaltlichen Fragen w√§hrend der Pr√ºfung. Kommentare zur Aufgabe schreiben Sie bitte auf das Aufgabenblatt. 14. Wenn die Aufsicht diesen Teil der Pr√ºfung beendet, schliessen Sie bitte die Pr√ºfung und schrei- ben nicht mehr in die Pr√ºfung. Weiterarbeiten √ºber die erlaubte Zeit gilt als T√§u- schungsversuch. Bitte unterschreiben Sie die Pr√ºfung auf der Vorderseite und legen Sie die Pr√ºfung mit Ihrer Legitimationskarte (\u0010Legi\u0011) gut sichtbar auf Ihren Arbeitstisch. 15. Wir sammeln die Pr√ºfung ein. Wichtig: stellen Sie unbedingt selbst sicher, dass Ihre Pr√ºfung von einer Aufsichtsperson eingezogen wird. Stecken Sie keine Pr√ºfung (auch keine leere) ein. Page 2 of 12 3144 ID: 3144 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 4 5 9 2 5 6 4 3 7 7 6 4 5 Œ£ √úbertrag ‚àí‚àí Total 40 Page 3 of 12 3144 Aufgabe 1 (4) Gegeben sei eine Methode main in einer Java-Klasse. public static void main(String[] args) { /* body */ } Die folgenden Anweisungen sollen als \u0010Body\u0011 (Rumpf) anstelle des Kommentars /* body */ eingef√ºgt werden. Geben Sie f√ºr jede Anweisung an, was f√ºr eine Ausgabe erzeugt wird \u0015 entweder was gedruckt wird oder ob ein Laufzeitfehler auftritt (schreiben Sie \u0010Laufzeitfehler\u0011 oder \u0010Exception\u0011) oder ob der Compiler einen Fehler feststellt (schreiben Sie \u0010Compile-Fehler\u0011 oder \u0010Error\u0011). Achten Sie auf die korrekte Formatierung der verschiedenen Typen, also z.B. 7.0 statt 7 f√ºr eine reelle Zahl ( double). 1. System.out.println( 16 / 4 % 2 == 0 && 2 * 4 / 8 == 4 * 2 / 8 ); ________________________ 2. System.out.println(\"1\" + 4 * 2 == \"2 * 9\" || (8 / (4 % 2 )) ); ________________________ 3. System.out.println(7 % 4 + 16 % 4 % 4 + \"1\" + 3 * 2 + 6 % 3 ); ________________________ Page 4 of 12 3144 Aufgabe 2 (5) Gegeben sei das folgende Programmsegment. ArrayList<Integer> al = new ArrayList<>(); for (int k = 9; k >= 0; k--) { al.add(Integer.valueOf(k+1)); } for (int i = 0; i < 2; i++) { for (int k = al.size()-1; k >= 0; k = k-2) { al.remove(Integer.valueOf(k)); } } for (Integer k : al) { System.out.print(\"‚ê£\" + k); // ___________________________________________________________________________ } System.out.println(); Was gibt die letzte Schleife aus? Schreiben Sie die Antwort auf die Zeile oben. Leerzeichen und Zwischenr√§ume sind nicht wichtig, aber beachten Sie bitte, dass Zahlen durch einen Zwischenraum getrennt sind. Page 5 of 12 3144 Aufgabe 3 (7) Gegeben sind die Java-Klassen RecordA, RecordB und RecordC sowie die Klasse Beispiel mit einer Methode test(), die verschiedene andere Methoden aufgeruft. class RecordA { int a = 1; } class RecordB { Integer b = Integer.valueOf(2); } class RecordC { int[] c = new int[] {3, 4}; } class Beispiel { static void method1(RecordA r) { r.a = 9; } static void method2(RecordB r) { r.b = Integer.valueOf(8); } static void method3(RecordC r) { r.c[0] = 7; } static void method4(int p) { p = p + 1; } static void method5(Integer q) { q = Integer.valueOf(q+1); } static void method6(int[] t) { t[0]=11; } // weiter mit Klasse Beispiel public static void test() { RecordA rA = new RecordA(); method1(rA); System.out.println(rA.a); // _________________ RecordB rB = new RecordB(); method2(rB); System.out.println(rB.b); // _________________ RecordC rC = new RecordC(); method3(rC); System.out.println(rC.c[0]); // _________________ rA = new RecordA(); method4(rA.a); System.out.println(rA.a); // _________________ rB = new RecordB(); method5(rB.b); System.out.println(rB.b); // _________________ rC = new RecordC(); method6(rC.c); System.out.println(rC.c[0]); // _________________ } // Ende Beispiel Bitte geben Sie rechts neben den println()-Statements an, was die println()-Anweisung an der Stelle ausgibt. Leerzeichen und Zwischenr√§ume spielen keine Rolle (sofern die Ausgabe jeder println()-Anweisung auf einer Zeile steht). Sollten Anweisungen nicht ausgef√ºhrt werden k√∂nnen, so markieren Sie bitte diese Anweisungen deutlich und schreiben rechts \u0010Laufzeitfehler\u0011 (oder \u0010Exception\u0011); Sie brauchen den genauen Fehler bzw. die genaue Exception nicht angeben. Wenn ein Statement einen Laufzeitfehler generiert, dann gilt, dass dieses ignoriert wird, das heisst, die nachfolgenden Statements werden nicht beeinÀõusst und wie gew√∂hnlich ausgef√ºhrt. Page 6 of 12 3144 Aufgabe 4 (5) Gegeben ist die Methode compute(int n), die f√ºr eine ganze Zahl ùëõ ‚â• 0 das Produkt (ùëõ √ó (ùëõ + 1))/2 berechnet. Was ist die Invariante f√ºr den Loop in dieser Methode? static int compute(int n) { // Precondition: n >= 0 int res = 0; int c = 0; // Loop Invariante: Bitte geben Sie die Invariante unten an while (c < n) { res = res + (n - c); c = c + 1; } // Postcondition: 2 * res = n * (n+1) return res; } Geben Sie die Loop Invariante an. (Sie k√∂nnen, wenn Sie es f√ºr n√∂tig halten, die Precondition oben erweitern.) Loop Invariante: _____________________________________________________ _____________________________________________________________________ Page 7 of 12 3144 Aufgabe 5 (9) Gegeben seien diese Klassen und Interfaces, zusammen mit der Klasse A5. Alle Klassen und Interfaces sind im default Package. class B { public void g() { A5.print(\"B‚ê£g\"); } public void h(String s){ A5.print(\"B‚ê£h‚ê£\"+s); } } class C extends B { public void h(String s) { super.h(s); A5.print(\"N‚ê£h\"); } } class D extends B { public void h() { A5.print(\"D‚ê£h\"); } } class F extends D { String s = \"4‚ê£\"; public void g() { j(s); A5.print(\"F‚ê£g\"); } public void j(String s) { A5.print(\"F‚ê£j‚ê£\" + s); } } class G extends F { public void g() { j(s+s); A5.print(\"G‚ê£g\"); } } class H extends G { public void j(String s) { A5.print(\"G‚ê£j‚ê£\" + s); } } In der Klasse A5 beÀùnden sich die Methoden main und print. class A5 { public static void main (String[] args) { /* body */ } public static void print(String s) { System.out.println(s); } } Page 8 of 12 3144 Die folgenden Anweisungen sollen als \u0010Body\u0011 (Rumpf) anstelle des Kommentars /* body */ eingef√ºgt werden. Geben Sie f√ºr jede Anweisungsfolge an, was f√ºr eine Ausgabe erzeugt wird \u0015 entweder was gedruckt wird oder ob ein Laufzeitfehler auftritt (schreiben Sie \u0010Laufzeitfehler\u0011 oder \u0010Exception\u0011) oder ob der Compiler einen Fehler feststellt (schreiben Sie \u0010Compile-Fehler\u0011 oder \u0010Error\u0011). Falls ein gedruckter String Leerzeichen enth√§lt, dann ist die genaue Anzahl/Weite der Leerzeichen unwichtig. 1. B x = new B(); x.g(); ________________________ 2. Object x = new C(); ((B) x).g(); ________________________ 3. F x = new F(); x.h(); ________________________ 4. D x = new G(); x.h(\"9\"); ________________________ 5. D x = new C(); x.g(); ________________________ 6. D x = new D(); x.h(\"\"); ________________________ 7. Object z = new G(); B x = (D) z; x.h(\"7\"); ________________________ 8. D x = new F(); ((G) x).g(); ________________________ 9. B x = new H(); ((F) x).g(); ________________________ Page 9 of 12 3144 Aufgabe 6 (4) Gegeben sei in Abbildung 1 die EBNF-Beschreibung von q . x ‚áê a y a | a b y ‚áê b x b z ‚áê a b z | z a b | a a q ‚áê x | z Abbildung 1: EBNF-Beschreibung von q Geben Sie f√ºr jeden folgenden Ausdruck an, ob er nach der EBNF-Beschreibung von q in Abbildung 1 g√ºltig ist. Ausdruck G√ºltig Ung√ºltig Ausdruck G√ºltig Ung√ºltig a a a b b a b a b a b a b a b a a b a b b a a b a b a a a b a b a b b a b a Page 10 of 12 3144 Aufgabe 7 (6) Bitte geben Sie f√ºr die folgenden Java-Programmsegmente die schw√§chste Vorbedingung (weakest precondition) WP an. Bitte geben Sie die Precondition als Java-Expression an. Alle Variablen sind vom Typ int und initialisiert; es gibt keinen Over-/UnderÀõow. 1. WP: { } a = b - 8; if (a > 0) { c = 4 - a; } else { c = 4 + a; } Q: { c = 0 } 2. WP: { } f = e + 2; g = f * 3; Q: { g >= 12 } 3. WP: { } h = h + 1; j = h * h; Q: { j > 0 } 4. WP: { } a = b + 1; b = a; Q: { a * b < 0 } Wir w√ºnschen Ihnen alles Gute f√ºr das n√§chste Semester. Ihr \u0010Einf√ºhrung in die Programmierung\u0011- Team. Page 11 of 12 3144 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 4 5 9 2 5 6 4 3 7 7 6 4 5 Œ£ √úbertrag ‚àí‚àí Total 40 Page 12 of 12","libVersion":"0.5.0","langs":""}