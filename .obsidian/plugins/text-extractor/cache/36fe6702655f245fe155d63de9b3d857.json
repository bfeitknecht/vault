{"path":"sem2a/DDCA/VRL/slides/DDCA-L04a-combinational-circuits-theory.pdf","text":"Carnegie Mellon 1 Digital Design and Computer Architecture Mohammad Sadrosadati Frank K. Gürkaynak Adapted from Digital Design and Computer Architecture, David Money Harris & Sarah L. Harris ©2007 Elsevier http://safari.ethz.ch/ddca Combinational Circuits: Design Carnegie Mellon 2 What will we learn ¢ Converting desired functionality into Boolean equations ¢ Karnaugh Maps (simplification of equations) ¢ Circuits with more than one output ¢ Timing of combinational circuits Carnegie Mellon 3 Boolean Equations Example ¢ You are going to the cafeteria for lunch § You won’t eat lunch (𝑬) § If it is not open (𝑶) or § If they only serve cabbage (𝑪) ¢ Write a truth table for determining if you will eat lunch 𝑬 : O C E 0 0 0 1 1 0 1 1 open only cabb. eat Carnegie Mellon 4 Boolean Equations Example ¢ You are going to the cafeteria for lunch § You won’t eat lunch (𝑬) § If it is not open (𝑶) or § If they only serve cabbage (𝑪) ¢ Write a truth table for determining if you will eat lunch (𝑬) O C E 0 0 0 1 1 0 1 1 0 0 1 0 open only cabb. eat Carnegie Mellon 5 Some Definitions ¢ Complement: variable with a bar over it 𝑨 , 𝑩 , 𝑪 ¢ Literal: variable or its complement 𝑨 , 𝑨 , 𝑩 , 𝑩 , 𝑪 , 𝑪 ¢ Implicant: product (AND) of literals (𝑨 ( 𝑩 ( 𝑪) , (𝑨 ( 𝑪) , (𝑩 ( 𝑪) ¢ Minterm: product (AND) that includes all input variables (𝑨 ( 𝑩 ( 𝑪) , (𝑨 ( 𝑩 ( 𝑪) , (𝑨 ( 𝑩 ( 𝑪) ¢ Maxterm: sum (OR) that includes all input variables (𝑨 + 𝑩 + 𝑪) , (𝑨 + 𝑩 + 𝑪) , (𝑨 + 𝑩 + 𝑪) Carnegie Mellon 6 Sum-of-Products (SOP) Form ¢ All Boolean equations can be written in SOP form § Each row in a truth table has a minterm § A minterm is a product (AND) of literals § Each minterm is TRUE for that row (and only that row) § blackboard ¢ Formed by ORing the minterms for which the output is TRUE A B Y 0 0 0 1 1 0 1 1 0 1 0 1 minterm A B A B A B A B 𝒀 = 𝑭 𝑨, 𝑩 =\t? Carnegie Mellon 7 Sum-of-Products (SOP) Form ¢ All Boolean equations can be written in SOP form § Each row in a truth table has a minterm § A minterm is a product (AND) of literals § Each minterm is TRUE for that row (and only that row) § blackboard ¢ Formed by ORing the minterms for which the output is TRUE A B Y 0 0 0 1 1 0 1 1 0 1 0 1 minterm A B A B A B A B 𝒀\t = 𝑭 𝑨, 𝑩 \t = 𝑨 ( 𝑩 + (𝑨 ( 𝑩) Carnegie Mellon 8 The Dual: Product-of-Sums (POS) Form ¢ All Boolean equations can be written in POS form § Each row in a truth table has a maxterm § A maxterm is a sum (OR) of literals § Each maxterm is FALSE for that row (and only that row) ¢ Formed by ANDing the maxterms for which the output is FALSE 𝒀 = 𝑭 𝑨, 𝑩 = 𝑨 + 𝑩 ( (𝑨 + 𝑩) A + B A B Y 0 0 0 1 1 0 1 1 0 1 0 1 maxterm A + B A + B A + B Carnegie Mellon 9 SOP & POS Form ¢ SOP: sum-of-products ¢ POS: product-of-sums O C E 0 0 0 1 1 0 1 1 minterm O C O C O C O C O + C O C Y 0 0 0 1 1 0 1 1 maxterm O + C O + C O + C E 0 0 1 0 0 0 1 0 SOP or POS? Carnegie Mellon 10 SOP & POS Form ¢ SOP: sum-of-products ¢ POS: product-of-sums O + C O C E 0 0 0 1 1 0 1 1 0 0 1 0 maxterm O + C O + C O + C O C E 0 0 0 1 1 0 1 1 0 0 1 0 minterm O C O C O C O C SOP shorter if the output is TRUE in only a few cases POS is shorter if the output is FALSE in only a few cases 𝑬 = (𝑶 + 𝑪) ( (𝑶 + 𝑪) ( (𝑶 + 𝑪) 𝑬 = 𝑶 ( 𝑪 Carnegie Mellon 11 Karnaugh Maps (K-Maps) ¢ Boolean expressions can be minimized by combining terms ¢ K-maps minimize equations graphically ¢ Blackboard ¢ Works well for up to four variables C 00 01 0 1 Y 11 10 AB 1 1 0 0 0 0 0 0 C 00 01 0 1 Y 11 10 AB ABC ABC ABC ABC ABC ABC ABC ABC B C 0 0 0 1 1 0 1 1 A 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 Y Carnegie Mellon 12 Karnaugh Map Rules ¢ Special order for bit combinations: 00, 01, 11, 10 (only one bit changes from one to next) ¢ Every 1 in a K-map must be circled at least once ¢ Each circle must span a power of 2 (i.e. 1, 2, 4) squares in each direction ¢ Each circle must be as large as possible ¢ A circle may wrap around the edges of the K-map ¢ A “don't care” (X) is circled only if it helps minimize the equation Carnegie Mellon 13 Karnaugh Map Example ¢ Blackboard Carnegie Mellon 14 Karnaugh maps with Don’t Cares 0 C D 0 0 0 1 1 0 1 1 B 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 X 1 1 YA 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 X X X X X X 01 11 01 11 10 00 00 10 AB CD Y Carnegie Mellon 15 Karnaugh maps with Don’t Cares 0 C D 0 0 0 1 1 0 1 1 B 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 X 1 1 YA 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 X X X X X X 01 11 1 0 0 X X X 1 101 1 1 1 1 X X X X 11 10 00 00 10 AB CD Y Carnegie Mellon 16 Karnaugh maps with Don’t Cares 0 C D 0 0 0 1 1 0 1 1 B 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 X 1 1 YA 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 X X X X X X 01 11 1 0 0 X X X 1 101 1 1 1 1 X X X X 11 10 00 00 10 AB CD Y Y = A + BD + C Carnegie Mellon 17 Is this useful? ¢ In modern engineering practice, computer programs called logic synthesizers produce simplified circuits from a description of the logic function (later in chap 4) ¢ For large problems, logic synthesizers are much more efficient than humans. For small problems, a human with a bit of experience can find a good solution by inspection. ¢ Yes: you understand the basic concepts. Carnegie Mellon 18 From Logic to Gates ¢ SOP (sum-of-products) leads to two-level logic ¢ Example: 𝒀 = 𝑨 ( 𝑩 ( 𝑪 + 𝑨 ( 𝑩 ( 𝑪 + 𝑨 ( 𝑩 ( 𝑪 BA C Y minterm: ABC minterm: ABC minterm: ABC A B C Carnegie Mellon 19 Circuit Schematics ¢ Inputs: left (or top) side of a schematic ¢ Outputs: right (or bottom) side of a schematic ¢ Circuits should flow from left to right ¢ Straight wires are better than wires with multiple corners Carnegie Mellon 20 Circuit Schematic (cont.) ¢ Wires always connect at a T junction ¢ A dot where wires cross indicates a connection between the wires ¢ Wires crossing without a dot make no connection wires connect at a T junction wires connect at a dot wires crossing without a dot do not connect Carnegie Mellon 21 Multiple Output Circuits: Priority Circuit ¢ Output is the most significant TRUE input A1 A0 0 0 0 1 1 0 1 1 Y3 Y 2 Y1 Y 0A3 A2 0 0 0 0 0 0 0 0 0 00 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 11 0 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 01 1 1 11 1 A 0 A 1 PRIORITY CiIRCUIT A2 A 3 Y0 Y1 Y2 Y3 Carnegie Mellon 22 Multiple Output Circuits : Priority Circuit ¢ Output is the most significant TRUE input 0 A1 A0 0 0 0 1 1 0 1 1 0 0 0 Y3 Y 2 Y1 Y 0 0 0 0 0 0 0 1 1 0 1 0 0 A3 A2 0 0 0 0 0 0 0 0 0 0 0 1 0 00 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 11 0 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 01 1 1 11 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 A 0 A 1 PRIORITY CiIRCUIT A2 A 3 Y0 Y1 Y2 Y3 Carnegie Mellon 23 Priority Encoder Hardware “by inspection” ¢ We could write sum-of-products form and reduce the equations. From the functional description : § Y3 is TRUE whenever A3 is asserted, so Y3 = A3. § Y2 is TRUE if A2 is asserted and A3 is not asserted, so Y3 = A3A2 . A1 A0 0 0 0 1 1 0 1 1 0 0 0 0 Y3 Y 2 Y1 Y 0 0 0 0 0 0 0 1 1 0 1 0 0 A3 A2 0 0 0 0 0 0 0 0 0 0 0 1 0 00 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 11 0 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 01 1 1 11 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 A3A2A1A0 Y3 Y2 Y1 Y0 Carnegie Mellon 24 Compressing the Truth Table: Don’t Cares A1 A0 0 0 0 1 1 0 1 1 0 0 0 0 Y3 Y 2 Y1 Y 0 0 0 0 0 0 0 1 1 0 1 0 0 A3 A2 0 0 0 0 0 0 0 0 0 0 0 1 0 00 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 11 0 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 01 1 1 11 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 A1 A0 0 0 0 1 1 X X X 0 0 0 0 Y3 Y2 Y1 Y 0 0 0 0 1 0 0 1 0 0 1 0 0 A3 A2 0 0 0 0 0 0 0 1 X X 1 0 0 01 X Truth Table Compressed with don’t cares Carnegie Mellon 25 Additional logic levels: X and Z ¢ So far we used only 1s and 0s for our circuits. § For some cases we need several more, slightly strange, signals § These do not encode information, but represent different levels or cases where the output is neither 1 or 0 ¢ Contention: X § When a signal is being driven to 1 and 0 simultaneously § Not a real level, could be any value (1, 0 or something in between) ¢ High-impedance or tri-state: Z § When an output is not driving to any specific value § Means the output is disconnected § Not a real level, some other output is able to determine the level X Z Carnegie Mellon 26 Contention: X ¢ Usually a problem § Two outputs drive one node to opposite values § Normally there should only be one driver for every connection. ¢ Warning: “don’t care” and “contention” are both called X § These are not the same § Verilog (we will see later) uses X for both, VHDL uses ‘-’ for don’t care, and ‘X’ for contention § Don’t care: degree of freedom that is fixed at implementation time § Contention: a bug really, undetermined behaviour X Carnegie Mellon 27 Floating: Z ¢ Output is called: Floating, high impedance, tri-stated, high-Z ¢ Floating output might be 0, 1, or somewhere in between ¢ Example: tri-state buffer E A Y 0 0 Z 0 1 Z 1 0 0 1 1 1 A E Y Z Carnegie Mellon 28 Tristate Busses ¢ Floating nodes are used in tri-state busses § Many different drivers share one common connection § Exactly one driver is active at any time § All the other drivers are “disconnected” § The disconnected drivers are said to be floating, allowing exactly one node to drive. § More than one input can listen to the shared bus without problems en1 to bus from bus en2 to bus from bus en3 to bus from bus en4 to bus from busshared bus processor video Ethernet memory Carnegie Mellon 29 Combinational Building Blocks ¢ Combinational logic is often grouped into larger building blocks to build more complex systems ¢ Hide the unnecessary gate-level details to emphasize the function of the building block ¢ We have already studied some building blocks § full adders § priority circuits ¢ We now look at: § multiplexers § decoders Carnegie Mellon 30 Multiplexer (Mux) ¢ Selects between one of N inputs to connect to the output. ¢ Needs log2N-bit control input ¢ 2:1 Mux Example: Y 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 1 S D0 Y D 1 D1 D0S Carnegie Mellon 31 Multiplexer (Mux) ¢ Selects between one of N inputs to connect to the output. ¢ Needs log2N-bit control input ¢ 2:1 Mux Example: Y 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 S D0 Y D 1 D1 D0S Y 0 1 D1 D0 S Compressed version Carnegie Mellon 32 4:1 Multiplexer Implementations using two-level logic using tristate buffers using tree of 2:1 muxes Carnegie Mellon 33 Logic Using Multiplexers ¢ Implement Y = AB using a multiplexer; use A as a control Carnegie Mellon 34 Logic Using Multiplexers Carnegie Mellon 35 Logic Using Multiplexers ¢ We start with an ordinary truth table, and then combine pairs of rows to eliminate the rightmost input variable by expressing the output in terms of this variable. A B Y 0 0 0 0 1 0 1 0 0 1 1 1 Y = AB A Y 0 1 0 0 1 A B Y B Carnegie Mellon 36 Logic using Multiplexers Carnegie Mellon 37 Logic using Multiplexers ¢ In general, a 2N-input multiplexer can be programmed to perform any N-input logic function by applying 0’s and 1’s to the appropriate data inputs: it’s a lookup table! Carnegie Mellon 38 Decoders ¢ N inputs, 2N outputs ¢ One-hot outputs: only one output HIGH at once 2:4 Decoder A1 A0 Y3 Y2 Y1 Y000 01 10 11 0 0 0 1 1 0 1 1 0 0 0 1 Y3 Y2 Y1 Y0A0A1 0 0 1 0 0 1 0 0 1 0 0 0 These are exactly the minterms Carnegie Mellon 39 Decoder Implementation Y3 Y2 Y1 Y0 A0A1 2:4 Decoder A1 A0 Y3 Y2 Y1 Y000 01 10 11 0 0 0 1 1 0 1 1 0 0 0 1 Y3 Y2 Y1 Y0A0A1 0 0 1 0 0 1 0 0 1 0 0 0 Carnegie Mellon 40 Logic using Decoders 2:4 Decoder A B 00 01 10 11 Y = AB + AB Y AB AB AB AB Minterm = A Å B Carnegie Mellon 41 Timing ¢ Until now, we investigated mainly functionality ¢ What determines how fast a circuit is and how can we make faster circuits? A Y Time delay A Y Carnegie Mellon 42 Propagation and Contamination Delay ¢ Propagation delay: tpd = max delay from input to output ¢ Contamination delay: tcd = min delay from input to output A Y Time A Y tpd tcd Carnegie Mellon 43 Propagation & Contamination Delay ¢ Delay is caused by § Capacitance and resistance in a circuit § Speed of light limitation (not as fast as you think!) ¢ Reasons why tpd and tcd may be different: § Different rising and falling delays § Multiple inputs and outputs, some of which are faster than others § Circuits slow down when hot and speed up when cold Carnegie Mellon 44 Critical (Long) and Short Paths ¢ Critical (Long) Path: tpd = 2 tpd_AND + tpd_OR ¢ Short Path: tcd = tcd_AND A B C D Y Critical Path Short Path n1 n2 Carnegie Mellon 45 Propagation times Carnegie Mellon 46 Propagation times Carnegie Mellon 47 Glitches ¢ Glitch: when a single input change causes multiple output changes ¢ Glitches don’t cause problems because of synchronous design conventions (which we’ll talk about in a bit) ¢ But it’s important to recognize a glitch when you see one in timing diagrams Carnegie Mellon 48 Glitch Example ¢ What happens when A = 0, C = 1, B falls (1->0) ? A B C Y 00 01 1 Y 11 10 AB 1 1 0 1 0 1 0 0 C 0 Y = AB + BC Carnegie Mellon 49 Glitch Example (cont.) A = 0 B = 1 0 C = 1 Y = 1 0 1 Short Path Critical Path B Y Time 1 0 0 1 glitch n1 n2 n2 n1 Carnegie Mellon 50 Noticing a Glitch ¢ In general, a glitch can occur when a change in a single variable crosses the boundary between two prime implicants in a K- map. § Transition on B (ABC=001 to ABC 011) moves from one prime implicant to the other. § We can eliminate the glitch by adding redundant implicants to the K-map to cover these boundaries. A B C Y 00 01 1 Y 11 10 AB 1 1 0 1 0 1 0 0 C 0 Y = AB + BC Carnegie Mellon 51 Fixing the Glitch B = 1 0 Y = 1 A = 0 C = 1 00 01 1 Y 11 10 AB 1 1 0 1 0 1 0 0 C 0 Y = AB + BC + ACAC Carnegie Mellon 52 Why Understand Glitches? ¢ Glitches don’t cause problems because of synchronous design conventions (which we’ll talk about later) ¢ But it’s important to recognize a glitch when you see one in simulations or on an oscilloscope ¢ Can’t get rid of all glitches – simultaneous transitions on multiple inputs can also cause glitches Carnegie Mellon 53 What have we learned? ¢ How to construct truth tables ¢ Converting truth tables into SOP and POS form ¢ Using Karnaugh maps to simplify Boolean Equations ¢ Timing of combinational circuits § Propagation delay: longest time through the circuit § Contamination delay: shortest time in which the output reacts","libVersion":"0.3.2","langs":""}