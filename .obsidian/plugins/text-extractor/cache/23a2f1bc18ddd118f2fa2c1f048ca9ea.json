{"path":"var/export/TI-bf-u09.pdf","text":"Basil Feitknecht, 23-922-099, Camil Schmid, 23-944-234, Dennis Küenzi, 21-559-315 25 26 a) To prove is that for any two languages L1, L2 ∈ NTIME(f) it holds that L1 ∪ L2 ∈ NTIME(f). Notice that the given function f is time-constructible, since it grows monotonically and is always greater or equal to its input. By deﬁnition of NTIME, it holds that there exist two non-deterministic MTM M1, M2 that accept the given languages, i.e. L1 = L(M1) and L2 = L(M2). Then it holds that TimeM1(n), TimeM2(n) ∈ O(f(n)). This is deﬁned as the duration of the longest computation on all inputs of length n. Then we construct another don-deterministic MTM M that accepts the union of the two languages, i.e. L(M) = M1 ∪ M2. By construction we have TimeM (n) = max{TimeM1(n), TimeM2(n)}. Thus it follows that TimeM (n) ∈ O(f(n)) and hence L1 ∪ L2 ∈ NTIME(f). Informally it can be argued that a non-deterministic MTM that accepts the union of the two languages takes at most as long as the longer one of the two non-deterministic MTM that accept either one. Since this is still within the bounds of the space complexity class deﬁned by f, the union of the languages is in the same time complexity class. □ b) The problem isn't any easier, hence the language is still in the larger class namely non-deterministic time complexity. 27 diagonalizaion argument?","libVersion":"0.3.2","langs":""}