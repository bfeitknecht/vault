{"path":"sem1/EProg/extra/slides/EProg_sx.pdf","text":"252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g He r b s t s e m e s t e r 2022/23 Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h ©T h o m a s G r o s s 2 0 2 0 - 2022 Vo r l e s u n g L o g i s t i k § Im H ö r s a a l P r ä s e n s v o r le s u n g Mi t Ü b e r t r a g u n g i n ML E 1 2 Mi t Ü b e r t r a g u n g im Li v e S t r e a m § L i v e S t r e a m Ü b e r t r a g u n g § Übung e n Pr ä s e nz v e r a ns t a l t ung § On l i n e Gr u p p e ( n ) b e i g e n ü g e n d e m I n t e r e s s e 2 Vo r l e s u n g + § Im H ö r s a a l P r ä s e n s v o r le s u n g § St e l l e n Si e Fr a g e n ! § Bi t t e k e i n e p e r s ö n l i c h e n G e s p r ä c h e § Re m o t e Ü b e r t r a g u n g ( M L E 1 2 u n d L i v e S t r e a m ) § St e l l e n Si e Fr a g e n , me l d e n Si e Pr o b l e m e § Fr a g e n & Ko m m e n t a r e vi a Ed u A p p Co u r s e Ch a n n el 3 Ei n e ( pe r s ö nlic he ) Bi t t e § Ei n g e sc h r i e b e n e S t u d i e r e n d e : 576 (1 8 . 9 . , 2 1 : 0 0 ) § Vi d e o ü b e r t r a g u n g § Au f z e i c h n u n g § Im D 2 8 / E 1 2 k e in e G e s p r ä c h e ! § We n n S i e S M S / Om l e t / Th r e e m a /W h a t s A p p /M e s s e n g e r n u t z e n : § Le i s e o . k . 4 Di e s e V e r a n s t a l t u n g § Vo r l e s u n g e n ( M L D 2 8 ) § Di e n s t a g 10 – 12 § Fr e i t a g 8 – 10 (a u s s e r d e m D o 2 9 . 9 . & 6 . 1 0 ., 14 – 15, E T F F 5 ) § Übung e n ( di v e r s e R ä um e ) § Mi t t w o c h 8 – 10 5 In f o r m a tio ne n § We b S e i t e n d e r G r u p p e ( L a b o r a t o r y fo r So f tw ar e T e c h n o l o g y ) w w w . l s t . i n f . et h z . c h § Im E T H C o r p o r a t e D e s ig n – ni c h t i m m e r s o f o r t o nl i ne § Ma n c h ma l a u c h g a r n i c h t e r r e i c h b a r 6 Auf uns e r e r W e b S e it e f inde n S ie § Fo l i e n ( w e n n m ö g l i c h v o r d e r V o r l e s u n g a b e r k e i n e G a r a n t i e ) § Ac h t u n g : 1 S e i t e / S l i d e § Dr u c k e n S i e 2 , 4 , 6 S e i t e n p r o B l a t t A 4 P a p i e r § Be s s e r : d r u c k e n S i e n i c h t … § In d e r V o r le s u n g g e s c h r ie b e n e F o lie n ( A u sw a h l) § Vi e l l e i c h t 2 4 h - 48h n a c h d e r V o r l e s u n g § Di v e r se L i n k s ( z u V i d e o P o r t a l , M a t e r i a l d e r Ü b u n g sg r u p p e n , Au f g a b e n s t e l l u n g e n ) 7 In f o r m a tio ne n § Au f d e m V i d e op or t a l d e r E T H § Au f z e i c h n u n g d e s ü b e r t r a g e n e n L i v e s t r e a m s § Nu r H a u p t p r o j e k t o r § Di e V o r l e su n g w i r d a u f g e z e i c h n e t § Da h e r … 8 Da s P r o gr a m m f ü r h e u t e 9 «E d ucat or s , g ener al s , d i et i ci ans , p s y chol og i s t s , and pa r e n t s pr o gr a m . A r m ie s , s t u de n t s , a n d s o m e s o c ie t ie s ar e p r og r am m ed . » Al an Per l i s (F o re w o rd t o « S t ru c t u re a n d I n t e rp re t a t i o n o f C o m p u t e r Pr o gr a m s » , H . A be l s o n a n d G . J . Su s s m a n , 1 9 8 5 ) Fü r uns : Al l g e m e i n s t e Fo r m d e s Pr o gr a m m i e r e n : «C o m p u t e r P r o g r a m m i n g » Da s P r o gr a m m f ü r he ut e 10 § Wa r u m P r o g r a m m i e r e n l e r n e n ? § Be z u g z u m I n f o r ma t i k s t u d i u m a n d er E T H § Pr a k t i s c he As pe k t e § Übung e n § Com p u t e r ( r ä u m e ) § Wi e w i r d i e L e r n z i e l e e r r e i c h e n . . . W a r um P r o g r a m m ie r e n le r ne n? 111213 31. D e z . 2019 W a r um P r o g r a m m ie r e n le r ne n? § Wa s i s t ü b e r h a u p t « P r o g r a m m i e r e n » § Pr o gr a m m i e r e n – > P r o g r a m m § Pr o g r a m m : g r i e c h i s c h pr ó g r a m m a = s c h r if t lic h e B e k a n n t m a c h u n g , Au f r u f ; T a g e s o r d n u n g [D u d e n ] § Pr o gr a m m ( au s f ü h r u n g ) m a n i p u l i e r t S y m b ol e § Te x t , Z a h l e n , B i l d e r , … 15 W a r um P r o g r a m m ie r e n le r ne n? § Wa s i s t ü b e r h a u p t « P r o g r a m m i e r e n » § Pr o gr a m m i e r e n – > P r o g r a m m § Pr o g r a m m : g r i e c h i s c h pr ó g r a m m a = s c h r if t lic h e B e k a n n t m a c h u n g , Au f r u f ; T a g e s o r d n u n g [D u d e n ] § Pr o gr a m m i e r e n: E r s t e l l e n e i ne s Pr o gr a m m s 16 W a r um P r o g r a m m ie r e n le r ne n? § Wa s i s t ü b e r h a u p t « P r o g r a m m i e r e n » § Pr o gr a m m i e r e n – > P r o g r a m m § Pr o g r a m m : g r i e c h i s c h pr ó g r a m m a = s c h r if t lic h e B e k a n n t m a c h u n g , Au f r u f ; T a g e s o r d n u n g [D u d e n ] § Pr o gr a m m i e r e n ( Z us a m m e n f a s s e nd) : S o ft w a r e E n t w i c k l ung § Pr o g r a m m i e r u n g b e h a n d e l t al l e A s p ek t e – vo n E n t w u r f b i s I n s t a l l a t i o n 17 P r o g r a m m ie r e n § Er s t e l l e n ei n es Pr o gr a m m s § Pr o gr a m m : Fo l g e vo n An w e i s u n g e n , d i e v o n ei n em Co mp u t er au sg e f ü h r t we r d e n ( kö n n e n ) § Pr o gr a m m re a l i s i e r t ei n en Al g or i t h m u s § Al g o r i t h m u s : be s c hr e i b t Sc h r i t t - fü r - Sc h r i t t wi e e in e Au f g a b e ge l ö s t wi r d 19 P r o g r a m m ie r ung und In f o r m a tik § Ei n The m a de r In f o r m a t ik – es gi b t au c h an d e r e § Ze n t r a l we n n Si e le r n e n wo l l e n , wi e di e I n f o r m a t ik e in Pr o b l e m an g eh t § Fo k u s au f « Mö g l i c h k e i t e n und Gr e n z e n de r ma s c h i n e l l e n I n f o r m a t io n s v e r a r b e it u n g » § Es gi b t « unm ö g l i c he » Pr o b l e m e § Ko s t e n de r Be r e c h n u n g ( e in e r Lö s ung ) s in d se h r wi c h t i g 20 P r o g r a m m ie r ung « Pr og r a m m i ng as uni ve r s a l act i v i t y » by Vi n t o n Cer f , CA CM Ma r c h 2 0 1 6 , vo l 59(3) p 7 § an al y z i n g pr o bl e m s § br e a k i ng th e m do w n in t o ma n a g ea b l e pa r t s § fi ndi ng so l u t i o n s § in t e g r a t in g th e re s u l t s 21 P r o g r a m m ie r ung « Pr og r a m m i ng as uni ve r s a l act i v i t y » by Vi n t o n Cer f , CA CM Ma r c h 2 0 1 6 , vo l 59(3) p 7 § Pr o bl e m e a na l y s i e r e n § Pr o bl e m e i n ( be he r r s c hba r e ) T e i l pr o bl e m e z e r l e g e n § L ö s u n g e n f i n d e n § Er g e b n i sse z u sa m m e n f ü g e n /k o m b i n i e r e n 22 Vi n t o n C e r f (* 1 9 4 3 ) Ph . D . U C L A ( 1972) As s i s t a n t Pr of e s s or S t a n f or d ( 1972 - 76) Pr og r a m M a n a g e r ( D ) ARP A ( 1976 - 82) Zu s a m m e n mi t Bo b K a h n ma s s g e b l i c h an de r En t w i c k l ung vo n T C P / I P be t e i l i g t (I n t ern e t Pr ot ok ol l ) Na c h 1982 d i v e r s e Po s i t i o n e n in In d u s t r i e & Ve r b ä n d e n , se i t 2005 V P Goog l e Dr . h. c . E T H 1 9 9 8 23 Sc h l a g f er t i g be a n t w o r t e t e Vi n t Ce r f di e te i l w e i s e zi e m l i c h kr i t i s ch e n Fr a g en de s E T H - Publ i k um s .( 2 0 0 6 ) ht t p : / / w e b .e t h lif e .e t h z .c h /a r t i c l e s / ca m p u s l i f e / vi n t c e rf . h t ml P r o g r a m m ie r ung § L ö s u n g e n f i n d e n : f ü r a n d e r e M e n s c h e n § Be s c h r e i b e n w i e e i n e L ö s u n g a u s s e h e n s o l l § L ö s u n g e n f i n d e n : f ü r e i n e M a s c h i n e § An w e i s u n g e n f ü r e i n e M a s c h i n e / C o m p u t e r 24 P r o g r a m m ie r ung § L ö s u n g e n f i n d e n : f ü r a n d e r e M e n s c h e n § Be s c h r e i b e n w i e e i n e L ö s u n g a u s s e h e n s o l l § L ö s u n g e n f i n d e n : f ü r e i n e M a s c h i n e § An w e i s u n g e n f ü r e i n e M a s c h i n e / C o m p u t e r § Bes c h r ei b u n g , A n w ei s u n g : i n ei n er « S p r a c h e » 25 W ie P r o g r a m m ie r e n le r ne n ? § Pr o gr a m m : Fo l g e vo n An w e i s u n g e n , d i e v o n ei n em Co mp u t er au sg e f ü h r t we r d e n ( kö n n e n ) § Wi r mü s s en ve r s t e h e n we l c h e An w e i s u n g e n de r C o m put e r au s f ü h r e n ka n n § Da n n Er s t e l l e n de r Fo l ge vo n An w e i s u n g e n § Mö g l i c h e An w e i s u n g e n : Pr o gr a m m i e r s pr a c he 26 Ei n f ü h r u n g i n d i e P r o g r a m m i e r u n g § Mü s s e n e i n e P r o g r a m m i e r s p r a c h e v e r w e n d e n § Sp r ac h e f ü r C o m p u t e r ( f ü h r t au s) § . . . s c h r e ib t § Sp r ac h e f ü r M e n sc h e n ( sc h r e i b t, l i e s t) § . . . s e lt e n f ü h r t a u s (h e u t e ) 27 § Mü s s e n e i n e P r o g r a m m i e r s p r a c h e v e r w e n d e n § Sp r ac h e f ü r Co mp u t er (f ü h r t a u s ) § . . . s c h r e ib t § Sp r ac h e f ü r M e n sc h e n ( sc h r e i b t, l i e s t) § . . . s e lt e n f ü h r t a u s (h e u t e ) § Ch a r l e s [ P e i r c e ] w a s ap p o i n t ed to hi s fi r s t of f i c i a l po s i t i o n in th e Coa s t Gu a r d Su r v e y [ . . ] i n Ju l y 1861, as an as s i s t an t co m p u t e r at $ 3 5 p e r mon t h . (J . B r e n t , C h a r le s S a n d e r s P e ir c e : A L if e . 1 9 9 3 . p 6 1 ) Ei n f ü h r u n g i n d i e P r o g r a m m i e r u n g 28 H eu t e: M a s c h i n e Fr ü h e r : Be r u f s b e z e ic h n u n g Fr ü h e r : Be r u f s b e z e ic h n u n g P r o g r a m m ie r s pr a c he n We l c h e d i e s e r A u s s a g e n t r i f f t I h r e M e i n u n g a m g e n a u e s t e n ? 1. Ei n e P r o g r a mmi e r s p r a c h e s o l l t e e s mö g l i c h s t e i n f a c h m a c h e n e i n P r o g r a m m z u s c h r e i b e n 2. Ei n e P r o g r a mmi e r s p r a c h e s o l l t e e s mö g l i c h s t e i n f a c h m a c h e n , e i n P r o g r a m m z u l e s e n 3. Be i d e s i s t g l e i c h wi c h t i g 4. Ic h h a b e k e in e M e in u n g An t w or t e n S i e m i t d e m Ed u A p p Cl i c k er 29 Po l l 30 Ei n f ü h r u n g i n d i e P r o g r a m m i e r u n g § Mü s s e n e i n e P r o g r a m m i e r s p r a c h e v e r w e n d e n § Wi r v e r w e n d e n J a v a ™ § « I n d u s t r ia l st r e n g t h » Sp r a c h e § Vi e l e K o n z e p t e § N ic h t a lle w e r d e n in « E in f . in d ie P r o g r a m m ie r u n g » vo rg e s t e l l t / v e r w e n d e t § … d i e s e w e r d e n a u c h n i c h t f ü r d i e P r ü f u n g e r w a r t e t § Me h r T h e me n / K o n z e p t e i n w e i t e r e n V o r l e s u n g e n 31 P r o g r a m m ie r e n § Wi e k a n n m a n P r o g r a m m i e r e n l e r n e n ? § Br a u c h t m a n e i n e b e s o n d e r e Be g a b u n g ? § G ib t e s n u r N a t u r t a le n t e (u n d d e r R e s t k a n n z u s c h a u e n )? § Wi e k a n n m a n X X X X l e r n e n ? 32 Je d e ( r ) k a nn pr o g r a m m ie r e n le r ne n § Zi e l d e r V o r l e s u n g : K o mp e t e n z § Le rn z i e l : Si e k ö n n e n k o rr e k t e Pr o g r a m m e s y s t e m a t i s c h e r s t e l l e n § P r o g r a m m i e r e n i s t z e n t r a l e s T h e m a d e r In f o r m a t i k § Ab e r n i c h t d a s e i n z i g e ! § Wi c h t i g s i n d : § Au f m e r k s a m k e i t § Im a g i n a t i o n , Ph a n t a s i e § Üb u n g Üb u n g Üb u n g Üb u n g Üb u n g 37 Ve r a n s t a l t u n g = V o r l e s u n g + Ü b u n g § Pr o gr a m m i e r e n e r f o r de r t Übung § Nu r Ü b u n g m a c h t d e n M e i s t e r … § Si e l e r n e n n i c h t p r o g r am m i e r e n w e n n Si e si c h n u r d i e Vo r l e s u n g a n h ö r e n § Si e m ü sse n d i e Ü b u n g sa u f g a b e n l ö se n ( o d e r e s z u m i n d e s t v e r su c h e n ) 4044 Vi s i o n e n D e z 2 0 2 0 45 Vi s i o n e n D e z 2 0 2 0 Üb u n g e n § Au f g a b e n b l ä t t e r § We r d e n übe r W e b S e i t e publ i zi e r t § In d e r Übung s g r uppe v o r - be s pr o c he n § Ei n e G e l e g e n h e i t z u l e r n e n ! § Pr a x i s Ü b u n g e n § Bo n u s Ü b u n g e n § Te i l n a h m e a n Ü b u n g s g r u p p e n i c h t v e r b i n d l i c h a b e r s e h r emp f o h l en § Es g i b t s e l t e n nur e i ne Lö s ung § Ü b e n S ie d a s D is k u t ie r e n u n d V e r g le ic h e n v e r s c h ie d e n e r L ö s u n g e n 46 P r a x is und B o nus Üb u n g e n § We r d e n te i l w e i s e au t o m a ti sc h ko r r i g i e r t § « Au t om a t i s c h » – dur c h ei n en Co mp u t er § d. h . dur c h e in Pr o g r a m m , d a s v o n e in e m Com p u t e r aus ge f ühr t wi r d § Hi n w e i s : Ih r Ja v a Pr o gr a m m wi r d ni c h t di r e k t au sg e f ü h r t , di e J a v a An w e i s u n g e n we r d e n üb e r s e t z t ( dur c h ei n en Co mp i l er ) § An a l y s e de s Pr o g r a m m s § Se l b e Te c h n o l o g i e hi l f t be i de r Be w e r t u n g vo n Pr o g r a m m e n § Th e m a de r Fo r s c h u n g 47 P r a x is Ü bung e n § Si e k ö n n e n d i e L ö su n g e n i m I n t e r n e t ( w ah r sc h e i n l i c h ) f i n d e n § Mu s t e r l ö s u n g au s f rü h er en Jah r en § La ng w e i l e n di e A s s i s t i e r e nde n § Ei n e G e l e g e n h e i t z u l e r n e n ! § Be s p r e c h u n g i n d e r G r u p p e , F e e d b a c k , Ü b e r a r b e i t e n 48 Bo n u s Ü b u n g e n § Si e k ö n n e n ( ab 4 . o d e r 5 . A u f g ab e n b l a t t) « B o n u sp u n k t e » für di e B a s i s pr üfung s a m m e l n§ Bo n u s p u n k t e h e l f e n d i e N o t e a n z u h e b e n – ma x i ma l 0 . 2 5 N ot e n b on u s § Ma x i ma l n o t e a u c h o h n e B o n u s e r r e i c h b a r § Pr o gr a m m i e r e n i s t T e i l de r B a s i s pr üfung § De t a i l s s p ä t e r . 49 Bo n u s Üb u n g e n § An r e i z § Si e m ü sse n d i e A u f g ab e n se l b e r lö s e n . § Ab s c h r e i b e n (od e r a b s c h r e i b e n l a s s e n ) i s t u n e h r l i c h e s Ve r h a l t e n u n d w i r d n a c h d e r E T H D i s z i p l i n a r v e r o r d n u n g ge a h n d e t . § Nu r d i e B on u s a u f g a b e n l ös e n ? R i s k a n t . 5155 -1 0 0 10 20 30 40 50 60 70 80 90 10 0 11 0 12 0 -1 0 0 10 20 30 40 50 60 70 80 90 10 0 11 0 12 0 % L E B o n u s v s % P r o g r a m m i n g 100 % < 1 0 0 < 9 0 < 8 0 < 7 0 < 6 0 < 5 0 < 4 0 < 3 0 < 2 0 < 1 0 100 %< 1 0 0< 9 0< 8 0< 7 0< 6 0< 5 0< 4 0< 3 0< 2 0< 1 0 % Bo n u s v s . % P r o g r a m m i e r e n ( H S 2 1 ) 57 0 10 20 30 40 50 60 0 10 20 30 40 50 60 70 80 90 100 110 Pe r f o r m a n c e o f S t u d e n t s w / 1 0 0 % B o n u s ( % P ro g r a m m i n g o n X A x i s ) 100 %< 1 0 0< 9 0< 8 0< 7 0< 6 0< 5 0< 4 0< 3 0< 2 0< 1 00 0 An z a h l S t u d i e r e n d e f ü r % P r o g r a m m i e r e n ( v o l l e r B o n u s , H S 2 1 ) Bo n u s Üb u n g e n § An r e i z § St i c hw o r t : E i g e n v e r a n t w o r t u n g § Nu r d i e B on u s a u f g a b e n l ös e n ? R i s k a n t w e n n S i e we n i g / k e i n e P r o g r a m m i e r e r f a h r u n g h a b e n . § Und: S i e m üs s e n di e Auf g a be n se l b e r lö s e n u m z u le r n e n . 58 Üb u n g s g ru p p e n § Wi r b i e t e n z w e i A r t e n v o n G r u p p e n a n : § Fo k u s g r u p p e n Fo k u s au f St u d i e r e n d e oh n e Vo r k e n n t n i s s e und oh n e vo r h e r i g e Pr o g r a m m i e r e r f a h r u n g (e g a l we l c h e Pr o g r a m m i e r s p r a c h e ) § Ge m i s c h t e Gr u p p e n Fü r al l e Vo r k e n n t n i s s t u f e n Fr e i e Wa h l -- Al l e G r u p p e n be ha nde l n de n se l b e n St o f f / d i e se l b e n Au f g a b e n 59 Üb u n g s g ru p p e n § Wi r b i e t e n z w e i A r t e n v o n G r u p p e n a n : § Fo k u s g r u p p e n § Fo k u s au f St u d i e r e n d e oh n e Vo r k e n n t n i s s e und oh n e vo r h e r i g e Pr o g r a m m i e r e r f a h r u n g (e g a l we l c h e Pr o g r a m m i e r s p r a c h e ) § Ge m i s c h t e Gr u p p e n § Fü r al l e Vo r k e n n t n i s s t u f e n Fr e i e Wa h l -- Al l e G r u p p e n be ha nde l n de n se l b e n St o f f / d i e se l b e n Au f g a b e n 60 Üb u n g s g ru p p e n § Wi r b i e t e n z w e i A r t e n v o n G r u p p e n a n : § Fo k u s g r u p p e n § Fo k u s au f St u d i e r e n d e oh n e Vo r k e n n t n i s s e und oh n e vo r h e r i g e Pr o g r a m m i e r e r f a h r u n g (e g a l we l c h e Pr o g r a m m i e r s p r a c h e ) § Ge m i s c h t e Gr u p p e n § Fü r al l e Vo r k e n n t n i s s t u f e n § Fr e i e Wa h l -- Al l e G r u p p e n be ha nde l n de n se l b e n St o f f / d i e se l b e n Au f g a b e n 61 Ei n s c h r e i b u n g § Ab h e u t e Na c h m i t t a g in my S t u d i e s mö g l i c h § We n n di e be v o r z ug t e Ar t v on G r u p p e ni c h t ve r f ü g b a r is t : Wa r t e n ! § Wi r pa s s e n An z a h l und Gr ö s s e de r G r uppe n a n § We n n Si e mi t an d e r e n Stu d i e r e n d e n in ei n e Gr uppe wo l l e n : § Zu s a m m e n ( ze i t g l e i c h ) e in s c h r e ib e n § Bi t t e b i s F r ei t a g ( 2 3 . 9 . ) ei n s c h r ei b en ! § N a c h z ü g le r sp ä t e r mög l i c h , ab er ev t l . mi t Ei ns c hr ä nk ung e n 62 Be i P r o b l e m e n § Er s t e A n l a u f s t e l l e T r e f f e n d e r Ü b u n g sg r u p p e § We n n n i c h t m ö g l i c h : « S t u d y C e n t e r » § On l i n e vi a Z o o m § Coa c h e s k ön n e n h e l f e n § St u d y C e n t e r n i c h t E r sa t z fü r Ü b u n g sg r u p p e § We i t e r e I n f o r m a t i o n e n a u f d e m We b 63 Wö c h e n t l i c h e r A b l a u f ( i m N o r m a l f a l l ) § Di e n s t a g : P r a x i s Ü b u n g e n u n d ( sp ä t e r ) B on u s Au f g a b e n a u f de m W e b publ i z i e r t § Übung 0 : [ H e u t e ] E i n r i c h t e n d e r A r b e i t s u m g e b u n g § Mi t t w o c h : T r e f f e n Ü b u n g s g r u p p e § Be s p r e c h u n g A u f g a b e n ( a l t e , n e u e , e x t r a ) u n d V o r l e s u n g s t h e m e n § Di e s e W o c h e n u r S t u d y C e n t e r § Di e n s t a g F o l g e w o c h e : A b g a b e d e r L ö su n g e n ( P r a x i s Ü b u n g e n und B o nus A uf g a be n) 64 Be s o n d e r e R e g e l n f ü r W o c h e 1 0 & 1 1 § Bo n u s A u f g a b e er s t a m 3 0 . 1 1 . ( 7 . 1 2 . ) p u b l i z i er t u n d mu s s in n e r h a lb v o n 2 S t u n d e n a b g e g e b e n w e r d e n § We i t e r e D e t a i l s a u f d e m We b u n d s p ä t e r i n V o r l e s u n g 65 Wi e v i e l mü s s e n Si e im 1. S em es t er ar be i t e n ? 717273 1 E C T S Kr e d i t = 3 0 St d /S e m e s t e r 7 Kr e d i t s = 2 1 0 St d /S e m e s t e r 1 Se m = 2 3 Wo c h e n 210 St d /23 Wo c h e n = 9 St d / Wo c h e 30 Kr e d i t s = 9 0 0 St d /S e m e s t e r … 39 S t d / Wo c h e Hm m m -- 39 S t d / Wo c h e ?? Vi e l l e i ch t im Fi l m . O d e r a n d e r X X X U n i v e r s i t ä t . Er w ar t e n Si e me h r Ar b e i t a n d e r E TH! ! 0027 \"E i n f ü h ru n g i n d i e P r o g r a m m ie r ung \" § Pr o gr a m m : An w e i s u n g e n in Pr o gr a m m i e r s pr a c he § An w e i s u n g e n arb ei t en mi t We r t e n ( Za h l e n ) § Au c h ei n f a c h e Pr o bl e m e kö n n e n übe r r a s c he n § Au f g a b e : B e r e c h n e n S i e d e n D u r c h s c h n i t t v o n 2 M e s s w e r t e n § Al g o r i t h m u s ( w e n n w i r d e n Au s d r u c k v e r w e n d e n w o l l e n ) : § Ad d i e r e d i e M e s s w e r t e § Di v i d i e r e d i e S u m m e d u r c h 2 77 Wo k ö n n t e d a s e i n e R o l l e s p i e l e n ? 78 Du r c h s c h n i t t St e u e r u n g Dur c hs c hni t t be r e c hne t al s (Sen s o r1 + Sen s o r2 )/ 2 Se n so r 1 Se n so r 2 Wo k ö n n t e d a s e i n e R o l l e s p i e l e n ? 79 Se n so r 1 Se n so r 2 Du r c h s c h n i t t St e u e r u n g Dur c hs c hni t t be r e c hne t al s (Sen s o r1 + Sen s o r2 )/ 2 © D L R G e r m a n A e r o s p a c e Ce n t e r / C C B Y (h t t p s : / / cr e a t i v e co m m o n s . o r g /l i c e n s e s /b y /2 . 0 ) Ar i a n e - 5 Wo k ö n n t e d a s e i n e R o l l e s p i e l e n ? 81 Se n so r 1 Se n so r 2 Du r c h s c h n i t t St e u e r u n g Du r c h s c h n i t t Be r e c h n u n g er w ar t e t ga n z e Za h l e n © D L R G e r m a n A e r o s p a c e Ce n t e r / C C B Y (h t t p s : / / cr e a t i v e co m m o n s . o r g /l i c e n s e s /b y /2 . 0 ) Ar i a n e - 5 Wo k ö n n t e d a s e i n e R o l l e s p i e l e n ? 83 Se n so r 1 Se n so r 2 lie f e r t Gl e i tk om m a z a h l Du r c h s c h n i t t St e u e r u n g Du r c h s c h n i t t Be r e c h n u n g er w a rt e t ga n z e Za h l © D L R G e r m a n A e r o s p a c e Ce n t e r / C C B Y (h t t p s : / / cr e a t i v e co m m o n s . o r g /l i c e n s e s /b y /2 . 0 ) Ar i a n e - 5 Wo k ö n n t e d a s e i n e R o l l e s p i e l e n ? 84 Se n so r 1 Se n so r 2 lie f e r t Gl e i tk om m a z a h l Du r c h s c h n i t t St e u e r u n g Du r c h s c h n i t t Be r e c h n u n g er w a rt e t ga n z e Za h l ht t ps : / / www. y o u t u b e . c o m / wa t c h ? v =5 t J P X Y A 0 N ec Ar i a n e - 5 (V 88): D e t a i l s s i n d e t w a s ko m p l i z i e r t e r a b e r d e r 1 . T e s t f l u g wa r n i c h t e r f o l g r e i c h : Ei n tr i v i a l er Alg o r it hm us § … u n d tr o tz d e m ei n i g e Pr o bl e m e be i m Pr o gr a m m i e r e n § Mü s s e n gen au fe s t l e g e n , we l c h e Fo r m a t e (u n d We r t e b e r e i c h e ) er w a r t e t we r d e n § Er s t e s The m a : W i e kö n n e n wi r Fo r m a t e be s c hr e i be n ? § Da z u im Hi n t e r g r u n d : Ar b e i t s u m g e b u n g ei n r i c h t en 85 Ve r s c h i e d e n e s 86 Br a u c h e n S i e e i n e n C o m p u t e r ? § Im P r in z ip ne i n (S i e k ön n e n d i e S y s t e m e i m C AB H 56/ 57 od e r im H G b e n u t z e n ) § Ir g e n d w a n n v ie lle ic h t s c h o n … § Da s P r o j e k t N e p t u n b i e t e t d i v e r se N o t e b o o k s / L a p t o p s z u güns t i g e n K o ndi t i o ne n ht t p : / / w w w . p r o j e k t n e p t u n . c h § Fe n s t e r b i s 3. O k t o b e r § Nä c h s t e s F e n s t e r A n f a n g F r ü h j a h r s e m e s t e r 87 Di e s e V e r a n s t a l t u n g § Fr a g e n (a n d e n D o z e n t e n ) s i n d i m m e r e r l a u b t u n d e r w ü n s c h t § Fr a g e n Si e n i c h t d i e N a c h b a r i n / d e n N a c h b a r § Wi e k a n n i c h w i s s e n w a s I h n e n S c hw i e r i g k e i t e n m a c h t ( o d e r w a s S i e ni c h t l e s e n k ö nne n) ?? § Ch a t b e s s e r a l s H a n d h e b e n : d e r T e x t m u s s n i c h t p e r f e k t s e i n § Au c h of f - lin e s i n d F r a g e n m ö g l i c h § e M a il -- ab er b i t t e m i t I h r er student.ethz.ch Ad r e s s e ! § Sp r e c h s tu n d e b e i I n t e r e sse 88 Wi c h t i g : Bi t t e be l e g e n S i e di e V o r l e s ung i n my S t u d i e s . So n s t k ö n n e n w i r Si e n i c h t e r r e i c h e n u n d Si e h ab e n n i c h t Zu g an g z u A u f g ab e n , u s w . Tr a g e n S i e s i c h i n e i n e Ü b u n g s g r u p p e e i n Unb e d i ng t b i s F r e i t a g d e n 2 3 . 9 . , 1 2 Uhr m i t t a g s ! 89 We i t e r e r A b l a u f (P l a n) § 23 . 9 .: 8 : 1 5 ( F r ) : V o r le s u n g § 27. 9. : 10:15 (D i ): V o r l e s u n g § 28. 9. : 1. T r e f f e n d e r G r u p p e n (M i t t w o c h n ä c h s t e W o c h e ) § Th e m a : A r b e i t s u m g e b u n g e i n r i c h t e n § 29. 9. : 14:15 (D o ): V o r l e s u n g [E T A F 5 , K e i n e « A l g o r i t h m e n u n d Da t e ns t r uk t ur e n» zu di e s e r Z e i t ] § 30. 9. : 8:15 (F r ): V o r l e s u n g § 6. 10. : 14:15 (D o ): V o r l e s u n g [E T A F 5 ] § 7. 10. : 8:15 (F r ): V o r l e s u n g 90 Vo r s c h a u § Übung U0 : ( 2 0 . 9 . - > 28. 9. ): E i n r i c h t e n d e r Ar b e i t s u m g e b u n g § Ke i n e A b g a b e – wi r w o l l e n I h n e n h e l f e n s c h n e l l a r b e i t e n zu k ö n n e n § Be i P r o b l e m e n g g f . i n d e r G r u p p e e i n r i c h t e n § Sp r e c h s t u n d e n ( St u d y C e n t e r ) n u t z e n § Übung U1 ( 2 7 . 9 . - > 4 . 1 0 . ) : « A b g a b e » dur c hs pi e l e n, e i n f a c he Au f g a b e § So e r h a l t e n Si e a u c h F e e d b a c k , g g f . i n d e r G r u p p e e i n r e i c h e n § Übung U2 ( 4 . 1 0 . - > 1 1 . 1 0 . ) : ei n f a c h s t e P r o g r a m m e § Übung U3 o de r U4 : B o nus punk t e m ö gl i c h ( s pä t e r m e hr ) 91 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 1. 0 E B N F Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h P r o g r a m m ie r ung § Ei n e P r o g r a m m i e r sp r a c h e g i b t u n s v o r , w i e w i r L ö su n g ( e n ) ei n es P r o b l ems b es c h r ei b en k ö n n en . § Me h r E i n s c h r ä n k u n g e n ( i n d e r S p r a c h e ) ma c h e n d i e K o mmu n i k a t i o n le ic h t e r § …. u n d e r f o r d e r n m e h r A u f w a n d b e i d e r E n t wi c k l u n g § Ge na ue B e s c hr e i bung ( v o n Pr o gr a m m i e r s pr a c he n, W e r t e n, In p u t , ...) w ic h t ig e s T h e m a f ü r In f o r m a t ik 2 P r o g r a m m ie r s pr a c he n § Bes t i mmen di e An w e i s u n g e n , d i e ei n Pr o gr a m m en t h a l t en da r f § Bes t i mmen Fo r m a t e und We r t e b e r e i c h e , mi t de ne n Pr o gr a m m e ar b e i t e n 3 Wi e k a n n ma n e i n e ( Pr o gr a m m i e r )S p r ac h e b es c h r ei b en ? § Not a t i on E B NF E – Ex t e n d e d B – Ba c k u s N – Na u r od e r Nor m a l F – Fo r m § Bes c h r ei b t d i e S y n t a x ei n er S p r a c h e § Fo o d fo r th o u g h t : W e l c h e Sp r a c h e n k a n n m a n d a m i t b e s c h r e i b e n ? 4 Es g i b t w e i t e r e G r ü n d e f ü r EBN F i n EP r o g § Pr a k t i s c he B e w e i s e r e l e v a n t e r E i g e ns c ha ft e n § Be i s p i e l e k o m m e n n o c h … § Je d e E B N F B e sc h r e i b u n g h a t z w e i Se i t e n § Li e f e r t e i ne M e ng e v o n S y m bo l e n ( di e de r EB N F B e s c hr e i bung ge n ü ge n ) § «P r o g r a m m i e r u n g im ga n z Kl e i n e n » § Er l a ub t zu pr üf e n ob e in Sy m b o l d e r E B N F Be s c h r e i b u n g ge n ü g t § «G e n ü g t »: ( i n f o rm e l l ) d e r B e s ch r e i b u n g e n t s p r e ch e n d § «S y m b o l »: ( i n f o rm e l l ) Z e i ch e n o d e r Z e i ch e n f o l g e 7 Üb e r s i c h t § Si e l e r n e n d i e vi e r e l e m e n t ar e n A u sd r u c k sm ö g l i c h k e i t e n i n EB N F k e n n e n § Si e l e r n e n E B N F B e sc h r e i b u n g e n z u l e se n u n d v e r s t e h e n § Si e l e r n e n z u e n tsc h e i d e n o b e i n S y m b o l l e g al i s t ( f ü r e i n e EB N F B e sc h r e i b u n g ) § …. 8 EBN F § Vi e r E l e m e n t e ( « co n t r o l fo r m s » ) d i e S i e i n J a v a w i e d e r f i n d e n we r d e n 11 EBN F § Pr o gr a m m i e r ung i m g a nz K l e i ne n § Vi e r E l e m e n t e ( « co n t r o l fo r m s ») d i e S i e i n J a v a w i e d e rf i n d e n we r d e n § Au f r e i h u n g ( « se q u e n c e ») § En t s c he i dung ( « de c i s i o n ») – Au s w a h l u n d O p t i o n § Wi e d e r h o l u n g ( « re p e t i t i o n ») § Re k u r s i o n ( « re c u r s i o n ») 12 EBN F § Bes c h r ei b u n g en h a b en ei n en N a men u n d d i es e N a men kö n n e n w i e d e r v e r w e n d e t w e r d e n§ U m k o m p liz ie r t e r e B e s c h r e ib u n g e n z u e r s t e lle n § Er s t e l l e n e i n e r EB N F B e sc h r e i b u n g ß à Pr o gr a m m i e r e n i n Ja v a § Äh n l i c h e S c h r i t t e § EB N F e i n e fo r m a l e Bes c h r ei b u n g § Pr ä z i s e u n d v e r s t ä n d l i c h 13 1. 1 E B NF R e g e l n u n d B e s c h r e i b u n g e n § EB N F B e sc h r e i b u n g b e s t e h t a u s M e n g e v o n EB N F R e g e l n § Me n g e : R e i h e n f o l g e d e r R e g e l n u n w i c h t i g § Jed e R eg el g i b t an w el c h e S y m b o l e er l au b t s i n d § Be i s p i e l : E BN F R e g e l f ü r e i n e Z i f f e r § EB N F B e sc h r e i b u n g gi b t a n w e l c he S ym bo l e e r l a ub t s i nd § Er l a ub t : de n R e g e l n e n t s pr e c he nd g e bi l de t § Wi r w e r d e n d a s n oc h p r ä z i s i e r e n § Be i s p i e l : EBN F Be s c h r e i b u n g f ü r 2 - st e l l i g e p o s i t i v e g a n z e Z a h l e n § Ve r w e nde t (m ö g l i c h e r w e i s e ) E B N F R e g e l n f ü r Z i f f e r n 14 W ie s ie h t e ine E B N F R e g e l au s ? § D re i Bes t a n d t ei l e: § Li nk e - Se i t e ( Le f t - Ha n d S i d e , L HS ) § Re c h t e - Se i t e ( Ri g h t - Ha n d S i d e , RHS ) § ⟸ ⟸ tr e n n t L H S v o n R H S , a u sg e sp r o c h e n « i s t d e f i n i e r t a l s» § d. h L H S ⟸ RHS § LH S § Ei n W o r t ( k ur s i v , k l e i ng e s c hr i e be n) – de r N a m e de r EB N F R e g e l 18 § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) § Ka n n e n t h a l t e n § Z e ic h e n (s t e lle n d a s Z e ic h e n d a , d . h . w ir e r w a r t e n d ie s e s Z e ic h e n und k e i n a nde r e s ) § … 19 Be i s p i e l EBN F R e g e l § zi f f e r _ n u l l ⟸ 0 § zi f f e r _ e i n s ⟸ 1 21 § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) § Ka n n e n t h a l t e n § Z e ic h e n (s t e lle n d a s Z e ic h e n d a , d . h . w ir e r w a r t e n d ie s e s Z e ic h e n und k e i n a nde r e s ) § N a m e n (v o n E B N F R e g e ln ) § ... 22 Be i s p i e l EBN F R e g e l § zi f f e r _ n u l l ⟸ 0 § zi f f e r _ e i n s ⟸ 1 § zi f f e r _ n u l l ⟸ 0 za h l _ n 0 ⟸ zi f f e r _ n u l l 23 § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) § Ka n n e n t h a l t e n § Z e ic h e n (s t e lle n d a s Z e ic h e n d a , d . h . w ir e r w a r t e n d ie s e s Z e ic h e n und k e i n a nde r e s ) § N a m e n (v o n E B N F R e g e ln ) § Ko m b i n a t i o n e n d e r v i e r Ko n t r o l e l e m e n t e (« co n t r o l fo r m s ») ( a u f fo l g e n d e n S e i t e n ) 24 § EB N F R e g e l b e s t e h t a u s: § Li nk e - Se i t e ( Le f t - Ha n d S i d e , L HS ) § Re c h t e - Se i t e ( Ri g h t - Ha n d S i d e , RHS ) § ⟸ ( tr e n n t L H S v o n R H S , a u sg e sp r o c h e n « i s t d e f i n i e r t a l s» ) § LH S § Ei n W o r t ( k ur s i v , k l e i ng e s c hr i e be n) – de r N a m e de r EB N F R e g e l § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) d u r c h § Na m e n ( v o n E B NF R e g e l n) – ku r s i v u n d k l e i n g e s c h r i e b e n § Ze i c h e n ( s t e l l e n d a s Ze i c h e n d a , d . h . w i r e r w a r t e n d i e s e s Ze i c h e n u n d k e i n an d e r e s ) – ni c h t k ur s i v § Ko m b i n a t i o n e n d e r v i e r Ko n t r o l e l e m e n t e (« co n t r o l fo r m s ») ( a u f fo l g e n d e n S e i t e n ) 25 Be i s p i e l EBN F R e g e l § zi f f e r _ n u l l ⟸ 0 § zi f f e r _ e i n s ⟸ 1 § zi f f e r _ n u l l ⟸ 0 za h l _ n 0 ⟸ zi f f e r _ n u l l 26 Mü ssen wir ei n Alpha be t an g e b e n ? 29 EBN F – st a tt ku r s i v zw e i K l a m m e r n § di gi t _ 9 ⟸ 9 30 EBN F – st a tt ku r s i v zw ei K l a m m er n § di gi t _ 9 ⟸ 9 § <d i g i t _9 > ⟸ 9 31 § EB N F R e g e l b e s t e h t a u s: § Li nk e - Se i t e ( Le f t - Ha n d S i d e , L HS ) § Re c h t e - Se i t e ( Ri g h t - Ha n d S i d e , RHS ) § ⟸ ( tr e n n t L H S v o n R H S , a u sg e sp r o c h e n « i s t d e f i n i e r t a l s» ) § LH S § Ei n W o r t ( k ur s i v , k l e i ng e s c hr i e be n) – de r N a m e de r EB N F R e g e l § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) d u r c h § Na m e n ( v o n E B NF R e g e l n) – ku r s i v u n d k l e i n g e s c h r i e b e n § Ze i c h e n ( s t e l l e n d a s Ze i c h e n d a , d . h . w i r e r w a r t e n d i e s e s Ze i c h e n u n d k e i n an d e r e s ) – ni c h t k ur s i v § Ko m b i n a t i o n e n d e r v i e r Ko n t r o l e l e m e n t e (« co n t r o l fo r m s ») ( a u f fo l g e n d e n S e i t e n ) 33 LH S ⟸ RH S EBN F § Vi e r K o m b i n a t i o n s m ö g l i c h k e i t e n ( « co n t r o l fo r m s ») d i e S i e i n Ja v a w i e d e r f i n d e n w e r d e n § Au f r e i h u n g ( « se q u e n c e ») § En t s c he i dung ( « de c i s i o n ») – Au s w a h l u n d O p t i o n § Wi e d e r h o l u n g ( « re p e t i t i o n ») § Re k u r s i o n ( « re c u r s i o n ») § Ko m b i n i e r e n ( i n d e r R H S ) E B N F R e g e l n 34 Co n t r o l fo r m s (z um K o m binie r e n) § Au f r e i h u n g § Vo n l i n k s n a c h r e c h t s g e l e s e n § Re i h e n fo l g e i s t w i c h t i g § Au f r e i h u n g B e i s p i e l 35 Co n t r o l fo r m s (z um K o m binie r e n) § Au f r e i h u n g § Vo n l i n k s n a c h r e c h t s g e l e s e n § Re i h e n fo l g e i s t w i c h t i g § Au f r e i h u n g B e i s p i e l § num be r _ 9 8 ⟸ 9 8 § 8 u n d 9 s i n d Z e i c h e n / B u c h s t a b e u n s e r e s A l p h a b e t s § my r u l e ⟸ fo r m _ 1 fo r m _ 2 fo r m _ 2 § fo r m _ 1 , fo r m _ 2 wo a n d e r s d e f i n i e r t 36 z. B. fo r m _ 1 ⟸ S fo r m _ 2 ⟸ B buc hs t abe _d⟸ D buc hs t abe _2 ⟸ 2 buc hs t abe _8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _d buc hs t abe _2 buc hs t abe _8 Be s c h r e i b u n g : M e n g e v o n R e g e l n § Au f r e i h u n g § Re g e l vo n l i n k s n a c h re c h t s g e l e s e n § Re i h e n fo l g e i s t w i c h t i g § Au f r e i h u n g B e i s p i e l – ve r s c h i e d e n e Me n g e n , se l b e s Sy m b o l 41 Me n g e 1 buc hs t abe _ 8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _ d buc hs t abe _ 2 buc hs t abe _ 8 buc hs t abe _ 2 ⟸ 2 buc hs t abe _ d ⟸ D Me n g e 3 Me n g e 4 ra u m _ 1 ⟸ D 2 8 buc hs t abe _d ⟸ D buc hs t abe _8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _d buc hs t abe _2 buc hs t abe _8 buc hs t abe _2 ⟸ 2 Me n g e 2 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 1. 0 E B N F Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1. 1 E B NF R e g e l n u n d B e s c h r e i b u n g e n § EB N F B e sc h r e i b u n g b e s t e h t a u s M e n g e v o n EB N F R e g e l n § Me n g e : R e i h e n f o l g e d e r R e g e l n u n w i c h t i g § Jed e R eg el g i b t an w el c h e S y m b o l e er l au b t s i n d § Be i s p i e l : E BN F R e g e l f ü r e i n e Z i f f e r § EB N F B e sc h r e i b u n g gi b t a n w e l c he S ym bo l e e r l a ub t s i nd § Er l a ub t : de n R e g e l n e n t s pr e c he nd g e bi l de t § Wi r w e r d e n d a s n oc h p r ä z i s i e r e n § Be i s p i e l : EBN F Be s c h r e i b u n g f ü r 2 - st e l l i g e p o s i t i v e g a n z e Z a h l e n § Ve r w e nde t (m ö g l i c h e r w e i s e ) E B N F R e g e l n f ü r Z i f f e r n 3 § EB N F R e g e l b e s t e h t a u s: § Li nk e - Se i t e ( Le f t - Ha n d S i d e , L HS ) § Re c h t e - Se i t e ( Ri g h t - Ha n d S i d e , RHS ) § ⟸ ( tr e n n t L H S v o n R H S , a u sg e sp r o c h e n « i s t d e f i n i e r t a l s» ) § LH S § Ei n W o r t ( k ur s i v , k l e i ng e s c hr i e be n) – de r N a m e de r EB N F R e g e l § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) d u r c h § Na m e n ( v o n E B NF R e g e l n) – ku r s i v u n d k l e i n g e s c h r i e b e n § Ze i c h e n ( s t e l l e n d a s Ze i c h e n d a , d . h . w i r e r w a r t e n d i e s e s Ze i c h e n u n d k e i n an d e r e s ) – ni c h t k ur s i v § Ko m b i n a t i o n e n d e r v i e r Ko n t r o l e l e m e n t e (« co n t r o l fo r m s ») ( a u f fo l g e n d e n S e i t e n ) 4 LH S ⟸ RH S EBN F § Vi e r K o m b i n a t i o n s m ö g l i c h k e i t e n ( « co n t r o l fo r m s ») d i e S i e i n Ja v a w i e d e r f i n d e n w e r d e n § Au f r e i h u n g ( « se q u e n c e ») § En t s c he i dung ( « de c i s i o n ») – Au s w a h l u n d O p t i o n § Wi e d e r h o l u n g ( « re p e t i t i o n ») § Re k u r s i o n ( « re c u r s i o n ») § Ko m b i n i e r e n ( i n d e r R H S ) E B N F R e g e l n 5 1. 1. 1 C on t r ol f orm : A u f r e i h u n g § Au f r e i h u n g (« se q u e n c e ») § Fo l g e v o n Z e i c h e n ( « B u c h s t a b e » , « Z i f f e r n » , … ) § Vo n l i n k s n a c h r e c h t s g e l e s e n § Re i h e n fo l g e d e r Z e i c h e n i s t w i c h t i g § Au f r e i h u n g B e i s p i e l 6 buc hs t abe _d⟸ D buc hs t abe _2 ⟸ 2 buc hs t abe _8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _d buc hs t abe _2 buc hs t abe _8 Be s c h r e i b u n g : M e n g e v o n R e g e l n § Au f r e i h u n g § Re g e l vo n l i n k s n a c h re c h t s g e l e s e n § Re i h e n fo l g e d e r Z e i c h e n i s t w i c h t i g § Au f r e i h u n g B e i s p i e l – ve r s c h i e d e n e Me n g e n , se l b e s Sy m b o l 7 Me n g e 1 buc hs t abe _ 8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _ d buc hs t abe _ 2 buc hs t abe _ 8 buc hs t abe _ 2 ⟸ 2 buc hs t abe _ d ⟸ D Me n g e 3 Me n g e 4 ra u m _ 1 ⟸ D 2 8 buc hs t abe _d ⟸ D buc hs t abe _8 ⟸ 8 ra u m _ 1 ⟸ buc hs t abe _d buc hs t abe _2 buc hs t abe _8 buc hs t abe _2 ⟸ 2 Me n g e 2 1. 1. 2 K om b i n i e r e n m i t En t s c h e i d u n g e n § Au s w a h l – au s A l t e r n a ti v e n § Ei ne M e ng e v o n A l t e r na t i v e n § Re i h e n fo l g e u n w i c h t i g § Du r c h | (g e s p r o c h e n se n k r e c h t e r S t r i c h ) (« st r o k e ») g e t r e n n t § Al t e r n a t i v e n f o l g e n d e n E B N F B e s t i m m u n g e n f ü r d i e R H S ( R e c h t e - Se i t e ) § Au s w a h l B e i s p i e l di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 ra u m ⟸ E 1 2 | D 2 8 8 buc hs t abe _ d ⟸ D buc hs t abe _ 2 ⟸ 2 buc hs t abe _ 8 ⟸ 8 buc hs t abe _ e ⟸ E buc hs t abe _ 1 ⟸ 1 ra u m _ 1 ⟸ buc hs t abe _ d buc hs t abe _ 2 buc hs t abe _ 8 ra u m _ 2 ⟸ buc hs t abe _ e buc hs t abe _ 1 buc hs t abe _ 2 ra u m ⟸ ra u m _ 1 | ra u m _ 2 di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 10 Wo f ü r wir ( und ) br a uc he n § A B | C § Wa s is t le g a l? § AB u n d C od e r § AC u n d A B § Um Unk l a r he i t zu ve r m e i d e n ve r w e n d e n wi r ( u n d ) § A ( B | C ) § (A B ) | C § Kl a m m e r sc h a f ft Kl a r h e i t 11 Ko m b i n i e r e n mi t O p t i o n e n § Op t i o n § El e m e n t ( e ) in [ und ] (e c k ig e K la m m e r n ) (« sq u a r e br a c k e t » ) § El e m e n t m u s s EB N F B e s t i m m u n g e n f ü r d i e R H S f o l g e n § Ka n n g e w ä h l t w e r d e n , m u s s a b e r n i c h t § Dr e i B e i sp i e l e § in it ia ls ⟸ T [ R ] G § ra u m ⟸ M L [ ( D 2 8 ) | ( E 1 2 ) ] § za h l ⟸ 0 x 0 [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] 12 Be i s p i e l § Of t A u s w a h l ( . . | . . ) u n d Op t i o n ( [ . . ] ) k o mb i n i e r t § EBN F Be s c h r e i b u n g za h l di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 vo r z e i c h e n ⟸ [ + | - ] za h l ⟸ vo r z e i c h e n di gi t § 1 , +2 , - 3 , +0 , 4 … s i n d l e g a l e S y m b o l e § Wi e d r ü c k e n w i r a u s , d a s s n i c h t g e w ä h l t w u r d e ? § \" ( Au s g e s p r o c h e n « e p s ilo n » ) – di e l e e r e Z e i c he n f o l g e § \" er s c h ei n t n i c h t i n S y m b o l en 13 Is t + 4 le g a l? Is t 4 le g a l? 1. za h l ⟸ vo r z e i c h e n di gi t 2. za h l ⟸ + di gi t 3. za h l ⟸ + 4 15 1. za h l ⟸ vo r z e i c h e n di gi t 2. za h l ⟸ \" di gi t 3. za h l ⟸ 4 di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 vo r z e i c h e n ⟸ [ + | - ] za h l ⟸ vo r z e i c h e n di gi t We n n n i c h t g e w ä h l t w i r d § ra u m ⟸ M L [ ( D 2 8 ) | ( E 1 2 ) ] § [ … ] k a n n g e w ä h lt w e r d e n , m u s s a b e r n ic h t § M L is t m ö g lic h e s S y m b o l § Vi e l f ä l t i g e K o m b i n a t i o n s m ö g l i c h k e i t e n za h l e n ⟸ [ 0 | 1 ] [ 2 | 3 ] Z Mö g l i c h si n d : 02Z 03Z 12Z 13Z 0Z 1Z 2Z 3Z Z 19 Ko m b i n i e r e n mi t O p t i o n e n § Op t i o n § El e m e n t ( e ) in [ und ] (e c k ig e K la m m e r n ) (« sq u a r e br a c k e t » ) § Ka n n g e w ä h l t w e r d e n , m u s s a b e r n i c h t § Ni c h t i m m e r e i n d e u t i g § in it ia ls ⟸ T [ R ] G § in it ia ls ⟸ ( T G ) | ( T [ R ] G ) § «Ü b e r s p ri n g e n » e i n e r O p t i o n § vo r z e i c h e n ⟸ [ + | - ] § vo r z e i c h e n ⟸ + | - | 20 di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 num be r ⟸ di gi t [ di gi t ] num be r ⟸ di gi t [ [ di gi t ] ] Ko m b i n i e r e n mi t O p t i o n e n § Op t i o n § El e m e n t ( e ) in [ und ] (e c k ig e K la m m e r n ) (« sq u a r e br a c k e t » ) § Ka n n g e w ä h l t w e r d e n , m u s s a b e r n i c h t § Ni c h t i m m e r e i n d e u t i g § in it ia ls ⟸ T [ R ] G § in it ia ls ⟸ ( T G ) | ( T [ R ] G ) § «Ü b e r s p ri n g e n » e i n e r O p t i o n § vo r z e i c h e n ⟸ [ + | - ] § vo r z e i c h e n ⟸ + | - | \" ( Au s g e s p r o c h e n « e p s ilo n » ) 21 di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 num be r ⟸ di gi t [ di gi t ] num be r ⟸ di gi t [ [ di gi t ] ] Quiz 1 : W e lc he Aussa g e is t k o r r e k t? 1. «a | b » u n d «[ a | b ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu . 2. «a | b » u n d «[ a ] | [ b ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu . 3. «[ a | b ] » u n d «[ [ a | b ] ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu . 4. « T [ R ] G » u n d «T [ R ] G » la s s e n di e se l b e n Ze i c h e n f o l g e n zu . 22 Po l l Quiz 1 1. «a | b » u n d «[ a | b ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu ? § N e in : \" wi r d vo n d e r 2 . Be s c h r e i b u n g zu g e l a s s e n 2. «a | b » u n d «[ a ] | [ b ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu ? § N e in : \" wi r d vo n d e r 2 . Be s c h r e i b u n g zu g e l a s s e n 3. «[ a | b ] » u n d «[ [ a | b ] ] » la s s e n di e se l b e n Ze i c h e n f o l g e n zu ? § Ja . [ [ a| b ]] is t ni c h t sc h ö n ab er e r la u b t di e s e lb e n Z e ic h e n f o lg e n 4. « T [ R ] G » u n d «T [ R ] G » la s s e n di e se l b e n Ze i c h e n f o l g e n zu ? § Ja . Le e r z e i c he n s p ie le n ke i n e Ro l l e . 23 Po l l 1. 1. 3 K om b i n a t i on m i t W i e d e rh ol u n g e n § Wi e d e r h o l u n g § De r z u w i e d e r h o l e n d e A u s d r u c k s t e h t z w i s c h e n { und } (g e s c h w e i f t e Kl a m m e r ) ( « cu rl y br a c e s ») § Ka n n 0 , 1 , … w i e d e r h o l t w e r d e n § I m m e r d a r a n d e n k e n : 0 W ie d e r h o lu n g e n h e is s t – fe h l t ! 27 Ko m b i n a t i o n m i t W i e d e r h o l u n g e n § Wi e d e r h o l u n g § De r z u w i e d e r h o l e n d e A u s d r u c k s t e h t z w i s c h e n { und } (g e s c h w e i f t e Kl a m m e r ) ( « cu rl y br a c e s ») § Ka n n 0 , 1 , … M a l w i e d e r h o l t w e r d e n § I m m e r d a r a n d e n k e n : 0 W ie d e r h o lu n g e n h e is s t – fe h l t ! § Bei s p i el di gi t ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 fo l g e ⟸ di gi t { di gi t } 28 < di gi t > ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 < fo l g e > ⟸ < d ig it > { < d ig it > } 29 1. 1. 4 E B NF B e i s p i e l e 30 EBN F Be i s p i e l (i 1) 3233 W a s be s t im m t die s e E B N F B e s c hr e ibung ? § Ei n f ac h e ( g an z e ) Z ah l e n § Um g an g s s p r ac h l i c h : § Ei n e di gi t is t d e f in ie r t a ls e in e s d e r Z e ic h e n / B u c h s t a b e n 0 … 9 § Ei n e in t e g e r is t d e f in ie r t a ls e in e F o lg e v o n 3 E le m e n t e n § Ei n op t i on a l e s V or z e i ch e n ( w e n n e s v or h a n d e n i s t , d a n n m u ss e s e i n e de r A l t e r na t i v e n + o de r – se i n ) § Ei n e di gi t § Ei n e W i e d e r h ol u n g v on 0 od e r m e h r di gi t s wo b e i j e d e di gi t ei n e d er Al t e r n a t i v e n d e r di gi t Re g e l i s t ( u n d d i e A l t e r n a t i v e n u n a b h ä n g i g ge w ä h l t w e r d e n ) 34 EBN F Be s c h r e i b u n g e n § Re i h e n f o l g e d e r Re g e l n u n d g e w ä h l t e N a m e n u n w i c h t i g EB N F D e s c r i p t i o n in t e g e r (i 2 ) in t e g e r ⟸ [ + | - ] di gi t { di gi t } di gi t ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § od e r a u c h EB N F D e s c r i p t i o n za h l (i 3 ) za h l ⟸ [ + | - ] zi ff e r { zi ff e r } zi ff e r ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Ko n v e n t i o n : v o n e i n f a ch n a ch k o m p l e x , r e l e v a n t e N a m e n § Na me d e r l e t z t e n R e g e l i s t d e r Na me d e r r e l e v a n t e n B e s c h r e i b u n g 37 Üb e r s i c h t § Es gi b t vi e r el emen t a r e Au s d r u c k s m ög l i c h k e i t e n in E B N F § Sc h o n ge s e h e n : Au f r e i h u n g , Au s w a h l /O p t i o n , Wi e d e r h o l u n g § Si e le r n e n EB N F Bes c h r ei b u n g en zu le s e n und v e r s t e he n § Si e le r n e n zu en t s c h ei d en ob ei n Sy m b o l l e g a l is t ( für ei n e EB N F Bes c h r ei b u n g ) § Si e k ö nne n e n t s c he i de n o b z w e i E B N F B e s c hr e i bung e n ä qui v a l e n t s i nd § Si e l e r n e n E B N F B e sc h r e i b u n g e n z u e r s t e l l e n § Si e l e r n e n d e n U n t e r sc h i e d z w i sc h e n S y n t a x u n d Se m an ti k 38 Üb e r s i c h t § Es gi b t vi e r el emen t a r e Au s d r u c k s m ög l i c h k e i t e n in E B N F § Sc h o n ge s e h e n : Au f r e i h u n g , Au s w a h l /O p t i o n , Wi e d e r h o l u n g § Si e le r n e n EB N F Bes c h r ei b u n g en zu le s e n und v e r s t e he n § Si e le r n e n zu en t s c h ei d en ob ei n Sy m b o l l e g a l is t ( für ei n e EB N F Bes c h r ei b u n g ) § Si e k ö nne n e n t s c he i de n o b z w e i E B N F B e s c hr e i bung e n ä qui v a l e n t s i nd § Si e l e r n e n E B N F B e sc h r e i b u n g e n z u e r s t e l l e n § Si e l e r n e n d e n U n t e r sc h i e d z w i sc h e n S y n t a x u n d Se m an ti k 39 1. 2 S y m b ol e u n d E B NF B e s c h r e i b u n g e n § Wi e k ö n n e n w i r e i n e E B N F B e s c h r e i b u n g w i e e i n Sc h i e d sr i c h t e r i n t e r p r e ti e r e n ? § Ge g e b e n e i n e E B N F B e s c h r e i b u n g u n d e i n S y m b o l § Sy m b o l : e i n e F o l g e v o n Z e i c h e n § Sc h i e d sr i c h t e r e n t sc h e i d e t o b d a s S y m b o l le g a l is t o d e r n ic h t (f ü r d ie s e EBN F Be s c hr e i bung ) § Sy m b o l l e g a l g e m ä s s e i n e r R e g e l : a l l e Z e i c h e n d e s Sy m b o l s st i m m e n m i t d e n E l e m e n t e n d e r R e g e l ü b e r e i n 40 Ze i c h e n im Sy m b o l – El e m e n t e de r R e g e l § Ge n a u e Üb e r e i n s t i m m u n g : l eg a l § Ve r g l e i c h Ze i c h e n im Sy m b o l mi t El e m e n t e n de r R e g e l § Vo n L i n k s na c h Re c h t s § Ze i c h e n fü r Ze i c h e n § En d e d e s S y m b o l s § Es da r f ke i n ( ni c h t - op t i on a l e s ) E l e m e n t d e r R e g e l übr i g bl e i be n § Ke i n e we i t e re Re g e l § Es da r f ke i n Ze i c h e n im Sy m b o l übr i g bl e i be n § Nu r d an n sp r e c h e n wi r vo n Üb e r e i n s t i m m u n g § So n s t : S y m b o l ni c h t le g a l od e r ille g a l 41 In f o r m e lle r Be w ei s : § Ge na ue Übe r e i ns t i m m ung : l e g a l § Es da r f ke i n Z e ic h e n im Sy m b o l übr i g bl e i be n § Es da r f ke i n ( ni c h t - op t i on a l e s ) E le m e n t d e r R e g e l übr i g bl e i be n § Nu r da nn sp r e c h e n wi r vo n Ü b e r e in s t im m u n g § So n s t : S y m b o l ni c h t le g a l, ille g a l 42 § Bei s p i el ( mi t di gi t ): 6 l e g a l , 86 ni c h t le g a l § Bei s p i el ( mi t di gi t ): si g n ⟸ [ + | - ] si g n e d _ n u mb e r ⟸ si g n di gi t 9, + 9, - 9 l e g a l , 09, + - 9 ni c h t An i m a t i on 44 EBN F Be i s p i e l (i 1) 45 1. 2. 1 In f o r m e lle Be w e i s e § Ze i g e da s s X mi t in t e g e r übe r e i ns t i m m t ( Be s c h r e i b u n g i1 ) § St a r t : 1 . E l e m e n t ( op t i on a l e s Vo r z e i c h e n ) § Op t i o n ge w ä h l t od e r ni c h t ge w ä h l t § nä c hs t e s Z e ic h e n de s S y m bo l s m us s mi t Z e ic h e n übe r e i ns t i m m e n § Ze i c h e n dur c h di gi t Re g e l be s t i m m t § Wä h l e au f d e r R H S v o n di gi t § Ke i n e od e r me h r Wi e d e r h o l u n g e n 46 In f o r m e lle Be w e i s e § Ze i g e da s s +7 0 mi t in t e g e r übe r e i ns t i m m t ( Be s c h r e i b u n g i1 ) § St a r t : 1 . E l e m e n t ( op t i on a l e s Vo r z e i c h e n ) § Op t i o n ge w ähl t od e r ni c h t ge w ä h l t § nä c hs t e s Z e ic h e n de s S y m bo l s m us s mi t Z e ic h e n übe r e i ns t i m m e n § Ze i c h e n dur c h di gi t Re g e l be s t i m m t § Wä h l e 7 a u f d e r R H S v o n di gi t § Ke i n e od e r me h r Wi e d e r h o l u n g e n § E in e Wi e d e r h ol u n g – Ze i c h e n dur c h di gi t Re g e l be s t i m m t § Wä h l e 0 a u f d e r R H S v o n di gi t § +7 0 is t le g a l 47 An i m a t i on 49 In f o r m e lle B e w e ise § Wi s s e n ( o d e r p r o b i e r e n ) r i c h t i g e A n z a h l v o n Wi e d e r h o l u n g e n § We n n B e s c h r e i b u n g n i c h t e i n d e u t i g d a n n f i n d e n w i r d i e ri ch t i g e A l t e rn a t i v e 50 An i m a t i on 5256 In f o r m e lle r Be w e i s fü r +8 +1 58 Meh r Be i s p i e l e § 1249 § - 320 § +4 4 5 59 Meh r Be i s p i e l e § 1’ 249 § A1 5 § 345 - 60 1. 2. 2 Ta b e l l e n § Fo r m a l e r al s Um g a ngs s pr a c he § Ko m p a k t e r § 1. Ze i l e : N a m e d e r E B N F R e g e l , mi t de r da s S ym bo l übe r e i ns t i m m e n so l l § L et z t e Ze i l e : S y m b o l 63 Ta b e l l e n § Je d e Ze i l e wi r d au s de r Vo r g ä n g e r z e i l e dur c h ei n e di e s e r Re g e l n ab g e l e i t e t : 1. Er s e t z e e in e n Na m e n (L H S ) dur c h di e en t s p r ec h en d e De f i n i t i o n ( R H S ) 2. Wa h l e in e r Al t e r n a t i v e 3. En t s c he i dung ob e in op t i on a l e s El e m e n t da be i is t od e r ni c h t 4. Be s t i m m u n g de r Za h l de r Wi e d e r h o l u n g e n § Ma n c h m a l we r d e n 1& 2 i n ei n em Sc h r i t t ge m a c h t 6465 Able it ungs bä um e § Gr a phi s c he Da r s t e l l u n g ei n es Be w ei s es dur c h ei n e Ta b e l l e § Ob e n : N a m e d e r E B N F R e g e l , mi t de r da s S y m bo l übe r e i ns t i m m e n s o ll § Un t e n : S y m b o l § Ka n t e n ze i g e n we l c h e Re g e l n es uns er l a u b en vo n ei n er Ze i l e zu r nä c hs t e n (i n d e r Ta b e l l e ) zu ge h e n 71 Able it ungs ba um Be i s p i e l 7273 Sc h n e l l ü b u n g § We l c h e di e s e r Sy m b o l e si n d le g a l ge m ä s s de r in t e g e r Bes c h r ei b u n g (i 1)? 78 1. +28 2. +0 3. - 4. IX 5. 333 - 111 6. - 354 7. two 8. a2 9. 0 10. $100 11. 007 12. 824 Po l l 79 au s d e m A r c h i v … . . Po l l 8182 Ab l e i t u n g s b a u m für 28 in t e g e r [ + | - ] di gi t { di gi t } 2 di gi t 8 E in e Op t i o n d i e ni c h t ge n o m m e n wu r d e Ab l e i t u n g s b a u m Ve r s u c h für A1 5 in t e g e r [ + | - ] di gi t { di gi t } Es ge ht ni c h t w e it e r . A is t ni c h t le g a le di gi t Po l l 83 Ab l e i t u n g s b a u m für 28 in t e g e r [ + | - ] di gi t { di gi t } 2 di gi t 8 E in e Op t i o n d i e ni c h t ge n o m m e n wu r d e Ge h t a u c h (m i t \" ) { di gi t } \" 0 W i e d e r - ho l ung e n So n d e rz e i c h e n § Di e s e ac h t Ze i c h e n ( Bu c h s t a b e n ) h ab e n ei n e be s o nde r e Be d e u t u n g in E B N F Be s c h r e i b u n g e n : {, }, [ , ] , |, ( , ) , ⟸ § Au c h < u n d > we n n wi r Na m e n ni c h t ku r s i v sch r e i b e n § Wa s ma c h e n wi r we n n wi r ei n \"{ \" i n ei n em Sy m b o l wo l l e n ? § z. B . u m ei n e Me n g e zu be s c hr e i be n § An t w or t : Ze i c h e n in Ra h me n { § Ma n c h m a l al l e Ze i c h e n di e ni c h t ei n e EB N F R e g e l be z e i c hne n in ei n em Ra h m e n § Al t e r n a t i v e n (i n Te x t b ü c h e r n ): I n An f ü h r u n g s z e i c h e n , z. B. \"( \" § Dann is t \" au c h ei n So n d erz ei c h en 86 So n d e rz e i c h e n § Di e s e ac h t Ze i c h e n ( Bu c h s t a b e n ) h ab e n ei n e be s o nde r e Be d e u t u n g in E B N F Be s c h r e i b u n g e n : {, }, [ , ] , |, ( , ) , ⟸ § Au c h < u n d > we n n wi r Na m e n ni c h t ku r s i v sch r e i b e n § Wa s ma c h e n wi r we n n wi r ei n \"{ \" i n ei n em Sy m b o l wo l l e n ? § z. B . u m ei n e Me n g e zu be s c hr e i be n § An t w or t : Ze i c h e n in Ra h me n { § Ma n c h m a l al l e Ze i c h e n di e ni c h t ei n e EB N F R e g e l be z e i c hne n in ei n em Ra h m e n § Al t e r n a t i v e n (i n Te x t b ü c h e r n ): I n An f ü h r u n g s z e i c h e n , z. B. \"( \" § Dann is t \" au c h ei n So n d erz ei c h en § Um ei n \" i n ei n em Sy m b o l zu be k o m m e n : \" \" 87 Äquiv a le n t e EBN F Be s c h r e i b u n g e n § Äq u i v a l e n t : gl e i c h w e r t i g ( si n d im m e r gl e i c h – in ei n em Ko n t e x t ) 89 äq u i - va l e n t Äq u i v a l e n t bz g l . Ka u f k r a f t , ni c h t ab e r vo r ei n em Au t om a t e n de r ke i n e Ba n k n o t en ni m m t Äquiv a le n t e EBN F Be s c h r e i b u n g e n § Äq u i v a l e n t : gl e i c h w e r t i g ( si n d im m e r gl e i c h – in ei n em Ko n t e x t ) § Äq u i v a l e n t e EB N F Bes c h r ei b u n g en er k en n en di e se l b e n le g a le n und ille g a le n Sy m b o l e § Jed es mög l i c h e Sy m b o l wi r d vo n be i de n Be s c h r e i b u n g e n al s le g a l ( od e r ille g a l) er k an n t 90 Äquiv a le n t e EBN F Be s c h r e i b u n g e n § Je d e EB N F Bes c h r ei b u n g de fi ni e r t ei n e Spr ach e : Me n g e de r le g a le n Sy m b o l e § Äq u i v a l e n t e EB N F Bes c h r ei b u n g en er k en n en di e se l b e n le g a le n und ille g a le n Sy m b o l e § Jed es mög l i c h e Sy m b o l wi r d vo n be i de n Be s c h r e i b u n g e n al s le g a l ( od e r ille g a l) er k an n t § Di e Sp r a c h e n de r EB N F Be s c h r e i b u n g e n s in d id e n t is c h 91 Äquiv a le nz vo n E B N F Be s c h r e i b u n g e n § Zw e i EB N F Bes c h r ei b u n g en B 1 , B 2 de fi ni e r e n di e se l b e Sp r ac h e : § Sy m b o l l e g a l fü r B 1 : da nn au c h le g a l fü r B 2 § Sy m b o l i l l e g a l fü r B 1 : da nn au c h ille g a l fü r B 2 § Sy m b o l l e g a l fü r B 2 : da nn au c h le g a l fü r B 1 § Sy m b o l i l l e g a l fü r B 2 : da nn au c h ille g a l fü r B 1 § B 1 und B 2 äq u i v al e n t 92 We i t e r e EBN F Be s c h r e i b u n g fü r in t e g e r (i 4) 94 Ande r e Be s c h r e i b u n g fü r in t e g e r (i 4' ) 97 Noc h ei n e an d e r e Be s c h r e i b u n g § Äq u i v a l e n t zu fr ühe r e r Bes c h r ei b u n g ? § Sy m b o l l e g a l ge m ä s s 1. Bes c h r ei b u n g : l e g a l ge m ä s s di e s e r Bes c h r ei b u n g § Gi l t au c h di e Um k e hr ung ? 98 Noc h ei n e an d e r e Be s c h r e i b u n g § Sy m b o l l e g a l ge m ä s s 1. Bes c h r ei b u n g : l e g a l ge m ä s s di e s e r Bes c h r ei b u n g § Gi l t au c h di e Um k e hr ung ? § Ne i n : + is t je t zt le g a l, - is t je t zt le g a l § Ne i n : \" (l e e r e Z e i c h e n f ol g e ) je t zt ei n e le g a le in t e g e r 100 Ande r e Za h l e n d a r s t e l l u n g e n § Wi r mö c h t en au c h Za h le n mi t Ho c h k o m m a ( z. B ., 1 ’ 4 1 2 ) al s in t e g e r er k en n en § Fü g e n wi r al so ‘ zu di gi t al s Al t e r n a t i v e hi nz u § EB N F Bes c h r ei b u n g co m m a _ in t e g e r (c i 1) § si g n ⟸ + | - § co m m a _ d i g i t ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| ‘ § co m m a _ i n t e g e r ⟸ [ si g n ] co m m a _ d i g i t { co m m a _ d i g i t } 102104 Fr ag e § Bes c h r ei b u n g co m m a _ i n t e g e r lä s s t Sy m b o l e zu , d i e wi r ni c h t ak z e p ti e r e n wo l l e n . § Kö n n e n wi r (c i 1) s o än d e r n , da s s Ho c h k o m m as ri ch t i g ( zu r Gr uppi e r ung in Ta u s e n d e r b l ö c k e ) ge s e t z t we r d e n ? § Jed e Dr e i e r - Gr u p p e v o n Zi f f e r n is t dur c h e in Ho c h k o m m a vo n d e n l i n k s da v o r ge s c h r i e b e n e n Zi f f e r n ge t re n n t . § We n n ei n e Dr e i e r - Gr u p p e a m An f a n g st e h t , da nn st e h t do r t ke i n Ho c h k o m m a ( de nn es gi b t ja ke i n e Zi f f e r n lin k s da v o r ) 105 EBN F Be s c h r e i b u n g co m m a _ i n te g e r (c i2 ) si g n ⟸ + | - di gi t ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| 0 co m m a _ s e p a r a t e d _ d i g i t s ⟸ di gi t di gi t di gi t num be r ⟸ di gi t | di gi t di gi t | di gi t di gi t di gi t co m m a _ i n t e g e r ⟸ [ si g n ] num be r { ‘ co m m a _ s e p a r a t e d _ d i g i t s } 106 Zu r ü c k zu in t e g e r (i 1) § We l c h e di e s e r EB N F Bes c h r ei b u n g en is t äq u i v al e n t zu r ( fr ühe r e n ) Bes c h r ei b u n g (i 1)? 107 A (i 5 ) B (i 6 ) Zu r ü c k zu in t e g e r § We l c h e di e s e r EB N F Bes c h r ei b u n g en is t äq u i v al e n t zu r ( fr ühe r e n ) Bes c h r ei b u n g (i 1)? § Bei d e (A u n d B ) 109 A (i 5 ) B (i 6 ) Sy n t a x u n d Se m an t i k § Sy n t a x : Fo r m § Se m an ti k (« s e m a n t i c s » ): Bed eu t u n g (« m e a n i n g » ) § Sy n t a x le g t nur di e F o r m f e s t . Al l e le s e n d e n Sc h i f f e ri e ch e n ge l b . De r He r r s c h e r da c h t e an si c h s e l bs t zu l e t z t . 112 Sy n t a x u n d Se m an t i k § EB N F be s c hr e i b t nur di e S yn t a x § Fü r Pr o gr a m m i e r s pr a c he n : zw e i wi c h t i g e Se m an ti k Fr a g e n : 1. Kö n n e n un t e r s c hi e dl i c he Sy m b o l e di e s e lb e Be d e u t u n g ha be n ? 2. Ka n n e in Sy m b o l ve r s c h i e d e n e Be d e u t u n g e n ha be n ? 113 Illus tr a tio n § Sy m b o l e di e wi r un t e r s uc he n : Na m e n § He r r W i r t h § Pr o f e s s o r W i r t h § N ik la u s Wi r t h kö n n e n si c h au f se l b e Pe r s o n be z i e he n § Sy m b o l d a s wi r un t e r s uc he n : Au s d r u c k « nä c hs t e Vo r l e s u n g » § Di e « nä c hs t e Vo r l e s u n g » fä l l t au s § 252 - 0027, ( ge s te r n ): ke i n e Vo r l e s u n g am F r e i t ag § 252 - 0025, ( ge s te r n ): ke i n e Vo r l e s u n g am M o n t ag 114 Se m an t i k vo n in t e g e r § Bed eu t u n g ei n er Za h l : ih r We r t § 1, + 1 § - 0, + 0, 0 § So l l e n 0012 u n d 12 d i e se l b e Bed eu t u n g ha be n ? § Ma t h e ma t i k : ja § PI N c o d e : n e i n 115 EBN F Be s c h r e i b u n g in t e g e r _ s e t § Me n g e n vo n Za h le n § { Au f z ä h l u n g vo n Za h le n } § Zw i s c h e n { u n d } ke i n e , ei n e od e r Re i h e vo n Za h le n , dur c h Ko m m a ge t r e n n t § { 1 } {3 , 2 } {3 , 2 , 3 } { } § In E B N F Re g e l n , mü s s en un t e r s c he i de n zw i s c h e n { u n d { 117 EBN F Be s c h r e i b u n g in t e g e r _ s e t § Me n g e n vo n Za h le n § { Au f z ä h l u n g vo n Za h le n } § Zw i s c h e n { u n d } ke i n e , ei n e od e r Re i h e vo n Za h le n , dur c h Ko m m a ge t r e n n t § { 1 } {3 , 2 } {3 , 2 , 3 } { } EB N F Bes c h r ei b u n g in t e g e r _ lis t ⟸ in t e g e r { , in t e g e r } in t e g e r _ s e t ⟸ { [ in t e g e r _ lis t ] } 122 Di s k u s s i o n § in t e g e r _ lis t Re g e l – äh n l i c h vi e l e n Re g e l n für Ja v a § Bei s p i el e § { } § { 1 } § { 2 , - 5, 18 } § Ka n n dur c h Ta b e l l e ( od e r Ab l e i t u n g s b a u m ) ge z e i g t we r d e n 123 Di s k u s s i o n { 2, - 5, 18 } § L e m m a : 2 is t ei n e in t e g e r § Le m m a : - 5 is t ei n e in t e g e r § L e m m a : 1 8 is t ei n e in t e g e r 124125 Ta b e l l e Re g e l in t e g e r_ s e t An f a n g je d e r Ta b e l l e { [ in t e g e r_ lis t ] } Er s e t z e n vo n in t e g e r_ s e t dur c h RH S ( 1 ) { in t e g e r_ lis t } Op t i on ei n g es c h l o s s en (3 ) { in t e g e r { , in t e g e r } } Er s e t z e n vo n in t e g e r_ lis t dur c h RH S ( 1 ) { in t e g e r , in t e g e r , in t e g e r } 2 Wi e d e r h o l u n g e n (4 ) { 2 , in t e g e r , in t e g e r } Lem m a { 2 , - 5 , in t e g e r } { 2 , - 5 , 18 } 126 Be d e u t u n g vo n Men g en § Wa n n si n d zw e i Me n g e n äq u i v al e n t ? § Me h r f a c h Ne n n u n g e n s in d ni c h t wi c h t i g § {1 , 2 , 3 , 3 , 2 , 2 , 2 } äq u i v al en t zu {1 , 2 , 3 } § Re i h e n fo l g e ni c h t wi c h t i g § { 1 , 2 , 3 } äq u i v al en t zu { 3 , 2 , 1 } § Ka n o n i s c h e (in Ü b e r e in s t im m u n g mi t Re g e l ) Da r s t e l l u n g : ge o r d n e t , vo n kl e i n s t e r [lin k s ] na c h gr ö s s t e r Za h l [ re c h t s ] § Di e ka n o n i s c h e Da r s t e l l u n g ka n n ni c h t dur c h EBN F Re g e l n er z w u n g en we r d e n 132 EBN F Be s c h r e i b u n g e n § Er s t e l l e n Si e ei n e EB N F Bes c h r ei b u n g so da s s Za h le n ni c h t mi t ei n er Nu l l an f an g e n (a l s o 007 is t ille g a l, 7 is t le g a l) . 133 ze r o ⟸ 0 nonz e r o ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 di gi t ⟸ ze r o | nonz e r o in t e g e r ⟸ [ + | - ] nonz e r o { di gi t } 134 ze r o ⟸ 0 nonz e r o ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 di gi t ⟸ ze r o | nonz e r o in t e g e r ⟸ [ + | - ] nonz e r o { di gi t } … ab e r je t zt is t 0 ke i n gül t i g e s Sy m b o l Wi e kö n n e n wi r di e Bes c h r ei b u n g ve r b e s s e r n ? 135 EBN F Be s c h r e i b u n g ca n o n i c _ i n t ze r o ⟸ 0 nonz e r o ⟸ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 di gi t ⟸ ze r o | nonz e r o ca n o n i c _ i n t ⟸ ( [ + | - ] nonz e r o { di gi t } ) | ze r o Lä s s t nur 0, ni c h t ab e r +0 od e r - 0 zu (a u f vi e l f ac h e n Wu n s c h ) 136 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 1. 0 E B N F Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1. 4 Gr a phis c he Da r s t e l l u n g vo n E B N F Re g e l n § Sy n t a x G r a p h : gr a phi s c he Da r s t e l l u n g § Ka n t e n ( ge r i c h t e t ) mi t Z e ic h e n § Pf a d dur c h de n Gr a phe n en t s p r i c h t le g a le m Sy m b o l § Li nk s an f an g en , da nn dur c h Gr a p h e n § Ma c h t es le ic h t (e r ) zu er k en n en , we l c h e Ze i c h e n in ei n em Sy m b o l ( i n we l c h e r Re i h e n f o l g e ) au f tr e t e n mü s s en 2 Gr a phis c he Da r s t e l l u n g vo n E B N F Re g e l n § Auf r e i hung : A B C D al s Gr a ph: § Op ti o n : [ A ] al s Gr a ph: 4 § Wi e d e r h o l u n g : { A } al s Gr a ph: ABCD DCBA Gr a phis c he Da r s t e l l u n g vo n E B N F Re g e l n § Auf r e i hung : A B C D al s Gr a ph: § Op ti o n : [ A ] al s Gr a ph: 6 § Wi e d e r h o l u n g : { A } al s Gr a ph: ABCD DCBA Gr a phis c he Da r s t e l l u n g vo n E B N F Re g e l n § Auf r e i hung : A B C D al s Gr a ph: § Op ti o n : [ A ] al s Gr a ph: 7 § Wi e d e r h o l u n g : { A } al s Gr a ph: ABCD DCBA [A] A {A} A § Aus w a hl : A | B | C | D al s Gr a ph 9 A B C D A|B|C|D Pf a d dur c h Gr a ph: le g a le s Sy m b o l § Au f r e i h u n g : dur c h je d e s El e m e n t i n d e r Re i h e § Au s w a h l : ei n El e m e n t i n d e r L e i t e r § Op t i o n : en t w ed er ob e r e Ka n t e ( mi t El e m e n t ) od e r un t e r e ( oh n e ) § Wi e d e r h o l u n g : wi e Au s w a h l § Ei nzi g e Fo r m d i e e in e n Pf e i l vo n re c h t s na c h lin k s h a t 12 Pf a d e d u r c h G r a p h e n § EB N F B e sc h r e i b u n g : M e n g e v o n EB N F R e g e l n § Gr a ph: M e ng e v o n Gr a phe n § Ei n G r a ph f ür j e de R e g e l § Pf a d ( e ) d u r c h G r a p h e n f ü r R e g e l n 13 Wo f ü r wir ( und ) br a uc he n § A B | C 14 Wo f ü r wir ( und ) ge b r a u c h e n kö n n e n § A B | C § We l c h e r Gr a ph? 15 A B C A B C Wo f ü r wir ( und ) ge b r a u c h e n kö n n e n § A B | C § Um Unk l a r he i t zu ve r m e i d e n ve r w e n d e n wi r ( u n d ) § A ( B | C ) § (A B ) | C --- we n n es ke i n e Kl a m m e r n gi b t --- Au f r e i h u n g « bi nde t st ä r k e r » al s Au s w a h l 16 A B C A B C EBN F Be i s p i e l (i1 ) no c hm a l 17 Be i s p i e l 18 0 1 2 3 4 5 6 7 8 9 di gi t + − in t e g e r di gi t di gi t Su b s t i t u t i o n § Kö n n e n ei n en Sy n t a x Gr a phe n in ei n en an d e r e n ei n s e t z en § «i n t e r n e » Na m e n ve r s c h w i n d e n § EB N F Bes c h r ei b u n g § Al l e Gr a p h e n fü r Re g e l n de r Be s c h r e i b u n g zu s a m m e n 23 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 + − in t e g e r Wa s für Sy m b o l e si nd le g a l ( für Gr a p h ) ? 1. 2. 26 3. 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 1. 0 E B N F Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co n t r o l f o r ms ( z um Ko m b i n i e r e n ) § Au f r e i h u n g § Au s w a h l ( En t sc h e i d u n g ) § Op t i o n , Wi e d e r h o l u n g § Re k u rs i o n 35 § EB N F R e g e l b e s t e h t a u s: § Li nk e - Se i t e ( Le f t - Ha n d S i d e , L HS ) § Re c h t e - Se i t e ( Ri g h t - Ha n d S i d e , RHS ) § ⟸ ( tr e n n t L H S v o n R H S , a u sg e sp r o c h e n « i s t d e f i n i e r t a l s» ) § LH S § Ei n W o r t ( k ur s i v , k l e i ng e s c hr i e be n) – de r Na m e d e r E B NF R e g e l § RHS § Di e g e n a u e B e s c h r e i b u n g f ü r d e n Na m e n ( d . h . , d e r L H S ) d u r c h § Na m e n ( v o n E B NF R e g e l n) – ku r s i v u n d k l e i n g e s c h r i e b e n § Ze i c h e n ( s t e l l e n d a s Ze i c h e n d a , d . h . w i r e r w a r t e n d i e s e s Ze i c h e n u n d k e i n an d e r e s ) – ni c h t k ur s i v § Ko m b i n a t i o n e n d e r v i e r Ko n t r o l e l e m e n t e (« co n t r o l fo r m s ») ( a u f fo l g e n d e n S e i t e n ) 36 LH S ⟸ RHS 1. 5 R e k u r s i on 37 Po s i t i v e ( g a n z e ) Z a h l e n § EB N F R e g e l po s _ i n t eger so l l ga n z e Za h le n oh n e Vo r z e i c h e n be s c hr e i be n § Wi r ha be n e in e Re g e l fü r Zi f f e r n : di gi t ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Er s t e r V e r su c h po s _ i n t eger ⟸ di gi t ....... 38 Me h r d a v o n Po s i t i v e ( g a n z e ) Z a h l e n § EB N F R e g e l po s _ i n t eger so l l po s i t i v e Za h le n oh n e Vo r z e i c h e n be s c hr e i be n § Wi r ha be n e in e Re g e l fü r Zi f f e r n : di gi t ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Er s t e r V e r su c h po s _ i n t eger ⟸ di gi t ....... § Ei n f a c h e Wi e d e r h o l u n g ni c h t wa s wi r wo l l e n § Ab e r vi e l l e i c h t e in An f a n g 40 po s _ i n t e ge r ⟸ { di gi t } \" is t le g a le po s i t i v e Za h l Op ti o n – ka n n , m u s s a b e r n i c h t d a b e i s e i n § Wa s w e n n w i r d e n N a m e n e i n e r R e g e l a u f d e r r e c h t e n S e i t e di es er Re g e l v e r w e n d e n ? § Mi t O p t i o n – kö n n e n a l l e ga n z e n Za h l e n oh n e V or z e i c h e n b e s c h r e i b e n § po s _ i n t eger ⟸ di gi t [ po s _ i n t eger ] 41 po s _ i n t e ge r ⟸ di gi t [ po s _ i n t e ge r ] § Bei s p i el e f ü r l eg a l e S y mb o l e 42 po s _i n t e ge r di gi t po s _i n t e ge r di gi t di gi t po s _i n t e ge r di gi t po s _i n t e ge r di gi t po s _i n t e ge r di gi t di gi t po s _i n t e ge r di gi t di gi t di gi t Op t i o n n i c h t ge n o m m e n Op t i o n n i c h t ge n o m m e n Op t i o n n i c h t ge n o m m e n Na m e d er L HS a u c h a u f d er R HS § Es m u ss ( m i n d e s t e n s) e i n e n W e g g e b e n , Na m e n d e r L H S dur c h e i ne RH S ohne d i e s e n N a m e n zu e r s e t z e n § po s _ i n t eger ⟸ di gi t [ po s _ i n t eger ] § N ic h t - Wa h l d e r O p t i o n : N u r di gi t au f d er R H S § An d e r e M ög l i c h k e i t po s _ i n t eger ⟸ ( di gi t po s _ i n t eger ) | \" 44 po s _i n t e ge r di gi t po s _i n t e ge r di gi t di gi t po s _i n t e ge r di gi t di gi t \" di gi t di gi t po s _i n t e ge r di gi t po s _i n t e ge r di gi t \" di gi t Oh n e Kl a m m e r n : Au f r e i h u n g bi nde t s t ä r k e r a l s A us w a hl Na m e d er L HS a u c h a u f d er R HS § Es m u ss ( m i n d e s t e n s) e i n e n W e g g e b e n , Na m e n d e r L H S dur c h e i ne RH S ohne d i e s e n N a m e n zu e r s e t z e n § po s _ i n t eger ⟸ di gi t [ po s _ i n t eger ] § N ic h t - Wa h l d e r O p t i o n : N u r di gi t au f d er R H S § An d e r e M ög l i c h k e i t po s _ i n t eger ⟸ di gi t po s _ i n t eger | \" 45 po s _i n t e ge r di gi t po s _i n t e ge r di gi t di gi t po s _i n t e ge r di gi t di gi t \" di gi t di gi t po s _i n t e ge r di gi t po s _i n t e ge r di gi t \" di gi t Re k u r s i v e Re g e l § Re g e l is t re ku r s i v : ih r Na m e wi r d in d e r D e f in it io n ve r w e n d e t po s _ i n t eger ⟸ di gi t [ po s _ i n t eger ] § Bes c h r ei b u n g is t re ku r s i v : mi n d es t en s ei n e re ku r s i v e Re g e l 46 Re k u r s i o n § Re k u rs i v e Bes c h r ei b u n g en t h ä l t re ku r s i v e Re g e l n § Ei ne Re g e l is t di r e k t re k u rs i v we n n ih r N a m e in d e r D e f in it io n ve r w e n d e t wi r d § Al s o d i e L H S e r s c h e in t au c h au f d er R H S § r ⟸ | A r § r ⟸ | ( A r ) fa l l s S i e U n k la r h e it ve r m e i d e n wo l l e n § r ⟸ \" | ( A r ) fa l l s S i e al l e U n k la r h e it e n ve r m e i d e n wo l l e n § EB N F De sc r i p t i o n r be s c hr e i b t Fo l g e vo n n u l l od e r meh r A Ze i c h e n 47 Di s k u s s i o n 48 Re k u r s i v e Re g e l § Re g e l is t re ku r s i v : ih r Na m e wi r d in d e r D e f in it io n ve r w e n d e t po s _ i n t eger ⟸ di gi t [ po s _ i n t eger ] § Hä t t e n wi r au c h an d e r s ma c h en kö n n e n § po s _ i n t eger ⟸ di gi t { di gi t } 50 Di s k u s s i o n § Wa r u m de r Au f w a n d ? § r ⟸ { A } § po s _ n u m be r ⟸ { di gi t } § Ka n n je d e Re k u rs i o n dur c h Wi e d e r h o l u n g ( en ) au sg e d r ü c k t we r d e n ? § Ka n n je d e Wi e d e r h o l u n g dur c h Re k u rs i o n au sg e d r ü c k t we r d e n ? 51 Di s k u s s i o n 53 Di s k u s s i o n § Ka n n je d e Re k u rs i o n dur c h Wi e d e r h o l u n g ( en ) au sg e d r ü c k t we r d e n ? § N e in § Fi n d e n Si e Be s c h r e i b u n g fü r A n B n (n Za h l ≥ 0 : al s o gl e i c h e An z a h l A, B ) EBN F D e s c r i p t i o n bal anc e bal anc e ⟸ \" | A bal anc e B bal anc e ⟸ \" | ( A bal anc e B ) 55 § Di r e k t e Re k u rs i o n § r ⟸ A | A r § In d ir e k t e Re k u rs i o n § Fo l ge vo n Re g e l n N 1 … N k so da s s N 2 au f d er R H S v o n N 1 , N 3 au f d er RHS v o n N 2 , … u n d N 1 au f d er R H S v o n N k e r s c h e in t nam e 2 ⟸ ( nam e 1 B ) | ( X B ) nam e 1 ⟸ A nam e 2 61 § Di r e k t e Re k u rs i o n § r ⟸ A | A r § In d ir e k t e Re k u rs i o n § Fo l ge vo n Re g e l n N 1 … N k so da s s N 2 au f d er R H S v o n N 1 , N 3 au f d er RHS v o n N 2 , … u n d N 1 au f d er R H S v o n N k e r s c h e in t nam e 2 ⟸ nam e 1 B | X B nam e 1 ⟸ A nam e 2 § Be s c h r e ib u n g vo n nam e 1 : A X B , A A X B B , . . . . 63 Oh n e Kl a m m e r n : A u f r e i h u n g bi nde t s t ä r k er a l s A us w a hl Zusam m e n f assung : Ab l e i t u n g s b a u m , Ta b e l l e n , Gr a p h en § Ei n Ab l e i t u n g s b a u m od e r ei n e Ta b e l l e de m o ns t r i e r e n , da s s ei n Sy m b o l l e g a l ge m ä s s ei n er EB N F Bes c h r ei b u n g is t .§ In be i de n Fä l l e n kü r z en wi r di e Sc h r i t t e ma n c h ma l ab we n n ke i n e Ve r w e c h s l u n g s g e f a h r be s t e h t . § Ei n ( EB N F ) G r a p h is t ei n e an d e r e Da r s t e l l u n g ei n er EB N F Bes c h r ei b u n g § Ei n Pf a d dur c h de n Gr a p h e n e n t s p r ic h t e in e m Sy m b o l d a s l e g a l is t § Um g e k e hr t : u m zu ze i g e n , da s s e in Sy m b o l l e g a l is t , fi n d e n wi r e in e n Pf a d § Gr a p h fü r re k u r s i v e Be s c h r e i b u n g : ni c h t e le g a n t (m u s s e n d lic h s e in ! ) 65 r ⟸ B | A r § Is t AAB l e g a l ? -- Ta b e l l e 66 Re g e l r An f a n g je d e r Ta b e l l e B | A r Er s e t z e n vo n r dur c h RH S ( 1 ) A r 2. Au s w a h l m ö g l i ch k e i t ge w ä h l t (2 ) A ( B | A r ) Er s e t z e n vo n r dur c h RH S ( 1 ) , ( ) zu r Ve r m e i d u n g vo n Mi s s v e r s t ä n d n i s s e n A A r 2. Au s w a h l m ö g l i ch k e i t ge w ä h l t (2 ) A A ( B | A r ) Er s e t z e n vo n r dur c h RH S ( 1 ) A A B 1. Au s w a h l m ö g l i ch k e i t ge w ä h l t (2 ) r ⟸ B | A r § Is t AAB l e g a l ? -- Ab l e i t u n g s b a u m (V e r s i on 1) § In je d e r Ze i l e wi r d ei n e EB N F Bes c h r ei b u n g dur c h ei n e re c h t e Se i t e er s e t z t ( hi e r im m e r A r, bi s a uf de n le t z t e n Sc h r i t t) 67 r B A r B A r B A r Au s w a h l ge t r o f f e n § Is t AAB l e g a l ? -- Ab l e i t u n g s b a u m (V e r s i on 2) § Wi r fa s s e n Sc h r i t t 1 ( Er se t z e n de r RH S ) mi t Sc h r i t t 2 ( Au s w a h l tr e f f e n ) zu s a m m e n § U n w ic h t ig e s la s s e n wi r we g 68 r B A r B A r B A r § Is t AA l e g a l ? -- Ab l e i t u n g s b a u m (V e r s i on 2) § Wi r fa s s e n Sc h r i t t 1 ( Er se t z e n de r RH S ) mi t Sc h r i t t 2 ( Au s w a h l tr e f f e n ) zu s a m m e n § U n w ic h t ig e s la s s e n wi r we g 69 r A r A r r ⟸ \" | A r od e r r ⟸ | A r EBN F Ge s c hic h t e § BN F en t h i el t er s t nur Re k u rs i o n und Au s w a h l § Di e s e s in d e s s e n t ia l § Op t i o n u n d Wi e d e r h o l u n g vo n N i k l a u s W i r t h hi nz ug e füg t § Da h e r « E » – ex t e n d e d § Ma c h e n Be s c h r e i b u n g e in f a c h e r zu le s e n § Mo t i v a t i o n : Be s c h r e i b u n g vo n P a s c a l 71 Noc h m a l in t e g e r 72 EBN F § Da s wa r ’ s . 73 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 2 2. 0 Ei n f a c h e Ja v a Pr o g r am m e § Übe r s i c h t § St r u k t u r § Na m e n § Ou t p u t 3 2. 0 Ei n f a c h e Ja v a Pr o g r am m e § Si e so l l t e n Übung 0 b i s Mi t t w o c h (28. 9. ) ge m a c h t ha be n § Od e r s ic h e r s e in da s s di e s e ke i n e Sc h w i e r i g k e i t e n ma c h t § Ab Übung 1 mü s s en Si e i n « my S t u d i e s » re g i s t r i e r t s e i n u m Au f g a b e n ab g e b e n zu kö n n e n § St e l l t s ic h e r da s s Si e Pr o g r a m m f r a g m e n t e e r h a lt e n kö n n e n und Lö s ung e n ab g eb en kö n n e n § « N a c h z ü g le r » mü s s e n e M a il s c h ic k e n ( s ie h e We b Se i t e ) § Fr a g e n Si e im Gr u p p e n t r e f f e n mor g e n be i Pr o b l e m e n 5 EBN F § Häl t di e S yn t a x Re g e l n vo n J a v a Pr o gr a m m e n fe s t § Bei s p i el : Na m e n in Pr o gr a m m e n § Be z ei c h n er (« i d e n t i f i e r » ) mü s s en An f or d e r u n g e n er f ü l l en § Be z e i c h n e r mu s s mi n d e s t e n s e in Z e ic h e n la n g s e in § … m u s s mi t Bu c h s t a b e n an f an g en (a - z, A - Z) § … ka n n Bu c h s t a b e n od e r Zi f f e r n (0 - 9) e n t h a lt e n § (J a v a er l a u b t no c h meh r ) ( Ma n c h m a l gi b t es no c h meh r Ei n sc h r ä n k u n g e n ) 6 Be i s p i e l : Be z e i c h n e r (« ide n tif ie r » ) 8 Ja v a Re g e l n ( ve r e i n f a c h t ) EB N F Bes c h r ei b u n g be z ei ch n er lo w e r c a s e le t t e r ⟸ a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z uppe r c as e l e t t e r ⟸ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z le t t e r ⟸ lo w e r c a s e le t t e r | uppe r c as e l e t t e r di gi t ⟸ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7| 8 | 9 be z e i c hne r ⟸ le t t e r { le t t e r | di gi t } 9 Ja v a Re g e l n ( ve r e i n f a c h t ) EB N F Bes c h r ei b u n g id e n t if ie r lo w e r c a s e le t t e r ⟸ a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z uppe r c as e l e t t e r ⟸ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z le t t e r ⟸ lo w e r c a s e le t t e r | uppe r c as e l e t t e r di gi t ⟸ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7| 8 | 9 id e n t if ie r ⟸ le t t e r { le t t e r | di gi t } 10 Ja v a Pr o g r am m e § Er s t e l l e n § Au s f ü h r e n 11 Ja v a Pr o g r am m e § Ga nz e s Pr o gr a m m § Fü r je d e Da t e i … § Er s t e l l e n § Au s f ü h r e n § Mo d i f i z i e r e n 12 § Ei n z e l n e An w e i s u n g e n § Fü r je d e An w e i s u n g … § Le s e n (R e a d ) § Ev a l u i e r e n ( Au s f ü h r e n ) § Au s g e b e n (P r in t ) § RE P L § Re a d - Ev a l u a t e - Pr i n t L o o p Ja v a Pr o g r am m : T e xt à Ou tp u t 14 Ja v a P r o g r a m m (T e x t ) Java Anweisungen Java Anweisungen Java Anweisungen Java Anweisungen Ou t p u t ( Gr a f i k ) Ou t p u t ( T e x t ) Die Note ist: 6.0 Ou t p u t ( . . . ) 0929095 8395798 9216320 0082134 Ja v a Pr o g r am m : T e xt à Ou tp u t 15 Ja v a P r o g r a m m (T e x t ) Java Anweisungen Java Anweisungen Java Anweisungen Java Anweisungen Ou t p u t ( Gr a f i k ) Ou t p u t ( T e x t ) Die Note ist: 6.0 Ou t p u t ( . . . ) 0929095 8395798 9216320 0082134 Ja v a P r o g r a m m (P r o z e sso r In s t r u k t i o n e n ) P1 Befehl P1 Befehl P1 Befehl P1 Befehl P1 Befehl Co m p i l e r Pr o z e s s o r Üb e r s e t z t Fü h r t a u s Ed i t o r Ja v a Pr o g r am m : T e xt à Ou tp u t 16 Ja v a P r o g r a m m (T e x t ) Java Anweisungen Java Anweisungen Java Anweisungen Java Anweisungen Ou t p u t ( Gr a f i k ) Ou t p u t ( T e x t ) Die Note ist: 6.0 Ou t p u t ( . . . ) 0929095 8395798 9216320 0082134 Ja v a P r o g r a m m (P r o z e sso r In s t r u k t i o n e n ) P1 Befehl P1 Befehl P1 Befehl P1 Befehl P1 Befehl P1 Check P1 Check Co m p i l e r Pr o z e s s o r + La u f z ei t - sy s t e m Üb e r s e t z t und pr üf t Fü h r t a u s und pr üf t Ed i t o r Ja v a Pr o g r am m e § Ga nz e s Pr o gr a m m § Fü r je d e Da t e i … § Er s t e l l e n ( mi t E d it o r ) § Üb e r s e t z e n ( mi t Co m pi l e r ) § Au s f ü h r e n (a u f Pr o z e s s o r ) § Ou t p u t an al y s i e r e n § Mo d i f i z i e r e n § E c l i ps e I D E en t h ä l t al l e Ko m p o n e n t e n § «I n d u s t r i a l s t r e n g t h » in t e g r ie r t e En t w i c k l ung s um g e bung 1719 Ja v a u n d E c l i p s e § Vi e l e A s p e k t e § Zu e r s t : F o k u s au f d as w i c h t i g s t e § Si e k e n n e n J a v a / E c l i p se sc h o n : su p e r § Ab e r d e n k e n S i e a n d i e , d i e n o c h n i c h t s o w e i t s i n d § Sc h r i t t w e i se e r k l ä r e n w i r m e h r K o n z e p t e § Wa s u n s ( j e t z t ) n i c h t i n t e r e s s i e r t : a b d e c k e n § Kö n n e n d i e s e T e i l e n i c h t i g n o r i e r e n § Mü s s e n d i e s e T e i l e ( f ü r s E r s t e ) a k z e p t i e r e n 202122 Ja v a § Wi r ig n o r ie r e n für s er s t e vi e l e As p e k t e di e ni c h t ab so l u t no t w e ndi g zu m Ve r s t ä n d n i s si n d § 1. Zi e l : Pr o g r a m m le s e n § 2. Zi e l : Pr o g r a m m ve r s t e h e n § 3. Zi e l : Pr o g r a m m e r s t e lle n § Of t dur c h M o d if ik a t io n ei n es Pr o g r a m m e s § Wi r kö n n e n ab e r ni c h t al l e s ig n o r ie r e n … 232425 § class : J a v a Pr o gr a m m ( nur 1 class / Da t e i für s er s t e ) § Na m e d e s Pr o gr a m m s gl e i c h Na m e n de r Da t e i (! ! ) 27 Ja v a Pr o g r am m ja v a p r o g r a m ⟸ public class be z ei ch n er { me t h o d } 29 Hi e r f e h l t n oc h e tw a s ! Ja v a Pr o g r am m ja v a p r o g r a m ⟸ public class be z ei ch n er { me t h o d d e f i n i t i o n } 303133 § main : J a v a Me t h o d e (J a v a C od e d e n wi r au s f ü h r e n kö n n e n ) § Me t h o d e en t h ä l t Au f r e i h u n g (« s e q u e n c e » ) v on An w e i s u n g e n (« s t a t e m e n t s » ) Ja v a Pr o g r am m ja v a p r o g r a m ⟸ public class be z ei ch n er { me t h o d d e f i n i t i o n } me t h o d d e f i n i t i o n ⟸ public static void main ( String [] ar g s ) { sta t e m e n t s e q u e n c e } 34 Au f r e i h u n g v o n An w e i s u n g e n : st a t e m e n t s e q u e n c e § Vi e l e m ö g l i c h e A n w e i s u n g e n ( « S t a t e m e n t s » ) § Zu w e i s u n g e n § Sc h l e i f e n § In p u t / O u t p u t § Met h o d e n / F u n kt i o n e n – Au f r u f § Li s t e n i c h t v ol l s t ä n d i g 35 Au f r e i h u n g v o n An w e i s u n g e n : st a t e m e n t s e q u e n c e § Vi e l e m ö g l i c h e A n w e i s u n g e n ( S t a t e m e n t s ) § Wi c h t i g f ü r J a v a ( u n d v i e l e a n d e r e n P r o g r a m m i e r s p r a c h e n ) : § Me t h o d e n a u f r u f g l o b a l b e k a n n t e r Me t h o d e n § Fo r m a t : Me t h o d e n N a m e ( ) ; 36 Au f r e i h u n g v o n An w e i s u n g e n : st a t e m e n t s e q u e n c e § Vi e l e m ö g l i c h e A n w e i s u n g e n ( S t a t e m e n t s ) § Wi c h t i g f ü r J a v a ( u n d v i e l e a n d e r e n P r o g r a m m i e r s p r a c h e n ) : § Me t h o d e n a u f r u f f ü r e i n O b j e k t ( B e i s p i e l f o l g t ) § Fo r m a t : O b j e k t . M e t h o d e n N a m e ( ) ; 37 Au f r e i h u n g v o n An w e i s u n g e n : st a t e m e n t s e q u e n c e § Vi e l e m ö g l i c h e A n w e i s u n g e n ( S t a t e m e n t s ) § Wi c h t i g f ü r J a v a ( u n d v i e l e a n d e r e n P r o g r a m m i e r s p r a c h e n ) : § Me t h o d e n a u f r u f § Fo r m a t : O b j e k t . M e t h o d e n N a m e ( ) ; 38 De t a i l s o d e r me h r I n f or ma t i on e n Mi t de m Ob j e kt System.out kö n n e n wi r mi t de r println () Met h o d e Te x t aus g e be n System.out.println ( ); Me h r übe r Te x t i n ei n paar Mi n u t e n -- es gi b t vi e l e Met h o d e n fü r Te x t b e a r b e i t u n g jshell > \"Hello\". toUpperCase (); 41 Ob j e k t . M e th o d e n Na me ( ) ; \"Hello\" . toUpperCase (); Be i s p i e l Vi e l e M e t h o d e n l a s s e n d a s O b j e k t m i t d e m d i e M e t h o d e ar b e i t e t un ve r ä nd e r t An i m a t i on 4345 § println : J a v a Me t h o d e ( Fu n k t i on ) 46 § println : J a v a Me t h o d e ( Fu n k t i on ) § Gi b t String aus (« dr uc k t ») § Str i n g : T e x t zw i s c h e n \" ( An f ü h r u n g s z e i c h e n , « q u o t a t i o n m a r k » , «d o u b l e q u o t e ») u n d \" ( be i de \" mü s s en ob e n se i n ) 4748 Au s f ü h r e n (a u t o m a t i s c h ü b e r s e t zt – so n s t g e h t A u s f ü h r u n g n i c h t Ja v a D e t ai l s § Wi r we r d e n ei n en Te i l de s Pr o gr a m m e s ( für s er s t e ) ig n o r ie r e n § Ab e r wi r kö n n e n di e s e Te i l e ni c h t we g l a s s e n / ig n o r ie r e n ! § So n s t kö n n e n wi r da s J a v a Pr o gr a m m ni c h t « übe r s e t z e n » § Übe r s e t z e n ( ko m p i l i e r e n , « c o m p ile \" ) he i s s t in e in e Fo r m br i ng e n , d ie au s g e f ü h rt we r d e n ka n n § Es gi b t Fe h l e r m e l d u n g e n we n n wi r Te i l e we g l a s s e n od e r fa l s c h s c h r e ib e n 49505152 Ja v a § Ni c h t al l e Rüc k m e l dung e n de s Übe r s e t z e r s (« c om p i l e r s » ) si n d so kl a r 535455 W ir mac h e n mal we i t e r …. 565758 § Le i ch t zu übe r s e he n : d i e le t z t e } fe h l t 59 Zu s a m m e n f a s s u n g public class n am e { public static void main(String [] args ) { st a te m e nt ; st a te m e nt ; ... st a te m e nt ; } } 60 cl a s s : e in Pr o g r a m m mi t Na m e n nam e st a t e m e nt : An w e i s u n g di e au s g e f ü h rt we r d e n s o ll me t h o d : Gr u p p e vo n An w e i s u n g e n mi t Na m e n main § Je d e s ( au s fü h r b ar e ) Ja v a Pr o g r a m m be s t e h t au s ei n er Kl as s e ( class ) § di e e in e Met h o d e main e n t h ä lt , § di e e in e Re i h e vo n An w e i s u n g e n e n t h ä lt § Sp ä t e r ar b e i t e n wi r mi t Pr o g r a m m e n mi t me h r e r e n Kl a s s e n 61 Ja v a Pr o g r am m e 63 § Ei n z e l n e An w e i s u n g e n § Fü r je d e An w e i s u n g … § Le s e n (R e a d ) § Ev a l u i e r e n ( Au s f ü h r e n ) § Au s g e b e n (P r in t ) § RE P L § Re a d - Ev a l u a t e - Pr i n t L o o p § Ke i n ID E nö t i g da für JSh e l l 64 Au f r u f JShell au f C o m m an d l i n e Ei n e ( J a v a ) A n w e i su n g Ou t p u t 65 Au f r u f JShell au f C o m m an d l i n e Ei n g a b e e i n e r M e t h o d e § I s t j e t z t g lo b a l b e k a n n t § Er s pa r t class und public static et c § Gu t f ü r k l e i n e P r o g r a m m e Au f r u f M e t h od e main mi t Ou t p u t Na m en und Be z e i c h n e r Je d e s Pr o gr a m m br a uc h t ei n en Na m e n public class HelloWorld {…} § Ko n v e n t i o n : fä n g t mi t Gr o s s buc hs t a be n an § Ko n v e n t i o n : Gr o s s buc hs t a be n zu r ve r b e s s e r t e n Le s b a rk e i t § Re g e l : Da t e i n a m e gl e i c h Pr o gr a m m na m e HelloWorld.java § Gr o s s / Kl e i n b u c h s t a b e n s in d (in J a v a ) un t e r s c hi e dl i c h 66 Je d e Me t h o d e br a uc h t ei n en Na m e n public static void main (String[] args ) {…} § Ko n v e n t i o n : fä n g t mi t Kl e i n b u c h s t ab e n an § Ko n v e n t i o n : Gr o s s buc hs t a be n zu r ve r b e s s e r t e n Le s b a rk e i t § Be i s p i e l : toUpperCase § So n s ti g e Be z ei c h n er : N a m e für ei n Pr o gr a m m e l e m e n t § Mu s s mi t e in e m Bu c h s t a b e n (g r o s s od e r kl ei n ) an f an g en § Da n a c h Zi f f e r n , Bu c h s t a b e n od e r _ (« u n d e r s c o r e » , U n t e r s t r ic h ) § We i t e r e Ko n v e n t i o n e n sp ä t e r 67 Re s e r v i e r t e Sy m b o l e 69 § ke y w o r d : E i n Be z ei c h n er (« i d e n t i f i e r » ) d e r re s e r v i e r t is t ( we i l er für di e Sp r ac h e ei n e be s o nde r e Bed eu t u n g ha t ) abstract default if private this boolean do implements protected throw break double import public throws byte else instanceof return transient case extends int short try catch final interface static var char finally long strictfp void class float native super volatile const for new switch while continue goto package synchronized Re s e r v i e r t e Sy m b o l e 70 § Re s e r v i e r t für be s o nde r e We r t e false null true Ko m m e n t a r e Ko m m e n t a r e (« c om m e n t s » ) si n d Not i z e n im Pr o gr a m m t e x t , d i e ei n em Le s e r be i m Ve r s t e h e n d e s Pr o gr a m m e s he l f e n ( so l l e n ) § Le s e r : ka n n au c h de r A ut o r s e i n § Ko m m e n t a r e we r d e n ni c h t au s g e f ü h rt , ha be n ke i n e n Ei n f l us s au f Pr o g r a m m § 2 Va r i a n t e n § // Text bis zum Ende der Zeile § /* Text bis § zum naechsten */ 72 Ei n t r i v i a l e s P r o g r a m m … /* * Einfaches Programm aus vielen Texten * Author: Unbekannt */ public class HelloWorld { // nur eine Methode ! // mit einer Anweisung !! public static void main (String[] args ) { System.out.println (\" Hello World! \"); } // Ende von main } 73 St ri n g s § Str i n g : ei n e Fo l g e vo n Ze i c h e n (« c h a r a c t e r s » ) ei n g es c h l o s s en in \" und \" § \" he l l o \" § \" He l l o \" § \" 3+ 2 \" § Ei n sc h r ä n k u n g e n : § Nu r e in e Z e ile la n g \" Da s is t ke i n Ja v a S t r i n g \" § Da r f ni c h t \" e n t h a lt e n ( \" So etwas \" geht \" nicht \" ) § Ac h t u n g : ve r w e n d e n Si e \" im Pr o gr a m m ( ni c h t Va r i a n t e n , auc h we n n di e S l i de s di e s e ( ma nc hma l ) ve r w e n d e n [ Da n k e Po w e r p o i n t !] ) 77 println (), println ( \" Hello \" ) public class HelloWorld { public static void main (String[] args ) { System.out.println (\" Hello World!\"); System.out.println (); System.out.println(\"Hello World!\"); } } § println (String) Me t h o d e d i e e i n e n S t r i n g a u s g i b t § Ar b e i t e t m i t O b j e k t System.out 78 Ou t p u t : Hello World! Hello World! So n d e rz e i c h e n § Un d w as ma c h e n wi r we n n wi r ei n \" au s g e b e n wo l l e n ? § Es gi b t so g e n a n n t e Er s a t z d ar s t e l l u n g e n («e s c ap e s e q u e n c e s ») mi t de ne n ei n So n d e r z e ic h e n au s g e d r ü c k t we r d e n ka n n § Fa n g e n al l e mi t \\ (R ü c k w ä r ts s c h r ä gs tr i c h ) (« b a c k s l a s h » ) a n \\ t Ta b c h a r a c t e r \\ n Ne u e Ze i l e (n e w l i n e c h a r a c t e r ) \\ \" Qu o t a t i o n m a r k ( d o u b l e q u o t e ) c h a r a c t e r \\ \\ Bac k s l as h c har ac t e r 80 Be i s p i e l e § Bei s p i el : System.out.println ( \" \\ \\ Hallo \\ n Wie \\ t geht es \\ \" Ihnen \\ \" ? \\ \\ \\ \\ \"); § Ou t p u t : 82 Be i s p i e l e § Bei s p i el : System.out.println ( \" \\ \\ Hallo \\ n Wie \\ t geht es \\ \" Ihnen \\ \" ? \\ \\ \\ \\ \"); § Ou t p u t : \\ Hallo Wie geht es \" Ihnen \"? \\ \\ 83 Fr ag e n § Wa s dr uc k e n di e s e println St a t e m e n ts? System.out.println(\" \\ ta \\ tb \\ tc \"); System.out.println (\" \\ \\ \\ \\ \"); System.out.println (\"'\"); System.out.println (\" \\ \" \\ \" \\ \"\"); System.out.println(\"C: \\ neuer Spor \\ t Wagen \"); § We l c h e s println St a t e m e n t dr uc k t di e s e n Str i n g ? / \\ // \\ \\ /// \\ \\ \\ 84 An t w o r t § Ou t p u t je d e s println St a t e m e n ts: a b c \\ \\ ' \"\"\" C: euer Spor Wagen 85 An t w o r t § println St a t e m e n t u m d i e ge w ü n s c h t e Ze i t l e Ou t p u t zu er z eu g en : System.out.println (\"/ \\ \\ // \\ \\ \\ \\ /// \\ \\ \\ \\ \\ \\ \"); 86 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 1 Me t h o d e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 88 Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 89 Üb e r s i c h t public class n am e { public static void main(String [] args ) { st a te m e nt ; st a te m e nt ; ... st a te m e nt ; } } 91 cl a s s : e in Pr o g r a m m mi t Na m e n nam e Fo l g e vo n An w e i s u n g e n : Ru m p f (« b o d y » ) d e r Met h o d e me t h o d : Gr u p p e vo n An w e i s u n g e n mi t Na m e n main 2. 1 Me t h od en § Bei s p i el : main im Pr o gr a m HelloWorld § Ei n e Kl as s e ka n n meh r er e Me t h o d e n en t h a l t en . 92 Me t h od en public class n am e { public static void main(String[] args ) { st a te m e nt ; ... st a te m e nt ; } public static void helper() { st a te m e nt ; ... st a te m e nt ; } } 93 me t h o d : G r u p p e v o n An w e i s u n g e n mi t Na m e n main me t h o d : G r u p p e v o n An w e i s u n g e n mi t Na m e n helper Me t h od en § Me t h o d e : Se q u e n z vo n An w e i s u n g e n mi t ei n em Na m e n (d e m d e r Me t h o d e ) § Me t h o d e n st r u k t u r i e r e n di e An w e i s u n g e n § An s t a t t al l e An w e i s u n g e n in e in e r Met h o d e ( main ) un t e r z ubr i ng e n § Me t h o d e n er l a u b en es , Wi e d e r h o l u n g e n zu ve r m e i d e n § Me h r f a c h e Au s f ü h r u n g , ab er nur e in m a l im Pr o g r a m m (t e x t ) § Ei n e ( ne ue ) Me t h o d e st e l l t ei n e ne ue An w e i s u n g zu r Ve r f ü g u n g 95 st a t i c m e t h o d s § static methods : Me t h o d e mi t we i t e r e n Ei g e n sc h a f t e n § main is t ei n e st a t i c m e t h o d ( K e y w o r d static vo r Na m e ) § main wi r d au t o m a ti sc h au f g e r u f e n § Wi r e r k lä r e n gl e i c h wi e an d er e Met h o d e n au f g eru f en we r d e n 96 ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample1 { public static void main(String[] args ) { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); System.out.println (\"Lange Erklaerung \"); System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } // main } 97 Ou tp u t 98 -------- Warnung : sichern Sie die Daten -------- Lange Erklaerung -------- Warnung : sichern Sie die Daten -------- Wi e en t s t eh en Me t h o d e n ? § En t w i c k e l n de s Al g or i t h m u s § Lö s ung de s P r o bl e m s § Au f t e i l u n g in T e il - Pr o b l e m e § Fe s t h a l t e n de s Al g or i t h m u s (a u f - sc h r e i b e n , co d i e r e n ) § Au s f ü h r e n ( au f r u f e n , « c a l l » , «i n v o k e ») d e r Me t h o d e (n ) 99 cl a s s me t h o d ma i n n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t n st at e m e n t Wi e en t s t eh en Me t h o d e n ? § En t w i c k e l n de s Al g or i t h m u s § Lö s ung de s P r o bl e m s § Au f t e i l u n g in T e il - Pr o b l e m e § Fe s t h a l t e n de s Al g or i t h m u s (a u f - sc h r e i b e n , co d i e r e n ) § Au s f ü h r e n ( au f r u f e n , « c a l l » , «i n v o k e ») d e r Me t h o d e (n ) 100 cl a s s me t h o d ma i n n st at e m e n t n st at e m e n t n st at e m e n t me t h o d o n e n st at e m e n t n st at e m e n t me t h o d t w o n st at e m e n t n st at e m e n t n st at e m e n t ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample2 { // main fehlt noch public static void printWarning () { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } } 101 § En t w i c k e l n de s Al g or i t h m u s § Lö s ung de s P r o bl e m s § Au f t e i l u n g in T e il - Pr o b l e m e § Fe s t h a l t e n de s Al g or i t h m u s (a u f - sc h r e i b e n , co d i e r e n ) § Au s f ü h r e n ( au f r u f e n , « c a l l » , «i n v o k e ») d e r Me t h o d e (n ) 102 cl a s s me t h o d ma i n n on e n st at e m e n t n tw o me t h o d o n e n st at e m e n t n st at e m e n t me t h o d t w o n st at e m e n t n st at e m e n t n st at e m e n t Wi e en t s t eh en Me t h o d e n ? Me t h od en D e fi n i t i on ( 1. A p p r o x i m a t i on ) § Zu e r s t d e f i n i e r e n w i r n u r e i n f ac h e M e t h o d e n § public static void na m e () { § st a te m e n t ( s ) ; // Rumpf § } § Di e M e t h o d e na m e ka n n ü b e r a l l a u f g e r u f e n w e r d e n ( public static ) u n d g i b t k e i n e n W e r t ( void ) z u r ü c k § Wi r k ö n n e n u n s v o r st e l l e n d a s s a n d e r S t e l l e d e s A u f r u f s d e r R u m p f (B o d y ) d e r M e t h o d e a u s g e f ü h r t (e in g e s e t z t ) w ir d . 103 De f i n i t i o n v o n static Me t h od e (n) me t h o d d e f i n i t i o n ⟸ public static void main ( String [] ar g s ) { sta t e m e n t s e q u e n c e } ot he r m e t hod d e f ot he r m e t hod d e f ⟸ { public static void na m e ( ) { sta t e m e n t s e q u e n c e } } 105 Auf r uf ei n er Me t h od e § Es gi b t zw e i We g e ei n e Me t h o d e au f z u r u f e n § Mi t ex p l i z i t e m Obj e k t : O b j e k t .m e t h o d N a m e (); § Be i s p i e l : System.out.println (\"Text\"); \"Hello\". toUpperCase (); § Ohne Obj e k t § Ge h t nur fü r Me t h o d e n mi t be s o nde r e n Ei g e n s c h a f t e n § bes o nder e Ei g e n sc h a f t e n : static Ke y w o r d § st a t i c m e t h o d s ( Me t h o d e n mi t Ke y w o r d static ) we r d e n oh n e Ob j e k t au f g e r u f e n § De r Met h o d e n n a me ge n ü g t § Be i s p i e l : printWarning (); 106 ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample2 { public static void main(String[] args ) { printWarning (); System.out.println (\"Lange Erklaerung \"); printWarning (); } // main public static void printWarning () { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } } 107 Auf r uf ei n er ( static ) Me t h od e § Sy n t a x : nam e (); § EBN F Be s c h r e i b u n g : me t h od i n v oc a t i on ⟸ be z e i c hne r ( ) ; § Me h r f a c h e s Au f r u f e n is t zu l ä s s i g § Bei s p i el : printWarning (); printWarning (); 108 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 1 Me t h o d e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 Üb e r s i c h t § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 2 ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample1 { public static void main(String[] args ) { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); System.out.println (\"Lange Erklaerung \"); System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } // main } 3 Wi e en t s t eh en Me t h o d e n ? § En t w i c k e l n de s Al g or i t h m u s § Lö s ung de s P r o bl e m s § Au f t e i l u n g in T e il - Pr o b l e m e § Fe s t h a l t e n de s Al g or i t h m u s (a u f - sc h r e i b e n , co d i e r e n ) § Au s f ü h r e n ( au f r u f e n , « c a l l » , «i n v o k e ») d e r Me t h o d e (n ) 4 ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample2 { // main fehlt noch public static void printWarning () { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } } 5 Auf r uf ei n er Me t h od e § Es gi b t zw e i We g e ei n e Me t h o d e au f z u r u f e n § Mi t ex p l i z i t e m Obj e k t : O b j e k t .m e t h o d N a m e (); § Be i s p i e l : System.out.println (\"Text\"); \"Hello\". toUpperCase (); § Oh n e Ob j e k t § Ge h t nur fü r Me t h o d e n mi t be s o nde r e n Ei g e n s c h a f t e n § be s o n de r e Ei g e n s c h a f t e n : static Ke y w o r d § st a t i c m e t h o d s ( Me t h o d e n mi t Ke y w o r d static ) we r d e n oh n e Ob j e k t au f g e r u f e n § De r Met h o d e n n a me ge n ü g t § Be i s p i e l : printWarning (); 6 ( Zu ) Ei n f a c h e s Be i s p i e l public class PrintExample2 { public static void main(String[] args ) { printWarning (); System.out.println (\"Lange Erklaerung \"); printWarning (); } // main public static void printWarning () { System.out.println (\" \\ n -------- \\ n\"); System.out.println (\" Warnung : sichern Sie die Daten \\ n\"); System.out.println (\" \\ n -------- \\ n\"); } } 7 Auf r uf ei n er ( static ) Me t h od e § Sy n t a x : nam e (); § EBN F Be s c h r e i b u n g : me t h od i n v oc a t i on ⟸ be z e i c hne r ( ) ; § Me h r f a c h e s Au f r u f e n is t zu l ä s s i g § Bei s p i el : printWarning (); printWarning (); 8 De f i n i t i o n v o n static Me t h od e (n) me t h o d d e f i n i t i o n ⟸ public static void main ( String [] ar g s ) { sta t e m e n t s e q u e n c e } ot he r m e t hod d e f ot he r m e t hod d e f ⟸ { public static void na m e ( ) { sta t e m e n t s e q u e n c e } } 9 Auf r uf ei n er Me t h od e ( mi t od e r oh n e Ob j e k t ) § We n n di e An w e i s u n g name() ( fü r di e Met h o d e name ) ...; // irgendeine Anweisung name (); // z.B . in main stmtN ; // naechste Anweisung au sg e f ü h r t wi r d , da nn wi r d di e Me t h o d e name au f g e r u f e n (« i n v ok e d » , « c a l l e d » ) § Da m i t be g i nn t di e Au s f ü h r u n g de r Met h o d e name . § Es gi b t au c h an d er e We g e , e in e Au s f ü h r u n g zu st a r t e n , ab er di e s e in t e r e s s ie r e n uns ( no c h ) ni c h t . § We n n name fe r t i g is t , ge h t es mi t stmtN we i t e r 10 Aus f ühr e n ei n er Me t h od e § Me t h o d e name wi r d au f g e r u f e n ( d. h . name() ) § 1. An w e i s u n g vo n name au s g e f ü h rt § Gi b t es we i t e r e An w e i s u n g e n ? § Ne i n : E n d e d e r Au s f ü h r u n g vo n name § Ja : § Nä c h s t e An w e i s u n g au s g e f ü h rt , we i t e r wi e ob e n § Wi r be z e i c hne n di e Ab f ol g e de r Aus f ühr ung vo n An w e i s u n g e n al s Ko n t r o l f l u s s (« c on t r ol f l o w » ) § ge r a d l i n i ge r Ko n t r o l l f l u s s : d i e aus ge f ühr t e n An w e i s u n g e n fo l g e n im Pr o g r a m m au f ei n an d er § In J a v a : An w e i s u n g s r e i h e n f o l g e is t ex p l i z i t 11 § We n n ei n e Me t h o d e au f g e r u f e n wi r d , da nn § « s p r in g t » d i e Au s f ü h r u n g zu r Met h o d e und fü h r t di e An w e i s u n g e n de r Met h o d e au s und danac h § « s p r in g t » d i e Au s f ü h r u n g wi e d e r zu de m Or t zu r ü c k vo n de m de r Au f r u f e r f o lg t e § Un d e s ge ht w e it e r mi t de r nä c hs t e n An w e i s u n g § An or d n u n g de r Me t h o d e n im Pr o gr a m m (t e xt ) oh n e Bed eu t u n g Ko n t r o l l f l u s s be i Me t h od en a u fr u f 14 Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String [] args ) { message1(); message2(); System.out.println(\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 15 Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main (String[] args ) { message1(); message2(); System.out.println(\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 16 Hi e r fa n g e n wi r an Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 17 1. An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { mes s age1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 18 Hi e r ge h t es we i t e r Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 19 1. u n d le t z t e An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } Hi e r ge h t es we i t e r 20 Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 21 Hi e r ge h t es we i t e r Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 22 1. An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 23 2. An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String [] args ) { message1(); message2(); System.out.println(\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 24 Hi e r ge h t es we i t e r Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 25 1. u n d le t z t e An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 26 Hi e r ge h t es we i t e r Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } 27 Le t z t e An w e i s u n g Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } Hi e r ge h t es we i t e r 28 Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } Le t z t e An w e i s u n g 29 Me t h od en die Me t h od en au f ru f e n public class MethodsExample { public static void main(String [] args ) { message1(); message2(); System.out.println(\"Ende von \\ \"main \\ \" \" ); } // main public static void message1() { System.out.println ( \" Nachricht 1: Fertig \" ); } // message1 public static void message2() { System.out.println ( \" Die 2. Nachricht : \" ); message1(); System.out.println ( \" Ende von Nachricht 2\"); } // message2 } En d e main 30 Ou tp u t § Nachricht 1: Fertig § Die 2. Nachricht : § Nachricht 1: Fertig § Ende von Nachricht 2 § Ende von \"main\" 31 public class MethodsExample { public static void main(String[] args ) { message1(); message2(); System.out.println (\"Done with \\ \"main \\ \".\"); } ... } public static void message1() { System.out.println(\" Nachricht 1: Fertig \"); } public static void message2() { System.out.println ( \" Die 2. Nachricht : \"); message1(); System.out.println ( \" Ende von Nachricht 2 \"); } public static void message1() { System.out.println(\" Nachricht 1: Fertig \"); } Ko n t r o l l f l u s s 32 Ei n f a c h e s Be i s p i e l ( Wi r ve r w e n d e n je t zt println we i l es ei n f a c h is t . Sp ä t e r e Ja v a Pr o gr a m m e be nut z e n ei n e an d e r e Sc h n i t ts t e l l e für Ben u t z er .) 33 Be i s p i e l mi t st a t i c m e t h o d s Sc h r e i b e n Si e ei n Pr o gr a m m um di e s e Fi g u r e n zu dr uc k e n ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + 34 En t w i c k l u n g s s c h r i t t e Ve r s i o n 1 : ( oh n e Au s n u t z e n de r St r u k t u r ) n Er s t e l l e n Si e e in Pr o g r a m m mi t le e r e r main Met h o d e . n Ko p i e r e n Si e d e n er w ü n s c h t en Ou t p u t i n main und s c h r e ib e n fü r jed e Z e ile e in e en t s p r ec h en d e System.out.println An w e i s u n g . n Fü h r e n Si e d i e Met h o d e au s um de n O ut put mi t de r ge w ü n s c h t e n Fi g u r zu ve rg l e i c h e n ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + 35 P r o g r a m V e r s io n 1 public class Figures1 { public static void main(String[] args ){ System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (); System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (\"+ -------- +\"); System.out.println (); System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\"| STOP |\"); System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (); System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\"+ -------- +\"); } // main } // Figures1 36 En t w i c k l u n g s s c h r i t t e Ve r s i o n 2 : ( mi t Au s n u t z e n de r St r u k t u r , mi t Re d u n d a n z ) n I d e n t if iz ie r e n Si e ( e v e n t u e ll vo r h a n d e n e ) St r u k t u r e (n ). n U n t e r t e ile n Si e di e main Met h o d e ba s i e r e nd au f Ih r e r St r u k t u r i e r u n g . n Fü h r e n Si e di e Met h o d e au s um de n O ut put mi t de r ge w ü n s c h t e n Fi g u r zu ve rg l e i c h e n ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + 37 St ru k t u r de s O ut put St r u k t u r e n in di e s e r Fi g u r n ob e n : Se c h se c k (H e x a g o n ) ( od e r Ba l l …) n da r un t e r : « Wa n n e » ( od e r Su p p e n t a sse …) n dr i t t e ns «S T O P Sc h i l d » Fi g u r n vi e r t e n s « Tr a p e z » ( od e r Hu t Fi g u r …) St r u k t u r à Met h o d e n : n hexagon n wanne n stopSign n hut ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + 38 P r o g r a m V e r s io n 2 public class Figures2 { public static void main(String[] args ) { hexagon(); wanne (); stopSign (); hut(); } //main ... 39 P r o g r a m V e r s io n 2 , F o r t s e t z ung ... public static void hexagon() { System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (); } public static void wanne () { System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (\"+ -------- +\"); System.out.println (); } ... 40 Pr o g r a m V e r s i o n 2 , Fo r t s e t z u n g ... public static void stopSign () { System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\"| STOP |\"); System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); System.out.println (); } public static void hut() { System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); System.out.println (\"+ -------- +\"); } } //Figures2 4142 ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + En t w i c k l u n g s s c h r i t t e Ve r s i o n 3 ( mi t Au s n u t z e n de r St r u k t u r , oh n e Re d u n d a n z ) n I d e n t if iz ie r e n Si e ( e v e n t u e ll vo r h a n d e n e ) St r u k t u r e (n ) u n d Re d u n d a n z n Er s t e l l e n Si e Met h o d e n um ( s o w e it mög l i c h ) Re d u n d a n z zu ve r m e i d e n n Ko m m e n t i e r e n Si e de n C o de n Fü h r e n Si e di e Met h o d e au s 43 ______ / \\ / \\ \\ / \\ ______/ \\ / \\ ______/ + -------- + ______ / \\ / \\ | STOP | \\ / \\ ______/ ______ / \\ / \\ + -------- + Re d u n d a n z im Ou tp u t n He x a g o n ob e r e r Te i l : im St o p Sc h i l d und H ut wi e d e r v e r w e n d e t n He x a g o n un t e r e r Te i l : i n Wa n n e und S t o p Sc h i l d n Tr e n n l i n i e : i n Wa n n e und H ut n Di e s e Re d u n d a n z ka n n dur c h di e s e Met h o d e n au s g en u t z t ( d. h . e lim in ie r t ) we r d e n : n hexagonTop n hexagonBottom n line P r o g r a m V e r s io n 3 // Ihr Name, 252 - 0027, Herbst 2020 // Prints several figures, with methods for structure and redundancy. public class Figures3 { public static void main(String[] args ) { hexagon(); wanne (); stopSign (); hut(); } // Draws the top half of an an hexagon. public static void hexagonTop () { System.out.println (\" ______\"); System.out.println (\" / \\ \\ \"); System.out.println (\"/ \\ \\ \"); } ... 45 P r o g r a m V e r s io n 3 , F o r t s e t z ung ... // Draws the bottom half of an hexagon. public static void hexagonBottom () { System.out.println (\" \\ \\ /\"); System.out.println (\" \\ \\ ______/\"); } // Draws a complete hexagon. public static void hexagon() { hexagonTop (); hexagonBottom (); System.out.println (); } ... 46 P r o g r a m V e r s io n 3 , F o r t s e t z ung ... // Draws a tub (« Wanne ») figure. public static void wanne () { hexagonBottom (); line(); System.out.println (); } // Draws a stop sign figure. public static void stopSign () { hexagonTop (); System.out.println (\"| STOP |\"); hexagonBottom (); System.out.println (); } 47 P r o g r a m V e r s io n 3 , F o r t s e t z ung ... // Draws a figure that looks sort of like a hat («Hut»). public static void hut() { hexagonTop (); line(); } // Draws a line of dashes. public static void line() { System.out.println (\"+ -------- +\"); } } //Figures3 48 Me t h od en ( Üb u n g ) Sc hr e i be n Si e ei n Pr o g r a m m das di e s e Ra c k e t e aus g i b t : / \\ / \\ / \\ / \\ + ------- + | | | | | | + ------- + | | | ISS | | | + ------- + | | | | | | + ------- + / \\ / \\ / \\ / \\ 49 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 2 T y p en und Va r i a b l e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 3 Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 5 2. 2. 1 Ei n f ü h r u n g 6 Ty p e n § Ty p e n (« t y p e s » ) be s c hr e i be n Ei g e n sc h a f t e n vo n Da t e n § Ei n Ty p be s c hr e i b t ei n e Me n g e ( od e r Ka t e g o r i e ) v on Da t e n We r t e n . § Be s t i m m t ( be s c hr ä nk t ) d ie Op e r a t i o n e n , d ie mi t di e s e n Da t e n ge m a c h t we r d e n kö n n e n § Vi e l e Pr o g r a m m i e r s p r a c h e n er f o r d er n di e An g a b e ( Sp e z i fi k a t i o n ) v o n Ty p e n § Ty p e n Be i s p i e l e : ga n z e Za h l e n , re e l l e Za h l e n , S t r in g s § Ty p e n si n d Te i l de r Do k u m e n t a t i o n (w a s ve r a r b e i t e t di e s e Me t h o d e ?) 7 Ty p e n § Di e Pr o gr a m m i e r s pr a c he le g t fe s t , wi e ei n Ty p im p le m e n t ie r t is t § « I m p le m e n t ie r t » – Da r s t e l l u n g de r We r t e und D e f i ni t i o n de r Op e r a t i o n e n § Di e i n t e r n e Da r s t e l l u n g ei n es Ty p e s be r uh t au f Ko m b i n a t i o n e n vo n 1 s u n d 0 s 97 à 01100001 9 Ty p e n § Di e Pr o gr a m m i e r s pr a c he le g t fe s t , wi e ei n Ty p im p le m e n t ie r t is t § « I m p le m e n t ie r t » – Da r s t e l l u n g de r We r t e und D e f i ni t i o n de r Op e r a t i o n e n § Di e i n t e r n e Da r s t e l l u n g ei n es Ty p e s be r uh t au f Ko m b i n a t i o n e n vo n 1 s u n d 0 s 97 à 01100001 \"ab\" à 01100001 01100010 12 Ty p e n § Di e Pr o gr a m m i e r s pr a c he le g t fe s t , wi e ei n Ty p im p le m e n t ie r t is t § Di e i n t e r n e Da r s t e l l u n g ei n es Ty p e s be r uh t au f Ko m b i n a t i o n e n vo n 1 s u n d 0 s 97 à 01100001 \"ab\" à 01100001 01100010 AS C I I Ta b e l l e 97 01100001 a 98 01100010 b 13 Ty p e n § Di e Pr o gr a m m i e r s pr a c he le g t fe s t , wi e ei n Ty p im p le m e n t ie r t is t § Di e i n t e r n e Da r s t e l l u n g ei n es Ty p e s be r uh t au f Ko m b i n a t i o n e n vo n 1 s u n d 0 s 97 à 01100001 \"ab\" à 01100001 01100010 AS C I I Ta b e l l e 97 01100001 a 98 01100010 b 14 ¿ W a s be de ut e t 0110 0001 ? Ba s i s t yp e n in J a v a § Es gi b t 8 ei n g eb a u t e Ty p e n (« p r i m i t i v e t y p e s » ) für Za h le n , Bu c h s t a b en , et c . Na me Be s c h r e ib u n g Be is p ie le § int ga n z e Za h l e n - 2147483648 , - 3 , 0 , 42 , 2147483647 § § double re e l l e Za h l e n 3.1, - 0.25, 9.4e3 § char ( ei n z el n e ) Bu ch s t a b e n 'a' , 'X' , '?' , ' \\ n' § boolean lo g is c h e We r t e true , false 17 Ba s i s t yp e n in J a v a § Es gi b t 8 ei n g eb a u t e Ty p e n (« p r i m i t i v e t y p e s » ) für Za h le n , Bu c h s t a b en , et c . Na me Be s c h r e ib u n g Be is p ie le § int ga n z e Za h l e n - 2147483648 , - 3 , 0 , 42 , 2147483647 § long gr o s s e ga n z e Za h l e n - 3 , 0 , 42 , 9223372036854775807 § double re e l l e Za h l e n 3.1, - 0.25, 9.4e3 § char ( ei n z el n e ) Bu ch s t a b e n 'a' , 'X' , '?' , ' \\ n' § boolean lo g is c h e We r t e true , false 18 Ob er fl ä c h e ei n es Qu a d er s § Ge g e be n : Qu a d e r § Au f g a b e : J a v a Pr o g r a m m zu r Be r e c h n u n g § de r Ob e r f l ä c h e § Of l a e c h e = 2 * ( 7 0 * 2 7 + 2 7 * 4 0 + 7 0 * 4 0 ) c m 2 Pu b l i c d o m a i n , v i a W i k i m e d i a C o m m o n s 19 70 c m 40 c m 27 c m Pr o g r am m … public class Quader { // Berechnen wir die Oberflaeche ... public static void main(String[] args ) { System.out.print (\"Die Oberflaeche ist \"); System.out.print (2 * (70 * 27 + 27 * 40 + 70 * 40)); System.out.println (\" cm2\"); } // Ende von main } 20 Ou t p u t : Di e Ob e r f l a e c h e is t 11540 c m 2 70 c m 40 c m 27 c m Pr o g r am m … public class Quader { // Berechnen wir die Oberflaeche ... public static void main(String[] args ) { System.out.print (\"Die Oberflaeche ist \"); System.out.print (2 * (70 * 27 + 27 * 40 + 70 * 40)); System.out.println (\" cm2\"); } // Ende von main } 21 Ou t p u t : Di e Ob e r f l a e c h e is t 11540 c m 2 Au f m e r k s a m e r Pr o g r a m m i e r e r 70 c m 40 c m 27 c m Pr o g r am m … public class Quader { // Berechnen wir die Oberflaeche ... public static void main(String[] args ) { System.out.print (\"Die Oberflaeche ist \"); System.out.print (2 * (70 * 27 + 27 * 50 + 70 * 40)); System.out.println (\" cm2\"); } // Ende von main } 22 Ou t p u t : Di e Ob e r f l a e c h e is t 12080 c m 2 Un au f m e r k s am e r Pr o g r a m m i e r e r 70 c m 40 cm 27 c m Va r i a b l e § Wi r f ü h r e n e i n e n N a m e n e i n m i t d e m w i r u n s a u f e i n e n W e r t (z . B . 40) b e z i e h e n k ön n e n § Er f o r d e r l i c h f ü r V a r i a b l e : N a m e n und au f w as f ü r W e r t e si c h di e V a r i a bl e be z i e he n k a nn § Hi e r w ä r e n int We r t e s i n n v o l l § Wi r b r a u c h e n e i n e V a r i a b l e f ü r int We r t e 23 Va r i a b l e D e k l a r a t i o n : ty p e na m e § Bei s p i el : int laenge; § int – Ar t (T y p ) d e r W e r t e f ü r d i e s e V a r i a b l e § Gl e i c h m e h r ü b e r T y p e n § laenge – Na m e d e r V a r i a b l e § Fr e i w ä h l b a r , m i t E i n sc h r ä n k u n g e n § Ke i n e J a v a Ke y w o r d s , m u s s m i t B u c h s t a b e a n f a n g e n , … § Gr o s s - und K l e i nbuc hs t a be n si nd un t e r sc hi e dl i c h § De k l a r a t i o n : Er k l ä r u n g , B e k a n n t m a c h u n g 24 P r o g r a m m m it V a r ia ble n public class Quader { // Berechnen wir die Oberflaeche ... public static void main(String[] args ) { int laenge ; int hoehe ; int tiefe ; laenge = 70; hoehe = 40; tiefe = 27; System.out.print (\"Die Oberflaeche ist \"); System.out.print (2*( laenge * tiefe + tiefe * hoehe + laenge * hoehe )); System.out.println (\" cm2\"); } // Ende von main } 25 Ou t p u t : Di e Ob e r f l a e c h e is t 11540 c m 2 Va r i a b l e D e k l a r a t i o n u n d D e f i n i t i o n : type name = value § Ja v a: k ö n n e n D e k l ar a ti o n m i t Zu w e i su n g v e r b i n d e n § Va l u e i s t e i n ( p a s s e n d e r ) W e r t … § «p a s s e n d » -- d. h. v o m T y p type 26 P r o g r a m m m it V a r ia ble n public class Quader { // Berechnen wir die Oberflaeche ... public static void main(String[] args ) { int laenge = 70; int hoehe = 40; int tiefe = 27; System.out.print (\"Die Oberflaeche ist \"); System.out.print (2*( laenge * tiefe + tiefe * hoehe + laenge * hoehe )); System.out.println (\" cm2\"); } // Ende von main } 27 Ou t p u t : Di e Ob e r f l a e c h e is t 11540 c m 2 Va r i a b l e D e k l a r a t i o n § De k l a r a t i o n l e g t A r t /T y p d e r W e r t e f e s t – ka n n j e d e n W e r t di e s e s T ype s da r s t e l l e n § Ma c h t d e n N a m e n b e k a n n t § N a m e w ir d in e in V e r z e ic h n is e in g e t r a g e n § Va r i a b l e w i r d n i c h t i n i t i a l i s i e r t w e n n k e i n e D e f i n i t i o n § Gut e N a m e n s i nd w i c h t i g – be s o nde r s w e nn V a r i a bl e wi ed er h o l t v er w en d e t wi r d § … u n d ( m a n c h m a l ) s c h w e r zu f i n d e n § Ku r z e r N a m e w e n n V a r i a b l e n i c h t w i c h t i g / l a n g l e b i g i s t § Da h e r o f t i n Be i s p i e l e n ( h i e r ) 28 Va r i a b l e D e k l a r a t i o n u n d D e f i n i t i o n § D a s Z e i c h e n = (« G l e i c h h e i t s z e i c h e n » – ab e r i r r e f ü h r e n d e r Na m e ) b e d e u t e t Zu w e i su n g § § int laenge = 70; § De r int Va r i a b l e laenge wi r d d e r W e r t 70 zu g e wi e s e n § We n n w i r d i e V a r i a b l e v e r w e n d e n ( z . B . , u m e i n e O p e r a t i o n au s z u f ü h r e n ) so w i r d d i e O p e r a ti o n m i t d e m W e r t (d e n d i e Va r i a b l e g e p e i c h e r t h a t ) au sg e f ü h r t 29 We r de f inie r t Ty p e n ? § Ve r l a n g e n al l e Pr o gr a m m i e r s pr a c he n di e Sp e z i f i k a ti o n vo n Ty p e n ?§ N e in . ( Mi t ma n c h ma l übe r r a s c he nde n Fo l ge n ) § Ja v a ve r l a n g t ni c h t im m e r e in e Sp e z i fi k a t i o n de s Ty p s § Ma n c h m a l ka n n de r Co m pi l e r de n Ty p he r a us f i nde n § We l c h e Ty p e n ka n n ei n Ja v a Pr o gr a m m ve r w e n d e n ? § Ty p e n di e i n de r Sp r a c h e de f i ni e r t s in d : Ba s i s t y p e n (« p r im it iv e t y p e s » , in t e g r ie r t e Ty p e n ) – Be i s p i e l : int und long fü r ga n z e Za h l e n § Ty p e n au s Bi b l i o t h e k e n , d ie im m e r ve r f ü g b a r s in d ( z. B . String ) § Be n u t z e r - de f i ni e r t e Ty p e n 31 We r de f inie r t Ty p e n ? § Ve r l a n g e n al l e Pr o gr a m m i e r s pr a c he n di e Sp e z i f i k a ti o n vo n Ty p e n ?§ N e in . ( Mi t ma n c h ma l übe r r a s c he nde n Fo l ge n ) § Ja v a ve r l a n g t ni c h t im m e r e in e Sp e z i fi k a t i o n de s Ty p s § Ma n c h m a l ka n n de r Co m pi l e r de n Ty p he r a us f i nde n § We l c h e Ty p e n ka n n ei n Ja v a Pr o gr a m m ve r w e n d e n ? § Ty p e n di e i n de r Sp r a c h e de f i ni e r t s in d : Ba s i s t y p e n (« p r im it iv e t y p e s » , in t e g r ie r t e Ty p e n ) – Be i s p i e l : int und long fü r ga n z e Za h l e n § Ty p e n au s Bi b l i o t h e k e n , d ie im m e r ve r f ü g b a r s in d ( z. B . String ) § Be n u t z e r - de f i ni e r t e Ty p e n 32 W a r um Ty p e n § Ty p e n be s c hr e i be n Ei g e n sc h a f t e n vo n Da t e n § We r t e b e r e i c h § Op e r a t i o n e n § Da r s t e l l u n g ( we l c h e Fo l ge vo n 0 u n d 1 fü r e in e n We r t ge w ä h l t wi r d ) § Ri c h ti g e Wa h l d e s Ty p s nö t i g § Ja v a ka n n da nn en t s p r ec h en d Pl a t z re s e r v i e re n so da s s Er g e bni s s e vo n Op e r a t i o n e n da r s t e l l ba r s in d § Je na c h Pl a t f o r m we r d e n un t e r s c hi e dl i c he (H a r d w a r e ) Op e r a t i o n e n au s g e f ü h rt § Ad d i t i o n ga n z e r Za h l e n -- Ad d i t i o n v o n Re e l l e n ( Gl e i t k o m m a ) Za h l e n 34 W a r um Ty p e n § Pr o gr a m m e ma n i p u l i er en Sy m b o l e § Be i s p i e l EBN F : Sy m b o l e au s Z e ic h e n au s e in e r Me n g e (« A lp h a b e t » ) § Be s t i m m t ob le g a l od e r ni c h t – ab e r nur bz g l . d e r St r u k t u r § Pr o g r a m m e übe r s e t z e n Sp r a c h e n , s p ie le n Sc h a c h , be r e c hne n di e St e u e r sc h u l d § Sy m b o l e we r d e n ve r k n ü p f t , ve rg l i c h e n , ge ä n d e r t , ge l e s e n , …. § Sy m b o l e we r d e n dur c h Fo l g e n vo n 0 u n d 1 da r g e s t e l l t § Ty p e n t s c h e id e t di e I n t e r pr e t a t i o n di e s e r Fo l ge n 35 W a r um Ty p e n § Ty p e n ve r h i n d e r n Fe h l e r § Ka n n ni c h t di e A H V Nu m m e r zu m Ge h a l t ad d i er en § Ka n n ni c h t Vo l u m e n und Fl ä c h e ad d i er en § Ty p e n er l a u b en Op t i mi e r u n g e n (d er Be r e c h n u n g , d e r Dar s t e l l ung ) § Al l e Da r s t e l l u n g e n si n d en d l i c h ! § Ri c h ti g e Wa h l d e s Ty p s nö t i g § Ja v a ka n n da nn en t s p r ec h en d Pl a t z re s e r v i e re n so da s s Er g e bni s s e vo n Op e r a t i o n e n da r s t e l l ba r s in d ( int od e r long ?) 36 Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § Op e r a t i o n e n ( mi t We r t e n de s s e l be n und ve r s c h i e d e n e r Ty p e n ) § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 37 2. 2. 2 P ri m i t i v e T y p e s § De k l a r a t i o n und D e fi ni t i o n § int x = va l ue ; § Ge na ue r : § va l u e wi r d dur c h ei n en Au s d r u c k (« e x p r es s i o n » ) be s t i m m t § De r Au s d r u c k wi r d aus g e w e r t e t (« e v a l u a t ed » ) § Wa s si n d di e Re g e l n für Au s d r ü c k e ? § Zu e r s t fü r int (u n d long ) 38 Aus dr üc k e (« E x pr e ssio ns» ) § Au s d r u c k (« e x p r es s i o n » ) fü r ei n en Ty p : E i n W e r t od e r Op e r a n d e n und Op e r a t o r ( en ) d i e ei n en We r t be r e c hne n • Be i s p i e l e fü r int : 1 + 4 2 * 4 * 3 7 + ( 2 + 6 ) * 4 § De r ei n f a c h s t e Au s d r u c k is t ei n Li t er a l (« lit e r a l v a lu e ») § Ei n W e r t d e r di r e k t im Pr o g r a m m er s c h ei n t ( z. B. 4 ) § Ko m p l e x e Au s d r ü c k e kö n n e n Te i l a u s d r ü c k e en t h a l t en ( sp ä t e r me h r ) § ( Te i l ) Au s d r u ck ka n n Op e r a n d s e i n 39 Ar it hm e t is c he Op er a t o r en § Op e r a t o r : Ve r k n ü p f t We r t e od e r Au s d r ü c k e . § + Ad d i t i o n § - Su b t r a k t i o n ( od e r N e g a t io n ) § * Mu l t i p l i k a t i o n § / Di v i s i o n § % Mo d u l u s ( R e s t ) § Wä h r e n d de r Au s f ü h r u n g ei n es Pr o gr a m m s we r d e n se i n e Au s d r ü c k e au s ge w er t e t (« ev a l u a t e d ») § 1 + 1 e r g ib t 2 § System.out.println (3 * 4); e r g ib t ( dr uc k t ) 12 § Wi e wü r d e n wi r de n T e xt 3 * 4 dr uc k e n ? 41 EBN F Be s c h r e i b u n g Aus dr uc k (E x pr e ssio n) num b e r ⟸ in t e g e r | si g n { di gi t } . di gi t { di gi t } op ⟸ + | - | * | / | % at o m ⟸ num b e r | id e n t if ie r te r m ⟸ ( ex p r ) | at o m ex p r ⟸ te r m { op te r m } 1. Ni c h t d i e v ol l s t ä n d i g e B e s c h r e i b u n g f ü r J a v a Au s d r ü c k e 2. Bes c h r ei b t n u r d i e S y n t a x ( d i e F o r m) 43 Ar it hm e t is c he Op er a t o r en § Op e r a t o r : Ve r k n ü p f t We r t e od e r Au s d r ü c k e . § + Ad d i t i o n § / Di v i s i o n …. § We r t e ha be n ei n en [ fe s t g e l e g t e n ] Ty p § Ev a l u a t i o n e in e s Au s d r u c k s e r g ib t We r t e in e s Ty p s § EBN F be s c hr e i b t nur Fo r m (i n t + i n t er gi b t ? in t , int + lo n g er gi b t ? ?? ) 44 Ar it hm e t is c he Op er a t o r en § Op e r a t o r : Ve r k n ü p f t We r t e od e r Au s d r ü c k e . § + Ad d i t i o n § / Di v i s i o n …. § We r t e ha be n ei n en [ fe s t g e l e g t e n ] Ty p § Ev a l u a t i o n e in e s Au s d r u c k s e r g ib t We r t e in e s Ty p s § EBN F be s c hr e i b t nur Fo r m (i n t + i n t er gi b t ? in t , int + lo n g er gi b t ? ?? ) 45 Ar it hm e t is c he Op er a t o r en § Op e r a t o r : Ve r k n ü p f t We r t e od e r Au s d r ü c k e . § + Ad d i t i o n § / Di v i s i o n …. § We r t e ha be n ei n en [ fe s t g e l e g t e n ] Ty p § Ev a l u a t i o n e in e s Au s d r u c k s e r g ib t We r t e in e s Ty p s § EBN F be s c hr e i b t nur Fo r m (i n t + i n t er gi b t ? in t , int + lo n g er gi b t ? ?? ) § Op e r a t o r ⨂ : Ty p _ A ⨂ Ty p _ A er g i b t Ty p _ A ( fü r ar i t h m e t i s c h e Op e r a t o r e n ) Ty p _ A ⨂ Ty p _ B er g i b t ???? ( hä ng t vo n ⨂ , Ty p _ A , Ty p _ B ab – sp ä t e r ) 46 int Di v i s i o n mi t / § We n n wi r ga n z e Za h le n di v i di e r e n is t de r Q uo t i e n t au c h wi ed er ei n e ga n z e Za h l . § 14 / 4 er g i b t 3 , ni c h t 3.5 3 4 52 4 ) 14 10 ) 45 27 ) 1425 12 40 135 2 5 75 54 21 48 int Di v i s i o n mi t / § We i t e r e Bei s p i el e : § 32 / 5 e r g ib t 6 § 84 / 10 e r g ib t 8 § 156 / 100 e r g ib t 1 § - 4 / 3 e r g ib t - 1 § - 101 / 9 e r g ib t - 11 § Di v i si o n dur c h 0 führ t zu ei n em Fe h l e r wä h r e n d de r Au s f ü h r u n g de s Pr o gr a m m e s 49 int Re s t mi t % § De r % Op e r a t o r lie f e r t de n R e s t de r Di v i s i o n ga n z e r Za h l e n § 14 % 4 e r g ib t 2 § 218 % 5 e r g ib t 3 3 43 4 ) 14 5 ) 218 12 20 2 18 15 3 50 int Re s t mi t % § Ei n sa t z de s % Op e r a t o r s : § Fi n d e le t z t e Zi f f e r e in e r ga n z e n Za h l : 230857 % 10 is t 7 § Fi n d e le t z t e 4 Zi f f e r n : 658236489 % 10000 is t 6489 § En t s c he i de ob Za h l ge r a d e is t : 7 % 2 e r g ib t 1 , 42 % 2 e r g ib t 0 51 Wa s is t da s Er g e b n i s vo n 1. 10 / 4 2. 45 % 6 3. - 23 / 11 4. 11 % 0 5. 2 % 2 6. 43 / 3 7. 8 % 20 52 Wa s is t da s Er g e b n i s vo n 1. 10 / 4 2 2. 45 % 6 3 3. - 23 / 11 - 2 4. 11 % 0 5. 2 % 2 0 6. 43 / 3 14 7. 8 % 20 8 53 Aus dr üc k e mi t me h r e r e n Op er a n d en § Ha t ei n Au s d r u c k meh r er e Op e r a n d e n X, Y , Z ( mi t Op e r a t o r e n ⊙ ) s o mü s s en wi r fe s t l e g e n , w a s X ⊙ Y ⊙ Z be de ut e t . § 7 + 5 + 3 § 64 / 8 / 2 54 à (7 + 5) + 3 à (64 / 8 ) / 2 und ni c h t 64 / (8 / 2) Aus dr üc k e mi t me h r e r e n Op er a n d en § Ha t ei n Au s d r u c k meh r er e Op e r a n d e n X, Y , Z ( mi t Op e r a t o r e n ⊙ ) s o mü s s en wi r fe s t l e g e n , w a s X ⊙ Y ⊙ Z be de ut e t . § 7 + 5 + 3 § 64 / 8 / 2 § Wi r d dur c h di e As s o z i a t i vi t ä t de r Op e r a t o r e n be s t i m m t 55 à (7 + 5) + 3 à (64 / 8 ) / 2 und ni c h t 64 / (8 / 2) As s o z ia t iv it ä t (« A sso c ia tiv ity » ) -- Bi n d u n g § Di e As s o z i a t i v i t ä t ei n es Op e r a t o r s ⊙ hä l t fe s t wi e ei n Op e r a n d zu ve r w e n d e n is t : X ⊙ Y ⊙ Z § Y is t mi t de m lin k e n Op e r a t o r ve r k n ü p f t : l i n k s - asso z i a ti v (« l e f t - asso c i a ti v e » ) X ⊙ Y ⊙ Z = ( X ⊙ Y ) ⊙ Z § Y is t mi t de m re c h t e n Ope r a t o r ve r k n ü p f t : re c h t s - as s o zi a t i v (« r igh t - as s o c i a t i v e » ) X ⊙ Y ⊙ Z = X ⊙ ( Y ⊙ Z ) 56 As s o z ia t iv it ä t § Li n k s - asso z i a ti v : Y is t mi t de m lin k e n Op e r a t o r ve r k n ü p f t (« l e f t - asso c i a ti v e » , « l e f t - to - ri g h t a s s o ci a t i v e ») X ⊙ Y ⊙ Z = ( X ⊙ Y ) ⊙ Z Vi e l e de r uns be k a nn t e n Ope r a t o r e n : + , * , § re c h t s - as s o zi a t i v : Y is t mi t de m re c h t e n Ope r a t o r ve r k n ü p f t (« r igh t - as s o c i a t i v e » , « r i g h t - to - le f t a s s o c ia t iv e » ) Sp ä t e r we r d e n wi r Be i s p i e l e se h e n (e s gib t ei n i g e !) § Es gi b t Op e r a t o r e n di e si n d as s o z i at i v (i n d e r Ma t h e m a t i k ) § Re c h t s — as s o z i a t i v und lin k s — as s o z i a t i v : ( X ⊙ Y ) ⊙ Z = X ⊙ ( Y ⊙ Z) 58 Abe r e s gi b t no c h me h r zu be de nk e n … § Wa s für ei n en We r t er h a l t en wi r für 2 + 6 * 5 59 Ran g Or d n u n g § Ha t ei n Au s d r u c k meh r er e Op e r a n d e n X, Y , Z ( mi t Op e r a t o r e n ⊙ und ⨂ ) s o mü s s en wi r fe s t l e g e n , w a s X ⊙ Y ⨂ Z be de ut e t . ( ⊙ und ⨂ si n d un t e r s c hi e dl i c he Op e r a t o r e n ) Op e r a n d Y ka n n zu e r s t mi t ⊙ od e r zu e r s t mi t ⨂ ve r k n ü p f t we r d e n § Di e Ra n g Ord u n g vo n ⊙ und ⨂ en t s c h ei d e t . 61 Ran g Or d n u n g (« P r e c e de nc e » ) 63 § De r O p e r a n d ( Y) i n X ⊙ Y ⨂ Z wi r d mi t de m Op e r a t o r ve r k n ü p f t , d e r d e n hö he r e n Ra ng ha t. § 1 + 3 * 4 Ran g Or d n u n g (« P r e c e de nc e » ) 64 § De r O p e r a n d ( Y) i n X ⊙ Y ⨂ Z wi r d mi t de m Op e r a t o r ve r k n ü p f t , d e r d e n hö he r e n Ra ng ha t. § 1 + 3 * 4 § 1 + 3 * 4 § 1 + 12 § 1 + 12 § 13 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 65 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 66 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / ha t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 67 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / und * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 68 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 69 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * ha t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 70 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 71 Ran g Or d n u n g 6 + 8 / 2 * 3 lin k s an f an g e n 6 is t Li t e r a l 8 is t Li t e r a l / h a t hö he r e n Ra n g al s + lin k s an f an g e n : / zu e r s t / u n d * ha be n se l b e n Ra n g 6 + 4 * 3 int Di vi s i o n er g i b t 4 * h a t hö he r e n Ra n g al s + 6 + 12 nur no c h ei n Ope r a t o r Re s u l t a t : 18 72 Op er a n d en und Op er a t o r en § Op e r a n d wi r d vo m Op e r a t o r mi t hö he r e r Ra ng Or d n u n g (« p r e c e d e n c e » , Pr ä z e de nz ) ve r w e n d e t § We n n zw e i Op e r a t o r e n di e se l b e Ra ng Or d n u n g ha be n , da nn en t s c h ei d e t di e As s o z i a t i v i t ä t § We n n zw e i Op e r a t o r e n di e se l b e Ra ng Or d n u n g und As s o z i a t i v i t ä t ha be n , da nn we r d e n di e ( T e i l ) Au s d r ü c k e vo n lin k s na c h re c h t s au sg e w e r t e t . § We n n et w a s an d e r e s ge w ü n s c h t wi r d : Kl am m e r n ve r w e n d e n ! 73 Op er a n d en und Op er a t o r en § Kl am m e r n be s t i m m e n ab w e i c h e n d e di e Gr uppi e r ung : (1 + 3) * 4 er g i b t 16 § Le e rz e i ch e n ( od e r Ko m m e n t a r e ) ha be n ke i n e n Ei n f l u ss au f di e Re i h e n f o l g e de r Au s w e r t u n g 1+3 * 4 - 2 er g i b t 11 ( tr o tz d e m ke i n e gu t e Id e e !) 74 Op er a n d en und Op er a t o r en § Bei s p i el Ra ng Or d n u n g und As s o z i a t i v i t ä t : Au s d r u c k 1 + ( Au s d r u c k 2 + Au s d r u c k 3) * Au s d r u c k 4 75 Op er a n d en und Op er a t o r en § Bei s p i el Ra ng Or d n u n g und As s o z i a t i v i t ä t : Au s d r u c k 1 + ( Au s d r u c k 2 + Au s d r u c k 3) * Au s d r u c k 4 77 1 2 3 5 4 6 7 Ran g Or d n u n g Be i s p i e l e § 1 * 2 + 3 * 5 % 4 § \\ _/ | 2 + 3 * 5 % 4 § \\ _/ | 2 + 15 % 4 § \\ ___/ | 2 + 3 § \\ ________/ | 5 n 1 + 8 % 3 * 2 - 9 n \\ _/ | 1 + 2 * 2 - 9 n \\ ___/ | 1 + 4 - 9 n \\ ______/ | 5 - 9 n \\ _________/ | - 4 78 Ran g Or d n u n g Be i s p i e l e We l c h e We r t e er g eb en di e Au s w e r t u n g di e s e r Au s d r ü c k e ? § 9 / 5 § 695 % 20 § 7 + 6 * 5 § 7 * 6 + 5 § 248 % 100 / 5 § 6 * 3 - 9 / 4 § (5 - 7) * 4 § 6 + (18 % (17 - 12)) 79 9 / 5 ==> 1 695 % 20 ==> 15 7 + 6 * 5 ==> 37 7 * 6 + 5 ==> 47 248 % 100 / 5 ==> 9 6 * 3 - 9 / 4 ==> 16 (5 - 7) * 4 ==> - 8 6 + (18 % (17 - 12)) ==> 9 80 Re e l l e Za h l e n ( Ty p double ) § Bei s p i el e : 6.022 - 42.0 2.143e17 § Hi n z u f ü g e n vo n .0 od e r . an e in e ga n z e Za h l ma c h t di e s e zu double . § Di e Op e r a t o r e n + - * / % () si n d au c h für double de fi ni e r t . § / be r e c hne t e in ge n a u e s Re s u l t a t : 15.0 / 2.0 e r g ib t 7.5 § Ra n g Or d n u n g (d e r Au s w e r t u n g ) is t di e s e lb e : () vo r * / % vo r + - 81 Be i s p i e l mi t re e l l e n Za h l e n § 2.0 * 2.4 + 2.25 * 4.0 / 2.0 § \\ ___/ | 4.8 + 2.25 * 4.0 / 2.0 § \\ ___/ | 4.8 + 9.0 / 2.0 § \\ _____/ | 4.8 + 4.5 § \\ ____________/ | 9.3 82 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 2 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 2 T y p en und Va r i a b l e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 3 Ar it hm e t is c he Op er a t o r en § Op e r a t o r : Ve r k n ü p f t We r t e od e r Au s d r ü c k e . § + Ad d i t i o n § / Di v i s i o n …. § We r t e ha be n ei n en [ fe s t g e l e g t e n ] Ty p § Ev a l u a t i o n e in e s Au s d r u c k s e r g ib t We r t e in e s Ty p s § EBN F be s c hr e i b t nur Fo r m (i n t + i n t er gi b t ? in t , int + lo n g er gi b t ? ?? ) § Op e r a t o r ⨂ : Ty p _ A ⨂ Ty p _ A er g i b t Ty p _ A ( fü r ar i t h m e t i s c h e Op e r a t o r e n ) Ty p _ A ⨂ Ty p _ B er g i b t ???? ( hä ng t vo n ⨂ , Ty p _ A , Ty p _ B ab – sp ä t e r ) 4 Op er a n d en und Op er a t o r en § Op e r a n d wi r d vo m Op e r a t o r mi t hö he r e r Ra ng Or d n u n g (« p r e c e d e n c e » , Pr ä z e de nz ) ve r w e n d e t § We n n zw e i Op e r a t o r e n di e se l b e Ra ng Or d n u n g ha be n , da nn en t s c h ei d e t di e As s o z i a t i v i t ä t § We n n zw e i Op e r a t o r e n di e se l b e Ra ng Or d n u n g und As s o z i a t i v i t ä t ha be n , da nn we r d e n di e ( T e i l ) Au s d r ü c k e vo n lin k s na c h re c h t s au sg e w e r t e t . § We n n et w a s an d e r e s ge w ü n s c h t wi r d : Kl am m e r n ve r w e n d e n ! 5 Ko m b i n a t i o n e n vo n Ty p e n § We n n int od e r long und double ko m b i n i e r t we r d e n dann is t das Er g e bni s double . § 4.2 * 3 e r g ib t 12.6 § Au c h dann we n n das R e s ul t al s int dar s t e l l bar wä r e § 4.5 * 2 e r g ib t 9.0 § Um w a n d l u n g (« c o n v er s i o n » ) v o n ei n em Ty p in ei n en ande r e n § Wi r d fü r jed en Op e r a t o r se p a r a t ge m a c h t und be e i n f l us s t nur de s s e n Op e r a n d e n § Au t o m a t i s c h (« im p liz it ») – we r d e n sp ä t e r se h e n wi e wi r U m w a n d lu n g e n e r z w in g e n kö n n e n 6 Aus dr üc k e mi t ve r s c h i e d e n e n Ty p e n § Um w an d l u n g ge s c h i e h t fü r je d e n Op e r a t o r se p a r a t … § 7 / 3 * 1.2 + 3 / 2 § \\ _/ | 2 * 1.2 + 3 / 2 § \\ ___/ | 2.4 + 3 / 2 § \\ _/ | 2.4 + 1 § \\ ________/ | 3.4 3 / 2 er g i b t 1 ni c h t 1.5 . • 2.0 + 10 / 3 * 2.5 - 6 / 4 • \\ ___/ | 2.0 + 3 * 2.5 - 6 / 4 • \\ _____/ | 2.0 + 7.5 - 6 / 4 • \\ ___________/ | 9.5 - 6 / 4 • \\ _/ | 9.5 - 1 • \\ __________/ | 8.5 7 Aus dr üc k e mi t ve r s c h i e d e n e n Ty p e n Bi t t e ev a l u i e r e n Si e di es e Aus d r üc k e § 4 + 8 / 3.0 * 6 + 5 § 9.0 / (2.0 / 3) + 7 § 7 % 3 * 2 + 4.0 * 3 / 2 § 9 / (2 / 3) + 7 § 20 % 8 + 15 / 27 / (3 % 6) 8 Aus dr üc k e mi t ve r s c h i e d e n e n Ty p e n Bi t t e ev a l u i e r e n Si e di es e Aus d r üc k e § 4 + 8 / 3.0 * 6 + 5 25.0 § 9.0 / (2.0 / 3) + 7 20.5 § 7 % 3 * 2 + 4.0 * 3 / 2 8.0 § 9 / (2 / 3) + 7 Laufzeitfehler § 20 % 8 + 15 / 27 / (3 % 6) 4 9 Di v i s i o n d u r c h 0 i s t n i c h t e r l a u b t . 2 / 3 i s t 0 , 9/ 0 re s u l t i e r t i n Lauf z e i t f e hl e r Ty p Um w an d l u n g e n § Au s s e r im p liz it e n Um w a ndl ung e n gi b t es d i e Mö g l i c h k e i t de r ex p l i z i t e n Um w a ndl ung § im p liz it ( e in Op e r a n d is t double – U m w a n d lu n g de s an d er en ): 1.0 / 4 § ex p l i z i t e ( er z w u n g en e ) U m w a n d lu n g e n he i s s e n «c a s t » od e r «t y p e c a s t » § ty p e c a s t : Um w a ndl ung vo n ei n em Ty p in d e n an d e r e n . § Um int in double um z uw a nde l n ( z. B . da m i t Di v i s i o n d a s ge w ü n s c h t e ex a k t e Er g e bni s lie f e r t ) § Um e in e n double We r t i n e in e n int We r t zu ve r w a n d e l n § Ab s c h n e i d e n (« tr u n c a ti o n » ) – ni c h t Ru n d u n g Ty p Um w an d l u n g e n § Sy n t a x : ( ty p e ) ex p r e s s i o n § Bei s p i el e : (double) 19 / 5; // 3.8 (int) ( (double) 19 / 5) ; // 3 Ty p Um w an d l u n g e n § (t y p e ) is t ei n Op e r a t o r § De r « c a s t o p e r a t o r » § Hö h e r e r Ra n g ( Pr ä z e d e n z ) al s ari t h m e t i s c h e Op e r a t o r e n § Re c h t s - as s o z i a t i v § D. h . wa n d e lt nur de n Op e r a n d e n di r e k t re c h t s da ne be n um § Fü r al l e Ba s i s t y p en ve r f ü g b a r Be me r k u n g e n übe r ex p l i z i t e Um w a n d l u n g en § Ty p Um w a ndl ung ha t ho he Pr ä z e de nz und de r C a s t O pe r a t o r be z i e h t si c h nur au f d e n ( T e i l ) Au s d r u c k di r e k t ne be n si c h . § (double) 1 + 1 / 2; // 1.0 § 1 + (double) 1 / 2; // 1.5 § Mi t Kl am m e r n ka n n ma n d i e Re i h e n f o l g e de r Au s w e r t u n g ve r ä n d e r n . § (double) (2 + 1 + 1) / 3; // 1.3333333333333333 Ran g Or d n u n g … § Di e le t z t e n Sl i d e s ha be n di e J a v a Si c h t ge z e i g t . § An d e r e Pr o gr a m m i e r s pr a c he n ha be n ( ev e n t u e l l ) an d e r e Re g e l n § N o t w e n d ig k e it vo n Ty p I n f o r m a t io n § Ra n g Or d n u n g s o llt e fe s t g e l e g t s e in § Ni c h t im m e r wa s m a n er w a r t e t § Be i s p i e l : M i c r o s o ft E x c e l 17181920212223 Op er a ti o n en fü r Ty p e n § Dr e i Mö g l i c h k e i t e n § Ba s i s t y p e n (« p r im it iv e t y p e s » ) § Be i s p i e l e : int und long § Ha b e n We r t e (4 , 1 , 0 , - 218) , Op e r a t i on e n und V a r i a bl e ge s e h e n § Be i s p i e l : double § Ha b e n We r t e (0 . 0 . - 5. 1, 4. 3) u n d Op e r a t i on e n ge s e h e n § Ty p e n au s de r J a v a Bi b l i o t h e k § Be i s p i e l : String § Ha b e n We r t e ge s e h e n ( \"hello\" , \"2 + 3\" ) – je tzt Op e r a t i o n e n § Se l b s t e n t w ic k e lt e Ty p e n ( sp ä t e r ) 24 St ri n g Op er a ti o n en § Str i n g Ve r k e t t u n g (« c on c a t e n a t i on » ): D e r O p e r a t or + er l a u b t es , zw e i ( od e r meh r ) S t r i n g s zu ve r k e t t e n ( ve r k n ü p f e n ) \"hello\" + \"world\" e r g ib t \" helloworld \" \"a\" + \"b\" + \"c\" e r g ib t \" abc \" § Au s d r ü c k e kö n n e n Op e r a n d e n ve r s c h i e d e n e r Ty p e n ko m b i n i e r e n § Au c h S t r i n g s mi t an d er en We r t e n / Va r i a b l e n / Au s d r ü c k e n 25 St ri n g Op er a ti o n en § Ja v a R e g e l : Fü r je d e n We r t gi b t es ei n e Da r s t e l l u n g al s Str i n g § Gi l t fü r al l e Ty p e n ( Ba s i s t y p e n , Bi b l i o t h e k , s e lb s t e n t w ic k e lt e Ty p e n ) § Ob d i e de f aul t Da r s t e l l u n g (D : vo re i n g e s t e l l t e od e r st a n d a r d m ä s s i g e in g e s t e llt e Da r s t e l l u n g ) s in n v o ll / ve r s t ä n d l i c h is t – e in e an d er e Fr a g e § Tr o t z d e m se h r pr a k t i s c h : Ka n n jed en We r t W mi t t e l s print(W) au s g eb en 26 Da r s t e l l u n g al s St ri n g § Fü r Ba s i s t y p en is t di e de f a ul t Da r s t e l l u n g di e er w a r t e t e Da r s t e l l u n g § Fü r int od e r long Va r i a b l e u n d Ko n s t a n t e n § int Li t e r a l ( Ko n s t a n t e ) 42 De f a u l t Da r s t e l l u n g : \" 42\" § int j = 99 De f a u l t Da r s t e l l u n g fü r j : \" 99\" § Fü r double Va r i a b l e ge n a u s o § Da s se l b e gi l t für String § \"He l l o \" De f a u l t Da r s t e l l u n g : \" H e l l o \" 27 St ri n g Op er a ti o n en § Ja v a R e g e l : Fü r je d e n We r t gi b t es ei n e Da r s t e l l u n g al s Str i n g § Gi l t fü r al l e Ty p e n ( Ba s i s t y p e n , Bi b l i o t h e k , s e lb s t e n t w ic k e lt e Ty p e n ) § Ob d i e de f aul t Da r s t e l l u n g (D : vo re i n g e s t e l l t e od e r st a n d a r d m ä s s i g e in g e s t e llt e Da r s t e l l u n g ) s in n v o ll / ve r s t ä n d l i c h is t – e in e an d er e Fr a g e § Tr o t z d e m se h r pr a k t i s c h : Ka n n jed en We r t W mi t t e l s print(W) au s g eb en § De r O p e r a t o r + mi t ei n em Str i n g u n d ei n em an d e r e n We r t al s Op e r a n d e n er g i b t ei n en lä n g e r e n Str i n g § Ve r w e n d e t di e de f a ul t Da r s t e l l u n g 28 Op er a t o r + mi t String Op er a n d § String + an d e r e r We r t al s Op e r a n d : ve r k n ü p f e String mi t de f a ul t Da r s t e l l u n g zu ne ue m String \"hello\" + 42 er g i b t \"hello42\" \"hello\" + j er g i b t \" hello99\" // j ist 99 § Nu r d e r O p e r a t or + is t er l a u b t ( ke i n * , / , od e r - ) 29 Di e ü b l i c h e n R e g e l n … § Vo n l i n k s n a c h r e c h t s r e c h n e n § 12 – 3 + 5 e r g ib t 1 4 (n ic h t 4 ) § 2 + 3 + \" Hello\" e r g ib t \"5 Hello\" § \"Hello \" + 2 + 3 e r g ib t \"Hello 23\" § Punk t v o r S t r i c h § \"Hello \" + 2 * 3 e r g ib t \"Hello 6\" 34 St ri n g Op er a ti o n en Quiz 1 + 2 + \" abc \" \" abc \" + 9 * 3 \"1\" + 1 4 - 1 + \" abc \" 35 Po l l We i t e r e St ri n g Op er a ti o n en 1 + 2 + \" abc \" e r g ib t \"3abc\" \" abc \" + 9 * 3 er g i b t \"abc27\" \"1\" + 1 er g i b t \"11\" 4 - 1 + \" abc \" er g i b t \"3abc\" 37 Po l l St ri n g Op er a ti o n en § Kö n n e n + ve r w e n d e n um ei n en Str i n g u n d d e n W e r t ei n es Au s d r u c k s au s z u g e b e n . § System.out.println ( \"Note: \" + (4.8 + 5.4) / 2); • Wa r u m br a uc he n wi r ( u n d )? 39 Ou t p u t : Note: 5.1 2. 2. 3 Va r i a b l e n 40 Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n § Zu w e i s u n g e n 41 Va r i a b l e § Va r i a b l e ( « v a r i a b l e » ) : N a m e d e r e s er l a u b t , a u f ei n en ge s p e i c h e r t e n We r t zu zu g r e i f e n 43 Va r i a b l e § Va r i a b l e ( « v a r i a b l e » ) : N a m e d e r e s er l a u b t , a u f ei n en ge s p e i c h e r t e n We r t zu zu g r e i f e n § We r t m u s s ( ir g e n d w o ) vo m Pr o gr a m m ge s p e i c h e r t we r d e n § In Sp e i c h e r z e l l e (n ) im Com p u t e r § Äh n l i c h Sc h n e l l w a h l ( Te l e f o n ) 44 Va r i a b l e § Va r i a b l e ( « v a r i a b l e » ) : N a m e d e r e s er l a u b t , a u f ei n en ge s p e i c h e r t e n We r t zu zu g r e i f e n § We r t m u s s ( ir g e n d w o ) vo m Pr o gr a m m ge s p e i c h e r t we r d e n § In Sp e i c h e r z e l l e (n ) im Com p u t e r § Äh n l i c h Sc h n e l l w a h l ( Te l e f o n ) 45 Va r i a b l e § Wi e ma n di e s e Wa h l k n ö p f e be nut z t : § Ei nr i c h t e n (in d e r F a b r ik ) § Ko n f i g u r a t i o n § Ei ns a t z § Äh n l i c h e r Ab l a u f für Va r i a b l e n in ei n em Pr o gr a m m § De k l a r a t i o n - gi b t Na m e n und Ty p an § I n it ia lis ie r u n g - s p e ic h e r t e in e n We r t i n d e r Va r i a b l e n § Ge br auc h - in e in e m Au s d r u c k od e r println An w e i s u n g 47 De k l a r a t i o n § De k l a r a t i o n ei n er Va r i a b l e n : Re s e r v i e r t Sp e i c h e r für We r t e § Va r i a b l e mü s s e n de k l a r i e r t s e in b e v o r s ie ve r w e n d e t we r d e n kö n n e n § Fü r s er s t e : i n e in e r Met h o d e § Sy n t a x : ty p e n a m e ; nam e is t ei n Be z e i c h n e r (« id e n t if ie r ») ty p e is t de r Ty p § int x; § double meineNote ; § Au c h mi t In it ia lis ie r u n g int z = 99; x meineNote 48 Ar be it e n m it e ine r V a r ia ble n § Va r i a b l e m u s s d e k l a r i e r t s e i n b e v o r s i e i m P r o g r a m m ge b r a u c h t w i r d § Al s O p e r a n d e i n e r Zu w e i s u n g ( « a s s i g n m e n t » ) int z; z = 1; § Va r i a b l e m u s s W e r t h a b e n b e v o r s i e a l s O p e r a n d a n d e r e r Op e r a t o r e n g e b r a u c h t w e r d e n k a n n § We r t k a n n v o n « D e k l a r a t i o n m i t I n i t i a l i s i e r u n g » o d e r Z u w e i s u n g ko m m e n 49 Co mp i l e r Fe h l e r Mel d u n g en § Ei n e V a r i a b l e ka n n er s t na c h ei n er Zu w e i su n g ve r w e n d e t we r d e n . § int x; System.out.println (x); // ERROR: x has no value § Ke i n e Do p p e l t d e k l a r a t i o n e n . § int x; int x; // ERROR: x already exists § int x = 3; int x = 5; // ERROR: x already exists 50 Co mp i l e r Fe h l e r Mel d u n g en § Ke i n e Do p p e l t d e k l a r a t i o n e n . § int x; long x; // ERROR: x already exists § int x = 3; double x = 3.0; // ERROR: x already exists 51 Zu w e i s u n g e n (« A ssig nm e n t» ) § Zu w e i su n g : An w e i s u n g di e W e r t i n ei n er Va r i a b l e sp e i c h e r t . § We r t ka n n e in Au s d r u c k s e in , d ie Zu w e i s u n g s p e ic h e r t da s Er g e bni s § Fü r s er s t e : Zu w e i s u n g e n in e in e r Met h o d e § Sy n t a x : na m e = ex p r e s s i o n ; § int x; x = 3; § double meineNote ; meineNote = 3.0 + 2.25; x meineNote 53 3 5.25 Ge br a uc h vo n Va r i a b l e n § Wi e d e r h o l t e Zu w e i su n g e n si n d er l a u b t : int x; x = 3; System.out.println (x + \" here\"); // 3 here x = 4 + 7; System.out.println (\"now x is \" + x); // now x is 11 x 3x 11 54 As s ignm e n t § Ja v a ve r w e n d e t = um ei n e Zu w e i su n g au s z u d r ü c k e n § «A s s i g n m e n t o p e r a t o r » na m e = ex p r e s s i o n ; EB N F De sc r i p t i o n as s i gn m en t var i abl e i de n t i f i e r ⟸ be z e i c hne r as s i gnm e n t ⟸ var i abl e i de n t i f i e r = e x p r e s s io n ; Di e EB N F Bes c h r ei b u n g für ex p r e s s i o n ha t t e n wi r sc h o n ge s e h e n . 55 De k l a r a t i o n mi t Initia lisie r ung EB N F De sc r i p t i o n va r i a b l e d e c l a r a t i on ty p e i d e n ti f i e r ⟸ be z e i c hne r var i abl e i de n t i f i e r ⟸ be z e i c hne r var i abl e l i s t ⟸ var i abl e i de n t i f i e r { , var i abl e i de n t i f i e r } var i abl e i ni t i al i z at i o n ⟸ var i abl e i de n t i f i e r = ex p r var i abl e s pe c i f i c at i o n ⟸ var i abl e i ni t i al i z at i o n | var i abl e l i s t var i abl e de c l ar at i o n ⟸ ty p e i d e n ti f i e r var i abl e s pe c i f i c at i o n ; 59 Zuw e i sung ( Pr o g r a m m ) und A l g e br a ( Ma t h e m a t i k ) § Zu w e i su n g ve r w e n d e t = , ab e r ei n e Zu w e i su n g is t ke i n e al g e b r ai sc h e Gl e i c hung ! = be de ut e t : « sp e i c h e r e de n W e r t de r R H S i n de r V ar i abl e de r L H S» Di e re c h t e Sei t e de s Au s d r u c k s wi r d zu e r s t au s g ewe r t e t , dann wi r d da s E r g e b n is in d e r V a r ia b le a u f d e r lin k e n Sei t e ge s p e i c h e r t § Wa s pa s s i e r t hi e r ? int x = 3; x = x + 2; // ??? x 3x 5 60 Wa s pa s s ie r t hie r ? Se h e n Si e si c h di e s e An w e i s u n g e n an . We l c h e n We r t h a t x am En d e ? int x; int y; x = 0; // (S1) y = 1; // (S2) x = y; // (S3) y = 2; // (S4) x ha t de n W e r t ??? 63 1 Po l l Wa s pa s s ie r t hie r ? Se h e n Si e si c h di e s e An w e i s u n g e n an . We l c h e n We r t h a t x am En d e ? int x; int y; x = 0; // (S1) y = 1; // (S2) x = y; // (S3) y = 2; // (S4) x ha t de n W e r t ??? 64 1 Po l l Na c h Va r S1 S2 S3 S4 x y Na c h Va r S1 S2 S3 S4 x 0 y ? Na c h Va r S1 S2 S3 S4 x 0 0 1 1 y ? 1 1 2 Na c h Va r S1 S2 S3 S4 x 0 0 y ? 1 Na c h Va r S1 S2 S3 S4 x 0 0 1 y ? 1 1 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 0 Ei n f a c h e Ja v a Pr o gr a m m e § 2. 1 Me t h o d e n § St r u k t u r § 2. 2 Ty p e n und V a r i a bl e § 2. 2. 1 Ei n f ühr ung § 2. 2. 2 Ba s i s t y p e n : Ei n f a c he ( e in g e b a u t e ) Ty p e n § 2. 2. 3 De k l a r a t i o n vo n Va r i a b l e n 72 Üb e r s i c h t § 2. 3 Au s s a g e n übe r Pr o gr a m m (s e g m e n t )e § Vo r w ä r t s / Rü c k w ä r t s s c h lie s s e n § 2. 3. 1 P r e - und P o s t c o ndi t i o ns § 2. 3. 2 H o a r e - Tr i p e l fü r An w e i s u n g e n § 2. 4 Ve r z w e i g u n g e n 73 2. 3 A u s s a g e n ü b e r P r og r a m m ( s e g m e n t ) e § Bei s p i el P r o g r a mm( s eg men t ) public static void main(String[] args ) { int laenge = 70; int hoehe = 40; int tiefe = 27; int flaeche = 2*( laenge * tiefe + tiefe * hoehe + laenge * hoehe ); … } § Wi r w o l l e n e i n e A u s s a g e ü b e r d i e B e r e c h n u n g m a c h e n § Mu s s V a r i a b l e flaeche in v o lv ie r e n 74 Aus s a g e n übe r P r o gr a m m ( s e gm e n t ) e § Au s s a g e ü b e r V a r i a b l e flaeche mu s s a n Or t ( S t el l e i m Pr o gr a m m ) g e k o ppe l t s e i n public static void main(String[] args ) { int laenge = 70; int hoehe = 40; int tiefe = 27; int flaeche = 2*( laenge * tiefe + tiefe * hoehe + laenge * hoehe ); … } 75 Ke i n e A u s s a g e mö g l i c h Ke i n e A u s s a g e mö g l i c h Ke i n e A u s s a g e mö g l i c h Ke i n e A u s s a g e mö g l i c h Au s s a g e mö g l i c h Zi e l : Au s s a g e n übe r ei n Pr o g r a m m ma c h e n § Zu e r s t : we l c h e Au s s a g e n ge l t e n für ei n e Me t h o d e § Er l a ub t e An w e i s u n g e n in d e r Met h o d e : § Zu w e i s u n g e n § Al s o zu e r s t Pr o gr a m m (s e g m e n t ) is t Rum p f (B od y ) ei n er Me t h o d e 76 ( Lo g isc he ) Aus s a g e n § Au s s a g e (« a s s e r t i on » ): E i n e Beh a u p t u n g di e en t w ed er wa h r od e r fa l s c h is t . § Wi r fr a g e n da nn of t « Is t di e Au s s a g e wa h r »? § Bei s p i el e : § Zü r i c h is t e in Ka n t o n d e r S c h w e i z § St o c k h o l m is t di e Ha u p t s t a d t No r w e g e n s § 11 is t e in e Pr i m z a h l § 120 is t kl ei n er al s 11 § x ≥ 0 ( hängt vo n x a b ) § x ge t e i l t dur c h 2 e r g ib t 8 ( hängt vo n x a b ) 77 ( Lo g isc he ) Aus s a g e n § Ni c h t al l e Au s s a g e n si n d wa h r § Fü r e in ig e Au s s a g e n kö n n e n wi r vi e l l e i c h t ni c h t so f o r t e n t s c h e id e n ob s ie wa h r od e r fa l s c h s in d § Wi c h t i g is t da s s es Si n n ma c h t zu fr a g e n , o b d i e Au s s a g e wa h r od e r fa l s c h is t § Lo g i s ch he i s s t hi e r : im Si n n e de r kl a s s i s c h e n Lo g i k 78 Zi e l : Au s s a g e n übe r ei n Pr o g r a m m he r l e i t e n § We l c h e Au s s a g e n ge l t e n (a n ei n er St e l l e ) im Pr o gr a m m ? § Gg f . w a s fü r An n a h m e n s in d nö t i g , da s s e in e Au s s a g e P wa h r is t § Wa s he i s s t «a n ei n er St e l l e » ? 79 Ar be it e n mi t Aus s a g e n § Wi r st e l l e n uns vo r , Po s i t i o n e n ( Punk t e ) im Co d e ha be n ei n en Na m e n § Po i n t A § Po i n t B § … § Al l e An w e i s u n g e n , d i e da v o r ( im Pr o gr a m m ) er s c h ei n en , si n d au sg e f ü h r t we n n wi r di e s e n Punk t ( wä h r e n d de r Au s f ü h r u n g ) er r ei c h en § Ke i n e An w e i s u n g da na c h wu r d e au sg e f ü h r t 81 Ho a r e Lo g ik § To n y H o a r e en t wi c k el t e in d e n ( 1 9 ) 7 0 g e r n ei n en An s a t z wi e ma n übe r Pr o gr a m m e lo g is c h e Sc h l ü sse zi e h e n ka n n . § Sc h r i t t 1: Vo r w ä r t s und rü ck w ä rt s sc h l i e sse n § Sc h r i t t 2 : V o n ei n er An w e i s u n g zu meh r er en An w e i s u n g e n und Bl ö c k en 82 W a r um § Zi e l is t es , da s s Si e für ei n ei n f a c h es Pr o gr a m m ge n a u ar g u m e n ti e r e n kö n n e n . § In d e r tä g l i c h e n Pr o gr a m m e n t w i c k l ung ge n ü g t es of t , we n i g e r de t a i l l i e r t zu ar g u m e n ti e r e n al s es di e H o a r e Lo g i k er f o r d er l i c h ma c h t . § Fü r e in f a c h e Pr o g r a m m e is t di e s e r An s a t z zu au f w än d i g . § Fü r re a l i s t i s c h e Pr o g r a m m e wi r d de r A ns a t z s c hne l l ko m p l i z i e r t . § Wi r ha be n im m e r no c h ke i n gu t e s M o d e ll fü r Ob j e k t e und Pa r a l l e l i s m u s . A l i a s i n g is t ei n e He r a u s f o r d e r u n g . § Ab e r ma n c h ma l hi l f t de r A ns a t z de nn … 83 § Ei n e gut e Sc h u l u n g , sy s t e m a t i s c h zu pr o gr a m m i e r e n § Wi r kö n n e n Au s s a g e n ma c h e n übe r Zu s t ä n d e (d e r Au s f ü h r u n g ) e in e s Pr o g r a m m s (u n d sp ä t e r au c h e in e s Ob j e k t s ) § Wi r kö n n e n de n Ef fe k t ei n es Pr o g r a m m s be sc hr e i be n § Wi r kö n n e n de f i ni e r e n wa s e s he i s s t da s s e in e Au s s a g e «w e a k e r » ( sc h w ä c h e r ) od e r «s t r o n g e r » ( st ä r k e r ) is t . § Wi c h t i g für di e D e fi ni t i o n v o n Sc h n i t ts t e l l e n ( zw i s c h e n Mo d u l e n ) we n n wi r en t s c h ei d en mü s s en we l c h e Bed i n g u n g en er f ü l l t se i n mü s s en (u m ei n e Me t h o d e au f z u r u f e n ). 84 Wa s fü r Aus s a g e n br a uc he n wir ? § Wi e fi nde n wi r Au s s a g e n für St e l l e n ( Punk t e ) im Pr o gr a m m ? § Uns in t e r e s s ie r e n ni c h t ir g e n d w e lc h e Au s s a g e n so n d e r n s o lc h e , d ie da s Ve r h a l t e n de r Au s f ü h r u n g be s c hr e i be n § Al l e Pr o gr a m m (s e g m e n t )e ar b e i t e n mi t int Va r i a b l e n und We r t e n § Wi r ne hm e n an ( od e r wi s s e n ) da s s di e e n d lic h e Da r s t e l l u n g ke i n Pr o b l e m is t § Al l e Er g e bni s s e kö n n e n ko r r e k t da r g e s t e l l t we r d e n 85 Be i s p i e l § Vo r w ä r t s sc h l i e sse n § Vo m Zu s t a n d vo r de r Au s f ü h r u n g e in e s Pr o g r a m m (s e g m e n t s ) § Ne h m e n wi r an wi r wi s s e n ( od e r ve r m u t e n ) w > 0 // w > 0 x = 17; // y = 42; // z = w + x + y; // § Jetz t wi s s e n wi r ei n i g es me h r übe r da s Pr o g r a m m , u. a . z > 59 86 Be i s p i e l § Vo r w ä r t s sc h l i e sse n § Vo m Zu s t a n d vo r de r Au s f ü h r u n g e in e s Pr o g r a m m (s e g m e n t s ) § Ne h m e n wi r an wi r wi s s e n ( od e r ve r m u t e n ) w > 0 // w > 0 x = 17; // w > 0 ∧ x ha t de n W e r t 17 y = 42; // w > 0 ∧ x ha t de n W e r t 17 ∧ y ha t de n W e r t 42 z = w + x + y; // w > 0 ∧ x ha t de n W e r t 17 ∧ y ha t de n W e r t 42 ∧ z > 59 § Jetz t wi s s e n wi r ei n i g es me h r übe r da s Pr o g r a m m , u. a . z > 59 89 W a s s e he n wir ? § Fo l g e vo n S t at e m e n t s : hi e r Zu w e i su n g e n § Vo r und na c h je d e r Zu w e i su n g ei n e Au s s a g e § Al s Ja v a Ko m m e n t a r // w > 0 x = 17; § De r Ko m m e n t a r is t lo g is c h e Au s s a g e , ke i n Ja v a Au s d r u c k od e r An w e i s u n g 91 Be i s p i e l § Rüc k w ä r ts sc h l i e sse n : § Ne h m e n wi r an wi r wo l l e n da s s z na c h Au s f ü h r u n g ne g a t i v is t // x = 17; // y = 42; // z = w + x + y ; // z < 0 § Da n n mü s s e n wi r wi s s e n ( od e r ve r m u t e n ) da s s vo r de r Au s f ü h r u n g gi l t : w < - 59 § No t w e n d i g und hi nr e i c he nd 93 Be i s p i e l § Rüc k w ä r ts sc h l i e sse n : § Ne h m e n wi r an wi r wo l l e n da s s z na c h Au s f ü h r u n g ne g a t i v is t // w + 17 + 42 < 0 x = 17; // w + x + 42 < 0 y = 42; // w + x + y < 0 z = w + x + y ; // z < 0 § Da n n mü s s e n wi r wi s s e n ( od e r ve r m u t e n ) da s s vo r de r Au s f ü h r u n g gi l t : w < - 59 § No t w e n d i g und hi nr e i c he nd 94 Ande r e r B lic k w ink e l § Wi e e r r e i c h e n w i r e i n g e w ü n s c h t e s R e s u l t a t § De n g e w ü n s c h t e n Z u s t a n d n a c h d e r A u s f ü h r u n g v o n A n w e i s u n g e n 95 Be i s p i e l § Rüc k w ä r ts sc h l i e sse n : § Ne h m e n wi r an wi r wo l l e n da s s z na c h Au s f ü h r u n g ne g a t i v is t // w + 17 + 42 < 0 x = 17; // w + x + 42 < 0 y = 42; // w + x + y < 0 z = w + x + y ; // z < 0 § Da n n mü s s e n wi r wi s s e n ( od e r ve r m u t e n ) da s s vo r de r Au s f ü h r u n g gi l t : w < - 59 § No t w e n d i g und hi nr e i c he nd 96 Vo r w ä r t s vs Rü c kw ärt s , Te i l 1 § Vo r w ä r t s sc h l i e sse n : § Be s t i m m t wa s s ic h au s de n ur s pr üng l i c he n An n a h m e n he r l e i t e n lä s s t . § Se h r pr a k t i s c h we n n e in e I n v a r ia n t e ge l t e n s o ll § Rüc k w ä r ts sc h l i e sse n : § Be s t i m m t hi nr e i c he nde Be d i n g u n g e n di e e in be s t i m m t e s Er g e bni s ga r a n t i e r e n § We n n da s E r g e b n is s er w ü n s c h t is t , da nn fo l g t au s de n Be d i n g u n g e n di e Ko r r e k t h e i t . § Is t da s E r g e b n is s une r w ünsc h t , da nn re i c h e n di e Be d i n g u n g e n um ei n en Bu g ( od e r ei n en So n d er f a l l ) zu ge n e r i e r e n 97 Vo r w ä r t s vs Rü c kw ärt s , Te i l 2 § Vo r w ä r t s sc h l i e sse n : § Si m u l i e r t di e Au s f ü h r u n g de s Pr o g r a m m s ( fü r vi e l e «I n p u t s » « gl e i c h z e i t i g ») § Of t le ic h t zu ve r s t e h e n , e r s c h e in t « na t ür l i c h » § Ab e r fü h r t da z u da s s ( vi e l e ) D e t a ils fe s t g e h a l t e n we r d e n , d ie le t z t lic h ir r e le v a n t s in d . 98 Vo r w ä r t s vs Rü c kw ärt s , Te i l 3 § Rüc k w ä r ts sc h l i e sse n : § Of t v o n gr os s e m pr a k t i s c he n Nu t z e n : Si e mü s s e n ve r s t e h e n ( od e r fe s t h a l t e n ) w a s jed e An w e i s u n g zu m Er r e i c he n e in e s be s t i m m t e n Zu s t a n d e s be i t r ä g t . § Ei n Pr o g r a m m (s e g m e n t ) « rü ck w ärt s » zu le s e n er f o r d er t Übung ab er fü h r t zu e in e r ne ue n Si c h t a u f e in Pr o g r a m m . 99 2. 3. 1 P r e - und P o s t c o ndit io ns 100 Pr e - und P o s t c o ndit io ns § Pr e c o ndi t i o n: no t w e ndi g e Vo r b e d i n g u n g e n di e er f ü l l t se i n mü s s en ( vo r Au s z u f ü h r u n g ei n er An w e i s u n g ) § Po s t c o n d i t i o n : Er g e b n i s de r Au s f ü h r u n g ( we n n Pr e c o ndi t i o n er f ü l l t ) 101 Pr e - und P o s t c o ndit io ns § Pr e - und P o s t c o ndi t i o ns für e i ne A n w e i s ung § We n n v o r d e r A u s f ü h r u n g d e r A n w e i s u n g d i e P r e c o n d i t i o n e r f ü l l t i s t , da nn g i l t na c h de r A us f ühr ung di e P o s t c o ndi t i o n, od e r § Da m i t n a c h d e r A u s f ü h r u n g d i e P o s t c o n d i t i o n g i l t , m u s s v o r d e r Au s f ü h r u n g d i e Pr e c o n d i t i o n e r f ü l l t s e i n § Pr e c o n d i t i o n , An w e i s u n g u n d P o s t c o n d i t i o n h ä n g e n z u s a m m e n ! § We r d e n w i r f ü r F o l g e n v o n A n w e i s u n g e n e r w e i t e r n 102 Te r m i n o l o g i e § Di e An n a h m e ( Au s s a g e ), d i e vo r de r Au s f ü h r u n g ei n es St a t e m e n ts g i l t, is t di e Pr e c ond i t i on . § Di e Au s s a g e , d i e na c h de r Au s f ü h r u n g gi l t ( un t e r de r An n a h m e da s s di e Pr e c o ndi t i o n gül t i g is t und da s S t a t e m e n t au sg e f ü h r t wu r d e ), is t di e Po s t c o n d i t i o n . § We n n wi r di e s e n Pu n k t e r r e ic h e n da nn gi l t d i e P os t c on d i t i on § We n n wi r di e s e n Pu n k t ni c h t e r r e ic h e n ( z. B . we g e n e in e s La uf z e i t f e hl e r s ) dann ma c h e n wi r ke i n e Au s s a g e 103 P r e /P o s t c o ndit io ns § Au s s a g e n (P r e / P os t c on d i t i on s ) si n d lo g is c h e ( bo o l ’ s c he ) Au s d r ü c k e di e si c h au f d e n Zu s t an d (d e r Au s f ü h r u n g ) ei n es Pr o gr a m m s be z i e he n . § De r Zu s t an d ei n es Pr o gr a m m s is t si c h t b ar dur c h di e Na m e n de r Va r i a b l e n (u n d je d e Va r i a b l e lie f e r t ih r e n We r t ) § Di e Va r i a b l e n n a m e n kö n n e n in ( lo g is c h e n ) Au s d r ü c k e n ve r w e n d e t we r d e n – s o la n g e di e Au s d r ü c k e ke i n e N e b e n w ir k u n g e n (« no s i de - e ff e c t s » ) ha be n § Ne b e n w i r k u n g e n wu r d e n no c h ni c h t di sk ut i e r t : d a s is t ei n e Wa r n u n g an St u d i er en d e mi t Vo r k e n n t n i s s e n 105 Di e üblic he Not a ti on § St a t t di e Pr e / P o s t c o ndi t i o ns i n Ko m m e n t a r e n ( na c h //) an z u g e b e n ve r w e n d e n vi e l e Te x t e {… } § Ke i n Ja v a me h r … § Ab e r di e s e Sc h r e i b w e i se ha t s ic h e in g e b ü r g e r t , la n g e vo r Ja v a { w < - 59 } x = 17; { w + x < - 42 } § Zw i s c h e n { und } st e h t ei n e lo g is c h e Au s s a g e § Ke i n Ja v a C o d e ( ab er wi r ve r w e n d e n Ja v a' s Op e r a t o r e n od e r di e au s de r Ma t h e ma t i k be k a nn t e n ) 106 as s e rt - St a t e m e n t i n Ja v a § Ei n e Au s s a g e (« As s e r t i on » , Beh a u p t u n g ) i n J a v a ka n n dur c h ei n asse r t - St a t e m e n t au sg e d r ü c k t we r d e n . § Sy n t a x : assert ex p r e s s i o n ; § ex p r e s s i o n is t ei n lo g is c h e r Au s d r u c k ( na c h de n J a v a Re g e l n ) § Al s o oh n e «{» u n d «}» § Be i s p i e l : assert x>0; 107 as s e rt - St a t e m e n t in J a v a § We n n zu r La u f z e i t ex p r e s s i o n ni c h t gül t i g is t , da nn wi r d ei n La u f z e i t f e h l e r ge n e r i e r t § Pr o g r a m m wi r f t AssertionError (S u b c la s s v o n Error ) § Ab e r nur we n n da s assert St a t e m e n t e in g e s c h a lt e t is t § Da { u n d } ( f a s t ) übe r a l l in Te x t e n ve r w e n d e t we r d e n ve r w e n d e n wi r di e s e Ze i c h e n § … u n d d i e H o a r e Lo g i k ka n n ni c h t nur fü r Ja v a ve r w e n d e t we r d e n 108 2. 3. 2 Ho a r e Tr i p e l ( od er 3 - Tu p e l ) 109 Ho a r e Tr i p e l ( od er 3 - Tu p e l ) § Ei n Ho a re Tr i p e l be s t e h t au s zw e i Au s s a g e n und ei n em Pr o gr a m m s e gm e n t : {P} S {Q} § P is t di e P r e c o ndi t i o n § S da s Pr o g r a m m s e g m e n t ( bz w St a t e m e n t ) § Q is t di e Po s t c o n d i t i o n 110 Ho a r e Tr i p e l ( od er 3 - Tu p e l ) § Ei n Ho a re Tr i p e l {P} S {Q} is t gü l t i g we n n (u n d nur we n n ): § Fü r jed en Zu s t a n d , fü r de n P gü l t i g is t , e r g ib t di e Au s f ü h r u n g vo n S im m e r e in e n Zu s t a n d fü r de n Q gü l t i g is t . § I n f o r m e ll : We n n P wa h r is t vo r de r Au s f ü h r u n g vo n S , da nn mu s s Q na c hhe r wa h r s e in . § An d e r n f a l l s is t da s H o a r e Tr i p e l ung ül t i g . 111 Üb e rb l i c k § We n n P wa h r is t vo r de r Au s f ü h r u n g vo n S , da nn mu s s Q na c hhe r wa h r se i n . § Bi s h e r « in f o r m e ll » § Fü r je d e s Ja v a St a t e m e n t gi b t es ge n a u e Re g e l n di e ei n e Pr e c o ndi t i o n und ei n e Po s t c o n d i t i o n i n Be z i eh u n g s et z e n § Re g e l fü r Zu w e i s u n g e n § Re g e l fü r zw e i au f ei n an d er fo l g e n d e An w e i s u n g e n § Re g e l fü r «i f » - St a t e m e n t s § [ sp ä t e r :] R e g e l fü r Sc h l e i f e n 113 2 . 3 . 2 . 1 E i n e Zu w e i s u n g 114 Zu w e i s u n g e n { P } x = e; { Q } § Bi l d en wi r Q’ in de m wi r in Q di e V a r i a bl e x dur c h e er s e t z en § Da s Tr i p e l is t gül t i g we n n : Fü r al l e Zu s t än d e de s Pr o gr a m m s is t Q’ wa h r we n n P wa h r is t § D. h . , au s P fo l gt Q’ , ge s c h r i e b e n P ⇒ Q’ 115 Re v i e w ⇒ 118 U. Ma u r e r : Di s k r e t e Ma t h e m a t i k (S c r i p t ) E T H Zü r i c h , 2 0 2 0 120 Be i s p i e l {z > 34} y = z+1; {y > 1} Q’ is t {z+1 > 1} 121 Be i s p i e l {z > 34} y = z+1; {y > 1} Q’ is t {z+1 > 1} Gi l t P ⇒ Q’ ? 122 Al s o (z>34) ⇒ (z+1) > 1 ? ✓ Be i s p i e l {z ≠ 1} y = z*z; {y ≠ z} Q’ is t {z*z ≠ z} 123 Be i s p i e l {z ≠ 1} y = z*z; {y ≠ z} Q’ is t {z*z ≠ z} Gi l t P ⇒ Q’ ? 124 Al s o (z ≠ 1) ⇒ (z*z) ≠ z ? ✘ (z ==0) Be i s p i e l e Gül t i g od e r ungül t i g ? § Wi r ne hm e n an : al l es int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w 1. {x ≠ 0} y = x*x; {y > 0} 2. {z ≠ 0} y = z*z; {y ≠ z} 3. {x >= 0} y = 2*x; {y > x} 126 Po l l Be i s p i e l e Gül t i g od e r ungül t i g ? § Wi r ne hm e n an : al l es int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w 1. {x ≠ 0} y = x*x; {y > 0} 2. {z ≠ 0} y = z*z; {y ≠ z} 3. {x >= 0} y = 2*x; {y > x} 127 gü lt ig ung ül t i g ung ül t i g Po l l 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 3 Au s s a g e n übe r Pr o gr a m m (s e g m e n t )e § Vo r w ä r t s / Rü c k w ä r t s s c h lie s s e n § 2. 3. 1 P r e - und P o s t c o ndi t i o ns § 2. 3. 2 H o a r e - Tr i p e l fü r An w e i s u n g e n § 2. 3. 2. 1 E i n e Zu w e i s u n g § 2. 3. 2. 2 Fo l ge n vo n An w e i s u n g e n § 2. 4 Ve r z w e i g u n g e n 2 Ho a r e Tr i p e l ( od er 3 - Tu p e l ) § Ei n Ho a re Tr i p e l be s t e h t au s zw e i Au s s a g e n und ei n em Pr o gr a m m s e gm e n t : {P} S {Q} § P is t di e P r e c o ndi t i o n § S da s Pr o g r a m m s e g m e n t ( bz w St a t e m e n t ) § Q is t di e Po s t c o n d i t i o n 3 Ho a r e Tr i p e l ( od er 3 - Tu p e l ) § Ei n Ho a re Tr i p e l {P} S {Q} is t gü l t i g we n n (u n d nur we n n ): § Fü r jed en Zu s t a n d , fü r de n P gü l t i g is t , e r g ib t di e Au s f ü h r u n g vo n S im m e r e in e n Zu s t a n d fü r de n Q gü l t i g is t . § I n f o r m e ll : We n n P wa h r is t vo r de r Au s f ü h r u n g vo n S , da nn mu s s Q na c hhe r wa h r s e in . § An d e r n f a l l s is t da s H o a r e Tr i p e l ung ül t i g . 4 Ei n e Zu w e i s u n g { P } x = e; { Q } § Bi l d en wi r Q’ in de m wi r in Q di e V a r i a bl e x dur c h e er s e t z en § Da s Tr i p e l is t gül t i g we n n : Fü r al l e Zu s t än d e de s Pr o gr a m m s is t Q’ wa h r we n n P wa h r is t § D. h . , au s P fo l gt Q’ , ge s c h r i e b e n P ⇒ Q’ 5 Ho a r e T r i p e l : {P} S {Q} 6 {P} S {Q} (P r o g r a m m ) Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Au s s a g e n ü b e r Pr o gr a m m a us - führ ung e n Va r i a b l e We r t Ho a r e T r i p e l : {P} S {Q} 7 {P} S {Q} (P r o g r a m m ) Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Au s s a g e n ü b e r al l e Pr o gr a m m a us - führ ung e n Va r i a b l e We r t Ho a r e T r i p e l : {P} S {Q} 8 {P} x = y + 1 {Q} x 0 y 8 x 9 y 8 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Ho a r e T r i p e l : {P} S {Q} 9 {??} x = y + 1 { x > 5 } x 0 y 8 x 9 y 8 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Ho a r e T r i p e l : {P} S {Q} 10 {y > 6} x = y + 1 { x > 5 } x 0 y 8 x 9 y 8 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Tr i p e l i s t g ü l t i g d a a u s y>6 fo l gt (y+1)>5 (d a s is t Q ' ) Ho a r e T r i p e l : {P} S {Q} 11 {P} x = 6 {Q} x 0 x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Ho a r e T r i p e l : {P} S {Q} 12 {??} x = 6 { x > 5 } x 0 x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Au s s ag e n ü b e r al l e Pr o g r a m m a u s - fü h r u n g e n Wi e d r ü c k e n w i r au s d ass Q i m m e r gi l t ? Ho a r e T r i p e l : {P} S {Q} 13 {true} x = 6 { x > 5 } x 0 x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Au s s ag e n ü b e r al l e Pr o g r a m m a u s - fü h r u n g e n Wi e d r ü c k e n w i r au s d ass Q i m m e r gi l t ? 2. 3. 2. 2 F o lg e n vo n An w e is ung e n § Wi r kö n n e n au c h Ho ar e Tr i p e l für ei n e Fo l g e vo n An w e i s u n g e n de fi ni e r e n { Precondition } Statement 1 Statement 2 { Postcondition } § Au c h hi e r is t Vo r w ä r t s - und Rüc k w ä r ts - Sc h l i e sse n mö g l i c h 14 F o lg e n vo n An w e is ung e n 15 § Ei n f a c h s t e Fo l g e : zw e i St a t e m e n ts {P} S1;S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) es ei n e Au s s a g e R gi b t so da s s 1. {P} S1 {R} is t gü l t i g , und 2. {R} S2 {Q} is t gü l t i g . Be i s p i e l § Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {z >= 1} y = z+1; w = y*y; {w > y} 16 Be i s p i e l § Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {z >= 1} y = z+1; {y > 1} w = y*y; {w > y} 19 Se i R di e Au s s a g e {y > 1} 1. Wi r ze i g e n das s {z >= 1} y=z+1; {y > 1} gü l t i g is t . Re g e l fü r Zu w e i s u n g e n : z >= 1 im p liz ie r t z+1 > 1 2. Wi r ze i g e n das s {y > 1} w=y*y; {w > y} gü l t i g is t . Re g e l fü r Zu w e i s u n g e n : y > 1 im p liz ie r t y*y > y Be i s p i e l e Gü l ti g od e r ung ül t i g ? § Wi r ne hm e n an al l e s int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w 1. {true} x = y; z = x; { y == z} 2. { x == 7 ∧ y == 5} tmp = x; x = tmp ; y = x; {y == 7 ∧ x == 5} 21 Po l l Be i s p i e l e Gü l ti g od e r ung ül t i g ? § Wi r ne hm e n an al l e s int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w 1. {true} x = y; z = x; { y == z} gü lt ig 2. { x == 7 ∧ y == 5} tmp = x; x = tmp ; y = x; {y == 7 ∧ x == 5} ung ül t i g 22 Po l l 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 4 Ve r z w e i g u n g e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 4 Ve r z w e i g u n g e n § 2. 4. 1 « i f » - An w e i s u n g e n § Ve r g l e i c h s o p e r a t o r e n § 2. 4. 2 Ty p bo o l e a n § 2. 4. 3 Be d i n g t e (« s h o r t - ci r cu i t » ) Au s w e r t u n g § 2. 4. 4 P r e - und P o s t c o ndi t i o ns § 2. 4. 5 « S c h w ä c h s t e » V o r b e d i n g u n g 25 2. 4 Ve r z w e i g u n g e n (« if » - An w e is ung e n ) § Wo l l e n n u r m a n c h e A n w e i s u n g e n ( S t a t e m e n t s ) a u s f ü h r e n § Ei n e A n w e i su n g d i e d i e A u s f ü h r u n g d e r a n d e r e n k o n t r o l l i e r t : § if - An w e i s u n g § Ve r s c h i e d e n e V a r i a n t e n § Ma n c h m a l s p r i c h t m a n a u c h v o n « b e d i n g t e r A u s f ü h r u n g » § Ei ne Be di ng ung m us s e r f ül l t s e i n da m i t e i ne A n w e i s ung a us g e f ühr t wi r d 2. 4. 1 « i f » - An w e is ung e n «i f » - An w e is ung (« if - St a t e m e n t ») § Fü h r t ei n e An w e i s u n g ( od e r An w e i s u n g e n ) nur au s we n n te s t de n W e r t wa h r (« t r u e » ) er g i b t . if ( te s t ) { st a t e m e nt ( s ) ; ... } // fo l g e n d e An w e i s u n g § Bei s p i el : double punkte = console.nextDouble (); if ( punkte >= 50.0) { System.out.println (\" Pruefung bestanden .\"); } An w e i s u n g ( en ) au s f ü h re n Is t te s t wa h r ? Fo l ge n d e An w e i s u n g au s f ü h re n jane i n «i f - el se» - An w e is ung § Fü h r t ei n e Gr u p p e v on An w e i s u n g e n aus we n n te s t de n W e r t wa h r (« t ru e» ) er g i b t , so n s t ei n e ande r e Gr u p p e if ( te s t ) { st a t e m e nt ( s ) ; } else { st a t e m e nt ( s ) ; } // fo l g e n d e An w e i s u n g § Be is p ie l : «i f » An w e i s u n g ( en ) au s f ü h re n Is t te s t wa h r ? Fo l ge n d e An w e i s u n g au s f ü h re n ja ne i n «e l s e » An w e i s u n g ( en ) au s f ü h re n double punkte = console.nextDouble (); if ( punkte >= 50.0) { System.out.println (\" Pruefung bestanden .\"); } else { System.out.println (\" Pruefung nicht bestanden .\"); } «i f - el se» - An w e is ung § Fü h r t «i f » - Blo c k G r u p p e v o n An w e i s u n g e n aus we n n te s t de n W e r t wa h r (« t ru e» ) er g i b t , so n s t «e l s e » - Blo c k G r u p p e if ( te s t ) { //if - Block st a t e m e nt ( s ) ; } else { //else - Block st a t e m e nt ( s ) ; } // fo l g e n d e An w e i s u n g § St a t t if - Bl oc k sa g e n wi r ma n c h ma l th e n - Bl oc k «i f » - Bl o c k ( « t h e n » - Bl o c k ) An w e i s u n g ( en ) Is t te s t wa h r ? Fo l ge n d e An w e i s u n g au s f ü h re n ja ne i n «e l s e » - Bl o c k An w e i s u n g ( en ) Bo o l e s c h e Aus dr üc k e § Wa s f ü r T e s t s k ö n n e n w i r i n e i n e m i f - St a t e m e n t ( o d e r i f - el s e — S ta t e m e nt ) v e r w e n d e n ? § Fa l l 1 : V a r i a b l e u n d W e r t e e i n e s B a s i s t y p s § Bi s h e r k e n n e n w i r n u r int , long und double § Wa s w i r v o r s t e l l e n g i l t f ü r a l l e B a s i s t y p e n 34 Bo o l e s c h e Aus dr üc k e § if - An w e i s u n g e n und i f - el s e - An w e i s u n g e n ve r w e n d e n be i de bo o l e s c he Au s d r ü c k e if ( i > 0 ) { ... } if ( i > 10 ) { ... } else { ... } § Of t Ve r g l e i c h e od e r Ko m b i n a t i o n e n vo n Ve r g l e i c h e n § Di e s e Au s d r ü c k e we r d e n au s g e w ert e t --- Er g e bni s en t w ed er «t r u e » od e r «f a l s e » § true und false s in d Ko n s t a n t e n ( fü r Wa h r h e i t s w e r t e ) § Au s d r ü c k e ve r w e n d e n Ve r g l e i c h s op e r a t or e n Ve r g l e i c h s o p e r a t o r e n § Vo r s i c h t : ni c h t al l e Ve r g l e i c h s o p e r a t o r e n kö n n e n für al l e Ty p e n ( si n n v o l l ) an g e w e n d e t we r d e n § Ve r g l e i c h s o p e r a t o r e n ha be n ti e f e n Ra ng § 1+1==2 s o ll (1+1)==2 er g eb en : 1+false ma c h t ke i n e n Si n n Op e r a t o r Be d e u t u n g Be i s p i e l We r t == gl e i c h 1 + 1 == 2 true != ung l e i c h 3 != 2 true < w e n ig e r al s 10 < 5 false > gr ö s s e r al s 10 > 5 true <= w e n ig e r al s od e r gl e i c h 126 <= 100 false >= gr ö s s e r al s od e r gl e i c h 5 >= 5 true Ve r g l e i c h s o p e r a t o r e n § Ve r g l e i c h s o p e r a t o r e n habe n ei n e ti e f e r e Pr ä z e d e n z al s ar i t hm e t i s c he Op e r a t o r e n . 5 * 7 >= 8 + 4 * (7 - 1) 5 * 7 >= 8 + 4 * 6 35 >= 8 + 24 35 >= 32 true § Ve r g l e i c h s o p e r a t o r e n kö n n e n ni c h t ei n e « Ke t t e » bi l de n wi e in Ma t h e m a t i k 2 <= x <= 10 true <= 10 ( An n a h m e : x is t 15 ) error! Ve r g l e i c h s o p e r a t o r e n i m i f - St a t e m e n t § De r bo o l e s c he Au s d r u c k st e h t ( im if - St a t e m e n t) i n Kl am m e r n 39 Bo o l e s c h e Aus dr üc k e § Au s s a g e n : bo o l e s c he r Au s d r u c k § Au s s a g e n kö n n e n mi t && (U N D ) od e r || (O D E R ) ko m b i n i e r t we r d e n 2 <= x && x <= 10 ( An n a h m e : x is t 15 ) True && False False § Ve r w e n d e n Si e Kl a m m e r n um Kl a r h e i t zu sc h a f f e n ( 2 <= x) && (x <= 10) Bo o l e s c h e Op er a t o r en § Au s d r ü c k e mi t Ve r g l e i c h s o p e r a t o r e n kö n n e n dur c h bo o l e s c h e Op e r a t o r e n ve r k n ü p f t we r d e n § « Wa h r h e i t s t a b e l l e » fü r di e s e Op e r a t o r e n , fü r Au s s a g e n p und q : Op e r a t o r Be d e u t u n g Be i s p i e l We r t && an d (2 == 3) && ( - 1 < 5) false || or (2 == 3) || ( - 1 < 5) true ! no t !(2 == 3) true p q p & & q p | | q true true true true true false false true false true false true false false false false p !p true false false true Bo o l e s c h e Aus dr üc k e § Wa s is t da s Er g e b n i s für di e fo l g e n d e n Au s d r ü c k e ? int x = 42; int y = 17; int z = 25; 1. y < x && y <= z 2. x % 2 == y % 2 || x % 2 == z % 2 3. x <= y + z && x >= y + z 4. !(x < y && x < z) 5. (x + y) % 2 == 0 || !((z - y) % 2 == 0) Po l l § Wa s is t da s Er g e b n i s für di e fo l g e n d e n Au s d r ü c k e ? int x = 42; int y = 17; int z = 25; 1. y < x && y <= z à true 2. x % 2 == y % 2 || x % 2 == z % 2 à false 3. x <= y + z && x >= y + z à true 4. !(x < y && x < z) à true 5. (x + y) % 2 == 0 || !((z - y) % 2 == 0) à false Bo o l e s c h e Aus dr üc k e Po l l = und == in J a v a § = is t d e r Z u w e is u n g s o p e r a t o r ( a s s ig n m e n t o p e r a t o r ) int k = 4; // k hat nach diesem Statement den Wert 4 § Er g e bni s i s t de r W e r t 4 -- ke i n W a h r h e i t s w e r t § En t s pr e c he nde F e hl e r m e l dung § Ab e r m a n c h m a l i s t d i e F e h l e r m e l d u n g v e r w i r r e n d 48 if (k = 4) { .... } HW.java:10: error: incompatible types if (k = 4) { ^ required: boolean found: int § Fe h l e r m e l d u n g e v e n t u e l l v e r w i r r e n d § Im P r o g r a m m : § if (int j = 4) { § Com p i l e r A n t w or t : HW.java:9: error: '.class' expected if (int j = 4) { ^ HW.java:9: error: illegal start of expression if (int j = 4) { ^ HW.java:9: error: ';' expected if (int j = 4) { ^ HW.java:9: error: illegal start of expression if (int j = 4) { ^ HW.java:9: error: ';' expected if (int j = 4) { ^ HW.java:13: error: class, interface, or enum expected 49 = und == in J a v a § = is t d e r Z u w e is u n g s o p e r a t o r ( « a s s ig n m e n t o p e r a t o r » ) int k = 4; // k hat nach diesem Statement den Wert 4 § Er g e bni s i s t de r W e r t 4 -- ke i n W a h r h e i t s w e r t § == is t d e r V e r g le ic h s o p e r a t o r ( a u f G le ic h h e it ) § Ka n n i n i f - St a t e m e n t v e r w e n d e t w e r d e n § if (k == 4) { 50 if (k = 4) { .... } HW.java:10: error: incompatible types if (k = 4) { ^ required: boolean found: int Be i s p i e l § We l c h e r bo o l e s c he Au s d r u c k er g i b t true we n n da s Jah r jahr ei n Sc h al tj ah r is t ? § jahr is t Sc h a l t j a h r we n n jahr dur c h 4 te i l b a r is t ( oh n e Re s t ) , jahr ab er ni c h t dur c h 100 oh n e Re s t te i l b a r is t , es se i de nn da s s jahr oh n e Re s t dur c h 400 te i l b a r se i . § int jahr ; // aktuelles Jahr § jahr % 4 == 0 && jahr % 100 != 0 || jahr % 400 == 0 § Be s s e r mi t Kl a m m e r n : (( jahr % 4 == 0) && ( jahr % 100 != 0)) || ( jahr % 400 == 0) 51 Be i s p i e l § We l c h e r bo o l e s c he Au s d r u c k er g i b t true we n n ei n Jah r jahr ei n Sc h al tj ah r is t ? § jahr is t Sc h a l t j a h r we n n jahr dur c h 4 te i l b a r is t ( oh n e Re s t ) , jahr ab er ni c h t dur c h 100 oh n e Re s t te i l b a r is t , es se i de nn da s s jahr oh n e Re s t dur c h 400 te i l b a r se i . § int jahr ; // aktuelles Jahr § jahr % 4 == 0 && jahr % 100 != 0 || jahr % 400 == 0 § Be s s e r mi t Kl a m m e r n : (( jahr % 4 == 0) && ( jahr % 100 != 0)) || ( jahr % 400 == 0) 52 Be i s p i e l § We l c h e r bo o l e s c he Au s d r u c k er g i b t true we n n ei n Jah r jahr ei n Sc h al tj ah r is t ? § jahr is t Sc h a l t j a h r we n n jahr dur c h 4 te i l b a r is t ( oh n e Re s t ) , jahr ab er ni c h t dur c h 100 oh n e Re s t te i l b a r is t , es se i de nn da s s jahr oh n e Re s t dur c h 400 te i l b a r se i . § int jahr ; // aktuelles Jahr § jahr % 4 == 0 && jahr % 100 != 0 || jahr % 400 == 0 § Be s s e r mi t Kl a m m e r n : (( jahr % 4 == 0) && ( jahr % 100 != 0)) || ( jahr % 400 == 0) 53 Ge br a uc h vo n if Wa s fä l l t Ih n e n in di e s e m Co d e Bei s p i el au f ? Scanner console = new Scanner( System.in ); System.out.print (\" Wieviele Punkte haben Sie erreicht ? \"); int percent = console.nextInt (); if (percent >= 90) { System.out.println (\" Ihre Note ist 6.0.\"); } if (percent >= 80) { System.out.println (\" Ihre Note ist 5.0.\"); } if (percent >= 70) { System.out.println (\" Ihre Note ist 4.0.\"); } if (percent >= 60) { System.out.println (\" Ihre Note ist 3.5.\"); } if (percent < 60) { System.out.println (\" Ihre Note ist 3.0.\"); } ... Ve r s c h a c h t e l t e if - el se - An w e is ung e n Au s w a h l be s t i m m t dur c h meh r er e Te s t s if ( te s t 1 ) { st a t e m e n t ( s ) ; } else if ( te s t 2 ) { st a t e m e n t ( s ) ; } else { st a t e m e n t ( s ) ; } // folgende Anweisung Gr u p p e 1 An w e i - su n g e n au s f ü h re n Er g i b t te s t1 wa h r ? ja ne i n Gr u p p e 2 An w e i - su n g e n au s f ü h re n Er g i b t te s t2 wa h r ? Fo l ge n d e An w e i s u n g au s f ü h re n jane i n Gr u p p e 3 An w e i - su n g e n au s f ü h re n Ve r s c h a c h t e l t e if - el se - An w e is ung e n Bei s p i el : if (x > 0) { System.out.println (\" Positiv \"); } else if (x < 0) { System.out.println (\" Negativ \"); } else { System.out.println (\"Null\"); } Gr u p p e 1 An w e i - su n g e n au s f ü h re n Er g i b t te s t1 wa h r ? ja ne i n Gr u p p e 2 An w e i - su n g e n au s f ü h re n Er g i b t te s t2 wa h r ? Fo l ge n d e An w e i s u n g au s f ü h re n jane i n Gr u p p e 3 An w e i - su n g e n au s f ü h re n Ve r s c h a c h t e l t e if - el se - if § Ende t mi t else : ge n a u e in Pf a d mu s s au s g e f ü h rt we r d e n § Ende t mi t if : Ev e n t u e l l wi r d ke i n e An w e i s u n g au s g e f ü h rt . if ( te s t 1 ) { st a t e m e nt ( s ) ; //Gruppe 1 } else if ( te s t 2 ) { st a t e m e nt ( s ) ; //Gruppe 2 } else if ( te s t 3 ) { st a t e m e nt ( s ) ; //Gruppe 3 } Gr u p p e 1 An w e i - su n g e n au s f ü h re n Er g i b t te s t1 wa h r ? ja ne i n Gr u p p e 2 An w e i - su n g e n au s f ü h re n Er g i b t te s t2 wa h r ? jane i n Gr u p p e 3 An w e i - su n g e n au s f ü h re n Er g i b t te s t3 wa h r ? jane i n Ve r s c h a c h t e l t e if - el se - if if (place == 1) { System.out.println (\"Gold!!\"); } else if (place == 2) { System.out.println (\"Silber!\"); } else if (place == 3) { System.out.println (\"Bronze.\"); } Gr u p p e 1 An w e i - su n g e n au s f ü h re n Er g i b t te s t wa h r ? ja ne i n Gr u p p e 2 An w e i - su n g e n au s f ü h re n Er g i b t te s t wa h r ? ja Gr u p p e 3 An w e i - su n g e n au s f ü h re n Er g i b t te s t wa h r ? jane i n Ve r s c h a c h t e l t e if - Ko n s t r u k t e • Gen a u ei n 1 Pf a d mi t An w e i s u n g ( en ) ( ge ge ns e i t i ge r Au s s c h l u s s ) if ( te s t ) { st a t e m e n t ( s ) ; } else if ( te s t ) { st a t e m e n t ( s ) ; } else { st a t e m e n t ( s ) ; } • 0 od e r 1 Pf a d mi t An w e i s u n g ( en ) ( ge ge ns e i t i ge r Au s s c h l u s s ) if ( te s t ) { st a t e m e n t ( s ) ; } else if ( te s t ) { st a t e m e n t ( s ) ; } else if ( te s t ) { st a t e m e n t ( s ) ; } • 0, 1, od e r vi e l e Pf a d e mi t An w e i s u n g ( en ) ( unabhängi g , ke i n ge ge ns e i t i ge r Au s s c h l u s s ) if ( te s t ) { st a t e m e n t ( s ) ; } if ( te s t ) { st a t e m e n t ( s ) ; } if ( te s t ) { st a t e m e n t ( s ) ; } ve r s c h a c h t e l t e if / e ls e ve r s c h a c h t e l t e if / e ls e / if au f e i n an d e r f o l g e n d e if / if / if We l c h e if / e ls e - Ko m b i n a t i o n ? (1 ) ve r s c h a c h t e l t e if / e ls e ( 2 ) ve r s c h a c h t e l t e if / e ls e / if ( 3 ) Fo l g e vo n if / if / if § Ob – ab h än g i g vo n frü h e r e n Re n n e n – je m an d in d e r er s t en , zw e i t e n , od e r le tz t e n Gr u p p e st a r t e t . § (1 ) ve r s c h a c h t e l t e if / else if / else § Ob e s ei ne Me d a i l l e ( No t e n d u r s c h n i t t ≥ 5. 9) od e r ei ne Urk u n d e (5. 75 – 5. 9) gi b t . § (2 ) ve r s c h a c h t e l t e if / else if § Ob ei ne Za h l dur c h 2, 3, und/ od e r 5 te i l b a r is t . § (3 ) Fo l g e vo n if / if / if § No t e ( a u f 0 . 2 5 ge r u n d e t ) au f g r u n d der Pu n k t e ( Pr o z e n t ) i n der Pr ü f u n g . § (1 ) ve r s c h a c h t e l t e if / else if / else if / else if / else Po l l 2. 4. 2 Ty p boolean § Bo o l es c h e We r t e kö n n e n in Va r i a b l e n de s Ty p s boolean ge s p e i c h e r t we r d e n . § De r Ty p boolean ke n n t nur zw e i We r t e : wa h r ( true ) u n d fa l s c h ( false ). § Ei n Ve r g l e i c h (« te s t » ) is t e in bo o l e s c he r Au s d r u c k ( e in Au s d r u c k de r e in boolean Er g e bni s ha t ) . § Bo o l e s c h e Au s d r ü c k e kö n n e n mi t de n bo o l e s c he n Op e r a t o r e n ko m b i n i e r t we r d e n . § boolean quadrant1; od e r boolean quadrant1 = true; de k l a r i e r e n bo o l e s c he Va r i a b l e . Ge br a uc h vo n boolean § Ka n n Er g e bni s ei n es ko m p l i z i e r t e n Au s d r u c k s sp e i c h e rn und sp ä t e r wi e d e r v e r w e n d e n § Vo r a u s g e s e t z t di e Ko m p o n e n t e n än d e r n si c h ni c h t … § Ma c h t Pr o g r a m m le s b a r e r Be i s p i e l – we r k a n n A n t r a g s t e l l e n ? 69 Be i s p i e l ( K e i n e R e c h t s a u s k u n f t ) int jahreCH_CB; int jahrCH_F; int jahreCHletzte5; int jahreKvor18; int jahreCH = (jahreCH_F/2 +jahreCH_CB); boolean bundJ10 = jahreCH >= 10; boolean bund1 = bundJ10 && (jahreCHletzte5 >= 3); boolean bund2 = (jahreCH>=6) && (jahreKvor18 + jahreGvor18)*2 >= 10; boolean antragErlaubt = bund1 || bund2; 70 int jahreKnach18; int jahreGvor18; int jahreGnach18; Hi n w ei se § Ma n c h m a l si e h t ma n so l ch e n Co d e ( t e s t ob ei n e Va r i a b l e d e n W e r t true ha t ) : boolean isPrime = … ; if ( isPrime == true ) { // schlecht ... } § Das is t ni c h t nö t i g und r e dunda n t . Be s s e r : if ( isPrime ) { // gut ... } Hi n w ei se § Au c h ni c h t be s s e r is t de r T e s t für false : if ( isPrime == false ) { // schlecht if ( ! isPrime ) { // gut 2. 4. 3 Be d i n g t e Aus w e r t ung § Fü r && und || mü s s en ni c h t im m e r be i de Op e r a n d e n au sg e w e r t e t we r d e n , u m d a s Er g e b n i s zu er mi t t el n § Ja v a been de t di e Au s w e r t u n g ei n es bo o l e s c he n Au s d r u c k s so b al d da s Er g e b n i s fe s t st e h t . § Di e s ne nne n wi r ei n e «s h o rt - ci r cu i t » Au s w e r t u n g od e r bedi n gt e Aus w e r t ung § Fo l ge n d e Te i l a u s d r ü c k e we r d e n ab h än g i g vo n zu e r s t au s g e w ert e t en Au s d r ü c k e n ( ni c h t ) e v a lu ie r t § Re g e l d e r Pr o g r a m m i e r s p r a c h e Be d i n g t e (« sho r t - ci r cu i t » ) Aus w e r t ung § Fü r && und || mü s s en ni c h t im m e r be i de Op e r a n d e n au sg e w e r t e t we r d e n , u m d a s Er g e b n i s zu er mi t t el n § Ja v a been de t di e Au s w e r t u n g ei n es bo o l e s c he n Au s d r u c k s so b al d da s Er g e b n i s fe s t st e h t . § && st o p p t s o b a ld e in Te i l ( au s d ru c k ) false is t § || st o p p t s o b a ld e in Te i l ( au s d ru c k ) true is t Bo o l e s c h e Op er a t o r en § Au s d r ü c k e mi t Ve r g l e i c h s o p e r a t o r e n kö n n e n dur c h bo o l e s c h e Op e r a t o r e n ve r k n ü p f t we r d e n § && und || s in d lin k s - as s o z i a t i v § Au s d r ü c k e we r d e n vo n l i n k s na c h re c h t s , ge m ä s s Pr ä z e d e n z und As s o z i a t i v i t ä t au s g e w ert e t § Kl a m m e r n sc h a f f e n Kl a r h e i t Aus w e r t ung ei n es Te s t s § Ge g e be n Pr o gr a m m (s e g m e n t ) mi t dr e i int Va r i a b l e n a , b und x § Wi r wo l l e n x zu m Qu o t i e n t e n a/b s et z e n , ab e r nur we n n a/b gr ö s s e r al s 0 is t int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben x = ... Aus w e r t ung ei n es Te s t s § Ge g e be n Pr o gr a m m (s e g m e n t ) mi t dr e i int Va r i a b l e n a , b und x § Wi r wo l l e n x zu m Qu o t i e n t e n a/b s et z e n , ab e r nur we n n a/b gr ö s s e r al s 0 is t int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // duerfen nicht durch 0 dividieren x = ... Aus w e r t ung ei n es Te s t s § Ge g e be n Pr o gr a m m (s e g m e n t ) mi t dr e i int Va r i a b l e n a , b und x § Wi r wo l l e n x zu m Qu o t i e n t e n a/b s et z e n , ab e r nur we n n a/b gr ö s s e r al s 0 is t int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben if (b != 0) { x = ... Aus w e r t ung ei n es Te s t s § Wo l l e n Qu o t i e n t e n a/b nur sp e i c h e r n we n n gr ö s s e r al s 0 int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben if (b != 0) { if (a/b > 0) { x = a/b; } } Aus w e r t ung ei n es Te s t s § Vi e l e if - St a t e m e n ts ma c h en Pr o gr a m m unl e s e r l i c h int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben if (b != 0) { if (a/b > 0) { x = a/b; } } Bo o l s c h e Aus dr üc k e sc h a ff en Kla r he it … § Vi e l e if - St a t e m e n ts ma c h en Pr o gr a m m unl e s e r l i c h int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // (a/b) > 0 // b != 0 { x = a/b; } } Bo o l s c h e Aus dr üc k e sc h a ff en Kla r he it … § Um s e t z ung in bo o l s c he n Au s d r u c k ei n f a c h – in d e r Lo g i k int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // (a/b) > 0 // b != 0 { x = a/b; } } Bo o l s c h e Aus dr üc k e sc h a ff en Kla r he it … § Di e se r C o d e fü h r t zu ei n er Fe h l e r m e l d u n g we n n b = = 0 : int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // (a/b) > 0 if ( (a/b > 0) && (b != 0) ) { x = a/b; } } Re i h e n fo l g e de r Op er a n d en is t wic h tig § Di e se r C o d e fü h r t zu ei n er Fe h l e r m e l d u n g we n n b = = 0 : int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // (a/b) > 0 if ( (a/b > 0) && (b != 0) ) { x = a/b; } } Be d i n g t e (« sho r t - ci r cu i t » ) Aus w e r t ung § Di e se r C o d e führ t zu ke i n e r Fe h l e r m e l d u n g we n n b = = 0 : int a; int b; int x; // a, b werden irgendwie gesetzt // nur positive Werte sollten gespeichert werden // integer division kann 0 fuer a,b !=0 ergeben // (a/b) > 0 if ( (b != 0) && (a/b > 0) ) { x = a/b; } De M o r g a n ' s Re g e l n Re g e l n für di e N e g a t i o n bo o l e s c he r Au s d r ü c k e . § Pr a k t i s c h we n n ma n d a s Ge g e n t e i l e in e s Au s d r u c k s br a uc h t . § Be i s p i e l : Ur s p r ü n g l i c h e r Au s d r u c k Ne g i e r t e r Au s d r u c k Al t e r n a t i v e a && b !a || !b !(a && b) a || b !a && !b !(a || b) Or i g i n a l Ne g i e r t if (x == 7 && y > 3) { ... } if (x != 7 || y <= 3) { ... } 2. 4. 4 Pr e / P o s t c o n d i ti o n s für if - An w e i s u n g e n 88 If - St a t e m e n t M u s t e r // ursprüngliche Annahmen if ( te s t ) { // wissen das te s t true war then - Block ( auch if - Block genannt ) } else { // wissen das te s t false war else - Block } // können then - Block oder else - Block ausgeführt haben 89 If - St a t e m e n t M u s t e r // ursprüngliche Annahmen if ( te s t ) { // wissen das te s t true war then - Block } else { // wissen das te s t false war else - Block } // können then - Block oder else - Block ausgeführt haben 90 Gr undide e ( n ) 1. Di e P r e c o n d i t i o n für de n t he n - Bl o c k u n d d en el s e - Bl o c k s ( ei n es if - St a t e m e n ts) be i nha l t e t da s Er g e b n i s de s T e s t s . 2. Di e P o s t c o n d i t i o n na c h de m i f - St a t e m e n t is t di e Di sj u n k t i o n (« od e r ») d e r P o s t c o n d i t i o n s d e s t h e n - und e l s e - Bl o c k es . 92 If - St a t e m e n t M u s t e r // ursprüngliche Annahmen if ( te s t ) { // wissen das te s t true war then - Block // Q1 } else { // wissen das te s t false war else - Block // Q2 } // Q1 ∨ Q2 ( können then - Block oder else - Block ausgeführt haben ) 93 If - St a t e m e n t s 94 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. a) Au s Q1 fo l g t Q b) Au s Q2 fo l g t Q If - St a t e m e n t s 96 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. ( au s Q1 fo l g t Q ) und ( a us Q2 fo l g t Q ) If - St a t e m e n t s 97 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. ( Q1 ⇒ Q ) ∧ ( Q2 ⇒ Q ) If - St a t e m e n t s 99 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. ( Q1 ∨ Q2 ) ⇒ Q If - St a t e m e n t s 100 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. a) Au s Q1 fo l g t Q b) Au s Q2 fo l g t Q Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = x; } else { y = 20; } {y > 5} § Se i Q1 {y > 7} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y == 20} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) 101 Ho a r e T r i p e l : {P} S {Q} 103 x ... y ... x ... y ... Zu s t a n d (v o r S) Zu s t a n d (n a c h S) {true} if (x > 7) { y = x; } else { y = 20; } {y > 5} Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = x; } else { y = 20; } {y > 5} § Se i Q1 {y > 7} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y == 20} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {true ∧ x > 7} y = x; {y > 7} § Mi t de r R e g e l fü r Zu w e i s u n g e n {true ∧ x <= 7} y = 20; {y == 20} 104 Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = x; } else { y = 20; } {y > 5} § Se i Q1 {y > 7} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y == 20} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {true ∧ x > 7} y = x; {y > 7} § Mi t de r R e g e l fü r Zu w e i s u n g e n {true ∧ x <= 7} y = 20; {y == 20} § Dann ze i g e das s ( y>7) ∨ (y==20) ⇒ y>5 105 gü l t i g Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = 4 ; } else { y = 20; } {y > 5} § Se i Q1 {y > 3 } ( an d e r e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y == 20} ( an d e r e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {true ∧ x > 7} y = 4; {y > 3} § Mi t de r R e g e l fü r Zu w e i s u n g e n {true ∧ x <= 7} y = 20; {y == 20} § Dann ze i g e das s a) Au s Q1 fo l g t Q b) Au s Q2 fo l g t Q 106 Ho a r e T r i p e l : {P} S {Q} 107 x 0 y ... x 0 y 20 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) {true} if (x > 7) { y = 4 ; } else { y = 20; } {y > 5} Ho a r e T r i p e l : {P} S {Q} 108 x 8 y 22 x 8 y 4 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) {true} if (x > 7) { y = 4 ; } else { y = 20; } {y > 5} Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = 4 ; } else { y = 20; } {y > 5} § Se i Q1 {y > 3 } ( an d e r e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y == 20} ( an d e r e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {true ∧ x > 7} y = 4; {y > 3} § Mi t de r R e g e l fü r Zu w e i s u n g e n {true ∧ x <= 7} y = 20; {y == 20} § Dann ze i g e das s a) y>3 ⇒ y>5 b) y==20 ⇒ y>5 109 ni c h t g ül t i g Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {true} if (x > 7) { y = 4 ; } else { y = 20; } {y > 5} § Se i Q1 {y > 3 } § Se i Q2 {y == 20} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {true ∧ x > 7} y = 4; {y > 3} § Mi t de r R e g e l fü r Zu w e i s u n g e n {true ∧ x <= 7} y = 20; {y == 20} § Dann ze i g e das s y>3 ∨ y==20 ⇒ y>5 111 Vo r s i c h t § Zu r P ar t y d ar f w e r m i n d e s - t e n s 1 8 o d e r E T H S t u d e n t / in is t § In f o r m e ll : (age>=18) ∨ ( ETHstudent ) § « Da r f zu r Pa r t y » § Ho ar e L o g i k § y>3 ∨ y==20 ⇒ y>5 § We n n g ü l t i g : E s k a n n n i c h t s e i n das s y>3 ∨ y==20 wa h r abe r y>5 fa l s c h is t § Ni c h t : We n n y>3 ∨ y==20 wa h r is t dann is t y>5 wa h r 112 Noc h ei n Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {x > 0} if (a < 10) { y = 2*x; } else { y = a*x; } {y > 0} 114 Be i s p i e l Al l e Va r i a b l e si n d int , ke i n Ov e r f l ow / U n d e r f l ow {x > 0} if (a < 10) {y = 2*x;} else {y = a*x;} {y > 0} § Se i Q1 {y ≥ 2} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Se i Q2 {y ≥ 10} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Mi t de r R e g e l fü r Zu w e i s u n g e n kö n n e n wi r ze i g e n {x>0 ∧ a<10} y = 2*x; {y ≥ 2} § Mi t de r R e g e l fü r Zu w e i s u n g e n {x>0 ∧ a≥10} y = a*x; {y ≥ 10} § Dann ze i g e das s y≥2 ∨ y ≥ 10 ⇒ y> 0 115 Be i s p i e l e Gü l ti g od e r ung ül t i g ? § Wi r ne hm e n an al l e s int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w (A ) (B ) {true} if (x > 7) { y = 4; } else { y = 3; } {y < 5} 117 {x > 10} if (x%4 == 0) { y = x/4; } {y ≥ 2} Po l l Be i s p i e l e Gü l ti g od e r ung ül t i g ? § Wi r ne hm e n an al l e s int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w (A ) (B ) {true} if (x > 7) { y = 4; } else { y = 3; } {y < 5} 118 {x > 10} if (x%4 == 0) { y = x/4; } else { ; } {y ≥ 2} Po l l Be i s p i e l e Gü l ti g od e r ung ül t i g ? § Wi r ne hm e n an al l e s int Va r i a b l e n , oh n e Ov e r f l o w / U n d e r f l o w {true} if (x > 7) { y = 4; } else { y = 3; } {y < 5} gü lt ig 120 {x > 10} if (x%4 == 0) { y = x/4; } {y ≥ 2} ung ül t i g Po l l 121 {x > 10} if (x%4 == 0) { y = x/4; } else { ; } {y ≥ 2} § Se i Q1 {y ≥ 2} ( an d er e Au s s a g e n ge h e n ev t l . au c h ) § Fü r S2 kö n n e n wi r ke i n e ge n a u e re n Au s s a g e n übe r de n Zu s t a n d vo n y ma c h e n Po l l § Da {x > 10} is t x mi n d e s t e n s 12 und so m i t y ≥ 2 § Ab e r wi r wi s s e n ni c h t we l c h e n We r t y vo r h e r ha t t e und s o ka n n ma n ni c h t ze i g e n das s y≥2 § Hä t t e n wi r al s Pr e c on d i ti on {x > 10 ∧ y > 10} ge h a b t ( z.B . ) s o kö n n t e Q2 {y > 10} se i n u n d das Tr i p e l wä r e gü l t i g . 2. 4. 5 Sc h w äc h s t e Vo r b e d i n g u n g 124 Wa s fü r ei n e Vo r b e d i n g u n g wo l l e n wir ? x , y int ; ke i n Ov e r / U n d e r f l o w {x>10} y = x+1; {y ≥ 2} {x>5} y = x+1; {y ≥ 2} {x≥1} y = x+1; {y ≥ 2} 125 Aus s a g e n übe r Zu s t ä n d e Wi r ha be n zw e i Au s s a g e n P1 und P2 We n n P1 ⇒ P2 ( a l s o P1 im p liz ie r t P2 ) gi l t da nn sag e n wi r : § P1 is t st ä r k e r (« st r o n g e r ») al s P2 § P2 is t sc h w ä c h e r (« we a k e r ») al s P1 § We n n im m e r P1 gi l t , da nn gi l t au c h P2 § Es is t al so sc h w i e r i g e r ( od e r zu m i n d e s t ge n a u s o sc h w i e r i g ) P1 zu er f ü l l en al s ( wi e ) P 2 zu er f ü l l en § « st ä r k e r al s »: « st ä r k e r al s od e r ge n a u s o st a r k wi e » 127 W a r um is t da s in t e r e s s a n t ? § St e l l e n wi r uns vo r : § Es g i l t {P} S {Q} , u n d § P is t sc h w ä c h e r al s e in e Au s s a g e P1 , u n d § Q is t st ä r k e r al s e in e Au s s a g e Q1 § Da n n g i l t : § {P1} S {Q} § {P} S {Q1} § {P1} S {Q1} 128 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 4 Ve r z w e i g u n g e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Üb e r s i c h t § 2. 4 Ve r z w e i g u n g e n § 2. 4. 1 « i f » - An w e i s u n g e n § Ve r g l e i c h s o p e r a t o r e n § 2. 4. 2 Ty p bo o l e a n § 2. 4. 3 Be d i n g t e (« s h o r t - ci r cu i t » ) Au s w e r t u n g § 2. 4. 4 P r e - und P o s t c o ndi t i o ns § 2. 4. 5 « S c h w ä c h s t e » V o r b e d i n g u n g 3 2. 4. 5 Sc h w äc h s t e Vo r b e d i n g u n g 4 Aus s a g e n übe r Zu s t ä n d e Wi r ha be n zw e i Au s s a g e n P1 und P2 We n n P1 ⇒ P2 ( a l s o P1 im p liz ie r t P2 ) gi l t da nn sag e n wi r : § P1 is t st ä r k e r (« st r o n g e r ») al s P2 § P2 is t sc h w ä c h e r (« we a k e r ») al s P1 § We n n im m e r P1 gi l t , da nn gi l t au c h P2 § Es is t al so sc h w i e r i g e r ( od e r zu m i n d e s t ge n a u s o sc h w i e r i g ) P1 zu er f ü l l en al s ( wi e ) P 2 zu er f ü l l en § « st ä r k e r al s »: « st ä r k e r al s od e r ge n a u s o st a r k wi e » 5 W a r um is t da s in t e r e s s a n t ? § St e l l e n wi r uns vo r : § Es g i l t {P} S {Q} , u n d § P is t sc h w ä c h e r al s e in e Au s s a g e P1 , u n d § Q is t st ä r k e r al s e in e Au s s a g e Q1 § Da n n g i l t : § {P1} S {Q} § {P} S {Q1} § {P1} S {Q1} 6 § St är k e r e Pr e c o ndi t i o ns ( Vo r b e d i n g u n g e n ) od e r sc h w äc h e r e Po s t c o n d i t i o n s si n d ei n f a c h § We n n {P} S {Q} gi l t § Ab e r w a s für ei n P wo l l e n wi r we n n S und Q ge ge b e n si n d ? {???} S {Q} § Am be s t e n wä r e es we n n wi r ze i g e n kö n n t e n da s s { P s } S {Q} gi l t , wo b e i P s di e sc h w ä c h s t e Pr e c ond i t i on vo n Q für S is t § Sc h w ä c h s t e he i s s t : h a t d i e we n i g s t e n An n a h m e n so da s s Q gi l t § Jed e Pr e c o n d i t i o n P so da s s {P}S{Q} gü l t i g is t , is t da nn st ä r k e r al s P s , d. h. , P => P s 7 § Oh n e Sc h l e i f e n und Me t h o d e n gi b t es für je d e s Pr o gr a m m s e gm e n t S und je d e Po s t c o n d i t i o n Q ei n e ei n d eu t i g e sc h w ä c h s t e Pr e c ond i t i on (« we a k e s t pr ec o n di t i o n ») , ab g e k ü r z t wp ( S , Q ) § Va r i a b l e si n d im m e r int Va r i a b l e , oh n e Ov e r / U n d e r f l o w 8 wp( S , Q ) § wp ( x = e , Q ) is t Q in de m je d e s x dur c h e er s e t z t wu r d e § Bes p i el : wp ( x = y*y , x>4 ) is t ( y*y>4 ) , d. h. , |y| > 2 9 wp( S1;S2 , Q ) § wp ( S1 ; S2 , Q ) is t wp ( S1 ,w p( S2 , Q )) § D. h . S e i R di e w p( S2 , Q ) da nn is t di e sc h w ä c h s t e Pr e c o n d i t i o n fü r di e Fo l g e S1 ; S2 di e w p( S1 , R ). § Bei s p i el : wp ( y=x+3 ; z=y+1 , z>4 ) is t ( x+3>3) , d. h. , (x>0) wa r u m ? R s e i d ie wp ( z=y+1 , z>4 ) R is t ( y+1>4 ) d. h. (y>3) da nn is t wp ( y=x+3, y>3 ) do c h ( x+3>3) , d. h. , (x>0) 11 Be i s p i e l § We n n S di e Fo l g e y = x+1; z = y – 3; vo n An w e i s u n g e n is t , u n d Q is t z == 10 , da nn is t wp ( S , Q ) … = wp ( y = x+1; z = y – 3 , z == 10 ) = wp ( y = x+1 , wp ( z = y – 3 , z == 10 )) = wp ( y = x+1 , y – 3 == 10 ) = (x+1) – 3 == 10 = x == 12 13 Be i s p i e l ( oh n e Ve r e i n f a c h u n g ) § We n n S di e Fo l g e y = x+1; z = y – 3; vo n An w e i s u n g e n is t , und Q is t z == 10 , d an n wp ( S , Q ) … = wp ( y = x+1; z = y – 3 , z == 10 ) = wp ( y = x+1 , wp ( z = y – 3 , z == 10 )) = w p ( y = x+1 , y – 3 == 10 ) = wp ( y = x+1 , y == 13 ) = x+1 == 13 = x == 12 14 Ho a r e T r i p e l : {P} S {Q} 24 x 6 y 22 x 6 y 20 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) {??} if (x > 7) { y = x+1; } else { y = 20; } {y > 5} Ho a r e T r i p e l : {P} S {Q} 25 x 8 y 22 x 6 y 9 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) {??} if (x > 7) { y = x+1; } else { y = 20; } {y > 5} wp( if … , Q ) § wp ( if b S1 else S2 , Q ) m u s s ga r a n t i e r e n 1. { wp ( if..) ∧ b} S1 {Q1} is t gü l t i g und 2. { wp ( if..) ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. a) Au s Q1 fo l g t Q b) Au s Q2 fo l g t Q § ( b ∧ wp ( S1, Q1 )) ga r a n t i e r t ( fü r gü l t i g e s Tr i p e l { P } if.. { Q } ) da s s { b ∧ wp ( S1,Q1 ) } S1 { Q1 } gül t i g is t § Ge na us o br a uc he n wi r ( !b ∧ wp ( S2, Q2 )) für Gül t i gk e i t vo n { !b ∧ wp ( S2,Q2 )} S2 { Q2 } 26 If - St a t e m e n t s 27 {P} if (b) S1 else S2 {Q} § Tr i p e l is t gül t i g we n n (u n d nur we n n ) e s Au s s a g e n Q1, Q2 gi b t so da s s 1. {P ∧ b} S1 {Q1} is t gü l t i g und 2. {P ∧ ! b} S2 {Q2} is t gü l t i g und 3. Na c h de m if - St a t e m e n t g i l t Q , d. h. a) Au s Q1 fo l g t Q b) Au s Q2 fo l g t Q wp( if … , Q ) § wp ( if b S1 else S2 , Q ) – mö g l i c h wä r e (b ∧ wp ( S1 , Q1 ) ) ∨ (!b ∧ wp ( S2 , Q2 ) ) § Ab e r wi r wo l l e n di e sc h w äc h s t e Vo r b e d i n g u n g § Da Q1 ⇒ Q is t wp ( S1, Q1 ) st ä r k e r al s wp ( S1, Q ) u n d wg . Q2 ⇒ Q is t wp ( S2, Q2 ) st ä r k e r al s wp ( S2, Q ) § « st ä r k e r al s » lä s s t au c h « ge n a u s o st a r k wi e » zu 28 wp( if … , Q ) § Da Q1 ⇒ Q is t wp ( S1, Q1 ) st ä r k e r al s wp ( S1, Q ) u n d wg . Q2 ⇒ Q is t wp ( S2, Q2 ) st ä r k e r al s wp ( S2, Q ) § wp ( if b S1 else S2 , Q ) is t : (b ∧ wp ( S1 , Q ) ) ∨ (!b ∧ wp ( S2 , Q ) ) § Bemer k u n g en § Eg a l we l c h e n Zu s t a n d di e Au s f ü h r u n g e r r e ic h t ha t , b is t en t w ed er wa h r ( true ) od e r fa l s c h ( false ) § Of t ka n n di e s e r Au s d r u c k da nn we i t e r ve r e i n f a c h t we r d e n 29 wp( if … , Q ) § wp ( if b S1 else S2 , Q ) is t : (b && wp ( S1 , Q ) ) || (!b && wp ( S2 , Q ) ) § Bemer k u n g en § Eg a l we l c h e n Zu s t a n d di e Au s f ü h r u n g e r r e ic h t ha t , b is t en t w ed er wa h r ( true ) od e r fa l s c h ( false ) § Of t ka n n di e s e r Au s d r u c k da nn we i t e r ve r e i n f a c h t we r d e n 30 Be i s p i e l 31 S is t if (x < 5) { y = x*x; } else { y = x+1; } Q is t y >= 9 Be i s p i e l 32 - 4 - 3 - 2 - 1 0 721 4 653 8 9 S is t if (x < 5) { y = x*x; } else { y = x+1; } Q is t y >= 9 wp ( S , y >= 9 ) = ( x < 5 ∧ wp ( y = x*x , y >= 9 )) ∨ ( x >= 5 ∧ wp ( y = x+1 , y >= 9 )) = ( x < 5 ∧ x*x >= 9 ) ∨ ( x >= 5 ∧ x+1 >= 9 ) = ( x <= - 3 ) ∨ ( x >= 3 ∧ x < 5 ) ∨ ( x >= 8 ) wp(S , Q ) = true § We n n wp ( S , Q ) = true da nn he i s s t da s , da s s di e Au s f ü h r u n g vo n S im m e r ei n en Zu s t an d pr o duz i e r t in de m Q gi l t . § true gi l t fü r jed en Zu s t a n d § Ke i n e An n a h m e n 38 Ho a r e T r i p e l : {P} S {Q} 39 {??} x = 6 {x > 5} x ... x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Sc h w ä c h s t e Vo r b e d i n g u n g wp ( x=6 , x>5 ) wp ( x = e , Q ) is t Q in de m je d e s x dur c h e er s e t z t wu r d e Ho a r e T r i p e l : {P} S {Q} 40 {??} x = 6 {x > 5} x ... x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Sc h w ä c h s t e Vo r b e d i n g u n g wp ( x=6 , x>5 ) wp ( x = e , Q ) is t Q in de m je d e s x dur c h e er s e t z t wu r d e wp ( . . ) : 6 > 5 Ho a r e T r i p e l : {P} S {Q} 41 {true} x = 6 {x > 5} x ... x 6 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Sc h w ä c h s t e Vo r b e d i n g u n g wp ( x=6 , x>5 ) wp ( x = e , Q ) is t Q in de m je d e s x dur c h e er s e t z t wu r d e wp ( . . ) : 6 > 5 Ho a r e T r i p e l : {P} S {Q} 42 {false} x = 4 {x > 5} x ... x 4 Zu s t a n d (v o r S) Zu s t a n d (n a c h S) Sc h w ä c h s t e Vo r b e d i n g u n g Une r fül l ba r Zu r Er i n n e r u n g : We n n P wa h r is t vo r de r Au s f ü h r u n g vo n S , da nn mu s s Q na c hhe r wa h r se i n . Di e sc h w ä c h s t e Vo r b e d i n g u n g § St e l l e n wi r uns vo r : § Wi r ha be n S ( Pr o g r a m m od e r St a t e m e n t ) u n d Au s s a g e Q , d ie na c h Au s f ü h r u n g vo n S ge l t e n s o ll . § Je t z t su c h e n wi r P so da s s {P}S{Q} gü l t i g is t § Ne h m e n wi r es gi b t ve r s c h i e d e n e Au s s a g e n P i so da s s P 1 ⇒ P 2 ⇒ P 3 ⇒ P 4 ⇒ … § P i is t sc h w ä c h e r al s Au s s a g e P i - 1 § Ne h m e n wi r we i t e r an da s s {P 1 }S{Q},{P 2 }S{Q},…, {P 4 }S{Q} gi l t , ab e r ni c h t {P 5 }S{Q} § P 5 re i c h t ni c h t au s , u m zu ze i g e n , da s s Q na c h S wa h r is t 44 Be i s p i e l P 1 : a= = 4 P 2 : a> 3 P 3 : a> = 3 P 4 : a> = 2 P 5 : a> = − 1 {P i } S: x = 5+a; Q: { x > = 5 } 45 Be i s p i e l P 1 : a= = 4 P 2 : a> 3 P 3 : a> = 3 P 4 : a> = 2 P 5 : a> = − 1 {P i } S: x = 5+a; Q: { x > = 5 } 47 {P 1 } S {Q } a= = 4 x = 5+a; x > = 5 gi l t {P 2 } S {Q } a> 3 x = 5+a; x > = 5 gi l t Be i s p i e l P 1 : a= = 4 P 2 : a> 3 P 3 : a> = 3 P 4 : a> = 2 P 5 : a> = − 1 {P i } S: x = 5+a; Q: { x > = 5 } 48 {P 4 } S {Q } a> = 2 x = 5+a; x > = 5 gi l t {P 5 } S {Q } a> = − 1 x = 5+a; x > = 5 gi l t ni c h t Di e sc h w ä c h s t e Vo r b e d i n g u n g § St e l l e n wi r uns vo r : § Wi r ha be n S (P r o g r a m od e r St a t e m e n t ) u n d Au s s a g e Q , d ie na c h Au s f ü h r u n g vo n S ge l t e n s o ll . § Je t z t su c h e n wi r P so da s s {P}S{Q} gü l t i g is t § Ne h m e n wi r es gi b t ve r s c h i e d e n e Au s s a g e n P i so da s s P 1 ⇒ P 2 ⇒ P 3 ⇒ P 4 ⇒ … § P i is t sc h w ä c h e r al s Au s s a g e P i - 1 § Vi e l l e i c h t is t es ei n f a c h er zu ze i g e n , da s s {P 1 }S{Q} gi l t al s {P 2 }S{Q} § De n n P 1 ⇒ P 2 us w . 49 Di e sc h w ä c h s t e Vo r b e d i n g u n g § Vi e l l e i c h t is t es ei n f a c h er zu ze i g e n , da s s {P 1 }S{Q} gi l t al s {P 2 }S{Q} § De n n P 1 ⇒ P 2 us w . § Ab e r wi r mü s s en vi e l l e i c h t ir g e n d w a n n ze i g e n , da s s P 1 gi l t , na c hde m M au sg e f ü h r t wu r d e § Da h e r s in d wi r an d er sc h w ä c h s t e n Au s s a g e P\" in t e r e s s ie r t , d ie ge r a d e no c h au s r ei c h t so d a s { P\" }S{Q} gü l t i g is t § Al s o P\" is t di e Au s s a g e P an d er wi r in t e r e s s ie r t s in d . 50 {R} M {P ?? } S {Q} Als o … § We n n wi r rü ck w ä rt s sc h l i e sse n und wi r wo l l e n da s {P}S{Q} gül t i g is t , da nn wi r ze i g e n wi r da s s {P\"}S{Q} gi l t , wo b e i P\" di e sc h w ä c h s t e Pr e c ond i t i on vo n Q für S is t . § Sc h w ä c h s t e he i s s t : h a t d i e we n i g s t e n An n a h m e n / Ei ns c hr ä nk ung e n so da s s Q gi l t § Jed e Pr e c o n d i t i o n P so da s s {P}S{Q} gü l t i g is t , is t da nn st ä r k e r al s P\" , d. h. , P ⇒ P\" 52 Ei n e k le ine Ko m p l i k a t i o n § We n n wi r vo r wä r t s sc h l i e sse n , da nn gi b t es ei n Pr o bl e m mi t Zu w e i su n g e n : § Än d e r u n g e n de s We r t e s e in e r Va r i a b l e n kö n n e n an d er e An n a h m e n / Au s s a g e n be e i n f l us s e n . 70 Be i s p i e l {true} w= x+y ; {w == x + y} x=4; {w == x + y ∧ x == 4} y=3; {w == x + y ∧ x == 4 ∧ y == 3} 71 Be i s p i e l {true} w= x+y ; //S1 { w == x + y;} x=4; //S2 {w == x + y ∧ x == 4} y=3; //S4 {w == x + y ∧ x == 4 ∧ y == 3} 72 x= = 3 u n d y = = 4 Da n n hä t t e n wi r w == 7 Be i s p i e l mi t P r o ble m {true} w= x+y ; { w == x + y;} x=4; {w == x + y ∧ x == 4} y=3; {w == x + y ∧ x == 4 ∧ y == 3} 73 Ab e r h a l t : wi s s en wi r wi r k l i c h w == 7 ? Ei n e k le ine Ko m p l i k a t i o n § We n n wi r vo r wä r t s sc h l i e sse n , da nn gi b t es ei n Pr o bl e m mi t Zu w e i su n g e n :§ Än d e r u n g e n de s We r t e s e in e r Va r i a b l e n kö n n e n an d er e An n a h m e n / Au s s a g e n be e i n f l us s e n . § Lö s u n g : We n n wi r ei n er Va r i a b l e n ei n en We r t zu w e i s e n da nn mü s s en wi r in d e r Po s t c o n d i t i o n de n Na m e n di e s e r Va r i a b l e n dur c h ei n en an d e r e n ( ne ue n ) Na m e n er s e t z en § Da n n kö n n e n wi r uns au f d en « al t en » W e r t be zi e he n 75 Be i s p i e l ( be r ic h t ig t ) {true} w= x+y ; { w == x + y;} x=4; { w == x 1 + y ∧ x == 4} y=3; { w == x 1 + y 1 ∧ x == 4 ∧ y == 3} 76 Be i s p i e l ( al t e rn a t i v ) {true} w= x+y ; { w == x + y;} x=4; { w == x old + y ∧ x == 4} y=3; { w == x old + y old ∧ x == 4 ∧ y == 3} 77 P r a k t is c he s Be i s p i e l § Au s t a u s c h (« s w a p » ) tmp = x; x = y; y = tmp ; § An s a t z : § Ge b e n Si e de m ur s pr üng l i c he n I n h a lt (W e r t ) e in e r Va r i a b l e e in e n Na m e n so da s s Si e ih n in d e r Po s t c o n d i t i o n ve r w e n d e n kö n n e n . § Di e s e Na m e n ex i s t i e r e n nur fü r di e lo g is c h e n Au s d r ü c k e ; es gi b t ni c h t en t s p r ec h en d e Va r i a b l e n im Pr o g r a m m . § Di e s e zu s ä t z l i c h e n Na m e n ve r h i n d e r n da s s wi r Ab h ä n g i g k e i t e n « ve rg e s s e n » 78 {x == x_old ∧ y == y_old } tmp = x; {x == x_old ∧ y == y_old ∧ tmp == x_old } x = y; {x == y ∧ y == y_old ∧ tmp == x_old } y = tmp ; {x == y_old ∧ y == tmp ∧ tmp == x_old } 79 {x == x_old ∧ y == y_old } tmp = x; {x == x_old ∧ y == y_old ∧ tmp == x_old } x = y; {x == y ∧ y == y_old ∧ tmp == x_old } y = tmp ; {x == y_old ∧ y == tmp ∧ tmp == x_old } {x == y_old ∧ y == x_old } 81 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 5 Sch l e i f e n (« Lo o p s ») Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 90 Üb e r s i c h t § 2. 5 Sc h l e i f e n (L oop s ) § 2. 5. 1 « f o r » L o o p s § 2. 5. 2 Ve r s c h a c h t e l t e Sc h l e i f e n § 2. 5. 3 « w h i l e » L o o p s § 2. 6 Me t h o d e n § 2. 7 S t r i n g s § 2. 8 Noc h m a l s Sc h l e i f e n 91 2. 5 Sc h l e i f e n (« Lo o p s» ) 93 2. 5. 1 Ei n f a c h e Sc h l e i f e n : «f o r » - lo o p § Sc h l e i f e n er l a u b en wi ed er h o l t e Au s f ü h r u n g ei n er ( od e r meh r er er ) An w e i s u n g ( en ). § Sc h l e i f e n (« l oop s » ) ko m m e n in ve r s c h i e d e n e n Va r i a n t e n § Zu e r s t : « fo r » - lo o p 94 fo r - lo o p s er l a u b en ei n f a c h e Wi e d e r h o l u n g e n § Bi s h er wa r e n Wi e d e r h o l u n g e n ma n c h ma l nö t i g : System.out.println (\"Ich werde die Uebungsaufgaben machen \"); System.out.println (\"Ich werde die Uebungsaufgaben machen \"); System.out.println (\"Ich werde die Uebungsaufgaben machen \"); System.out.println (\"Ich werde die Uebungsaufgaben machen \"); System.out.println (\"Ich werde die Uebungsaufgaben machen \"); 95 for lo o p s er l a u b en W ie de r ho lung e n § … ab e r si e si n d hä s s l i c h und ma c h en Pr o gr a m m lä n g e r § Si e ma c h en da s Pr o gr a m m unübe r s i c h t l i c h § Ja v as « f o r » - lo o p An w e i s u n g wi ed er h o l t An w e i s u n g e n for (int i = 1; i <= 5; i = i + 1) { // repeat 5 times System.out.println (\"Ich werde die Uebungsaufgaben machen \"); } 96 fo r - lo o p S y n t a x for ( in it ia liz a t io n ; te s t ; upda t e ) { st a t e m e nt ; st a t e m e nt ; ... st a t e m e nt ; } // naechste Anweisung ( n.A. ) § In i t i a l i s i e r u n g (« I n i t i a l i z a t i o n » ) wi r d e in m a l au s g e f ü h rt . § Wi e d e r h o l e di e s e Sc h r i t t e : § Pr üf e ob te s t wa h r ( true ) er g i b t . We n n ni c h t , s t o p u n d w e it e r mi t n. A . § Fü h r e di e An w e i s u n g ( en ) ( St a t e m e n t (s )) au s . § Fü h r e di e Ak t u a l i s i e r u n g (« Up d a t e » ) au s . b od y ( Ru m p f ) h e a d e r ( K op f ) 97 Initia lisie r ung for ( int i = 1; i <= 5; i = i + 1) { System.out.println (\"Ich werde die Uebungsaufgaben machen \"); } § Le g t di e V a r i a bl e f e s t , di e im Lo o p ve r w e n d e t wi r d § Wi r d ei n m al am An f a n g de r Sc h l e i f e au sg e f ü h r t § Di e s e Va r i a b l e he i s s t Sc h l e i f e n z ä h l e r (« lo o p c o u n t e r » ) § Ka n n je d e n Na m e n ha be n , ni c h t nur i § Ka n n mi t je d e m We r t an f an g e n , ni c h t nur 1 99 Te s t for ( int i = 1; i <= 5; i = i + 1) { System.out.println (\"Ich werde die Uebungsaufgaben machen \"); } § Ve r g l e i c h t di e Zä h le r v a r ia b le mi t ei n em Gr e nz w e r t § Ve r w e n d e t Ve r g l e i c h s o p e r a t o r e n (« c om p a r i s on op e r a t or s » ) § Di e s e lb e n wi e fü r if - St a t e m e n t s < we n i g e r al s (« l e s s t h a n » ) <= we n i g e r al s od e r gl e i c h (« l e s s t h a n o r e q u a l t o » ) > gr ö s s e r al s (« gr e a t e r t h a n » ) >= gr ö s s e r al s od e r gl e i c h (« g r e a t e r t h a n o r e q u a l t o » ) 100 Ak t ua lis ie r ung for ( int i = 1; i <= 5; i = i + 1) { System.out.println (\"Ich werde die Uebungsaufgaben machen \"); } § Di e Zä h le r v a r ia b le mu s s si c h än d e r n § So n s t fi n d e t di e Sc h l e i f e ke i n Ende § te s t e r g ib t im m e r true § Ei n be l i e bi g e r Au s d r u c k zu l ä s s i g § Com p i l e r pr üf t ni c h t da s s di e Zä h l e r v a r i a b l e ve r w e n d e t wi r d 102 W ie de r ho lung e n fü r ei n In t e r v a l [ 1 ..6 ] System.out.println(\"1 hoch 2 = \" + 1 * 1); System.out.println(\"2 hoch 2 = \" + 2 * 2); System.out.println(\"3 hoch 2 = \" + 3 * 3); System.out.println(\"4 hoch 2 = \" + 4 * 4); System.out.println(\"5 hoch 2 = \" + 5 * 5); System.out.println(\"6 hoch 2 = \" + 6 * 6); § In t u i t i o n : « Ic h w i l l ei n e Ze i l e fü r je d e Za h l vo n 1 b i s 6 au s g eb en » § Ei n f o r - Lo o p erl ed i g t ge n a u di e s e n Jo b ! for ( int i = 1; i <= 6; i = i+1) { System.out.println ( i + \" hoch 2 = \" + ( i * i ) ); } § \" Fü r je d e ga n z e Za h l i vo n 1 bi s 6, dr uc k e ...\" 104 Meh r er e An w e is ung e n im Ru m p f System.out.println (\"+ ---- +\"); for ( int i = 1; i <= 3; i = i+1) { System.out.println (\" \\ \\ /\"); System.out.println (\"/ \\ \\ \"); } System.out.println (\"+ ---- +\"); 108 Meh r er e An w e is ung e n im Ru m p f System.out.println (\"+ ---- +\"); for ( int i = 1; i <= 3; i = i+1) { System.out.println (\" \\ \\ /\"); System.out.println (\"/ \\ \\ \"); } System.out.println (\"+ ---- +\"); § Ou t p u t : + ---- + \\ / / \\ \\ / / \\ \\ / / \\ + ---- + 109 Sc h l e i f e n k o n t r o l l e int highTemp = 5; for ( int i = - 3; i <= highTemp / 2; i = i + 1) { System.out.println ( i + \" C = \" + ( i * 1.8 + 32) + \" F\"); } Ou t p u t : - 3 C = 26.6 F - 2 C = 28.4 F - 1 C = 30.2 F 0 C = 32.0 F 1 C = 33.8 F 2 C = 35.6 F 111 Ho c h z ä h l en , he r un t e r z ä hle n § Di e Ak t u a l i s i e r u n g (« u p d a t e » ) ka n n au c h de n Sc h l e i f e n z äh l e r he r un t e r z uz ä hl e n Ab e r d e r Ve r g l e i c h in te s t mu s s da nn > an s t a t t vo n < ve r w e n d e n System.out.print(\"T - minus \"); for ( int i = 10; i >= 1; i = i - 1) { System.out.print ( i + \" \"); } System.out.println(\"blastoff !\"); System.out.println(\"The end.\"); Ou t p u t : T - minus 10 9 8 7 6 5 4 3 2 1 blastoff! The end. 113 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 5 Sch l e i f e n (« Lo o p s ») Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 2 Üb e r s i c h t § 2. 5 Sc h l e i f e n (L oop s ) § 2. 5. 1 « f o r » L o o p s § 2. 5. 2 Ve r s c h a c h t e l t e Sc h l e i f e n § 2. 5. 3 « w h i l e » L o o p s § 2. 6 Me t h o d e n § 2. 7 S t r i n g s § 2. 8 Noc h m a l s Sc h l e i f e n 3 fo r - lo o p S y n t a x for ( in it ia liz a t io n ; te s t ; upda t e ) { st a t e m e nt ; st a t e m e nt ; ... st a t e m e nt ; } // naechste Anweisung ( n.A. ) § In i t i a l i s i e r u n g (« I n i t i a l i z a t i o n » ) wi r d e in m a l au s g e f ü h rt . § Wi e d e r h o l e di e s e Sc h r i t t e : § Pr üf e ob te s t wa h r ( true ) er g i b t . We n n ni c h t , s t o p u n d w e it e r mi t n. A . § Fü h r e di e An w e i s u n g ( en ) ( St a t e m e n t (s )) au s . § Fü h r e di e Ak t u a l i s i e r u n g (« Up d a t e » ) au s . b od y ( Ru m p f ) h e a d e r ( K op f ) 4 Sc h l e i f e n k o n t r o l l e int highTemp = 5; for ( int i = - 3; i <= highTemp / 2; i = i + 1) { System.out.println ( i + \" C = \" + ( i * 1.8 + 32) + \" F\"); } Ou t p u t : - 3 C = 26.6 F - 2 C = 28.4 F - 1 C = 30.2 F 0 C = 32.0 F 1 C = 33.8 F 2 C = 35.6 F 5 Ho c h z ä h l en , he r un t e r z ä hle n § Di e Ak t u a l i s i e r u n g (« u p d a t e » ) ka n n au c h de n Sc h l e i f e n z äh l e r he r un t e r z uz ä hl e n Ab e r d e r Ve r g l e i c h in te s t mu s s da nn > an s t a t t vo n < ve r w e n d e n System.out.print(\"T - minus \"); for ( int i = 10; i >= 1; i = i - 1) { System.out.print ( i + \" \"); } System.out.println(\"blastoff !\"); System.out.println(\"The end.\"); Ou t p u t : T - minus 10 9 8 7 6 5 4 3 2 1 blastoff! The end. 7 2. 5. 2 Ve r s c h a c h t e l t e fo r - Sc h l e i f e n 9 fo r - Sc h l e i f e for ( in it ia liz a t io n ; te s t ; upda t e ) { st a t e m e nt ; st a t e m e nt ; ... st a t e m e nt ; } st a t e m e n t ( An w e i s u n g im Ru m p f de r Sc h l e i f e ) ka n n be l i e bi g e Ja v a An w e i s u n g s e in Au c h wi e d e r e in e Sc h l e i f e …. b od y ( Ru m p f ) h e a d e r ( K op f ) 1013 Ve r s c h a c h t e l t e Sc h l e i f e n Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 1; i <= 5; i = i+1) { for ( int j = 1; j <= i ; j = j+1) { System.out.print (\"*\"); } System.out.println (); } § Out put : * ** *** **** ***** 15 Ve r s c h a c h t e l t e Sc h l e i f e n Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 1; i <= 5; i = i+1) { for ( int j = 1; j <= i ; j = j+1) { System.out.print ( i ); } System.out.println (); } § Out put : 1 22 333 4444 55555 18 Mög l i c h e Fe h l e r § Di e Sc h l e i f e te r m i n i e r t ni c h t § Lä uf t und lä u f t und lä u f t § Endl o s s c hl e i f e (« in f in it e lo o p » ) 19 Mög l i c h e Fe h l e r § Di e Sc h l e i f e te r m i n i e r t ni c h t § Lä uf t und lä u f t und lä u f t § Endl o s s c hl e i f e (« in f in it e lo o p » ) § Bei s p i el e : for (int i = 1; i <= 5; i = i+1) { for (int j = 1; i <= 10 ; j = j+1) { System.out.print (\"*\"); } System.out.println (); } 21 Mög l i c h e Fe h l e r § Di e Sc h l e i f e te r m i n i e r t ni c h t § Lä uf t und lä u f t und lä u f t § Endl o s s c hl e i f e (« in f in it e lo o p » ) § Bei s p i el e : for ( int i = 1; i <= 5; i = i+1) { for (int j = 1; j <= 10; i = i+1 ) { System.out.print (\"*\"); } System.out.println (); } 22 Wa s tu n ? § Ec l i p s e ka n n so lc h e P r o g r am m e st o p p e n . § Klic k e n au f «T e r m i n a t e » 23 Meh r Be i s p i e l e § We l c h e ve r s c h a c h t e l t e n fo r - Sc h l e i f e n er z eu g en di e s e n Ou t p u t ? ....1 ...2 ..3 .4 5 24 Meh r Be i s p i e l e § We l c h e ve r s c h a c h t e l t e n fo r - Sc h l e i f e n er z eu g en di e s e n Ou t p u t ? ....1 ...2 ..3 .4 5 § Wi r mü s s en ei n e Au s g a b e z e i l e ko n s t r u i e r e n : § mi t e in e r äu s s er en Sc h l e i f e fü r jed e Z e ile § mi t in n e r e r (n ) Sc h l e i f e (n ) fü r da s M us t e r jed er Z e ile äu s s e r e Sc h l e i f e (5 - ma l d a es 5 Ze i l e n gi b t ) in n er e Sc h l e i f e ( fü r je d e Ze i l e ) 25 Äus s e r e und inne r e Sc h l e i f e § Le g e n Si e er s t di e äu s s e r e Sc hl e i f e fe s t , zä h l t vo n 1 bi s zu r An z a h l de r Ze i l e n for ( int line = 1; line <= 5; line = line+1) { ... } § An a l y s i e r e n Si e je d e Ze i l e . En t d e c k e n Si e da s M us t e r : ei n pa a r Pu n k t e (0 Pu n k t e in d e r le t z t e n Ze i l e ) ge f o l g t vo n Za h l ....1 ...2 ..3 .4 5 26 Äus s e r e und inne r e Sc h l e i f e § Le g e n Si e er s t di e äu s s e r e Sc hl e i f e fe s t , zä h l t vo n 1 bi s zu r An z a h l de r Ze i l e n for ( int line = 1; line <= 5; line = line+1) { ... } § An a l y s i e r e n Si e je d e Ze i l e . En t d e c k e n Si e da s M us t e r : ei n pa a r Pu n k t e (0 Pu n k t e in d e r le t z t e n Ze i l e ) ge f o l g t vo n Za h l ....1 ...2 ..3 .4 5 Be o b a c h t u n g : D i e An z a h l de r Pu n k t e hä ng t vo n d e r Z e ile n n u m m e r ab . 27 Za h l e n f o l g e n à Sc h l e i f e n for ( int count = 1; count <= 5; count = count+1) { System.out.print ( ... ); } We l c h e An w e i s u n g im Ru m p f wü r d e di e s e n Ou t p u t er g eb en : 4 7 10 13 16 for ( int count = 1; count <= 5; count = count+1) { System.out.print ( 3 * count + 1 + \" \"); } 28 Za h l e n f o l g e n à Sc h l e i f e n mi t Ta b e l l e n § We l c h e An w e i s u n g im Ru m p f wü r d e di e s e n Ou t p u t er g eb en : 2 7 12 17 22 § Zu m Fi n d e n de s M us t e r s er s t el l en Si e ei n e Ta b e l l e mi t count und de n Za h l e n . § We n n si c h count um 1 er h ö h t , so l l t e di e Za h l um 5 he r a uf g e he n . § Ab e r count * 5 is t zu gr o s s ( u m 3) , a l s o su b t r a h i e r e n wi r 3. count Za h l in Fo l g e 5 * count 1 2 5 2 7 10 3 12 15 4 17 20 5 22 25 5 * count - 3 2 7 12 17 22 29 count Za h l in Fo l g e 1 2 2 7 3 12 4 17 5 22 We i t e r e s Ta b e l l e n Be i s p i e l § We l c h e An w e i s u n g im Ru m p f wü r d e di e s e n Ou t p u t er g eb en : 17 13 9 5 1 § Ko n s t r u i e r e n wi r di e Ta b e l l e . § We n n si c h count um 1 er h ö h t , so l l t e di e Za h l ... § Ab e r d i e s e s Pr o d u k t is t zu ... count Za h l in Fo l g e 1 17 2 13 3 9 4 5 5 1 - 4 * count - 4 * count + 21 - 4 17 - 8 13 - 12 9 - 16 5 - 20 1 - 4 * count - 4 - 8 - 12 - 16 - 20 30 Zu r ü c k z um Be i s p i e l mi t for Sc h l e i f e § Ko n s t r u i e r e n wi r ei n e Ta b e l l e ....1 ...2 ..3 .4 5 § Um ei n en Bu c h s t a b e n me h r f a c h zu dr uc k e n ve r w e n d e n wi r ei n e fo r - Sc h l e i f e . for ( int j = 1; j <= 4; j = j+1) { System.out.print (\".\"); // 4 Punkte } line # Pu n k t e 1 4 2 3 3 2 4 1 5 0 - 1 * line - 1 - 2 - 3 - 4 - 5 - 1 * line + 5 4 3 2 1 0 31 Lö sung mi t fo r - Sc h l e i f e § An t w or t : for ( int line = 1; line <= 5; line = line+1) { for ( int j = 1; j <= ( - 1 * line + 5); j = j+1) { System.out.print (\".\"); } System.out.println (line); } § Out put : ....1 ...2 ..3 .4 5 32 Ve r s c h a c h t e l t e fo r - Sc h l e i f e n § Wa s is t de r O ut put di e s e r ve r s c h a c h t e l t e n Sc h l e i f e n ? for ( int line = 1; line <= 5; line = line+1) { for ( int j = 1; j <= ( - 1 * line + 5); j = j+1) { System.out.print (\".\"); } for ( int k = 1; k <= line; k = k+1) { System.out.print (line); } System.out.println (); } 33 Ve r s c h a c h t e l t e fo r - Sc h l e i f e n § Wa s is t de r O ut put di e s e r ve r s c h a c h t e l t e n Sc h l e i f e n ? for ( int line = 1; line <= 5; line = line+1) { for ( int j = 1; j <= ( - 1 * line + 5); j = j+1) { System.out.print (\".\"); } for ( int k = 1; k <= line; k = k+1) { System.out.print (line); } System.out.println (); } § An s w e r : ....1 ...22 ..333 .4444 55555 34 Ve r s c h a c h t e l t e fo r - Sc h l e i f e n Üb u n g § Ve r ä n d e r n Si e da s le t z t e Pr o gr a m m so da s s di e s e r Ou t p u t er z eu g t wi r d : ....1 ...2. ..3.. .4... 5.... 35 Ve r s c h a c h t e l t e for Sc h l e i f e n Üb u n g Ve r ä n d e r n Si e das le t z t e Pr o g r a m m so das s di e s e r Ou t p u t er z eu g t wi r d : ....1 ...2. ..3.. .4... 5.... ( Ei n e ) An tw o r t : for ( int line = 1; line <= 5; line=line+1) { for ( int j = 1; j <= ( - 1 * line + 5); j=j+1) { System.out.print (\".\"); } System.out.print (line); for ( int j = 1; j <= (line - 1); j=j+1) { System.out.print (\".\"); } System.out.println (); } 36 Üb e r s i c h t § 2. 5 Sc h l e i f e n (L oop s ) § 2. 5. 1 « f o r » L o o p s § 2. 5. 2 Ve r s c h a c h t e l t e Sc h l e i f e n § 2. 5. 3 « w h i l e » L o o p s § 2. 6 Me t h o d e n § 2. 7 Noc h m a l s Sc h l e i f e n 37 2. 5. 3 w h i l e - Sc h l e i f e nKla s s if iz ie r ung vo n Sc h l e i f e n § Be s t i m m t e Sc h l e i f e (« de f i n i t e l o o p» ): An z a h l de r Au s f ü h r u n g e n de s Rum p f e s (« It e r a t io n e n ») is t vo r Beg i n n de r Au s f ü h r u n g de r Sc h l e i f e be k a nn t . § Di e f o r - Sc h l e i f e n wa r e n bi s he r im m e r be s t i m m t e Sc h l e i f e n . § Dr u c k e \"h e l l o \" 1 0 - ma l . § Fi n d en Si e al l e Pr i m z a hl e n < ei n er ga n z e n Za h l n . § Dr u c k e n Si e je d e ung e r a de Za h l zw i s c h e n 7 u n d 91. § Unb e s t i m m t e Sc h l e i f e (« in d ef in it e lo o p ») : An z a h l de r It e r a t io n e n is t ni c h t vo r h e r be k a nn t . Be i s p i e l e vo n unbe s t im m t e n Sc h l e i f e n § Unbe s t i m m t e Sc h l e i f e (« in d ef in it e lo o p ») : An z a h l de r It e r a t io n e n is t ni c h t vo r h e r be k a nn t . § Bei s p i el e : § Le s e n Si e d e n I n p u t v o n d e r Ko n s o l e bi s de r Be n u t z e r e in e ni c h t - ne g a t i v e ga n z e Za h l e in g e b e n ha t . § Wi e d e r h o l e n Si e b i s d e r Be n u t z e r e in «q » e in g e g e b e n ha t . § Le s e n Si e e in e Da t e i bi s dr e i au f ei n an d erf o l g en d e Sä t z e mi t e in e m «! » en d en . § Ne h m e n Si e Be i t r ä g e (v ia c r o w d f u n d in g ) en t g eg en bi s da s Zi e l e r r e ic h t is t . Di e « w h i l e » - Sc h l e i f e § wh i l e - Sc h l e i f e führ t Sc h l e i f e n r u m p f so la n g e au s wi e de r bo o l e s c he Au s d r u c k te s t de n W e r t true er g i b twhile ( te s t ) { st a t e m e nt ( s ) ; } § Bei s p i el : int num = 1; // initialization while ( num * num <= 2000) { // test System.out.print ( num + \" \"); num = num * 2; // update } // output: 1 2 4 8 16 32 Di e « w h i l e » - Sc h l e i f e § wh i l e - Sc h l e i f e führ t Sc h l e i f e n r u m p f so la n g e au s wi e de r bo o l e s c he Au s d r u c k te s t de n W e r t true er g i b twhile ( te s t ) { st a t e m e nt ( s ) ; } § Bei s p i el : int num = 1; while (num*num <= 2000) { System.out.print ( num + \" \"); num = num * 2; } // output: 1 2 4 8 16 32 An w e i s u n g ( e n ) im Lo o p au s f ü h re n Is t te s t wa h r ? An w e i s u n g na c h Lo o p au s f ü h re n jane i n Be i s p i e l «w h i l e » - Sc h l e i f e // finds the first factor of 91, other than 1 int n = 91; int factor = 2; while (n % factor != 0) { factor++; } System.out.println (\"First factor is \" + factor); // output: First factor is 7 § while is t hi e r be s s s e r al s for we i l wi r ni c h t wi s s e n wi e of t wi r de n Zä h l e r er h ö h en mü s s e n um de n 1 . Fa k t o r zu fi n d e n Üb e r s i c h t § 2. 6 Me t h o d e n , T e i l 2 § 2. 6. 1 Met h o d e n mi t Pa r a m e t e r n § 2. 6. 2 Rü c k g a b e w e r t e § 2. 6. 3 Na m e n s r ä u m e § 2. 7 S t r i n g s § 2. 8 N o ch m a l s Sc h l e i f e n 48 2. 6. 1 Me t h od en mi t Pa r a m e t e r n 50 Zur üc k zu unse r e m ei n f a c h en Be i s p i e l § Je d e /r so l l di e Au f g a b e n ma c h en ( kö n n e n ): public class Beispiel { public static void main(String[] args ) { vorsatz (); } // end main public static void vorsatz () { for (int i = 1; i <= 5; i = i+1) { System.out.println ( \"Ich werde die Uebungsaufgaben machen \"); } } // end vorsatz } 52 Mi t Me t h od en vorsatz5, vorsatz10, vorsatz15 public static void vorsatz5() { for ( int i = 1; i <= 5; i = i+1) { ... } } // end vorsatz5 public static void vorsatz10() { for ( int i = 1; i <= 10; i = i+1) { ... } } // end vorsatz10 public static void vorsatz15() { for ( int i = 1; i <= 15; i = i+1) { ... } } // end vorsatz15 53 Noc h me h r Vo r s ä t z e … § Di e se « Lö s u n g » lä s s t nur ei n e vo r g e b e n e An z a h l vo n Wi e d e r h o l u n g e n zu … § Wa s w e n n w i r a u c h a n d e r e Ko m b i n a t i o n e n wo l l e n ? § OK, k e i n e c h t e s T h e m a a b e r e s g e h t u n s j a u m d a s P r i n z i p § Wi r b r a u c h e n e i n e n W e g , d i e A n z a h l Wi e d e r h o l u n g e n d e r Si tu a ti o n an z u p asse n § Pa r a m e t r i s i e r u n g : mi t ( ve r ä n d e r b a r e n ) Pa r a m e t e r n ve r s e h e n 5457 Pa r a m e t r i s i e r u n g § Pa r a m e t e r : Ei n We r t d e n ei n e au f g e r u f e n e Me t h o d e vo n d e r au f r u f e n d e n Me t h o d e er h ä l t . § St a t t vorsatz5, vorsatz10, vorsatz15 en t wi c k l en wi r ei n e Me t h o d e flexVorsatz so da s s ve r s c h i e d e n e Wi e d e r h o l u n g e n ge w ä h l t we r d e n kö n n e n . § We n n wi r e in e Met h o d e de k l a r i e r e n da nn ge b e n wi r an , da s s di e s e Met h o d e e in e n Pa r a m e t e r br a uc h t . § We n n wi r di e M e t ho d au f ru f en , da nn ge b e n wi r e in e n We r t fü r de n Pa r a m e t e r a n . 59 Pa r a m e t r i s i e r u n g main flexVorsatz 5 flexVorsatz 10 Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n 60 flexVorsatz 2 Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Ic h we r d e di e Ha u s a u f g a b e n ma c h e n Pa r a m e t e r d e k l a r a t i o n e n Gi b t an da s s ei n e Me t h o d e ei n en Pa r a m e t e r br a uc h t um au sg e f ü h r t we r d e n zu kö n n e n public static void me t h o d Na me ( ty p e nam e ) { st a t e m e nt ; } na m e : « P a r a m e t e r V a r i a b l e » 62 Pa r a m e t e r d e k l a r a t i o n e n Gi b t an da s s ei n e Me t h o d e ei n en Pa r a m e t e r br a uc h t um au sg e f ü h r t we r d e n zu kö n n e n public static void me t h o d Na me ( ty p e nam e ) { st a t e m e nt ; } § Be is p ie l : public static void echoPin(int code) { System.out.println (\"Die Geheimnummer ist : \" + code); } 63 Pa r a m e t e r d e k l a r a t i o n e n Gi b t an da s s ei n e Me t h o d e ei n en Pa r a m e t e r br a uc h t um au sg e f ü h r t we r d e n zu kö n n e n public static void me t h o d Na me ( ty p e nam e ) { st a t e m e nt ; } § Be is p ie l : public static void echoPin(int code) { System.out.println (\"Die Geheimnummer ist : \" + code); } We n n echoPin au f g eru f en wi r d da nn mu s s de r Au f r u f e r e in e n int We r t an g eb en . 64 We r t ( e ) fü r Pa r a m e t e r Bei m Au f r u f de r Me t h o d e mu s s ei n We r t für de n P a r a m e t e r an g e g e b e n we r d e n . nam e ( ex p r e s s i o n ); § Bei s p i el : public static void main(String [] args ) { echoPin(42); echoPin(12345); } § Ou t p u t Die Geheimnummer ist : 42 Die Geheimnummer ist : 12345 65 W ie we r d e n Pa r a m e t e r übe r g e be n ? § Übe r g e be n : vo m Au f r u f e r zu r au f g e r u f e n e n Me t h o d e § We n n ei n e Me t h o d e au f g e r u f e n wi r d da nn : § De r We r t wi r d in de r Pa r a m e t e r V a r i a b l e ge s p e i c h e r t § Di e An w e i s u n g e n de r Met h o d e we r d e n au s g e f ü h rt ( mi t di e s e m We r t fü r di e P a r a m e t e r V a r i a bl e ) . 66 Me t h od e mi t Pa r a m e t e r § Zu r ü c k zu m Bei s p i el : class Beispiel { public static void main (String[] args ) { flexVorsatz (1000); } // end main public static void flexVorsatz ( int wieoft ) { for ( int i = 1; i <= wieoft ; i = i+1) { System.out.println ( \"Ich werde die Hausaufgaben machen \" ); } } // end flex Vorsatz } 68 Pa r a m e t e r § Ei n P a r a m e t e r i n d e r De k l a r a t i o n ei n er Me t h o d e he i s s t fo r m a l e r Pa r a m e t e r ( « f o r m a l p a r a m e t e r » ) . § Fo r m a l p a r a m e t e r : de f i ni e r t § De r übe r g e be ne We r t he i s s t ta t s ä c h l i c h e r Pa r a m e t e r (« a c t u a l p a r a m e t e r » ) od e r Ar g u m e n t (« a r g u m e n t » ) § Ak t u e l l : au g en b l i c k l i c h , de r z e i t i g [ Du d e n ] § Ak t u e l l e r We r t 69 Pa r a m e t e r V a r i a b l e Di e P a r a m e t e r V a r i a b l e ka n n in d e r Me t h o d e wi e je d e Va r i a b l e ve r w e n d e t we r d e n ( z.B . An z a h l de r It e r a t i o n e n ei n er Sc h l e i f e ko n t r o l l i e r e n ) public static void main(String [] args ) { printPunkt(3); } public static void printPunkt(int times) { for ( int i = 1; i <= times; i = i+1) { System.out.print (\".\"); } System.out.println (); } Ou t p u t : ... 70 W ie we r d e n Pa r a m e t e r übe r g e be n ? public static void main(String [] args ) { printPunkt(3); printPunkt(7); } public static void printPunkt(int times) { for ( int i = 1; i <= times; i = i+1) { System.out.print (\".\"); } System.out.println (); } 3 7 Ou t p u t : ... ....... 73 Mög l i c h e Fe h l e r § We n n ei n e Me t h o d e ei n en Pa r a m e t e r er w a r t e t da nn mu s s di e s e r au c h übe r g e be n we r d e n . printPunkt (); // ERROR: parameter value required § De r We r t m u s s d e n ri ch t i g e n Ty p hbe n printPunkt (3.7); // ERROR: must be of type int § Di e Re g e l n fü r U m w a n d lu n g e n ge l t e n au c h hi e r 74 Meh r er e Pa r a m e t e r § Ei n e Me t h o d e ka n n meh r er e Pa r a m e t e r er w a r t en ( ge t r e n n t dur c h Ko m m a (« , » ) i n De k l a r a t i o n und im Au f r u f ) § We n n di e Met h o d e au f g eru f en wi r d mu s s e in We r t fü r jed en Pa r a m e t e r an g eg eb en we r d e n § De k l a r a t i o n : public static void me t h o d ( ty p e nam e , ... , ty p e nam e ) { st a t e m e nt ; } § Au f r u f : m e t h o d ( va l u e , va l u e , ... , va l u e ); 75 Meh r er e Pa r a m e t e r § Ei n e Me t h o d e ka n n meh r er e Pa r a m e t e r er w a r t en ( ge t r e n n t dur c h Ko m m a (« , » ) i n De k l a r a t i o n und im Au f r u f ) § We n n di e Met h o d e au f g eru f en wi r d mu s s e in We r t fü r jed en Pa r a m e t e r an g eg eb en we r d e n § De k l a r a t i o n : public static void me t h o d ( ty p e 1 nam e 1 , ... , ty p e N nam e N ) { st a t e m e nt ; } § Au f r u f : m e t h o d ( va l u e 1 , va l u e 2 , ... , va l u e N ); 76 Be i s p i e l mi t me h r e r e n Pa r a m e t e r n public static void main (String[] args ) { Scanner console = new Scanner(System.in ); System.out.print(\"Input lower bound: \"); int low = console.nextInt (); System.out.print(\"Input upper bound: \"); int up = console.nextInt (); printOdd(low , up); printOdd ( - up, - low); } public static void printOdd(int from, int to) { for ( int i =from; i <=to; i = i+1) { if (i%2==1) { System.out.println(i ); } } } 77 W ie we r d e n Pa r a m e t e r übe r g e be n ? § We n n ei n e Me t h o d e au f g e r u f e n wi r d : § We r t fü r Pa r a m e t e r wi r d vo n Au f r u f e r be r e c hne t und übe r g e be n § We r t wi r d vo n au f g eru f en er Met h o d e in d e r P a r a m e t e r V a r ia b le ge s p e i c h e r t § Di e An w e i s u n g e n de r au f g eru f en en Met h o d e we r d e n au s g e f ü h rt ( an f an g s mi t di e s e m We r t fü r di e P a r a m e t e r V a r i a bl e ) . § De r W e r t , d e n d e r Au f r u f e r übe r gi b t , ka n n dur c h ei n en Au s d r u c k (E xp r e s s i on ) ge ge b e n se i n § De r W e r t d e s E x p r e s s i o n s wi r d be r e c hne t und übe r g e be n § Di e au f g eru f en e Met h o d e e r h ä lt de n W e r t und ha t ke i n e Ke n n t n i s da v o n wi e de r W e r t be r e c hne t wu r d e 79 W ie we r d e n Pa r a m e t e r übe r g e be n ? § We n n ei n e Me t h o d e au f g e r u f e n wi r d : § We r t fü r Pa r a m e t e r wi r d vo n Au f r u f e r be r e c hne t und übe r g e be n § We r t wi r d vo n au f g eru f en er Met h o d e in d e r P a r a m e t e r V a r ia b le ge s p e i c h e r t § Di e An w e i s u n g e n de r au f g eru f en en Met h o d e we r d e n au s g e f ü h rt ( an f an g s mi t di e s e m We r t fü r di e P a r a m e t e r V a r i a bl e ) . § De r W e r t , d e n d e r Au f r u f e r übe r gi b t , ka n n dur c h ei n e Va r i a b l e ge ge b e n se i n § De r W e r t d e r V a r i a b l e wi r d übe r g e be n § Di e au f g eru f en e Met h o d e e r h ä lt de n W e r t und ha t ke i n e Ke n n t n i s da v o n wo d e r W e r t he r k a m 80 Üb e r g ab e vo n We r t e n (« V a lue se m a n tic s» ) § We n n ei n ( ak tu e l l e r ) P a r a m e t e r ei n es Ba s i s t y p s ( z. B . int , double, boolean ) übe r g e be n wi r d , da nn wi r d de r W e r t vo m Au f r u f e r ko p i e r t (« v a l u e s e m a n t i c s » ) We n n de r ak t u e l l e Pa r a m e t e r dur c h ei n en Au s d r u ck be s t i m m t wi r d , da nn wi r d de r Au s d r u ck s ev a l u i e r t und da s Er g e b n i s ko p i e r t . § De r ko p i e r t e We r t in it ia lis ie r t di e P a r a m e t e r V a r i a bl e i n de r au f g e r u f e n e n Me t h o d e 82 Üb e r g ab e vo n We r t e n (« V a lue se m a n tic s» ) public static void main(String[] args ) { int k = 3; printPunkt (k); printPunkt (k+4); } public static void printPunkt(int times) { for ( int i = 1; i <= times; i = i+1) { System.out.print (“.\"); } System.out.println (); } 3 7 Ou t p u t : ... ....... 83 Üb e r g ab e vo n We r t e n (« V a lue se m a n tic s» ) § We n n ei n ( ak tu e l l e r ) P a r a m e t e r ei n es Ba s i s t y p s ( z. B . int , double , boolean ) übe r g e be n wi r d , da nn wi r d de r W e r t vo m Au f r u f e r ko p i e r t (« v a l u e s e m a n t i c s » ) § Ve r ä n d e r u n g e n de r P a r a m e t e r V a r i a bl e ( de s fo r m a l e n Pa r a m e t e r s ) i n d e r au f ger u f en en Me t h o d e ha be n ke i n e Au s w i r k u n g au f d i e au f r u f en de Me t h o d e 85 Üb e r g ab e vo n We r t e n (« V a lue se m a n tic s» ) public static void strange(int x ) { x = x + 1; System.out.println(\"1. x = \" + x ); } public static void main(String [] args ) { int x = 23; strange(x ); System.out.println(\"2. x = \" + x ); ... } Ou t p u t : 1. x = 24 2. x = 23 8689 Üb e r g ab e vo n We r t e n (« V a lue se m a n tic s» ) § We n n ei n ( ak tu e l l e r ) P a r a m e t e r dur c h ei n e Va r i a b l e V ei n es Ba s i s t y p s ( int , double, boolean ) be s t i m m t wi r d da nn wi r d de r W e r t di e s e r Va r i a b l e ko p i e r t (« v a l u e s e m a n t i c s » ): § Na m e ei n es ak tu e l l e n Pa r a m e t e r s ( we n n ei n e Va r i a b l e ve r w e n d e t wi r d ) is t un w i c h t i g . 90 \"P a r a m e t e r Üb e r g a b e \" P r o b le m public class ParameterMystery { public static void main(String [] args ) { int x = 9; int y = 2; int z = 5; mystery(z , y , x ); mystery(y , x , z ); } public static void mystery(int x , int z , int y ) { System.out.println(z + \" and \" + ( y - x )); } } 91 \"P a r a m e t e r Üb e r g a b e \" P r o b le m public class ParameterMystery { public static void main(String [] args ) { int x = 9; int y = 2; int z = 5; mystery(z , y , x ); mystery(y , x , z ); } public static void mystery(int x , int z , int y ) { System.out.println(z + \" and \" + ( y - x )); } } x y z 9 2 5 5 2 9 5 2 9 Ou t p u t : 2 a n d 4 x yz 93 \"P a r a m e t e r Üb e r g a b e \" P r o b le m public class ParameterMystery { public static void main(String [] args ) { int x = 9; int y = 2; int z = 5; mystery(z , y , x ); mystery(y , x , z ); } public static void mystery(int x , int z , int y ) { System.out.println(z + \" and \" + ( y - x )); } } 2 9 5 2 9 5 Ou t p u t : 9 a n d 3 x yz 94 x y z 9 2 5 Ou t p u t : 2 and 4 9 and 3 96 2. 6. 2 Er g e b n i s Rü c kg ab e fü r Me t h od en 97 import java.util .*; class PrintPrimes1 { public static void main (String[] args ) { Scanner console = new Scanner( System.in ); System.out.print (\"Input max: \"); int max = console.nextInt (); if (max >= 2) { printPrimes (max); } } public static void printPrimes ( int limit) // Prints all prime numbers up to limit, limit >= 2 System.out.print (\"2\"); for ( int i = 3; i <= limit; i ++) { if ( /* isPrime ( i ) */ ) { System.out.print (\", \" + i ); } } System.out.println (); // to end output } } 98 Er g e b n i s Rü c kg ab e § Pa r a m e t e r er l a u b en Ko m m u n i k a t i o n vo m Au f r u f e r zu r au f g e r u f e n e n Me t h o d e § Bi s h e r wa r e n di e Met h o d e n se h r e in f a c h § Met h o d e al s «E r s a t z» fü r An w e i s u n g e n in main ( od e r an d e r e r Me t h o d e ) § Met h o d e n kö n n e n ab er me h r … § Ei n Rüc k g a be w e r t (« r e t u r n v a l u e » ) er l a u b t de r au f g e r u f e n e n Me t h o d e de m Au f r u f e r ei n en We r t zu übe r m i t t e l n § Da m i t er ö f f n en s ic h ne ue Mö g l i c h k e i t e n de r Ko m p o s i t i o n 99101 { … name ( 7+i, true); … } public static name( int k, boolean b) { int result; while (k < 10) { k=k+1; … } if (b) { … } // result } 102 { … name ( 7+i, true); … } public static name( int k, boolean b) { int result; while (k < 10) { k=k+1; … } if (b) { … } // result } 103 { … name ( 7+i, true); … } public static name( int k, boolean b) { int result; while (k < 10) { k=k+1; … } if (b) { … } // result } Rü c kg ab e ei n es We r t e s § Ei n Rüc k g a be w e r t mu s s de k l a r i e r t we r d e n public static ty p e na m e ( par am e t e r s ) { st a t e m e nt s ; ... return ex p r e s s i o n ; } § Es ge l t e n di e se l b e n Re g e l n für ty p e wi e be i de r De k l a r a t i o n vo n Va r i a b l e n und Pa r a m e t e r n § Ke y w o r d void be de ut e t : ke i n Rüc k g a be w e r t 104 Rü c kg ab e an w e i s u n g § Da s return - St a t e m e n t ( « Rüc k g a be An w e i s u n g ») we r t e t ei n en Au s d r u c k au s § De r W e r t wi r d da nn an d e n Au f r u f e r « zu r ü c k g e g e b e n » § De r Au s d r u c k mu s s ei n en We r t d e s Ty p s ty p e (d e r Me t h o d e n De k l a r a t i o n ) er g eb en . § Di e Au s f ü h r u n g de r return - An w e i s u n g be e nde t di e au f g e r u f e n e Me t h o d e . 107 Rü c kg ab e an w e i s u n g (r e tur n - St a t e m e n t ) § return : L i ef e r e ei n en We r t ab al s da s Er g e b n i s di e s e r Me t h o d e § « se n d e » d a s Er g e bni s zu m Au f r u f e r § Da s Ge g e n s t ü c k zu Pa r a m e t e r n : § Pa r a m e t e r s s c h ic k e n We r t e in di e au f g eru f en e Met h o d e , vo m Au f r u f e r § Rü c k g a b e w e r t e s c h ic k e n We r t e aus de r Met h o d e zu m Au f r u f e r § Ei n Me t h o d e n a u f r u f ka n n Te i l ei n es Au s d r u ck s se i n . § Au f r u f e r mu s s d e n W e r t « an n e h m e n » 108109 { … int size = name ( 7+i, true); … } public static int name( int k, boolean b) { int result; while (k < 10) { k=k+1; … } if (b) { … } return result; } Rü c kg ab e an w e i s u n g (« r e tur n» ) main abs( - 42) - 42 round(2.71) 2.71 42 3 abs( - 81) - 81 81 110 Be i s p i e l l ö s u n g mi t Rü c kg a b e ei n es We r t e s public static boolean isPrime (int arg){ // Determine how many factors the given number has. boolean found = false; int step = 2; while (!found) { if (arg % step == 0) { found = true; // factor found } else { step++ ; // keep on searching } } // factor == arg: prime found return (step == arg); } 111 Rü c kg ab e ei n es We r t e s Bei s p i el : // Returns the slope of the line between the given points. public static double slope(int x1, int y1, int x2, int y2) { double dy = y2 - y1; double dx = x2 - x1; return dy / dx ; } slope(1, 3, 5, 11) lie f e r t 2.0 112 return oh n e ei n en We r t § We n n ei n e Me t h o d e ke i n e n We r t zu r ü c k lie f e r t da nn br a uc h t ei n return - St a t e m e n t ke i n e n We r t zu sc h i c k e n . public static void printPoint(int x , int y ) { System.out.println(“x = “ + x + “ y = “ + y ) ; return; } § In d e m F a ll ka n n ma n d a s return - St a t e m e n t au c h we g l a s s e n ( mei n e Em p f e h l u n g ) 113 We i t e r e Be i s p i e l e // Converts degrees Fahrenheit to Celsius. public static double fToC(double degreesF ) { double degreesC = 5.0 / 9.0 * ( degreesF - 32); return degreesC ; } // Computes triangle hypotenuse length given its side lengths. public static double hypotenuse(int a, int b ) { double c = squareRoot (a * a + b * b); return c ; } 114 We i t e r e Be i s p i e l e Ei n re t u r n - St a t e m e n t ka n n au c h ei n en ( ar i th m e ti sc h e n od e r bo o l e s c he n ) Au s d r u c k ve r w e n d e n public static double fToC(double degreesF ) { return 5.0 / 9.0 * ( degreesF - 32); } 115 Mö g l i c h e Fe h l e r : Re s u l t a t ni c h t ge s p e i c h e r t § Ei n return - St a t e m e n t sc h i c k t ei n en We r t a n d e n Au f r u f e r § Na m e n , d i e i n d e r au f g e r u f e n e n Me t h o d e ve r w e n d e t we r d e n , si n d be l a ngl o s ( für de n Au f r u f e r ) 116 Wa s is t hi e r ni c h t ri ch ti g ? public static void main(String [] args ) { slope(0, 0, 6, 3); // Problem: return value not used/stored } public static double slope(int x1, int x2, int y1, int y2) { double dy = y2 - y1; double dx = x2 - x1; double result = dy / dx ; return result; } 117 Wa s is t hi e r ni c h t ri ch ti g ? public static void main(String [] args ) { slope(0, 0, 6, 3); System.out.println(\"The slope is \" + result ); // ERROR: } // result not defined public static double slope(int x1, int x2, int y1, int y2) { double dy = y2 - y1; double dx = x2 - x1; double result = dy / dx ; return result; } 118 De n Fe h l e r ve r m e i d e n § return sc h i c k t de n We r t de r V a r i a bl e zu r ü c k zu m Au f r u f e r . § De r zu r ü c k g e g e b e n e We r t m u s s ge s p e i c h e r t we r d e n – od e r in e in e m Au s d r u c k ve r w e n d e t we r d e n . § De r Co mp i l er ge n e r i e r t ke i n e Wa r n u n g od e r Fe h l e r m e l d u n g we n n di e s ve r g e s s e n wi r d . 119 De n Fe h l e r ve r m e i d e n public static void main(String [] args ) { double s = slope(0, 0, 6, 3); System.out.println(\"The slope is \" + s ); } public static double slope(int x1, int x2, int y1, int y2) { double dy = y2 - y1; double dx = x2 - x1; double result = dy / dx ; return result; } 120 re t u r n - An w e is ung e n § Ei n e Me t h o d e ka n n meh r er e return - An w e i s u n g e n en t h a l t en . § Si n n v o l l fü r Fa l l u n t e r s c h e i d u n g e n § Ei n e Me t h o d e di e ei n en Rüc k g a be w e r t de k l a r i e r t mu ss ei n e ( od e r meh r er e ) return - An w e i s u n g ( en ) en t h a l t en 121 if/else mi t return // Returns the larger of the two given integers. public static int max( int a, int b) { if (a > b) { return a; } else { return b; } } § Me t h o d e n kö n n e n ei n return - St a t e m e n t i n dur c h if/else ko n t r o l l i e r t e n Bl ö c k en en t h a l t en § Da s return - St a t e m e n t am E n d e e in e s Pf a d e s lie f e r t de n Rü c k g a b e w e r t fü r di e s e Met h o d e . 122 if/else mi t return § Di e Au s f ü h r u n g ei n es return - St a t e m e n ts be e nde t di e au f g e r u f e n e Me t h o d e . § Ei ne m return s o llt e n ke i n e we i t e r e n An w e i s u n g e n fo l g e n § Al l e Pf a d e dur c h ei n e Me t h o d e mü s s en ei n return - St a t e m e n t en t h a l t en § We n n di e Met h o d e e in e n Rü c k g a b e w e r t de k l a r i e r t ha t 123 Alle Pf a d e … public static int max( int a, int b) { if (a > b) { return a; } // Error: not all paths return a value } § De r Co mp i l er is t ma n c h ma l na i v : public static int max( int a, int b) { if (a > b) { return a; } else if (b >= a) { return b; } } De r Com p i l e r me i n t da s s es e in e n Pf a d oh n e return gi b t . 124 So v e r s t e h t Ja v a d a s Pr o g r a m m int foo(int a) { if (a > 0) { return a; } else { if (a <= 0) { return - a; } } } 125 \"i f \" au s f ü h r e n : re t u r n a Is t a> 0 wa h r ? Ke i n e we i t e r e n An w ei s u n g en ja ne i n \"e l s e \" au s f ü h r e n : au s f ü h r e n : re t u r n - a Is t a< = 0 wa h r ? Ke i n e we i t e r e n An w ei s u n g en jane i n So v e r s t e h t Ja v a d a s Pr o g r a m m int foo(int a) { if (a > 0) { return a; } else { if (a <= 0) { return - a; } } } 126 \"i f \" au s f ü h r e n : re t u r n a Is t a> 0 wa h r ? Ke i n e we i t e r e n An w ei s u n g en ja ne i n \"e l s e \" au s f ü h r e n : au s f ü h r e n : re t u r n - a Is t a< = 0 wa h r ? Ke i n e we i t e r e n An w ei s u n g en jane i n J e d e r Pf a d i s t mö g l i c h : D a h e r Fe h l e r m e l d u n g if/else , return Be i s p i e l § Sc h r e i b e n Si e ei n e Me t h o d e quadrant di e für ei n Pa a r vo n re e l l e n Za h le n de n Qu a d r a n t e n lie f e r t in de m di e s e r Punk t lie g t . § Be i s p i e l : quadrant( - 4.2, 17.3) lie f e r t 2 § Fä l l t de r Pu n k t au f e in e de r Ac h s e n de s Ko o r d i n a t e n s y s t e m s lie f e r e 0 . x+ x - y+ y - qu a dr a n t 1 qu a dr a n t 2 qu a dr a n t 3 qu a dr a n t 4 129 if/else , return Be i s p i e l public static int quadrant( double x, double y ) { } 132 if/else , return Be i s p i e l l ö s u n g public static int quadrant(double x, double y) { if (x > 0 && y > 0) { return 1; } else if (x < 0 && y > 0) { return 2; } else if (x < 0 && y < 0) { return 3; } else if (x > 0 && y < 0) { return 4; } else { // at least one coordinate equals 0 return 0; } } 133 if/else , return Be i s p i e l l ö s u n g public static int quadrant(double x, double y) { if (x > 0.0 && y > 0.0) { return 1; } else if (x < 0.0 && y > 0.0) { return 2; } else if (x < 0.0 && y < 0.0) { return 3; } else if (x > 0.0 && y < 0.0) { return 4; } else { // at least one coordinate equals 0 return 0; } } 134 if/else , return we i t e r e Be i s p i e l e § Sc h r e i b e n Si e ei n e Me t h o d e countFactors di e di e An z a h l de r Fa k t o r e n ( Te i l e r ) ei n er Za h l lie f e r t . § countFactors(24) lie f e r t 8 da 1, 2, 3, 4, 6, 8, 12, u n d 24 al l e Te i l e r vo n 2 4 s in d . 135 if/else , return we i t e r e Be i s p i e l e § Lö s u n g : // Returns how many factors the given number has. public static int countFactors(int number) { int count = 0; for ( int i = 1; i <= number; i ++) { if (number % i == 0) { count++; // i is a factor of number } } return count; } 136 2. 6. 3 Si c h t b ark e i t vo n Va r i a b l e n n a m e n § Na m e s r ä u m e § «S c o p e »: Ber ei c h in d e m ei n Na m e si c h t b ar is t § Da n n ka n n di e V a r i a bl e ge l e s e n / mod i f i z i e r t we r d e n § Da n n ka n n e in e Met h o d e au f g eru f en we r d e n ( sp ä t e r ) § 1. A p p r o x i m a t i o n für da s In n e n le b e n vo n Me t h o d e n § We i t e r e As p e k t e in sp ä t e r e n Vo r l e s u n g e n 140 Sc o p e ( Si c h t b ark e i t s b e r e i c h ) sc o p e : D e r Te i l ei n es Pr o gr a m m in de m ei n e Va r i a b l e si c h t b ar is t . § Va r i a b l e mü s s e n de k l a r i e r t s e in be v o r s ie s ic h t b a r s in d § De k l a r a t i o n e n mü s s e n e in d e u t ig s e in § Si c h t b a r vo n De k l a r a t i o n bi s zu m Ende de s Bl o c k s fü r de n di e V a r i a bl e de k l a r i e r t is t 141 Sc o p e ( Si c h t b ark e i t s b e r e i c h ) sc o p e : D e r Te i l ei n es Pr o gr a m m in de m ei n e Va r i a b l e si c h t b ar is t . § Va r i a b l e mü s s e n de k l a r i e r t s e in be v o r s ie s ic h t b a r s in d § De k l a r a t i o n e n mü s s e n e in d e u t ig s e in § Si c h t b a r vo n De k l a r a t i o n bi s zu m Ende de s Bl o c k s fü r de n di e V a r i a bl e de k l a r i e r t is t Bl o c k : dur c h { u n d } be gr e nz t 142 { und } st r u k t u r i e r e n ei n Pr o g r am m public static void fct ( int j ) { int i ; int k; } 143 i si c h t b a r k si c h t b a r j si c h t b a r { und } st r u k t u r i e r e n ei n Pr o g r am m if ( ...) { int i; } else { } ... 144 i si c h t b a r { und } st r u k t u r i e r e n ei n Pr o g r am m for ( int i = 0; ...; ...) { } ... for ( int i = 1; ...; ...) { } ... 145 i si c h t b a r ( ande r e s ) i si c h t b a r Sc o p e ( Si c h t b ark e i t s b e r e i c h ) sc o p e : D e r T e i l ei n es Pr o gr a m m in d e m ei n e Va r i a b l e si c h t b ar is t § Va r i a b l e mü s s e n de k l a r i e r t s e in be v o r s ie s ic h t b a r s in d § De k l a r a t i o n e n mü s s e n e in d e u t ig s e in § Si c h t b a r vo n De k l a r a t i o n bi s zu m Ende de s Bl o c k s ( de r dur c h { und } an g eg eb en wi r d ) § Ei ne V a r i a bl e di e i n e in e r fo r - Sc h l e i f e de k l a r i e r t wu r d e ka n n nur im Ru m p f de r Sc h l e i f e ve r w e n d e t we r d e n . § Ei ne Va r i a b l e d i e i n e in e r Met h o d e de k l a r i e r t wu r d e ex i s t i e r t nur in d e r Met h o d e . 147 Bl ö c k e kö n n e n ge s c h a c h t e l t sei n § L o o ps i n Me t h o d e n § L o o ps i n L o o ps -- ge s c h a c h t e l t e Sc h l e i f e n (« n e s t e d l oop s » ) § (J a v a : Met h o d e n kö n n e n ni c h t in ande r e n Met h o d e n ge s c h a c ht e l t se i n . ) 148 Sc o p e ( Si c h t b ark e i t s b e r e i c h ) public static void example() { int x = 3; for ( int i = 1; i <= 10; i ++) { System.out.println ( x+i ); } // i no longer exists here System.out.println (x); } // x ceases to exist here 149 x' s s c o p ei'sscope Sc o p e ( Si c h t b ark e i t s b e r e i c h ) public static void example( int x ) { for ( int i = 1; i <= 10; i ++) { for ( int j = i ; j <=10; j ++ ) { System.out.print ( x + i + j + \" \"); } // j no longer exists here System.out.println ( i ); } // i no longer exists here System.out.println ( x ); } // x no longer exists here 150 F o lg e n de r Si c h t b ark e i t s r e g e l n § Va r i a b l e oh n e übe r l a ppe nde n Si c h tb ar k e i tsb e r e i c h kö n n e n de n se l b e n Na m e n ha be n . for ( int i = 1; i <= 100; i ++) { System.out.print (\"/\"); } for ( int i = 1 ; i <= 100; i ++) { // OK System.out.print (\" \\ \\ \"); } int i = 5; // OK: outside of loop's scope 151 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 0 Ei n f a c h e Ja v a Pr o g r a m m e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 Üb e r s i c h t § 2. 6 Me t h o d e n , T e i l 2 § 2. 6. 1 Met h o d e n mi t Pa r a m e t e r n § 2. 6. 2 Rü c k g a b e w e r t e § 2. 6. 3 Na me n s r ä u me § 2. 7 S t r i n g s § 2. 8 Noc h m a l s Sc h l e i f e n 2 Sc o p e ( Si c h t b ark e i t s b e r e i c h ) sc o p e : T e i l ei n es Pr o gr a m m in d e m ei n e Va r i a b l e si c h t b ar is t . § Va r i a b l e mü s s e n de k l ar i e r t se i n be v o r si e si c h t b a r si n d § De k l a r a t i o n e n mü s s e n ei n d eu t i g se i n § Si c h t b a r vo n De k l ar a t i o n bi s zu m Ende de s B l o c k s fü r de n di e V ar i abl e de k l ar i e r t is t § Bl o ck : dur c h { u n d } be g r e nz t § In k l u s i v e al l e r ei n g es c h l o s s en en Blö c k e § Ei ne i n de r f o r — Sc h l e i f e de k l ar ar i e r t e Va r i a b l e ge h ö r t zu m Ru m p f (« b o d y » ) d er Sc h l e i f e § ( Fo r m a l e ) P a r a m e t er ge h ö r e n zu m Ru m p f (« b o d y » ) d er Met h o d e 3 Sc o p e ( Si c h t b ark e i t s b e r e i c h ) public static void example( int x ) { for ( int i = 1; i <= 10; i ++) { for ( int j = i ; j <=10; j ++ ) { System.out.print ( x + i + j + \" \"); } // j no longer exists here System.out.println ( i ); if (i%2==0) { int j = 4; System.out.print ( i * j + \" \"); } // j no longer exists here } // i no longer exists here System.out.println ( x ); } // x no longer exists here 4 F o lg e n de r Si c h t b ark e i t s r e g e l n § Va r i a b l e oh n e übe r l a ppe nde n Si c h tb ar k e i tsb e r e i c h kö n n e n de n se l b e n Na m e n ha be n . for ( int i = 1; i <= 100; i ++) { System.out.print (\"/\"); } for ( int i = 1 ; i <= 100; i ++) { // OK System.out.print (\" \\ \\ \"); } int i = 5; // OK: outside of loop's scope 5 F o lg e n de r Si c h t b ark e i t s r e g e l n § Ei n e V a r i a b l e ka n n in ei n em Si c h tb ar k e i tsb e r e i c h nur ei n m al de k l a r i e r t we r d e n . for ( int i = 1; i <= 100 * line; i ++) { int i = 2; // ERROR: overlapping scope System.out.print (\"/\"); } i = 4; // ERROR: outside scope § Ei n e Va r i a b l e ka n n ni c h t au sse r h al b ih r e s Si c h tb ar k e i tsb e - re i c h e s ve r w e n d e t we r d e n 6 F o lg e n de r Si c h t b ark e i t s r e g e l n § Ei n e Va r i a b l e ka n n in ei n em Si c h tb ar k e i tsb e r e i c h ni c h t meh r ma l s de k l a r i e r t we r d e n . for ( int i = 1; i <= 100 * line; i ++) { for ( int i = 2; i < line; i ++ ) { // ERROR: overlapping scope // variable i is already defined in method … System.out.print (\"/\"); } } 7 W a r um die s e Re g e l n § Le s b a rk e i t de r Pr o gr a m m e § Ve r e i n f a c h u n g de r Ve r w a l t u n g de s Sp e i c h e r s § Pl a tz fü r ei n e Va r i a b l e ei n es Ba s is t y p e s mu s s nur in de m Blo c k or g a n i s i e r t we r d e n , in de m di e V ar i abl e de k l ar i e r t is t § We r t e (d i e i n ei n er Va r i a b l e ei n es Ba s is t y p e s ) ge s p e i c h e r t we r d e n ve r s c h w i n d e n am Ende de s Blo c k e s 8 Üb e r s i c h t § 2. 7 S t r i n g s § 2. X I n p u t § 2. 8 Noc h m a l s Sc h l e i f e n 9 2. 7 S t ri n g s 10 St ri n g s § Str i n g : E i n e Fo l g e vo n Bu c h s t a b en / Ze i c h e n § Ja v a Ty p String de f i ni e r t in S t a n d a r d Bib lio t h e k § String Va r i a b l e de f i ni e r t wi e al l e ande r e n Va r i a b l e n String nam e ; § In i t i a l i s i e r u n g dur c h St r i n g L i t e r a l § Fo l g e zwi s c h e n \" und \" oh n e Ze i l e n e n d e , gg f . mi t Er s a t z d a r s t e l l u n g e n String nam e = \"Here \"; od e r Te x t b l o c k String na me = \"\"\" Here we go\"\"\"; 11 3 x \" 3 x \" En d e d e r Z e i l e L e e r z e ic h e n ig n o r ie r t ! St ri n g s § Str i n g : E i n e Fo l g e vo n Bu c h s t a b en / Ze i c h e n § Ja v a Ty p String de f i ni e r t in S t a n d a r d Bib lio t h e k § String Va r i a b l e de f i ni e r t wi e al l e ande r e n Va r i a b l e n String nam e ; § In i t i a l i s i e r u n g dur c h St r i n g L i t e r a l § Fo l g e zwi s c h e n \" und \" oh n e Ze i l e n e n d e , gg f . mi t Er s a t z d a r s t e l l u n g e n String nam e = \"Here \"; od e r Te x t b l o c k String na me = \"\"\" Here we go\"\"\"; System.out.println(name); 12 St ri n g L i t e r al s § Str i n g L i t e r al : Str i n g im Pr o gr a m m t e x t String te x t = name + \" \" + name; § + ve r b i n d e t Str i n g s ( L i t e r al s u n d V ar i ab l e ) § Ex a m p l e s: String firstName = \"Robin\"; String lastName = \"Williams\"; String mrsDoubtfire = firstName + \" \" + lastName ; 13 St ri n g s § + er z wi n g t Ko n v e r s i o n vo n an d e r e n Ty p e n ( zu String ) int x = 3; String point = \"(\" + x + \", \" + 5 + \")\"; § Ko n v e r s i o n vo n an d e r e n Ty p e n ( z. B . int ) zu String String s = \"\" + x; § \"\" is t ! , d e r le e r e St r i n g 14 St ri n g al s Pa r a m e t e r public class StringParameters { public static void main(String[] args ) { sayHello (\"Mark\"); String friend = \"Peter\"; sayHello (friend); } public static void sayHello ( String name ) { System.out.println (\"Welcome, \" + name); } } St ri n g al s Pa r a m e t e r public class StringParameters { public static void main(String[] args ) { sayHello (\"Mark\"); String friend = \"Peter\"; sayHello (friend); } public static void sayHello (String name) { System.out.println (\"Welcome, \" + name); } } Out put : Welcome, Mark Welcome, Peter St ri n g s § We i l S t r i n g s wi c h t i g si n d we r d e n si e vo m Co mp i l er be s o nde r s be ha nde l t § Wi r ha t t e n sc h o n be i int und double ge s e h e n das s pr ak t i s c he Üb e r l e g u n g e n di e Pr og r a m m i e r s p r a c h e zwi n g e n , D e t a ils in d e r Pr og r a m m i e r u n g zu er w a rt en § St r i n g s erf a h r en ei n e So n d e r b e h a n d l u n g § St an d ar d Bi b l i o t h ek en t h ä l t vi e l e Me t h o d e n um S t r i ngs zu be a r be i t e n § Im m e r vo r h a n d e n , oh n e import java.util .*; 18 St ri n g s § Str i n g s si n d Ob j e k t e – Me t h o d e n mi t «d o t » N o t a t i o n § Be is p ie le : toUpperCase () , toLowerCase () , ... § Kö n n e n für je d e n Str i n g se i n e Lä n g e ( An z a h l Ze i c h e n ) he r a us fi nde n § String str = \"Hello\"; § System.out.println (\" Laenge : \" + str.length () ); § Str i n g s er l a u b en Zu g r i f f au f d i e Bu c h s t a b en di e de n T e x t au sm ac h e n . 19 Ou t p u t : Laenge : 5 Te i l e ei n es St ri n g s § Au f Te i l e ei n es Str i n g s wi r d mi t ei n em In d e x zu g e g r i f f e n § Ba s is 0 String name = \"B. Dylan\"; § In d e x d e s er s t en Bu c h s t a b e n s : 0 § In d e x d e s le t z t e n Bu c h s t a b e n s : 1 we n i g e r al s di e Lä n g e de s S t r i ng s § name.length () == 8 § Str i n g s si n d ke i n e Ar r a y s ! § Ar r a y s we r d e n in T e il 3 be hande l t ( Fr a g e n bi t t e zu r ü c k h a l t e n ) in d e x 0 1 2 3 4 5 6 7 Ze i c h e n B . D y l a n 20 St ri n g s § Zu g r i f f au f El e m e n t e ei n es Str i n g s er f o l g t mi t ( vo r d e f i n i e r t e n ) Me t h o d e n § Au f r u f di e s e r Met h o d e n in Pu n k tn ot a ti on (D o t N o t a t i o n ) (« d o t no t a t i o n» ) String s = \"hello\"; s. method ( parameterValues ); § Fü h r e Met h o d e method fü r s aus , « we n d e method auf s an» , « ru f e method fü r s auf » § Er g e b n i s ka n n se i n String , int , boolean od e r ei n Ze i c h e n ( Bu c h s t a b e ) 21 String Me t h od en die String lie f e r n § «w h i t e s p a c e » -- Leerz ei c h en (b l a n k , s p a c e), Ta b u l a t o r z e i c h e n , Li n eF eed / Ca r r i a g e R e t u r n /R e t u r n /E n t e r / Ze i l e n u m b r u c h … Me t ho d na m e De s c r i p t i o n substring( in d e x1 , in d e x2 ) or substring( in d e x1 ) th e c h a r a c te r s i n th i s s tr i n g f r o m in d e x 1 (i n c l u s i v e ) t o in d e x 2 ( ex c l u si v e ); if in d e x 2 is o m i t t e d , g r a b s t i l l e n d o f s t r in g toLowerCase () a n e w s t r i n g w i t h al l l ow e r c as e l e t t e r s toUpperCase () a n e w s t r i n g w i t h al l u p p e r c as e l e t t e r s stripLeading () a n e w s t r i n g w h os e v al u e i s t h i s s t r i n g , w i t h al l le a d in g wh i te s p a c e re m o v e d . stripTrailing () a n e w s t r i n g w h os e v al u e i s t h i s s t r i n g , w i t h al l tr a i l i n g wh i te s p a c e re m o v e d . 22 String Me t h od en die String lie f e r n § Bei s p i el String writer = \"S. Beckett\"; // Laenge : 10 System.out.println ( writer.substring (8)); // tt System.out.println ( writer.substring (0,1)); // S System.out.println ( writer.substring (3,7)); // Beck String w = writer.substring (1,2); // wie w = \".\" Me t ho d na m e De s c r i p t i o n substring( in d e x1 , in d e x2 ) or substring( in d e x1 ) th e c h a r a c te r s i n th i s s tr i n g f r o m in d e x 1 (i n c l u s i v e ) to in d e x 2 ( ex c l u si v e ); if in d e x 2 is o m i t t e d , g r a b s t i l l e n d o f s t r in g 23 in d e x 0 1 2 3 4 5 6 7 8 9 Ze i c h e n S . B e c k e t t String Me t h od en die int lie f e r n § Bei s p i el String writer = \"S. Beckett\"; // Laenge : 10 System.out.println ( writer.indexOf (\"Beck\")); // 3 System.out.println ( writer.indexOf (\"e\")); // 4 System.out.println ( writer.indexOf (\"e\",5)); // 7 Me t ho d na m e De s c r i p t i o n indexOf ( st r ) in d e x w h e r e t h e s t a r t o f t h e g iv e n s t r in g ap p e ar s i n t h i s s t r i n g ( - 1 i f n o t f o u n d ) length() num b e r o f c ha r a c t e r s i n t hi s s t r i ng indexOf ( st r , fr o m I n d e x ) in d e x w i t h in t h is s t r in g o f t h e fir s t o c c u r r e n c e of t h e s p e c i f i e d s u b s t r i n g , s t ar t i n g at t h e sp ec i f i ed i n d ex ( - 1 i f n o t f o u n d ) 25 in d e x 0 1 2 3 4 5 6 7 8 9 Ze i c h e n S . B e c k e t t String we i t e r e Be i s p i e l e // index 0123456789012 String s1 = \"Alice Munro\"; String s2 = \"Doris Lessing\"; System.out.println (s1.length()); // 11 System.out.println (s1.indexOf(\"e\")); // 4 System.out.println (s2.substring(6, 9)); // Les String s3 = s2.substring(1, 7); System.out.println (s3.toLowerCase()); // oris l § Mi t di e s e m Str i n g // index 012345678901234567890123456789012 String vorlesung = \" Einfuehrung in die Programmierung \"; Wi e wü r d e n Si e d a s W o r t \" die\" ex t r a h i e r e n ? 26 0123456789 1 123456789 2 123456789 3 12 String we i t e r e Be i s p i e l e // index 0123456789012 String s1 = \"Alice Munro\"; String s2 = \"Doris Lessing\"; System.out.println (s1.length()); // 11 System.out.println (s1.indexOf(\"e\")); // 4 System.out.println (s2.substring(6, 9)); // Les String s3 = s2.substring(1, 7); System.out.println (s3.toLowerCase()); // oris l § Mi t di e s e m Str i n g // index 012345678901234567890123456789012 String vorlesung = \" Einfuehrung in die Programmierung \"; Wi e wü r d e n Si e d a s W o r t \" die\" ex t r a h i e r e n ? vorlesung.indexOf (\"die\"); // 15 vorlesung.substring (15, 18); 27 0123456789 1 123456789 2 123456789 3 12 String we i t e r e Be i s p i e l e // index 0123456789012 String s1 = \"Alice Munro\"; String s2 = \"Doris Lessing\"; System.out.println (s1.length()); // 11 System.out.println (s1.indexOf(\"e\")); // 4 System.out.println (s2.substring(6, 9)); // Les String s3 = s2.substring(1, 7); System.out.println (s3.toLowerCase()); // oris l § Mi t di e s e m Str i n g // index 012345678901234567890123456789012 String vorlesung = \" Einfuehrung in die Programmierung \"; Wi e wü r d e n Si e d a s W o r t \" die\" ex t r a h i e r e n ? int loc = vorlesung.indexOf (\"die\"); // 15 vorlesung.substring (loc, loc+3); 28 0123456789 1 123456789 2 123456789 3 12 § Me t h o d e n wi e substring und toLowerCase ko n s t r u i e r e n und lie f e r n ei n en ne ue n Str i n g zu r ü c k , si e mo d i f i z i er en ni c h t de n S t r i ng für de n si e au f g e r u f e n wu r d en . String s = \"Hello World\"; s.toUpperCase (); System.out.println (s); // Hello World § Um de n W e r t zu be a r be i t e n / sp e i c h e r n mu s s di e s e r wi ed er ei n er Va r i a b l e n zu g e w i e s e n we r d e n : String s = \"Hello World\"; String t = s.toUpperCase (); System.out.println (t); // HELLO WORLD Stri n g L i t e r a l e 29 § Me t h o d e n wi e substring und toLowerCase ko n s t r u i e r e n und lie f e r n ei n en ne ue n Str i n g zu r ü c k , si e mo d i f i z i er en ni c h t de n S t r i ng für de n si e au f g e r u f e n wu r d en . String s = \"Hello World\"; s.toUpperCase (); System.out.println (s); // Hello World § Um de n W e r t zu be a r be i t e n / sp e i c h e r n mu s s di e s e r wi ed er ei n er Va r i a b l e n zu g e w i e s e n we r d e n : String s = \"Hello World\"; s = s.toUpperCase (); // kann selbe Variable sein System.out.println (s); // HELLO WORLD Stri n g L i t e r a l e 30 String Ve r g l e i c h e / Ab f r a g e n String s = \"Hello\"; String t = s.toUpperCase (); if ( s.equals (t)) { System.out.println (\"Equal\")); } else { System.out.println (\"Not equal\")); } //Not equal if (\" Hello\".equals (s)) { System.out.println (\"Equal\")); } else { System.out.println (\"Not equal\")); } //Equal Me t h od De sc r i p t i o n equals( st r ) ob 2 S t ri n g s d i e sel b en Bu c h s t a b e n en t h a l t en equalsIgnoreCase ( st r ) ob 2 S t ri n g s d i e sel b en Bu c h s t a b e n en t h a l t en , oh n e Be r ü c k s ic h t ig u n g vo n G r o s s - und Kl ei n sc h r ei b u n g startsWith ( st r ) ob der S t r i n g mi t den Bu c h s t a b e n des an d e r e n ( st r ) an f än g t endsWith ( st r ) ob … en det contains( st r ) ob der S t r i n g st r ( ir g e n d w o ) au f t r i t t 31 El e m e n t e ei n es St ri n g s § Di e ei n z el n en Bu c h s t a b en si n d We r t e de s ( Ba s i s t y p s ) char ( sp ä t e r me h r ) String name = \"B. Dylan\"; name.charAt (0) // B if ( name.charAt (1) == '.') { … } // Paar single quote ' ' char c = name.charAt (7); System.out.println ( name.indexOf ('.')); // 1 § Ve r w e n d e n Si e == nur für Ba s i s t y p en ( z. B . int od e r char ), ni c h t für String Va r i a b l e § Sp ä t e r se h e n wi r wa n n wi r == ve r w e n d e n kö n n e n in d e x 0 1 2 3 4 5 6 7 Ze i c h e n B . D y l a n 32 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. X I n p u t Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 33 In t e r a k tiv e Pr o g r am m e mi t Scanner § Ei n f a c h e i n t e r a k t i v e P r o g r a m m e . . . § Pr o gr a m l i e s t B e nut z e r I nput § Te x t – Ei ng abe dur c h T as t a t ur § Les en m i t « S c a n n er» § (O f t m i t ) A u s g a b e v o n T e x t a u f Mo n i t o r / B i l d s c h i r m m i t println(..) § In t e r a k t iv : P r o g r a m m k a n n a u f Ben u t z er I n p u t re a g i e re n Ei n f a c h e Ei n g a b e (Input) § In t e r a k t iv e s Pr o gr a m m : Li e s t In p u t v o n d e r Ko n s o l e (« c on s ol e » ) od e r Te r m i n a l . § Wä h r e n d das Pr og r a m m aus g e f ühr t wi r d fr a g t das Pr og r a m m de n Be n u t z e r § Be n u t z e r ti p p t In p u t ei n § De r vo m Be n u t z e r ei n g eg eb en e In p u t wi r d dur c h An w e i s u n g e n im Pr og r a m m in Va r i a b l e n ge s p e i c h e r t § Sp ä t e r au c h an d e r e Ar t e n de s I nput s ( v o n an d e r e n Fe n s t e r n ) Ko n s o l e und System.in § Ko n s o l e (« c on s ol e » ): fr ühe r ei n Ge r ä t , d a s mi t Co mp u t er ve r b u n d e n wa r § Er l aub t e Ei ng abe ( ma n c h ma l auc h Au s g a b e ) Ko n s o l e und System.in § Ko n s o l e (« c on s ol e » ): fr ühe r ei n Ge r ä t , d a s mi t Co mp u t er ve r b u n d e n wa r § Er l aub t e Ei ng abe ( ma n c h ma l auc h Au s g a b e ) Us e r LP f i on t h e S w e d i s h Wi k i p e d i a ( on C om m on s : LP f i ) [ CC B Y - SA ] Ko n s o l e und System.in § Ko n s o l e (« c on s ol e » ): fr ühe r ei n Ge r ä t da s mi t Co mp u t er ve r b u n d e n wa r u n d S t a r t / M a n a g e m e n t d e s C o m p u t e r s zu l i e s § He u t e : ( mei s t ) F e n s t e r im ( gr a phi s c he n ) Ben u t z er i n t er f a c e § System.in (S t a n d a r d I n p u t ): E in ( vo rd e f i n i e r t e s ) F e n s t e r fü r In p u t § System.out (S t a n d a r d O u t p u t ): E in ( vo rd e f i n i e r t e s ) F e n s t e r fü r Ou t p u t . § System.in und System.out kö n n e n da s s e l be Fe n s t e r s e i n . Input und Output § In p u t ko m p l i z i e r t e r al s Ou t p u t § Be n u t z e r kö n n e n si c h auf un v o r g e s e he ne We i s e ve r h a l t e n § Be n u t z e r kö n n e n Fe h l e r ma c h e n § Be n u t z e r kö n n e n unpas s e nde n In p u t lie f e r n § Ab e r in t e r a k t iv e Pr og r a m m e si n d vi e l in t e r e s s a n t e r …. . § E c l i ps e ve r w e n d e t ei n Fe n s t e r u m System.in und System.out zu ze i g e n : § Ou t p u t zu System.out § Ke y b o a r d I n p u t v o n System.in Input fü r Pr o g r am m § Mü s s e n In p u t le s e n § Um w a n d l u n g vo n Dar s t e l l ung de r Ko n s o l e /d e s T e r m i n a l s i n F o r m a t , das vo m Ja v a Pr og r a m m ve r a r b e i t e t we r d e n ka n n § Id e a l e r w e i s e wi r d di e s e (B a s i s )So f t w a r e zu r Ve r f ü g u n g ge s t e l l t § Scanner bi e t e t so l c h e Se r vi c e s an § Es gi b t auc h ande r e Mö g l i c h k e i t e n abe r Sc a n n e r is t ( re l a t i v ) ei n f a c h und erl ei c h t ert uns e r e Ar b e i t. § Ou t p u t h a t d a s se l b e Pr ob l e m ( Um w a n d l u n g de r Dar s t e l l ung ) – auc h da f ür gi b t es be r e i t s So f t w a r e ( println (..) ) 42 Input und System.in § Id e e : Ben u t z er ti p p t Ei n g a b e (v i a Ta s t a t u r ) u n d Pr o gr a m m lie s t di e s e vo n System.in mi t t el s ei n es Scanner s § Scanner : er l a u b t es In p u t v o n un t e r s c hi e dl i c he n Qu e l l e n zu le s e n § Ka n n vo n ve r s c h i e d e n e n St e l l e n le s e n § Au c h v on System.in § Da t e nque l l e wi r d ang e g e be n we n n Scanner ko n s t r u i e r t wi r d § Sp ä t e r auc h vo n Da t e i e n , W e b S e it e n , Da t e nbank e n , … le s e n Scanner Sy n t a x § Scanner si n d in de r Bi b l i o t h ek java.util de fi ni e r t § Mu s s er s t be k ann t ge ge b e n we r d e n § import java.util .*; // so das s wi r Sc a n n e r be nut z e n kö n n e n § Pr o gr a m m br a uc h t ei n Scanner Ob j e k t um v o n de r Ko n s o l e zu le s e n : § Di e s e s m us s ko n s t r u i e r t we r d e n § Scanner na m e = new Scanner(System.in ); § Bei s p i el : Scanner myConsole = new Scanner( System.in ); Scanner Sy n t a x § Scanner si n d in de r Bi b l i o t h ek java.util de fi ni e r t § Mu s s er s t be k ann t ge ge b e n we r d e n § import java.util .*; // so das s wi r Sc a n n e r be nut z e n kö n n e n § Pr o gr a m m br a uc h t ei n Scanner Ob j e k t um v o n de r Ko n s o l e zu le s e n : § Di e s e s m us s ko n s t r u i e r t we r d e n § Scanner na m e = new Scanner(System.in ); § Bei s p i el : Scanner myConsole = new Scanner( System.in ); Scanner Me t h od en Au f r u f ei n er Met h o d e br auc h t ei n en Sc a n n e r Scanner myConsole = new Scanner( System.in ); und dann Au f r u f in Pu n k tn ot a ti on (« d o t n o t a t i o n » ): int alter = myConsole.nextInt () ; Me t h od De sc r i p t i o n nextInt () re a d s a n int f r om t h e u s e r a n d r e t u r n s i t nextDouble () re a d s a double f r om t h e u s e r next() r e a d s a on e - w or d String f r om t h e u s e r nextLine () r e a d s a on e -li n e String f r om t h e u s e r Scanner Me t h od en § De r ei n g eg eb en e We r t ka n n we i t e r ve r a r b e i t e t we r d e n . int alter = myConsole.nextInt () ; System.out.println (\" Ihre Eingabe \" + alter); § Ab e r wi e we i s s de r Be n u t z e r das s ei n e Ei ng abe er w a rt e t wi r d ? Me t h od De sc r i p t i o n nextInt () re a d s a n int f r om t h e u s e r a n d r e t u r n s i t nextDouble () re a d s a double f r om t h e u s e r next() r e a d s a on e - w or d String f r om t h e u s e r nextLine () r e a d s a on e -li n e String f r om t h e u s e r Scanner Ei n g a b e § Das Pr og r a m m fo r d e r t de n Be n u t z e r auf , W e r t ( e ) ei n z u g eb en § «p r o m p t » ( Au f f o r d e r u n g ): T e x t d e r ang i b t das / we l c h e Ei n g a b e er w a r t e t wi r d § De r P r o m p t er s c h ei n t im Ko n s o l e n f e n s te r § Je t z t ka n n di e Ei n g a b e er f o l g en – er s ch ei n t auc h im se l b e n Fe n st e r § System.in und System.out we r d e n vo n E c l i p s e be s o nde r s be hande l t § Je d e Sc a n n e r Met h o d e wa r t e t bi s de r Be n u t z e r di e Ei ng abe mi t de r «E N T E R » ( od e r «R E T U R N ») T a s t e ab s c hl i e s s t . § Be is p ie l : System.out.print (\" Wie alt sind Sie ? \"); // prompt int alter = myConsole.nextInt () ; System.out.println (\" Ihre Eingabe \" + alter); Scanner Be i s p i e l import java.util .*; // so dass Scanner verwendet werden kann public class UserInputExample { public static void main(String[] args ) { Scanner myConsole = new Scanner( System.in ); System.out.print (\" Wie alt sind Sie ? \"); int alter = myConsole.nextInt () ; int jahre = 65 - alter; System.out.println ( jahre + \" Jahre bis zur Pensionierung !\"); } } Ko n s o l e ( Ei n g a b e de s Be n u t z e r s un t e r s t r i c he n ): Wie alt sind Sie ? 46 Jahre bis zur Pension! 19 alter 19 jahre 46 Scanner Be i s p i e l 2 import java.util .*; public class ScannerMultiply { public static void main(String[] args ) { Scanner console = new Scanner( System.in ); System.out.print (\"Please type two numbers: \"); int num1 = console.nextInt (); int num2 = console.nextInt (); int product = num1 * num2; System.out.println (\"The product is \" + product); } } Ou t p u t ( Ben u t z er ei n g a b e un t e r s t r i c he n ): Please type two numbers: 8 6 The product is 48 § De r Scanner ka n n me h r e r e Za h l e n in ei n er Ze i l e ( en d e t mi t RE T U RN ) le s e n . Wo fi n d e ic h In f o r m a tio ne n ht t p s : / / d o c s . o r a c l e . c o m / e n / j a v a / j a v a s e / 1 7 / d o c s / a p i / j a v a . b a s e / j a v a / u t i l / S c a n n e r . ht m l § Do r t fi nde n wi r meh r In f o r m a t io n e n § Z. Zt . no c h ni c h t al l e Ko n z e p t e er k l ä r t § Da r u m « ig n o r ie r e n » wi r di e ande r e As p e k t e ( aus s e r de ne n , d i e wi r fü r das Be i s p i e l br auc he n ) 545556 Ei n g a b e El e m e n t e § Scanner lie s t ( für nextInt () ) op t i on a l e s Vo r z e i c h e n und Fo l g e vo n Zi f f e r n und wa n d e l t di e s e in ei n e Za h l ( int ) u m § Br a u c h t Be s c h r e ib u n g vo n le g a le n int s § Z. B . E B N F Be s c h r e ib u n g § Mu s s wi s s e n wo ei n e int Be s c h r e ib u n g auf hö r t ( an f äng t ) § Be s c h r e ib u n g vo n Leerz ei c h en / Tr e n n z e i c h e n § Au c h wi e d e r mi t EB N F mö g l i c h § Fo l g e vo n Ze i c h e n di e de r Scanner lie s t : T o k e n § In p u t E l e m e n t § Er w ar t e t e Ze i c h e n häng e n vo n Met h o d e ( z.B . nextDouble () ) a b Ei n g a b e El e m e n t e § Fo l g e vo n Ze i c h e n di e de r S c a nne r lie s t : T o k e n § To k e n we r d e n dur c h Zw i s c h e n r a u m (« wh i t e s p a c e ») ge t r e n nt § Au f D e u ts c h : Leerz ei c h en , a u f Eng l i s c h : « s p a ce » , « b l a n k» § Ta b u l a t o r Ze i c h e n (« t a b » ), § Ze i l e n v o r s c h u b (« n e w l i n e» ). § Wi e vi e l e To k e n si n d in di e s e r Ze i l e ? 23 John Smith 42.0 $2.50 Ei n g a b e El e m e n t e § Fo l g e vo n Ze i c h e n di e de r S c a nne r lie s t : T o k e n § To k e n we r d e n dur c h Zw i s c h e n r a u m (« wh i t e s p a c e ») ge t r e n nt § Au f D e u ts c h : Leerz ei c h en , a u f Eng l i s c h : « s p a ce « , « b l a n k» § Ta b u l a t o r Ze i c h e n (« t a b » ), § Ze i l e n v o r s c h u b (« n e w l i n e» ). § Wi e vi e l e To k e n si n d in di e s e r Ze i l e ? 23 John Smith 42.0 § To k e n ka n n Ko n t e x t - ab h än g i g se i n $2.50 \"hello World\" 1.456E12 \"45 18\" Ei n g a b e El e m e n t e We n n da s T o k e n ni c h t de n ri ch t i g e n Ty p ha t gi b t es ( zu r La u f z e i t ) ei n e Fe h l e r m e l d u n g . System.out.print (\"Was ist Ihr Alter? \"); int alter = myConsole.nextInt () ; Ou t p u t : Was ist Ihr Alter? Timmy java.util.InputMismatchException at java.util.Scanner.next (Unknown Source) at java.util.Scanner.nextInt (Unknown Source) ... Noc h ei n Be i s p i e l import java.util .*; // for Scanner public class IncNumber { public static void main(String[] args ) { Scanner console = new Scanner( System.in ); System.out.print (\"Type a number: \"); int numberIn = console.nextInt (); System.out.println (\"Number + 1: \" + (1 + numberIn )); } } 64 § Scanner 's next Me t h o d e lie s t ei n Wo r t ( d. h. ke i n e Zw i s c h e n r ä u m e ) al s String . Scanner console = new Scanner( System.in ); System.out.print (\"What is your name? \"); String name = console.next (); name = name.toUpperCase (); System.out.println (name + \" has \" + name.length () + \" letters and starts with \" + name.substring (0, 1)); § Be is p ie le : (I n p u t un t e r s t r i c he n ) What is your name? Chamillionaire CHAMILLIONAIRE has 14 letters and starts with C What is your name? Donald Duck DONALD has 6 letters and starts with D What is your name? \"Mickey Mouse\" \"MICKEY has 7 letters and starts with \" 65 Scanner Me t h od en § Je d e Met h o d e wa r t e t bi s de r Be n u t z e r di e Ei ng abe mi t de r \"EN T ER \" ( od e r \"R E T U R N \") T as t e ab s c hl i e s s t . § Di e next() Met h o d e lie s t ei n Wo r t ( d. h. ke i n e Zw i s c h e n r ä u m e ) al s String § Ke i n e An f ü h r u n g s z e i c h e n (\" )! Me t h od De sc r i p t i o n nextInt () re a d s a n int f r om t h e u s e r a n d r e t u r n s i t nextDouble () re a d s a double f r om t h e u s e r next() r e a d s a on e - w or d String f r om t h e u s e r nextLine ( ) r e a d s a on e -li n e String f r om t h e u s e r 66 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 8 No c h ma l s Sch l e i f e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 68 Üb e r s i c h t § 2. 8 Noc h m a l s Sc h l e i f e n § 2. 8. 1 Ku r z f o r m e n ( fü r Ak tu a l i s i e r u n g ) § 2. 8. 2 Ku r z f o r m e n und be di ng t e (« s h o rt - ci r cu i t » ) Au s f ü h r u n g § 2. 8. 3 Te r m i n i e r u n g vo n Sc h l e i f e n § 2. 8. 4 I n p u t We r t e zu r Sc h l e i f e n k o n t r o l l e § 2. 8. 5 In v a r i a n t e n 69 2. 8 Noc h m a l s Sc h l e i f e n § Ku r z f o r m zu r Ak t u a l i s i e r u n g de s L o o p C o un t e r s ( Sc h l e i f e n z äh l e r s ) § Ti pp s für ko r r e k t e Te r m i n i e r u n g de r Sc h l e i f e n § Ho ar e Tr i p e l für Sc h l e i f e n 70 2. 8. 1 Ak t ua lis ie r ung for ( int i = start ; i < bound; i = i + 1) { // Statement } Ak t u a l i s i e r u n g : i wi r d um 1 er h ö h t for ( int i = start ; i > bound; i = i - 1) { // Statement } Ak t u a l i s i e r u n g : i wi r d um 1 re d u z i e r t Au c h an d e r e Ak t u a l i s i e r u n g e n si n d mö g l i c h ab e r di e s e hi e r tr e t e n hä ufi g au f 71 Ku r z f o r m e n fü r Zu w e i s u n g e n § Zu w e i su n g e n de r F o r m j = j+1 tr e t t e n hä ufi g au f § Ma c h e n Pr og r a m m unübe r s i c h t l i c h § Fr ü h e r : unnö t i g e Ex t r a - Ar b e i t fü r Co m p i l e r u n d Co m p u t e r § Ku r z f o r m e n er l a u b en In k r e m e n t (Ad d i t i on v on 1) u n d De k r e m e n t ( Su b tr ak ti o n vo n 1 ) § «i n c r e m e n t » u n d «d e c r e m e n t » O p e r a t o r § Ve r ä n d e r u n g im m e r um 1 72 Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; //increment va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; //decrement Be i s p i e l e int x = 2; x ++; // x = x + 1; // x now stores 3 double note = 4.5; note -- ; // note = note - 1; // note now stores 3.5 73 Ak t ua lis ie r ung for ( int i = start ; i < bound; i ++) { // Statement } Ak t u a l i s i e r u n g : i wi r d um 1 er h ö h t for ( int i = start ; i > bound; i -- ) { // Statement } Ak t u a l i s i e r u n g : i wi r d um 1 re d u z i e r t ++ ( u n d -- ) of t i n Ak t u a l i s i e r u n g e n de s L o o p C o un t e r s 75 Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; Va r i a b l e wi r d ve r w e nd e t und da nn ve r ä nd e r t Di e s g i l t auc h in Au s d r ü c k e n und Zu w e i s u n g e n Be i s p i e l int x = 2; int y; y = x++; 76 Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; //increment va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; //decrement Bei s p i el e int x = 2; System.out.println (x++); // x = x + 1; x now stores 3 System.out.println (x++); // x = x + 1; x now stores 4 77 Ou t p u t : 2 3 Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; Va r i a b l e wi r d ve r w e nd e t und da nn ve r ä nd e r t Di e s g i l t auc h in Au s d r ü c k e n und Zu w e i s u n g e n Be i s p i e l int x = 2; int y; y = x++; 78 Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; Va r i a b l e wi r d ve r w e n d e t und da nn ve r ä n d e r t Di e s g i l t auc h in Au s d r ü c k e n und Zu w e i s u n g e n Be i s p i e l int x = 2; int y; y = x++; 79 int temp = x; x++; y = temp; //x: //y: Ink r e m e n t und De k r e m e n t Ku r z f o r m Äq ui va l e n t e au s f ü h r l i ch er e Ve r s i o n va r i a b l e ++; va r i a b l e = va r i a b l e + 1; va r i a b l e -- ; va r i a b l e = va r i a b l e - 1; Va r i a b l e wi r d ve r w e n d e t und da nn ve r ä n d e r t Di e s g i l t auc h in Au s d r ü c k e n und Zu w e i s u n g e n Be i s p i e l int x = 2; int y; y = x++; 80 int temp = x; x = x + 1; y = temp; //x: //y: Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 84 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c hne t 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l e LH S: int k int i = 3; int j = 7; RH S Re s u l t a t : 9 9 3+5 8 i+2 5 i ++ 3 // i : 4 j -- + j%4 9 // j: 6 Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 85 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c hne t 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l int i = 3; int j = i ++; Ac h tu n g : Z w e i V a r i a b l e n we r d e n v e r ä n d e r t ! Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 86 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c h n e t 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l int i = 3; int j = i ++; Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 87 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c h n e t 1. RH S : 3 2. 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l int i = 3; int j = i ++; = 3; //update i !! Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 88 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c h n e t 1. RH S : 3 2. Ad d i e r e 1 zu Va r i a b l e i 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l int i = 3; int j = i ++; = 3; //update i !! // i+1 Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 89 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c h n e t 1. RH S : 3 2. Ad d i e r e 1 zu Va r i a b l e i 3. Spe i c h e r e Va r i a b l e i 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s p e i c h e r t Be i s p i e l int i = 3; int j = i ++; = 3; //update i !! // i+1 // i = Zu w e i s u n g e n (A ssig nm e n t S t a t e m e n t) 90 L H S = R H S ; LH S : E i n e Ba s is t y p Va r i a b l e ( z.B . int , long , od e r double ) RHS : E i n Au s d r u c k Ab l a u f : 1. Re c h t e Se i t e (R H S) wi r d be r e c hne t 1. RH S : 3 2. Ad d i e r e 1 zu Va r i a b l e i 3. Sp e i ch e r e Va r i a b l e i 2. Re s u l t a t (W ert ) wi r d in V a r ia b le ( L H S ) ge s pe i c h e r t Be i s p i e l int i = 3; int j = i ++; = 3; //update i !! // i+1 // i = j = Ink r e m e n t und De k r e m e n t P uz z le s int x = 1; int y = 0; int z = 0; y = x++; z = x++ + x++; § We r t x ? § We r t y ? § We r t z ? 93 Po l l Ink r e m e n t und De k r e m e n t P uz z le s 95 int x = 1; //S1 int y = 0; //S2 int z = 0; //S3 y = x++; //S4 z = x++ + x++; //S5 E1 E2 na c h S1 S2 S3 S4 E1 E2 S5 x 1 1 1 2 3 4 4 y 0 0 1 1 z 0 0 5 Po l l Ink r e m e n t und De k r e m e n t P uz z le s int a = 1; a = a++; § We r t a ? int i = 10; int j = i -- - i -- ; § We r t i ? § We r t j ? 96 Po l l Ink r e m e n t und De k r e m e n t P uz z le s int i = 10; int j = i -- - i -- ; // in Zeitlupe int i = 10; int temp1 = i ; // 10 i = i - 1; // 9 int temp2 = i ; // 9 i = i – 1; // 8 j = temp1 – temp2; // 1 § We r t i ? 8 § We r t j ? 1 97 int a = 1; a = a++; // in Zeitlupe int a = 1; int temp = a; // 1 a = a + 1; // 2 a = temp; // 1 § We r t a ? 1 Po l l In k r e m e n t und De k r e me n t P uz z le s 101 § Uns e r Zi e l is t es ve r s t ä nd l i c he Pr o gr a m m e zu sc h r e i b e n In k r e m e n t und De k r e me n t P uz z le s 102 § Uns e r Zi e l is t es ve r s t ä nd l i c he Pr o gr a m m e zu sc h r e i b e n § … u n d ni c h t Puz z l e s zu ko n s t r u i e r e n ! § Si e so l l t e n ++ und -- ( er ) ke n n e n § Au c h i n ko m p l e x e n Au s d r ü c k e n § Ih r e En t s c he i dung ob si e es ve r w e n d e n ( abe r we n n dann ri c h t i g ) § Di e se Op e r a t o r e n si n d ni c h t so ef f i z i e n t da s s wi r da für di e Kl ar h e i t ei n es Pr o gr a m m e s op f e r n wo l l e n . We i t e r e Ku r z f o r m e n § Er l a u b e n Ve r w e n d u n g de s We r t e s ei n er Va r i a b l e ge f o l g t vo n ei n er Mo d i f i k a t i o n ( Zu w e i su n g ) Ku r z f o r m Äq u i v a l e n t e aus f ühr l i c he r e Ve r s i o n va r i a b l e += va l u e ; va r i a b l e = va r i a b l e + va l u e ; va r i a b l e - = va l u e ; va r i a b l e = va r i a b l e - va l u e ; va r i a b l e *= va l u e ; va r i a b l e = va r i a b l e * va l u e ; va r i a b l e /= va l u e ; va r i a b l e = va r i a b l e / va l u e ; va r i a b l e %= va l u e ; va r i a b l e = va r i a b l e % va l u e ; § Mo d i f i k a t i o n mi t be l i e bi g e n We r t e n ( ni c h t nur 1) 103 We i t e r e Ku r z f o r m e n Bei s p i el e x += 3; // x = x + 3; note - = 0.5; // note = note - 0.5; number *= 2; // number = number * 2; Wa r n u n g : x += 1; // x = x + 1; x =+ 1; // x = + 1; 104 We i t e r e Ku r z f o r m e n – ma n c h ma l nüt z l i c h § x++ und j -- he i s s e n Po s t - In c r e m e n t bz w . Po s t - De c r e m e n t O pe r a t o r , da di e Ve r ä n d e r u n g (v o n x und j ) ge m a c ht wi r d na c hd e m de r W e r t ( v o n x od e r j ) ge l e s e n (« ge b r a u c ht ») wu r d e . § Es gi b t auc h Op e r a t o r e n , d ie d ie Ve r ä n d e r u n g (I n c r em en t od e r De c r e m e n t ) dur c h f ühr e n be v o r de r W e r t ge l e s e n wu r d e ; d i e s si n d de r Pr e - In c r e m e n t bz w . Pr e - De c r e m e n t O pe r a t o r : ++j od e r -- x . Be is p ie le int x = 2; System.out.println (++x); // x = x + 1; x now stores 3 System.out.println (++x); // x = x + 1; x now stores 4 105 Ou t p u t : 3 4 We i t e r e Ku r z f o r m e n – ma n c h ma l unnö t i g § x++ und j -- he i s s e n Po s t - In c r e m e n t bz w . Po s t - De c r e m e n t O pe r a t o r , da di e Ve r ä n d e r u n g (v o n x und j ) ge m a c ht wi r d na c hd e m de r W e r t ( v o n x od e r j ) ge l e s e n (« ge b r a u c ht ») wu r d e . § Es gi b t auc h Op e r a t o r e n , d ie d ie Ve r ä n d e r u n g (I n c r em en t od e r De c r e m e n t ) dur c h f ühr e n be v o r de r W e r t ge l e s e n wu r d e ; d i e s si n d de r Pr e - In c r e m e n t bz w . Pr e - De c r e m e n t O pe r a t o r : ++j od e r -- x . Be is p ie le int x = 2; System.out.println (++x); // x = x + 1; x now stores 3 System.out.println (++x); // x = x + 1; x now stores 4 106 Ou t p u t : 3 4 2. 8. 2 Be d i n g t e Aus w e r t ung und Ku r z f o r m e n § Fü r && und || mü s s en ni c h t im m e r be i de Op e r a n d e n au sg e w e r t e t we r d e n , u m d a s Er g e b n i s zu er mi t t el n § Ja v a been de t di e Au s w e r t u n g ei n es bo o l e s c he n Au s d r u c k s so b al d da s Er g e b n i s fe s t st e h t . § && und || si n d lin k s - as s o z i a t i v § Au s d r ü c k e we r d e n vo n l i n ks nac h re c h t s , ge m ä s s Pr ä z e d e n z und As s o z i a ti v i t ä t aus g e w e r t e t § && st o p p t so b a l d ei n Te i l ( aus dr uc k ) false is t § || st o p p t so b a l d ei n Te i l ( aus dr uc k ) true is t 107 Be d i n g t e Aus w e r t ung : Vo r s i c h t § Wa s is t de r W e r t v o n count am E n d e d e s Co d es eg men t s ? // look closely int count = 0; Scanner console = new Scanner( System.in ); for (int i = 0; i <4; i ++) { System.out.print (\" Eingabe Zahl : \"); int wert = console.nextInt (); if ((wert != 0) && (count++ < 9)) { System.out.println ( \"Hit\"); } } // count: Anzahl Werte ungleich 0, nicht Iterationen § Vo r s i c h t be i ++ / -- 108 Be d i n g t e Aus w e r t ung : Vo r s i c h t § Di e lo g is c h e n Op e r a t o r e n si n d ni c h t ko m m u t a t i v we n n di e Au s w e r t u n g de n Zu s t an d de s Pr o gr a m m s ve r ä n d e r n ka n n . § (expr1 && expr2) ni c h t im m e r gl e i ch (expr2 && expr1) § Vo r s i c h t be i Op e r a t o r e n mi t Ne b e n w i r k u n g e n (« s i d e e f f e c t s » ) § Of f e n s i c h t l i c h e Ne b e n w i r k u n g e n : z.B . int x,y ; x++ y -- o. ä . § Ni c h t so f o r t of f e n s i c h tl i c h : § Met h o d e n od e r Fu n k t i o n e n , d ie Zu s t a n d de s Pr o g r a m m s än d ern ( we r d e n wi r sp ä t e r ke n n e n l e r n e n ) § Op e r a t i o n e n di e Zu s t a n d de s S y s t e m s än d ern ( wi e z. B . x / 0 – Fe h l e r !) 109 Ku r z f o r m e n - Re c a p § Uns e r Z i e l i s t e s , v e r s t ä ndl i c he Pr o gr a m m e z u s c hr e i be n. § Vo r s i c h t b e i K u r z f o r m e n u n d b e d i n g t e r A u s w e r t u n g § Of t s i n n v o l l u m k o m p a kt L a u f z e i t f e h l e r z u v e r m e i d e n § Ge b r a u c h e r l a u b t, n i c h t e r z w u n g e n § Wa s w i r d g e d r u c k t ? int x = 2; System.out.println (++x + x++ + \" \" + x + ++x + x); 110 Ku r z f o r m e n - Re c a p § Uns e r Z i e l i s t e s , v e r s t ä ndl i c he Pr o gr a m m e z u s c hr e i be n. § Vo r s i c h t b e i K u r z f o r m e n u n d b e d i n g t e r A u s w e r t u n g § Of t s i n n v o l l u m k o m p a kt L a u f z e i t f e h l e r z u v e r m e i d e n § Ge b r a u c h e r l a u b t, n i c h t e r z w u n g e n § Wa s w i r d g e d r u c k t ? int x = 2; System.out.println (++x + x++ + \" \" + x + ++x + x); 111 Ou t p u t 6 455 int x = 2; System.out.println (++x + x++ + \" \" + x + ++x + x); 112 Ou t p u t 6 455 pr e : er h ö h e, da nn v e r w e nde n 3 x: 3 po s t : ve r w e n d e , da nn e r hö he n 3 x: 4 \"4 \" +: 6 \"6 \" pr e : er h ö h e, da nn v e r w e nde n 5 \"5 \" x: 5 5 \"5 \" 2. 8. 3 Te r m i n i e r u n g vo n Sc h l e i f e n 114 Ei n e tr i v i a l e Auf g a be ... § Sc h r e i b e n Si e ei n e Me t h o d e printNumbers di e di e Za h le n vo n 1 bi s N dur c h Ko m m a ge t r e n n t au sg i b t . Bei s p i el : Obergrenze N eingeben : 5 so l l t e er g eb en : 1, 2, 3, 4, 5 115 Lö sung sa nsa tz public static void printNumbers () { Scanner console = new Scanner( System.in ); System.out.print (\" Obergrenze N eingeben : \"); int max = console.nextInt (); for ( int i = 1; i <= max; i ++) { System.out.print ( i + \", \"); } System.out.println (); // to end the line of output } 116 We l c h e Sc h l e i f e n lie f e r n ge w ü n s c h t e n Ou t p u t ? public static void printNumbers () { Scanner console = new Scanner( System.in ); System.out.print (\" Obergrenze N eingeben : \"); int max = console.nextInt (); // Option A for (int i = 1; i <= max; i ++) { System.out.print ( i + \", \"); } System.out.println (); // to end the line of output // Option B for (int i = 1; i <= max; i ++) { System.out.print (\", \" + i ); } System.out.println (); // to end the line of output } }// printNumbers Po l l 117 A: Fe h l e r h a f t e Lö sung public static void printNumbers () { Scanner console = new Scanner( System.in ); System.out.print (\" Obergrenze N eingeben : \"); int max = console.nextInt (); for (int i = 1; i <= max; i ++) { System.out.print ( i + \", \"); } System.out.println (); // to end the line of output } Ou t p u t be i Ei ng abe 5: 1, 2, 3, 4, 5 , 118 B: F e h l e r h a f t e Lö sung public static void printNumbers () { Scanner console = new Scanner( System.in ); System.out.print (\" Obergrenze N eingeben : \"); int max = console.nextInt (); for (int i = 1; i <= max; i ++) { System.out.print (\", \" + i ); } System.out.println (); // to end the line of output } Ou t p u t be i Ei ng abe 5: , 1, 2, 3, 4, 5 120 Ga r t e nz a un Ana lo gie § Wi r ge b e n n Za h le n au s ab e r br a uc he n nur n - 1 Ko m m a s . § Äh n l i c h de m Ba u ei n es We i d e z a u n e s mi t Pf o s t e n und Qu e r s t r e b e n § We n n wi r – wi e in d e r 1 . fe h l e r h a f t e n Lö s ung – Pf o s t e n und St r e b e n in s t a llie r e n dann ha t de r le t z t e Pf o s t e n in d e r Lu f t häng e nde St r e b e n . for ( Lä n g e de s Za u n s ) { Be t on i e r e Pf o s t e n . I n s t a llie r e Qu e r s t r e b e n . } 122 Ga r t e nz a un Ana lo gie § Wi r ge b e n n Za h le n au s ab e r br a uc he n nur n - 1 Ko m m a s . § Äh n l i c h de m Ba u ei n es We i d e z a u n e s mi t Pf o s t e n und Qu e r s t r e b e n § We n n wi r – wi e in d e r 2 . fe h l e r h a f t e n Lö s ung – St r e b e n und Pf o s t e n in s t a llie r e n dann ha t de r er s t e Pf o s t e n in d e r Lu f t häng e nde St r e b e n . for ( Lä n g e de s Za u n s ) { I n s t a llie r e Qu e r s t r e b e n . Be t on i e r e Pf o s t e n . } 123 Sc h l e i f e § Fü g e n Si e ei n e An w e i s u n g au sse r h al b de r Sc h l e i f e hi nz u um de n er s t en « Pf o s t e n » zu pl a z i e r e n Be t on i e r e Pf o s t e n . for ( Lä n g e de s Za u n s - 1) { I n s t a llie r e Qu e r s t r e b e n . Be t on i e r e Pf o s t e n . } 124 Lö sung en ba s ie r e nd au f die s e r Ide e System.out.print (1); for ( int i = 2 ; i <= max; i ++) { System.out.print ( \", \" + i ); } System.out.println (); // to end the line Al t e r n a t i v e : 1 . od e r le t z t e r Du r c h l a u f dur c h di e Sc h l e i f e ka n n ve r ä n d e r t we r d e n : for ( int i = 1; i <= max - 1 ; i ++) { System.out.print ( i + \", \" ); } System.out.println (max); // to end the line 125 Lö sung ( ei n e Mög l i c h k ei t ) public static void printNumbers () { Scanner console = new Scanner( System.in ); System.out.print (\" Obergrenze N eingeben : \"); int max = console.nextInt (); System.out.print (1); for ( int i = 2; i <= max; i ++) { System.out.print (\", \" + i ); } System.out.println (); // to end the line } 126 «o f f - by - on e» E r r or ( Um - Ei n s - Da n e b e n - Fe h l e r ) § Di e Sc h l e i f e wu r d e ei n ma l zu v i e l ( od e r ei n ma l zu w e n i g ) dur c hl a uf e n . § « Za u n p f a h lp r o b le m » – es gi b t so g ar ei n e D W i k i p e d i a Se i t e ( In h a lt oh n e Ge w ä hr ) 127 Te r m i n i e r u n g vo n L o o p s § Ve r w a n d e l n Si e d i e Me t h o d e printNumbers in ei n e ne ue Me t h o d e printPrimes di e a l l e Pr i m z a hl e n ( dur c h Ko m m a ge t r e n n t ) b i s zu r Ob e r g r e n z e ma x au sg i b t ( ma x ≥ 2 ) . § Be is p ie l : printPrimes mi t Ei ng abe 50 er g i b t : 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 § Ei n e Pr i m z a hl p ka n n in ge n a u zw e i Fa k t o r e n ze r l e g t we r d e n : p und 1 128 import java.util .*; class PrintPrimes1 { public static void main (String[] args ) { Scanner console = new Scanner( System.in ); System.out.print (\"Input max: \"); int max = console.nextInt (); if (max >= 2) { printPrimes (max); } } public static void printPrimes ( int limit) // Prints all prime numbers up to limit, limit >= 2 System.out.print (\"2\"); for ( int candidate = 3; candidate <= limit; candidate++) { if ( /* isPrime (candidate) */ ) { System.out.print (\", \" + candidate); } } System.out.println (); // to end output } } 130 public static void printPrimes ( int limit) { // Prints all prime numbers from 2 up to the given limit // limit >= 2 System.out.print (\"2\"); for ( int candidate = 3; candidate <= limit; candidate++) { // Determine if candidate is prime // Count factors! 2: prime, >2 not prime int count = 0; for ( int j = 1; j<=candidate; j++ ) { if (candidate % j == 0) { count++; } } if (count == 2) { System.out.print (\", \" + candidate); } } System.out.println (); // to end output } 132 2. 8. 4 I n p u t We r t e z ur Sc h l e i f e n Ko n t r o l l e § In t e r e s s a n t e s Bei s p i el ei n es unbe s t i m m t e n L o o ps § Ka n d i d a t fü r wh i l e - Sc h l e i f e § We r t wi r d ni c h t ( nur ) zu r Ber ec h n u n g ve r w e n d e t so n d e r n ko n t r o l l i e r t au c h de n L o o p ( d. h. di e Te r m i n i e r u n g ) § We r t is t ( zu s ä t z l i c h ) Hi n w e i s 134 § Hi n w e i s z e i c h e n (S e n t i n e l ) (« s e n t i n e l » ): E i n W e r t d e r d a s En d e ei n e Re i h e an z e i g t § se n t in e l lo o p : Sc h l e i f e de r e n Ru m p f aus g e f ühr t wi r d bi s ei n Se n t i n e l ge s e h e n wu r d e § Bei s p i el : Ei n Pr o gr a m m so l l Za h le n ei n l es en bi s de r Ben u t z er ei n e 0 ei n g i b t ; da nn so l l di e Su m m e al l e r ei n g eg eb en en Za h le n au sg e g e b e n we r d e n . § (I n di e s e m Be is p ie l is t 0 d a s Hi n w e i s z e i c h e n /d e r Se n t i n e l . ) We r t e die Hi n w ei se si n d … 135 § Bei s p i el : Ei n Pr o gr a m m so l l Za h le n ei n l es en bi s de r Ben u t z er ei n e 0 ei n g i b t ; da nn so l l di e Su m m e al l e r ei n g eg eb en en Za h le n au sg e g e b e n we r d e n . § (I n di e s e m Be is p ie l is t 0 d a s Hi n w e i s z e i c h e n /d e r Se n t i n e l ) Enter a number (0 to quit): 10 Enter a number (0 to quit): 20 Enter a number (0 to quit): 30 Enter a number (0 to quit): 0 The sum is 60 We r t e die Hi n w ei se si n d … 136 Fe h l e r h a f t e Lö sung § Wa s is t an di e s e m Pr o gr a m m sc h l e c h t ? Scanner console = new Scanner( System.in ); int sum = 0; int number = 1; // \"dummy value\", anything but 0 while (number != 0) { System.out.print (\"Enter a number (0 to quit): \"); number = console.nextInt (); sum = sum + number; } System.out.println (\"The total is \" + sum); 137 Ei n an d e r e s Hi n w ei s z ei c h en … § Än d e r n Si e d as Pr o gr a m m so da s s - 1 d e r S e n t i n e l is t . Scanner console = new Scanner( System.in ); int sum = 0; int number = 1; // \"dummy value\", anything but 0 while (number != - 1) { System.out.print (\"Enter a number (0 to quit): \"); number = console.nextInt (); sum = sum + number; } System.out.println (\"The total is \" + sum); 138 Ei n an d e r e s Hi n w ei s z ei c h en … § Än d e r n Si e d as Pr o gr a m m so da s s - 1 d e r S e n t i n e l is t . § Ex am pl e l o g o f e x e c ut i o n: Enter a number ( - 1 to quit): 15 Enter a number ( - 1 to quit): 25 Enter a number ( - 1 to quit): 10 Enter a number ( - 1 to quit): 30 Enter a number ( - 1 to quit): - 1 The total is 79 139 Ei n an d e r e s Hi n w ei s z ei c h en … § Se tz e n Si e de n S e n t i ne l a uf - 1: Scanner console = new Scanner( System.in ); int sum = 0; int number = 1; // \"dummy value\", anything but - 1 while (number != - 1 ) { System.out.print (\"Enter a number ( - 1 to quit): \"); number = console.nextInt (); sum = sum + number; } System.out.println (\"The total is \" + sum); § Je tz t is t da s R e s ul t fa l s c h . Wa r u m ? The total is 79 140 Fe h l e r h a f t e Lö sung – 0 à - 1 § Wa s is t an di e s e m Pr o gr a m m fa l s c h ? Scanner console = new Scanner( System.in ); int sum = 0; int number = 1; // \"dummy value\", anything but 0 while (number != 0) { System.out.print (\"Enter a number ( 0 to quit): \"); number = console.nextInt (); sum = sum + number; } System.out.println (\"The total is \" + sum); § Wa s is t an di e s e m Pr o gr a m m fa l s c h ? Scanner console = new Scanner( System.in ); int sum = 0; int number = 1; // \"dummy value\", anything but - 1 while (number != - 1 ) { System.out.print (\"Enter a number ( - 1 to quit): \"); number = console.nextInt (); sum = sum + number; } System.out.println (\"The total is \" + sum); 141 Da s P r o b l e m mi t die s e m Pr o g r am m § Uns e r Pr o gr a m m fo l g t di e s e m Mu s t e r : su m m e = 0 wh i l e ( i n p u t is t ni c h t de r s e n t i ne l ) { dr uc k e pr o m p t ; l e s e i nput ad d i er e in p u t zu su m m e } § Bei m le t z t e n Du r c h l a u f dur c h de n Rum p f wi r d de r S e n t i ne l - 1 zu r Su m m e ad d i e r t : 143 Da s P r o b l e m mi t die s e m Pr o g r am m § Bei m le t z t e n Du r c h l a u f dur c h de n Rum p f wi r d de r S e n t i ne l - 1 zu r Su m m e ad d i e r t : dr uc k e pr o m p t ; l e s e i nput ( - 1) ad d i er e in p u t ( - 1) zu su m m e § Bei s p i el in k o r r e k t e r Te r m i n i e r u n g (of f - by - on e e r r or , Za u n p f a h lp r o b le m ): § Mü s s e n N Za h l e n le s e n abe r nur di e er s t en N - 1 addi e r e n . 144 Lö sung su m m e = 0 dr u c k e pr o m p t ; l e s e i n pu t // se t z e n ei n es pf o s t e n s wh i l e ( i n p u t is t ni c h t de r s e n t i n e l ) { addi e r e in p u t zu su m m e // i ns t a l l a t i on qu e r s t r e be dr u c k e pr o m p t ; l e s e i n pu t // se t z e n ei n es pf o s t e n s } § Sc h l e i f e n mi t ei n em Se n ti n e l fo l g e n of t di e s e m Mu s t e r . 145 Be i s p i e l mi t Se n t i n e l Scanner console = new Scanner( System.in ); int sum = 0; // pull one prompt/read (\"post\") out of the loop System.out.print (\"Enter a number ( - 1 to quit): \"); int number = console.nextInt (); while (number != - 1) { sum = sum + number; // moved to top of loop System.out.print (\"Enter a number ( - 1 to quit): \"); number = console.nextInt (); } System.out.println (\"The total is \" + sum); 147 do - while - Sc h l e i f e § do - wh i l e - Sc h l e i f e : Fü h r t te s t am Ende de s Sc h l e i f e n r u m p f e s aus um zu en t s c h ei d en , ob ei n we i t e r e r Dur c hl auf nö t i g is t § St e l l t si c h e r das s de r Ru m p f { … } mi n d e s t e n s ei n m a l aus g e f ühr t wi r d . do { st a t e m e nt ( s ) ; } while ( te s t ); // naechste Anweisung An w e i s u n g ( e n ) im Lo o p au s f ü h re n Is t te s t wa h r ? An w e i s u n g na c h Lo o p au s f ü h re n ja ne i n 149 do - while - Sc h l e i f e § Bei s p i el : // Example: prompt until correct PIN is typed int input; do { System.out.print (\"Type your PIN: \"); input = console.nextInt (); } while (input != userPinCode ); An w e i s u n g ( e n ) im Lo o p au s f ü h re n Is t te s t wa h r ? An w e i s u n g na c h Lo o p au s f ü h re n ja ne i n 150 Üb e r s i c h t § 2. 8 Noc h m a l s Sc h l e i f e n § 2. 8. 1 Ku r z f o r m e n ( fü r Ak tu a l i s i e r u n g ) § 2. 8. 2 Ku r z f o r m e n und be di ng t e (« s h o rt - ci r cu i t » ) Au s f ü h r u n g § 2. 8. 3 Te r m i n i e r u n g vo n Sc h l e i f e n § 2. 8. 4 I n p u t We r t e zu r Sc h l e i f e n k o n t r o l l e § 2. 8. 5 In v a r i a n t e n 151 if/else , return Be i s p i e l Lö sung en Sc h r e i b e n Si e ei n e Me t h o d e quadrant di e für ei n Pa a r vo n re e l l e n Za h le n de n Qu a d r a n t e n lie f e r t in de m di e s e r Punk t lie g t . § Be is p ie l : quadrant( - 4.2, 17.3) lie f e r t 2 § Fä l l t de r Pu n k t auf ei n e de r Ac h s e n de s Ko o r d i n a te n s y s te m s lie f e r e 0 . 152 x+ x - y+ y - qu a dr a n t 1 qu a dr a n t 2 qu a dr a n t 3 qu a dr a n t 4 if/else , return Be i s p i e l l ö s u n g public static int quadrant(double x, double y) { if (x > 0 && y > 0) { return 1; } else if (x < 0 && y > 0) { return 2; } else if (x < 0 && y < 0) { return 3; } else if (x > 0 && y < 0) { return 4; } else { // at least one coordinate equals 0 return 0; } } 153 if/else , return Be i s p i e l l ö s u n g public static int quadrant(double x, double y) { if (x > 0.0 && y > 0.0) { return 1; } else if (x < 0.0 && y > 0.0) { return 2; } else if (x < 0.0 && y < 0.0) { return 3; } else if (x > 0.0 && y < 0.0) { return 4; } else { // at least one coordinate equals 0 return 0; } } 154 public static int quadrant (double x, double y) { if (x>0 && y>0) { return(1); } else if (x<0 && y>0) { return(2); } else if (x<0 && y<0) { return(3); } else if (x>0 && y<0) { return(4); } else { //if Koordinate is on an axis return(0); } } ✓ 155156 ✓ 157 ✓ public static int quadrant(double x, double y) { int q=0; if (x==0 || y==0) { q=0; } else if (x>0 && y>0) { q=1; } else if (x<0 && y>0) { q=2; } else if (x<0 && y<0) { q=3; } else if(x>0 && y<0) { q=4; } return q; } ✓ 158 { u n d } ko s t e n nic h t vi e l for (int i = 0; i < 10; i ++) System.out.print (a[ i ] + \" \"); Ab e r wi r wo l l e n au c h di e Za h l e n su m m i e r e n for (int i = 0; i < 10; i ++) System.out.print (a[ i ] + \" \"); sum += a[ i ]; System.out.println (sum); Ou t p u t : 0 1 2 3 4 5 6 7 8 9 Co m p i l e r e r r o r : V a r i a b l e i ni c h t de f i ni e r t 159 { u n d } ko s t e n nic h t vi e l Sc h ön we n n es ei n en Co m p i l e r Fe h l e r gib t … ni c h t im m e r ha be n wi r so v i e l Gl ü c k int i ; for ( i = 0; i < 10; i ++) System.out.print (a[ i ] + \" \"); sum += a[ i ]; System.out.println (sum); Mi t Gl ü c k ei n Lauf z e i t f e hl e r ( we n n Va r i a b l e i ≥ a.length ) So ns t : vi e l Spas s be i Fe h l e rs u c h e 160 Fe h l e n d e { u n d } ko s t e n ( ev t l ) vi e l Ze i t § Au c h Sc h l e i f e n r u m p f od e r Ve r z w e i g u n g mi t 1 An w e i s u n g : im m e r { u n d } ve r w e n d e n for ( int i =0; i <10; i ++) { System.out.print (a[ i ] + \" \"); } 161 ? Op er a t o r § De r ? Op e r a t o r er l a u b t Au s w a h l zw i s c h e n 2 Al t e r n a t i v e n bo o l e a n_ e x pr e s s i o n ? ex p re s s i o n 1 : ex p re s s i o n 2 § We n n bo o l e a n_ e x pr e s s i o n «t ru e » er g i b t wi r d ex p re s s i o n 1 ev a l u i e rt , so n s t wi r d ex p re s s i o n 2 ev a l u i e rt § Bei s p i el int j = k < 0 ? - 1 : 1; // k int 162 int quadrant (double x, double y){ if (x==0||y==0) { return 0; } else { return ((y<0)?3:1)+((x<0)^(y<0)?1:0); } } 163 (c a r e t ) b i t w i s e ex c l u s i v e O R int quadrant (double x, double y){ if (x==0||y==0) { return 0; } else { return ((y<0)?3:1)+((x<0)^(y<0)?1:0); } } 164 (c a r e t ) b i t w i s e ex c l u s i v e O R Th e o p e r a t o r s & , ^ , a n d | a r e b i t w i s e op e r a t or s w h e n t h e op e r a n d s a r e p r i m i t i v e int e g r a l t y p e s . T h e y a r e no n - sh o r t - ci r cu i t lo g ic a l bo o l e a n op e r a t or s wh e n t h e op e r a n d s a r e bo o l e a n , a n d th e ir be ha v i o r in t h e la t t e r c a s e is s p e c if ie d . S e e t h e se c t i o n 1 5 . 2 2 . 2 o f t h e J a v a L a n g u a g e Sp e c i f i c a t i o n f o r d e t a i l s . boolean boolean ✓ Als o … § Vi e l e L ö s u n g e n m i t k l e i n e n F e h l e r n § Co m p i l e r f i n d e t e i n i g e : f e h l e n d e return , f a ls c h e r T yp d e s Rü c k g a b e w e r t e s , f e h l e n d e s ; § Da h e r v e r w e n d e n w i r C o m p i l e r i n P r ü f u n g § Te s t u m g e b u n g f ä n d e w e i t e r e : M e t h o d e n d e k l a r a t i o n m i t f a l s c h e m Rü c k g a b e ty p , f a l s c h e P a r a m e t e r d e k l a r a ti on § Le r ne n w i r i m V e r l a uf de r V o r l e s ung k e nne n § Fa l s c h e r M e t h o d e n n a m e n – ke i n T e st f u n k t i o n i e r t ( i n P r ü f u n g ) § Lo g i s c h e F eh l er m ü s s en Si e el i m i n i er en ! § Au f g a b e n g e n a u l e s e n (a u c h w e n n la n g) § Dann i s t auc h I hr e L ö s ung k o r r e k t 165 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 2. 8 No c h ma l s Sch l e i f e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 Üb e r s i c h t § 2. 8 Noc h m a l s Sc h l e i f e n § 2. 8. 1 Ku r z f o r m e n ( fü r Ak tu a l i s i e r u n g ) § 2. 8. 2 Ku r z f o r m e n und be di ng t e (« s h o rt - ci r cu i t » ) Au s f ü h r u n g § 2. 8. 3 Te r m i n i e r u n g vo n Sc h l e i f e n § 2. 8. 4 I n p u t We r t e zu r Sc h l e i f e n k o n t r o l l e § 2. 8. 5 In v a r i a n t e n 2 2. 8. 5 I n v a ri a n t e n 3 Sc h l e i f e n § Fo ku s a u f w h i l e - Lo o p § Al l g e m e i n e r a l s fo r - Lo o p § Zu sä t z l i c h : K e i n e n i c h t - lo k a le n K o n t r o llt r a n s f e r s § Al s o oh n e break und continue § Kö n n te n S i e b e r e i t s k e n n e n § Ko n t r o l l t r a n s f e r : nac h de r Au s f ü h r u n g de r An w e i s u n g A is t di e näc hs t e aus g e f ühr t e An w e i s u n g X ni c h t di e An w e i s u n g B, d i e im Pr og r a m m t e x t di r e k t auf A fo l g t . 45 Be i s p i e l ( in f o r m e ll ) Wa s is t di e Gr undi de e ? Se h e n wi r uns ei n en L o o p a n : ( int Va r i a b l e , ke i n Ov e r f l ow / U n d e r f l ow ) 6 // y = 0; i = 0; // // while ( i != x) { // i = i+1; // y = y+i ; // } // // Be i s p i e l ( in f o r m e ll ) Wa s is t di e Gr undi de e ? Se h e n wi r uns ei n en L o o p a n : 8 // x >= 0 y = 0; i = 0; // // while ( i != x) { // i = i+1; // y = y+i ; // } // // y == sum(1,x) 9 Be i s p i e l ( i n f o r m e l l ) § Mü s s e n d e n L o o p z u s a m m e n f a s s e n ( u m A u s s a g e a m E n d e de s Pr o gr a m m s z u un t e r s uc he n) § In v a r ia n t e : Z u s a m m e n f a s s u n g d e s L o o p B o d y § De c k t ab ke i n e It e r a t i o n ( v o r 1 . A u s fü h r u n g , k e i n e A u s fü h r u n g d e s Lo o p B o d y ) § De c k t ab k It e r a t i o n e n 13 // x >= 0 y = 0; i = 0; // x >= 0 ∧ y == 0 ∧ i == 0 // invariant: y == sum(1,i) while ( i != x) { // y == sum(1,i) ∧ i != x i = i+1; // y == sum(1,i - 1) y = y+i ; // y == sum(1,i - 1)+ i } // i == x ∧ y == sum(1,i) // y == sum(1,x) 1415 // x >= 0 y = 0; i = 0; // x >= 0 ∧ y == 0 ∧ i == 0 // invariant: y == sum(1,i) while ( i != x) { // y == sum(1,i) ∧ i != x i new = i+1; // y == sum(1,i new - 1) y new = y+i new ; // y new == sum(1,i new - 1)+ i new i = i new y = y new ; } // i == x ∧ y == sum(1,i) // y == sum(1,x) 17 Be o b a c h t u n g e n § Um Au s s a g e n übe r di e Au s f ü h r u n g de s L o o p s zu ma c h en br a uc he n wi r ei n e In v a r ia n t e § De r Ru m p f de r Sc h l e i f e kö n n t e be l i e bi g of t aus g e f ühr t we r d e n § Di e P r e c o n d i t i o n für di e Sc h l e i f e mu s s d i e In v a r ia n t e im p liz ie r e n § Pr e c on d i ti on m u s s st ä r k e r al s ( od e r gl e i ch st a r k wi e ) d i e In v a r i a n t e se i n 19 § In v a r ia n t e und de r Sc h l e i f e n Te s t ( we n n er wa h r is t ) mü s s en st a r k ge n u g s e i n u m zu ze i g e n , da s s di e P o s t c o ndi t i o n de s Rum p f s au ch di e In v a r ia n t e im p liz ie r t § In v a r ia n t e und de r Sc h l e i f e n Te s t ( we n n er fa l s c h is t ) mü s s en st a r k ge n u g s e i n u m d i e P o s t c o n d i t i o n d e r Sc h l e i f e zu ze i g e n . § In v a r i a n t e ha t / ve r b i n d e t zw e i As p e k t e : ko m m e n de m ge w ü n s c ht e n Er g e bni s sc h r i t t w e i se nähe r und ei n e Va r i a b l e d i e i n je d e m Sc h r i t t ve r ä n d e r t wi r d ve r b i n d e t Sc h l e i f e n Te s t u n d par t i e l l e s Er g e bni s . 20 // x >= 0 y = 0; i = 0; // x >= 0 ∧ y == 0 ∧ i == 0 // invariant: y == sum(1,i) ∧ i < x+1 while ( i != x) { // y == sum(1,i) ∧ i < x+1 ∧ i != x i new = i+1; // y == sum(1,i new - 1) y new = y+i new ; // y new == sum(1,i new - 1)+ i new i = i new y = y new ; } // i == x ∧ y == sum(1,i) ∧ i < x+1 // y == sum(1,x) 21 Ho a r e Lo g ik § Ge g e be n se i ei n Tr i p e l für ei n en wh i l e - lo o p {P} while(B) S; {Q} Ei n so l c h e s Tr i p e l is t gül t i g we n n es ei n e In v a r ia n t e I gi b t so da s s : § P ⇒ I In v a r ia n t e gi l t zu Beg i n n § {I ∧ B} S {I} Na c h Au s f ü h r e n de s Rum p f e s gi l t di e In v a r ia n t e wi ed er § (I ∧ !B) ⇒ Q In v a r ia n t e (u n d Ve r l a s s e n de r Sc h l e i f e , d. h te s t B is t fa l s e ) im p liz ie r t Po s t c o n d i t i o n Q. 2223 § Fü r ei n gül t i g e s Ho ar e Tr i p e l ei n er Sc h l e i f e {P} while(B) S; {Q} si n d Sc h l e i f e n t e s t B , Sc h l e i f e n r u m p f S und di e Sc h l e i f e n - in v a r ia n t e I au f e i n an d e r ab g e s ti m m t § S ka n n ei n e Fo l g e vo n An w e i s u n g e n se i n ( auc h ge s c h a c ht e l t e Lo o p s ) § Fü r ei n e Po s t c o n d i t i o n Q gi b t es (o f t , ma n c h ma l ) ve r s c h i e d e n e Sc h l e i f e n , d ie fü r di e P r e c o ndi t i o n P das se l b e Re s u l t be r e c hne n § Di e s e Sc h l e i f e n habe n dann ande r e In v a r i a n t e n und S t a t e m e n t s im Ru m p f § De f i n i t i o n al l g e m e i n ge n u g , de c k t au c h de n F a l l a b da s s de r Rum p f ke i n m a l dur c hl a uf e n wi r d 24 Be i s p i e l , ge n a u e r 25 {pre: x >= 0} y = 0; i = 0; while( i != x) { i = i+1; y = y+i ; } {P} while (B) S; {Q} § P ⇒ I In va r i a n te gi l t zu Be g i n n § {I ∧ B} S {I} Na ch Au s f ü h r e n des Ru m p fe s gi l t di e In va r i a n te wi e d e r § (I ∧ !B) ⇒ Q In va r i a n te und V e r la s s e n der Sc h l e i f e im p liz ie r t Q. 26 {pre: x >= 0} y = 0; i = 0; {pre: x >= 0 ∧ y == 0 ∧ i == 0} { inv : y == sum(1,i)} while( i != x) { i = i+1; y = y+i ; } {post: i == x ∧ y == sum(1,i)} (also: y == sum(1,x)) {P} while (B) S; {Q} § P ⇒ I In va r i a n te gi l t zu Be g i n n § {I ∧ B} S {I} Na ch Au s f ü h r e n des Ru m p fe s gi l t di e In va r i a n te wi e d e r § (I ∧ !B) ⇒ Q In va r i a n te und V e r la s s e n der Sc h l e i f e im p liz ie r t Q. 27 Ei n an d e r e r Lo o p ( fü r da s sel b e P r o ble m ) Ei n an d e r e r L o o p h a t ei n e an d e r e In v a r ia n t e 29 {pre: x >= 0} y = 0; i = 1 ; {pre: x >= 0 ∧ y==0 ∧ i == 1 } { inv : y == sum(1,i - 1 )} while( i != x +1 ) { y = y+i ; i = i+1; } {post: i =x +1 ∧ y == sum(1,i - 1 )} (also: y == sum(1,x)) 30 In v a r ia n t e n he lf e n Bu g s zu fi n d en Di e se r Lo o p is t äh n l i c h ab e r ma c h t ni c h t wa s wi r wo l l e n : 31 {pre: x >= 0} y = 0; i = 1; {pre: x >= 0 ∧ y==0 ∧ i ==1} { inv : y == sum(1,i - 1)} while( i != x) { y = y+i ; i = i+1; } {post: i ==x ∧ y == sum(1,i - 1)} (also: y == sum(1,x)) 32 Meh r Bu g s § Di e se r Lo o p en t h ä l t ei n ungül t i g e s Ho ar e T r i p l e 33 {pre: x >= 0} y = 0; i = 0; {pre: x >= 0 ∧ y==0 ∧ i ==0} { inv : y == sum(1,i)} while( i != x) { y = y+i ; i = i+1; // Invariante gilt nicht – warum ? } {post: i ==x ∧ y == sum(1,i)} In v a r ia n t e n …. § … dür f e n we d e r zu st a r k no c h zu sc h w a c h se in § We n n di e In v a r i a n t e zu st a r k is t , d an n is t sie ev t l . f a l s e § D. h . wi r kö n n e n ni c h t ze i g e n , da s s si e zu Be g i n n gü l t i g is t , od e r § Di e In v a r i a n t e is t ni c h t wa h r na c hde m de r Rum p f au s g e f ü h r t wu r d e § We n n di e In v a r i a n t e zu s c h w ac h is t § Dan n ka n n di e Po s t c o n d i t i o n na c h de m Ve r l a s s e n de s L o o p s ev t l . ni c h t di e Po s t c o n d i t i o n de r Sc hl e i f e im p liz ie r e n § Un d / od e r es is t unm ö g l i c h zu ze i g e n da s s di e In v a r i a n t e na c h de r Au s f ü h r u n g de s Rum p f e s ( wi e d e r ) g i l t 35 In v a r i a n t e n … n i c h t zu s t a r k u n d n i c h t zu sc h w ac h § Da s is t de r Gr und wa r u m es ke i n e n vo l l a u t o m at i s c h e n We g gi b t , ei n e Lo o p In v a r ia n t e zu ko n s t r u i e r e n § Pr og r a m m i e r e n ei n e kr e a t i v e Tä t i g k e i t § Fi n d e n de r In v a r i a n t e erf o r d ert na c hd e nk e n ( od e r ma n c h ma l « ra t e n ») § Of t zu s a m m e n mi t de m Sc h r e i b e n de s Pr og r a m m s § We n n es ke i n e n Be w e is gi b t , dann mu s s en t w ed er de r C o de , di e In v a r i a n t e , od e r be i de s ge ä n d e r t we r d e n . § Ma n c h m a l gi b t es ve r s c h i e d e n e In v a r ia n t e n , d i e al l e ge n ü ge n ( d. h . si n d we d e r zu st a r k no c h zu sc h w ac h ), ab e r un t e r s c hi e dl i c h zw e c k m ä s s i g si n d 36 Ei n e Me t h od ol og i e § Hi e r is t ei n An s a t z wi e wi r Sc h l e i f e und In v a r ia n t e n en t wi c k el n kö n n e n § Ke i n vo l l s t ä n d i g e s Re z e p t § Ni c h t st u r zu be f o l g e n – ab e r be s s e r al s de r « sc h n e l l e » We g , er s t d en Co d e zu en t wi c k el n und da nn di e In v a r ia n t e zu su c h e n . 37 § [M ] et h o d o l o g y is t h e g e n e r a l r e s e a r c h s t r a t e g y t h a t o u t lin e s th e w a y i n w h i c h r e s e ar c h i s t o b e u n d e r t ak e n an d , am o n g ot h e r t h i n g s , i d e n t i f i e s t h e m e t h od s t o b e u s e d i n i t . § [W i k i p e d i a ] § Co m p u t e r sci e n ce u sa g e , i n g e n e r a l « a n a l y si s o f t h e b o d y o f me t h o d s a n d p r i n c i p l e s a s s o c i a t e d wi t h a b r a n c h o f k n o wl e d g e » [ dt o ] 38 Ei n e Me t h od ol og i e § Hi e r is t ei n An s a t z wi e wi r Sc h l e i f e und In v a r ia n t e n en t wi c k el n kö n n e n § Ke i n vo l l s t ä n d i g e s Re z e p t § Ni c h t st u r zu be f o l g e n – ab e r be s s e r al s de r « sc h n e l l e » We g , er s t d en Co d e zu en t wi c k el n und da nn di e In v a r ia n t e zu su c h e n . 39 Ei n e Me t h od ol og i e § Hi e r is t ei n An s a t z wi e wi r Sc h l e i f e und In v a r ia n t e n en t wi c k el n kö n n e n § Ke i n vo l l s t ä n d i g e s Re z e p t § Ni c h t st u r zu be f o l g e n – ab e r be s s e r al s de r « sc h n e l l e » We g , er s t d en Co d e zu en t wi c k el n und da nn di e In v a r ia n t e zu ra t e n . 40 Ei n e Me t h od ol og i e § Vo r s c h l a g ( funk t i o ni e r t übe r r a s c he nde r w e i s e of t ): 1. Be s t im m e n Si e zu e r s t di e In v a r i a n t e und la s s e n Si e si e di e ande r e n Sc h r i t t e le it e n (! ) § Wi e br i ng t uns je d e It e r a t i o n nähe r an das Zi e l ? § Wa s m u s s nac h je d e r It e r a t i o n ge l t e n ? 2. Sc h r e i b e n Si e ei n en Ru m p f de r di e In v a r i a n t e gü l t i g lä s s t 3. Be s t im m e n Si e de n L o o p T e s t s o , das s Te s t - is t - fa l s e d i e Po s t c o n d i t i o n im p liz ie r t 4. Sc h r e i b e n Si e di e In i t i a l i s i e r u n g so das s di e s e r Co d e d i e In v a r i a n t e si c h e r st e l l t . 41 Ei n e Me t h od ol og i e § Ei n An s a t z wi e wi r Sc h l e i f e und In v a r ia n t e n en t wi c k el n kö n n e n § Ke i n vo l l s t ä n d i g e s Re z e p t § Ni c h t st u r zu be f o l g e n – ab e r be s s e r al s de r « sc h n e l l e » We g , er s t d en Co d e zu en t wi c k el n und da nn di e In v a r ia n t e zu su c h e n . 42 Be i s p i e l Wi r su c h e n für po s i t i v e x und y de n Qu o t i e n t e n q , a l s o q==x/y . ( Oh n e / ( int ) O p e r a t o r , nur mi t + od e r - .) Di e Va r i a b l e n x und y habe n de n Ty p int , y ≠ 0 , u n d d a s Er g e bni s ka n n ko r r e k t in ei n er int Va r i a b l e ge s p e i c h e r t we r d e n . 1. Be s t im m e n Si e zu e r s t di e In v a r i a n t e und la s s e n Si e si e di e ande r e n Sc h r i t t e le it e n 2. Id e e : Wi e d e r h o l t y vo n x su b t r a h i e r e n – fi n d e t wi e of t y in x en t h a l t en is t § In v a r i a n t e : q sp e i c h e r t wi e of t y su b t r a h i e r t wu r d e , dann is t q * y + r == x ( r de r R e s t , mö g l i c h e r w e i s e r ≥ y , q ≥ 0 ) § An d e r e In v a r i a n t e n si n d auc h mö g l i c h … 43 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 2. Sc h r e i b e n Si e ei n en Ru m p f de r di e In v a r i a n t e gü l t i g lä s s t {inv: q* y+r == x ∧ q >= 0 } while ( ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 44 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 3. Be s t im m e n Si e d e n L o o p T e s t so , das s Te s t - is t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t 4. Wi e o f t wo l l e n wi r y su b t r a h i e r e n ? {inv: q* y+r == x ∧ q >= 0 } while ( ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 45 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 3. Be s t im m e n Si e d e n L o o p T e s t so , das s Te s t - is t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t 4. Wi e o f t wo l l e n wi r y su b t r a h i e r e n ? R e s t r ≥ 0 (d a x ≥ 0 , y > 0 ) {inv: q* y+r == x ∧ q >= 0 } while ( ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 46 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 3. Be s t im m e n Si e d e n L o o p T e s t so , das s Te s t - is t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t 4. Wi e o f t wo l l e n wi r y su b t r a h i e r e n ? R e s t r ≥ 0 (d a x ≥ 0 , y > 0 ) {inv: q* y+r == x ∧ q >= 0 ∧ (r >= 0) } while ( ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 47 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 3. Be s t im m e n Si e d e n L o o p T e s t so , das s Te s t - is t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t 4. Wi e o f t wo l l e n wi r y su b t r a h i e r e n ? R e s t r ≥ 0 (d a x ≥ 0 , y > 0 ) {inv: q* y+r == x ∧ q >= 0 ∧ (r >= 0) } while ( r > y ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 48 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 3. Be s t im m e n Si e d e n L o o p T e s t so , das s Te s t - is t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t {inv: q* y+r == x ∧ q >= 0 ∧ (r >= 0) } while ( y <= r ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } {post: (q* y+r == x) ∧ (r >= 0) ∧ (r < y) } 49 Wi r su c h e n für x und y de n Qu o t i e n t e n q , a l s o q==x/y 4. Sc h r e i b e n Si e di e In i t i a l i s i e r u n g so das s di e s e r Co d e d i e In v a r i a n t e si c h e r st e l l t . r = x; q = 0; {inv: q* y+r == x ∧ q >= 0 ∧ (r >= 0) } while ( y <= r ) { // invariante gültig r = r – y; // q zählt wie oft wir y subtrahieren konnten q = q + 1; // invariante wieder gültig } 50 W a s m us s no c h ge l t e n ? § Di e In it ia lis ie r u n g ha t ei n e Pr e c o ndi t i o n: x >= 0 ∧ y > 0 {pre: x >= 0 ∧ y > 0 } r = x; q = 0; {inv: q* y+r == x ∧ q >= 0 ∧ (r >= 0) } while ( y <= r ) { r = r – y; q = q + 1; } {post: (q* y+r == x) ∧ (r >= 0) ∧ (r < y) } 51 Ko r r e k t h e i t Si e er i n n er n si c h : is t Ho ar e - Tr i p e l {P} S {Q} gül t i g da nn gi l t na c h Au s f ü h r u n g vo n S Au s s a g e Q , vo r a u s g e s e t z t da s s P da v o r ga l t § We n n wi r de n Pu n k t nac h S err ei c h en … § Wa r u m er r ei c h en wi r ni c h t de n Punk t na c h Au s f ü h r u n g vo n S ? § S ka n n ni c h t aus g e f ühr t we r d e n ( z.B . Di v i s i o n dur c h 0) § Au s f ü h r u n g vo n S br i c h t ab ( z.B . Er g e bni s ka n n ni c h t ge s p e i c h e r t we r d e n ) § S te r m i n i e r t ni c h t § … u n d vi e l e ande r e me h r 52 Ko r r e k t h e i t fü r {P} S {Q} § Bi s h er : Pa r t i e l l e Ko r r e k t h e i t ( ko r r e k t un t e r de r An n a h m e Te r m i n i e r u n g vo n S ) § Vo l l s t ä n d i g e r Ko r r e k t h e i t s b e w e i s er f o r d er t ei n en Be w ei s , da s s S te r m i n i e r t § Wi e ze i g e n wi r Te r m i n i e r u n g ei n er Sc h l e i f e ? 53 Te r m i n i e r u n g § Id e e : wi r bi l de n de n Zu s t an d ( na c h Au s f ü h r u n g ei n es Du r c h l a u f s dur c h di e Sc h l e i f e ) a u f ei n e ga n z e Za h l ≥ 0 ab so da s s di e s e Za h l dur c h je d e Au s f ü h r u n g de s Rum p f e s ve r k l e i n e r t wi r d § Wi r fi n d e n ei n en Be w e is das s de r L o o p T e s t « f al s e » er g i b t we n n di e s e Za h l zu 0 wi r d § Dam i t ze i g e n wi r Te r m i n i e r u n g : je d e Au s f ü h r u n g ve r k l e i n e r t di e Za h l , d. h . es gi b t nur en d l i c h vi e l e Sc h r i t t e , d ie d ie Za h l auf 0 br i ng e n . 54 Be i s p i e l e § Su m m i e r u n g vo n 1 .. x : Ab b i l d u n g au f (x - i ) § Am An f a n g po s i t i v ( x≥0 , i == 0 ) § Wi r d in je d e r It e r a t i o n kl e i n e r ( x un v e r ände r t , i = i+1 ) § We n n (x - i )==0 dann is t x== i und L o o p te r m i n i e r t § Qu o t i e n t - und - Re s t : Se i R == x % y Ab b i l d u n g au f (r – R) § Am An f a n g po s i t i v ( r == x, R < x ) § Wi r d in je d e r It e r a t i o n im m e r kl e i n e r ( r = r – y, y>0 ) § We n n ( r - R==0 ) dann is t r==R und dam i t y≤r , u n d L o o p te r m i n i e r t § Is t di e Ab b i l d u n g s f u n k ti on 0 vo r Be g in n de s L o o p s dann ke i n e It e r a t i o n 55 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 3. 0 Ar r a y s ( Re i h e n ) Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 56 Üb e r s i c h t Ve r w a n d t e The m e n : § 3. 0 A r r a y s § 4. 0 K l a s s e n u n d Ob j e k t e Wi c h t i g um « in t e r e s s a n t e » Pr o gr a m m e zu sc h r e i b e n : § 5. 0 In p u t / O u t p u t 57 3. 0 Re i h e n (A r r a y s) Ba s e d o n S l i d e s b y R e g e s e t a l . Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 . Al l r i g h t s r e s e r v e d . 58 Üb e r s i c h t § 3. 0 A r r a y s § 3. 1 M o t i v a t i o n § 3. 2 D e k l a r a t i o n u n d E r s t e l l e n § 3. 3 A r b e i t e n m i t A r r a y s § 3. 4 A r r a y s u n d M e t h o d e n 59 3. 1 E i n ne ue s P r o ble m Si e wo l l e n für di e Mi t g l i e d e r ei n es Sp o r tv e r e i n s ( od e r ei n er Gr uppe / T e a m / Se k ti o n ) Da t e n an al y si e r e n z.B . Gr ös s e : Dur c hs c hni t t s g r ö s s e und An z a h l de r S pi e l e r / in n e n di e übe r de m Dur c hs c hni t t lie g e n Kö n n t e so au sse h e n § In p u t un t e r s t r i c he n Anzahl Mitglieder ? 6 Groesse in cm: 165 Groesse in cm: 164 Groesse in cm: 158 Groesse in cm: 163 Groesse in cm: 169 Groesse in cm: 181 Durchschnitt in cm = 166.7 Anzahl ≥ Durchschnitt : 2 (33 %) 60 Sc h ri t t e § Je d e r We r t ( Gr ös s e ) m u s s ei n g eg eb en we r d e n um de n Dur c hs c hni t t zu be r e c hne n ( Su m m e di v i di e r t dur c h An z a h l Mi t g l i e d e r ) § Na c h de r Be r e c h n u n g de s Dur c hs c hni t t s mü s s e n wi r zä h l e n wi e v i e l e Pe r s o n e n gr ö s s e r ( gl e i ch ) al s de r Dur c hs c hni t t si n d § Ab e r d e n Dur c hs c hni t t ke n n e n wi r er s t zu m Sc h l u ss § Mü s s e n di e Me s s w e r t e bi s zu m Ende sp e i c h e r n 61 Wa s is t pr o ble m a t is c h ? § Je d e r We r t m u s s zw e i m a l ve r w e n d e t we r d e n : § Um d e n Dur c hs c hni t t zu be r e c hne n § Um d i e An z a h l Pe r s o n e n di e gr ö s s e r ( gl e i ch ) al s de r Dur c hs c hni t t si n d zu fi n d e n § Kö n n te n na t ür l i c h je d e n We r t i n ei n er Va r i a b l e sp e i c h e r n … a b e r : § Wi r wi s s e n ni c h t mi t wi e v i e l e n Pe r s o n e n wi r ar be i t e n bi s das Pr og r a m m aus g e f ühr t wi r d § Wi r wi s s e n ni c h t wi e v i e l e Va r i a b l e wi r br auc he n § Wi r br auc he n ei n en We g , me h r e r e Va r i a b l e a u f ei n m a l zu de k l ar i e r e n 62 «A rr a y s » ( Re i h e n ) § Ei n A r r a y er l a u b t uns meh r er e We r t e de s se l b e n Ty p s zu sp e i c h e r n § El e m e n t : Ei n W e r t i n ei n em Ar r a y . § In d e x : Za h l (> = 0 ) u m ei n El e m e n t ei n es Ar r a y s aus z uw ähl e n § Ba s e : D a s er s t e El e m e n t ha t de n I nde x 0 63 «A rr a y s » ( Re i h e n ) § Ei n A r r a y er l a u b t uns meh r er e We r t e de s se l b e n Ty p s zu sp e i c h e r n . § El e m e n t : Ei n W e r t i n ei n em Ar r a y . § In d e x : Za h l (> = 0 ) u m ei n El e m e n t ei n es Ar r a y s aus z uw ähl e n § Ba s e : D a s er s t e El e m e n t ha t de n I nde x 0 In d e x 0 1 2 3 4 5 6 7 8 9 We r t 12 49 - 2 26 5 17 - 6 84 72 3 Ele m e n t 0 Ele m e n t 4 Ele m e n t 9 Ei n A r r a y f ür int We r t e 64 «A rr a y s » ( Re i h e n ) § Ei n A r r a y er l a u b t uns meh r er e We r t e de s se l b e n Ty p s zu sp e i c h e r n § El e m e n t : Ei n W e r t i n ei n em Ar r a y . § In d e x : Za h l (> = 0 ) u m ei n El e m e n t ei n es Ar r a y s aus z uw ähl e n § Ba s e : D a s er s t e El e m e n t ha t de n I nde x 0 § Mü s s e n Va r i a b l e de k l a r i e r e n um a uf A r r a y zu g r e i f e n zu kö n n e n § De k l ar a t i o n in ei n er Met h o d e ( z.B . main ) 65 3. 2 D e k l a r a t i on u n d E r s t e l l e n v on A rr a y s 66 Ar r a y : De k l a r i e r e n und Er s t e l l e n Sy n t a x ty p e [] na m e = new ty p e [ le n g t h ] ; § Be is p ie l : int [] numbers = new int [10]; § De k l ar i e r t Va r i a b l e numbers und lä s s t si e auf A r r a y mi t 10 El e m e n t e n de s Ty p s int ve r w e i s e n In d e x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 numbers 68 ty p e [] name = new ty p e [ l en g t h ] § ty p e : D e r Ty p de r El e m e n t e de s A r r a y s § Ge n a u e r : § ty p e _ v a r [] nam e = new ty p e _ e l e m e n t [ le n g t h ]; § Z. Zt . mü s s e n ty p e _ v a r und ty p e _ e l e m e n t id e n t is c h se i n § Be is p ie le : § int[] numbers = new int[10]; § new : O p e r a t o r d e r A r r a y mi t Pl a t z fü r le n g t h El e m e n t er s t el l t § nam e : N a m e d e r V a ri a b l e mi t de r Zu g r i f f mö g l i c h is t Ar r a y : De k l ar i e r e n und Er s t e l l e n , Fo r t s e t z u n g ty p e [] nam e = new ty p e [ len g t h ] § le n g t h : Lä n g e le n g t h ka n n ei n be l i e bi g e r int Au s d r u c k se i n int x = 2 * 3 + 1; int[] data = new int[x % 9 + 3]; § new : O p e r a t o r d e r A r r a y mi t Pl a t z fü r le n g t h El e m e n t er s t el l t In d e x 0 1 2 3 4 5 6 7 8 9 We r t ? ? ? ? ? ? ? ? ? ? data Pl a t z für int We r t Pl a t z für int We r t Ar r a y : De k l a r i e r e n und Er s t e l l e n § new : O p e r a t o r d e r A r r a y mi t Pl a t z fü r le n g t h El e m e n t er s t el l t § Wa s für We r t e so l l e n da ( a m An f a n g ) ge s p e i c h e r t we r d e n ? § Wo l l e n ve r h i n d e r n das s ei n Pr og r a m Da t e n ei n es ande r e n lie s t § Wo l l e n be i wi e d e r h o l t e r Au s f ü h r u n g das se lb e Re s u l t a t ( oh n e In p u t … ) § Dahe r ge n a u de f i ni e r t : § Je d e s El e m e n t wi r d au f ei n en We r t de r N ul l « en t s p r i c h t » ge s e t z t § Vo r e i n s t e l l u n g (« d e f a u l t » ) Ty p e De f aul t W e r t int 0 boolean false String null Ar r a y : De k l ar i e r e n und Er s t e l l e n , Be is p ie le ty p e [] nam e = new ty p e [ len g t h ] § Lä n g e le n g t h : be l i e bi g e r int Au s d r u c k se i n mi t We r t > = 0 int x = 2 * 3 + 1; int[] data = new int[x % 9 + 3]; § Lä n g e < 0 re s u l t i e r t in La u f z e i t f e h l e r int[] bad = new int[ - 1]; In d e x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 data Ar r a y : De k l a r i e r e n ohne Er s t e l l e n Sy n t a x ty p e [] na m e ; § De k l a r i e r t ei n e Va r i a b l e ( na m e ) d i e a u f Ar r a y s mi t ty p e El e m e n t e n ve r w e i s t § Be is p ie l : int[] numbers; § Ke i n e Lä n g e nö t i g § Va r i a b l e numbers ka n n auf A r r a y mi t 10 int El e m e n t e n , a u f A r r a y mi t 7 int El e m e n t e n , a u f A r r a y mi t 42 int El e m e n t e n … ve r w e i s e n § Sp ä t e r Zu w e i s u n g nö t i g § z.B . numbers = new int[42]; «A rr a y s » ( Re i h e n ) § Ei n A r r a y er l a u b t uns meh r er e We r t e de s se l b e n Ty p s zu sp e i c h e r n § El e m e n t : Ei n W e r t i n ei n em Ar r a y . § In d e x : Za h l (> = 0 ) u m ei n El e m e n t ei n es Ar r a y s aus z uw ähl e n § Ba s e : D a s er s t e El e m e n t ha t de n I nde x 0 § Zu g r i f f au f E l e m e n t: N am e ei n er Va r i a b l e d i e a u f d e n A r r a y ve r w e i s t und I nde x Zu g r i f f au f El e m e n t e : name [ in d e x ] Se t z e n § nam e [ in d e x ] = ex p r e s s i o n ; // Modifikation § nam e : N a m e d e r V a ri a b l e u m a u f Ar r a y e l e m e n t e zu zu gr e i f e n § in d e x : int We r t ( Au s d r u c k de r int er g i b t ) § ex p r e s s i o n : Au s d r u c k de r W e r t vo m Ty p de r El e m e n t e de s Ar r a y s er g i b t int[] data = new int[10]; data[0] = 27; data[3] = - 6; in d e x 0 1 2 3 4 5 6 7 8 9 va l u e 0 0 0 0 0 0 0 0 0 0 In de x 0 1 2 3 4 5 6 7 8 9 We r t 27 0 0 - 6 0 0 0 0 0 0 data Zu g r i f f au f El e m e n t e : name [ in d e x ] Lesen § nam e [ in d e x ] lie f e r t We r t d e s E l e m e n t s in d e x § nam e : N a m e d e r V a ri a b l e u m a u f Ar r a y e l e m e n t e zu zu gr e i f e n § in d e x : int We r t ( Au s d r u c k de r int er g i b t ) § Ka n n übe r a l l au f tr e t e n wo ei n We r t ( d i e s e s Ty p s ) ve r w e n d e t we r d e n ka n n int j = data[0]; int k = data[3]; System.out.print ( j+k ) in d e x 0 1 2 3 4 5 6 7 8 9 va l u e 0 0 0 0 0 0 0 0 0 0 In de x 0 1 2 3 4 5 6 7 8 9 We r t 27 0 0 - 6 0 0 0 0 0 0 21 Ar r a y s fü r an d e r e Ty p e n boolean [] results = new boolean [5]; results[2] = true; results[4] = true; String[] address = new String[6]; address[3] = \" Florastrasse 6\"; In de x 0 1 2 3 4 We r t fa l s e fa l s e tr u e fa l s e tr u e In de x 0 1 2 3 4 5 We r t nul l nul l nul l \" Fl o r a s t r a s s e 6\" nul l nul l 79 Leg a le Inde x We r t e Le g a l e In d e x We r t e : zw i s c h e n 0 u n d ( Lä n g e de s A r r a y s - 1). § Ei ns c hl i e s s l i c h § Les en od e r Sc h r e i b e n ( Zu g r i f f , « a c c e s s » ) mi t ei n em In d e x aus s e r hal b di e s e s Be r e ic h s re s u l t i e r t in ei n er ArrayIndexOutOfBoundsException § «O u t - of - bo unds » Fe h l e r In de x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 10 11 12 … … - 3 - 2 - 1 80 Ou t - of - bo unds Zu g r i f f e § Ex a m p l e : int [] data = new int[10]; System.out.println(data[0]); // okay System.out.println(data[9]); // okay System.out.println(data[ - 1]); // exception System.out.println(data[10]); // exception In de x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 Ab b r u c h d e r Au s f ü h r u n g d i e s e s Pr og r a m m s data 81 Ar r a y s und Zu g r i f f e au f El e m e n t e int [] numbers = new int[8]; numbers[1] = 3; numbers[4] = 99; numbers[6] = 2; int x = numbers[1]; numbers[x ] = 42; numbers[numbers[6]] = 11; // use numbers[6] as index x In de x 0 1 2 3 4 5 6 7 We r t numbers 82 Ar r a y s und Zu g r i f f e au f El e m e n t e int [] numbers = new int[8]; numbers[1] = 3; numbers[4] = 99; numbers[6] = 2; int x = numbers[1]; numbers[x ] = 42; numbers[numbers[6]] = 11; // use numbers[6] as index xx 3 In de x 0 1 2 3 4 5 6 7 We r t In de x 0 1 2 3 4 5 6 7 We r t 0 3 11 42 99 0 2 0 In de x 0 1 2 3 4 5 6 7 We r t 0 3 0 0 99 0 2 0 In de x 0 1 2 3 4 5 6 7 We r t 0 3 0 42 99 0 2 0 numbers 83 Ar r a y s und f o r - Sc h l e i f e n § Of t wi r d au f Ar r a y e l e m e n t e in ei n er fo r - Sc h l e i f e zu g e g r i f f e n for ( int i = 0; i < 8; i ++) { System.out.print(numbers[i ] + \" \"); } System.out.println (); // output: 0 3 11 42 99 0 2 0 § Ei n e Sc h l e i f e ei g n e t si c h au c h zu r Zu w e i su n g an je d e s El e m e n t ei n es Ar r a y s . for ( int i = 0; i < 8; i ++) { numbers[i ] = 2 * i ; } In de x 0 1 2 3 4 5 6 7 We r t 0 2 4 6 8 10 12 14 numbers 84 Da s length At t r i b u t Da s length At t r i b u t ei n es Ar r a y s na m e lie f e r t di e An z a h l de r El e m e n t e na m e .length for ( int i = 0; i < numbers.length ; i ++) { System.out.print(numbers[i ] + \" \"); } // output: 0 2 4 6 8 10 12 14 85 Da s length At t r i b u t § Da s length At t r i b u t ei n es Ar r a y s na m e lie f e r t di e An z a h l de r El e m e n t e . na m e .length § Wa s für ei n Au s d r u c k er l a u b t de n Zu g r i f f au f : § Das le t z t e El e m e n t de s A r r a y s ( na m e )? § Das El e m e n t i n de r M i t t e ? Po l l 0 1 2 3 4 0 1 2 3 4 5 Mi t t e … . . In d e x In d e x 86 Da s length At t r i b u t § Da s length At t r i b u t ei n es Ar r a y s na m e lie f e r t di e An z a h l de r El e m e n t e . na m e .length § Wa s für ei n Au s d r u c k er l a u b t de n Zu g r i f f au f : § Das le t z t e El e m e n t de s A r r a y s ( na m e )? § Das El e m e n t i n de r M i t t e ? Po l l 0 1 2 3 4 0 1 2 3 4 5 Mi t t e … . . In d e x In d e x 87 Da s length At t r i b u t § Da s length At t r i b u t ei n es Ar r a y s na m e lie f e r t di e An z a h l de r El e m e n t e . na m e .length § Wa s für ei n Au s d r u c k er l a u b t de n Zu g r i f f au f : § Das le t z t e El e m e n t de s A r r a y s ( na m e )? name[name.length - 1] § Das El e m e n t i n de r M i t t e ? name[(name.length - 1)/2] 0 1 2 3 4 0 1 2 3 4 5 Mi t t e … . . In d e x In d e x 88 Po l l 8990 Ar r a y I nit ia lis ie r ung § (R i c h t i g e ) P r og r a m m e l e s e n D a t e i e n u m Ar r a y z u in it ia lis ie r e n § Wi r k ö n n e n e i n e n L o o p v e r w e n d e n … for (int i = 0; i < 8; i ++) { numbers[ i ] = 2 * i ; } § Ma n c h m a l m ü h s a m § Ja v a e r l au b t I n i ti al i si e r u n g m i t K o n s t an t e n 91 Ar r a y I nit ia lis ie r ung § ty p e [] na m e = { va l ue 1 , va l ue 2 , … . , va l ue N } § De k l a r i e r t u n d i n i t i a l si e r t A r r a y na m e mi t N E l emen t en § va l ue i : T y p m u s s m i t ty p e übe r e i ns t i m m e n int[] myIntArray = { 1, 3, 8, 4, 10, 11, 0, - 2} 92 In de x 0 1 2 3 4 5 6 7 We r t 1 3 8 4 10 11 0 - 2 myIntArray Ar r a y I nit ia lis ie r ung f ür a nde r e T y pe n § ty p e [] na m e = { va l ue 1 , va l ue 2 , … . , va l ue N } double[] myDoubleArray = {1.0, 0.0, 0.5, 0.99999999999}; boolean [] myBooleanArray = {true, true, true, false}; String[] myStringArray = {\" ein \", \" Versuch \"} 93 In de x 0 1 2 3 We r t 1. 0 0. 0 0. 5 0. 99999999999 myBooleanArray In de x 0 1 2 3 We r t tr u e tr u e tr u e fa l s e myDoubleArray myBooleanArray In de x 0 1 We r t \" ei n \" \" Ve r s u c h \" Un s er Be i s p i e l am An f a n g ( Me s s w e r t a n a l y s e ) Ei n Ar r a y hi l ft uns , d i e s e s Pr o gr a m m zu sc h r e i b e n Anzahl Mitglieder ? 6 Groesse in cm: 165 Groesse in cm: 164 Groesse in cm: 158 Groesse in cm: 163 Groesse in cm: 169 Groesse in cm: 181 Durchschnitt in cm = 166.7 Anzahl ≥ Durchschnitt : 2 (33 %) 94 Pr o gr a m m // Liest Groessen , berechnet Durchschnitt , gibt Anzahl und // Prozentsatz >= Durchschnitt aus import java.util .*; public class Analyse { public static void main(String[] args ) { Scanner input = new Scanner( System.in ); System.out.print (\" Anzahl Mitglieder ? \"); int members = input.nextInt (); int[] data = new int[members]; double sum = 0.0; for (int i = 0; i < members; i ++) { // Groesse einlesen System.out.print (\" Groesse in cm: \"); data[ i ] = input.nextInt (); sum += data[ i ]; } // Fortsetzung naechste Seite 95 Pr o gr a m m , F o rt s e t z u n g // compute results double avg = (double) sum/members; System.out.println (\" Durchschnitt in cm = \" + avg); int count = 0; for (int i = 0; i < members; i ++) { if (data[ i ] >= avg) { count++; }; } // report results System.out.println (\" Anzahl >= Durchschnitt : \" + count + \" (\" + (double)count/members*100 + \" %)\"); // Formatierung koennte besser sein … } } 96 Di s k u s s i o n § Id e a le r w e is e k ö n n e n w ir d ie s e A n w e is u n g e n in e in e r Me t h o d e o r g a n i s i e r e n § Mö c h t e n d e n A r r a y d e r Me s s w e r t e a l s P a r a m et e r ü b e r g e b e n k ö n n e n § Wi r i g n o r i e r e n F o r m a t i e r u n g d e r E r g e b n i s s e 97 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 3. 0 Ar r a y s ( Re i h e n ) Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 98 Üb e r s i c h t § 3. 0 A r r a y s § 3. 1 M o t i v a t i o n § 3. 2 D e k l a r a t i o n § 3. 3 A r b e i t e n m i t A r r a y s § 3. 4 A r r a y s u n d M e t h o d e n 99 3. 3 A rb e i t e n m i t A rr a y s 100 Ar r a y s § Ar r a y s si n d Ob j e k t e int[] myArray = new int[10]; § De r new Op e r a t o r is t ei n Hi n w e i s § Um mi t de m A r r a y zu ar b e i t e n br a uc he n wi r ei n e ne ue Ar t vo n Va r i a b l e n § Ei ne V ar i abl e di e auf de n A r r a y ve r w e i s t 101 Ar r a y s § Ar r a y s si n d Ob j e k t e int[] myArray = new int[10]; § De r new Op e r a t o r is t ei n Hi n w e i s § Um mi t de m A r r a y zu ar b e i t e n br a uc he n wi r ei n e ne ue Ar t vo n Va r i a b l e n § Ei ne V ar i abl e di e auf de n A r r a y ve r w e i s t – erl a u b t Zu g r i f f (a u f El e m e n t e , Ve r w e n d u n g al s Pa r a m e t e r , us w .) § myArray is t ei n e « Re f e r e n z v a r i a b l e » ( «r e f e r e n c e v a r i a b l e ») § Ge n a u e r « Va r i a b l e o f r e f e r e n c e t y p e » § Ni c h t ei n e «p r i m i t i v e v a r i a b l e » ( d. h. Va r i a b l e ei n es Ba s is t y p s ) 102 Ja v a V ari ab l e – Re f e r e n z t y p § Ei n e Re f e r e n z v a r i a b l e ( auc h : «r e f e r e n ce t y p e v a ri a b l e », V a ri a b l e ei n es Re f e r e n z t y p s ) er l au b t den Zu g ri f f au f ei n en Ar r a y int[] myArray ; § myArray is t ei n e Re f e r e n z v a r i a b l e ( ka n n für Ar r a y s v on int We r t e n ge b r a u c h t we r d e n ) § Ni c h t fü r ande r e Ar t e n vo n A r r a y s ( daz u sp ä t e r me h r ) § Sp e i c h e r t / lie f e r t I n f o r m a t io n d ie Zu g r i f f au f A rr a y e r la u b t § Na c h de r De k l a r a t i o n gi b t es no c h ke i n e n Ar r a y d e r Da t e n s p e ic h e r t 103 Ja v a V ari ab l e – Re f e r e n z t y p § Ei n e Re f e r e n z v a r i a b l e er l au b t den Zu g ri f f au f ei n en Ar r a y ( ei n Ob j e k t ) § En t w e de r ne u er s t el l t ( mi t De k l ar a t i o n ) int[] myArray = new int[10]; § Od e r a u f ex i s t i e r e n d e n Ar r a y ( i n De k l ar a t i o n od e r Zu w e i s u n g ) int[] yourArray = myArray ; int[] someArray ; someArray = yourArray ; 104 In de x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 myArray § Du r c h ei n e Zu w e i su n g ka n n ei n e Re f e r e n z v a r i a b l e au f ei n en an d e r e n Ar r a y ve r w e i s e n int [] a = { 4, 3, 2, 1, 0}; int [] b = { 10, 20, 30, 40}; a = b; System.out.println ( Arrays.toString (a )) //a:[ 10, 20, 30, 40] § Di e re c h t e Se i t e ei n er Zu w e i su n g zu ei n er Re f e r e n z v a r i a b l e mu s s au c h ei n e Re f e r e n z v a r i a b l e se i n . § De r Ty p de r El e m e n t e mu s s übe r e i ns t i m m e n § Di e An z a h l de r El e m e n t e mu s s ni c h t übe r e i ns t i m m e n 106 In de x 0 1 2 3 4 We r t 4 3 2 1 0 a b In de x 0 1 2 3 We r t 10 20 30 40 Zu g r i f f mi t Ja v a Re f e r e n z t y p Va r i a b l e § Ei n e Re f e r e n z v a r i a b l e (« r e f e r e n c e t y p e v a r i a b l e » ) er l au b t den Zu g ri f f au f ei n en Ar r a y int[] myArray = new int[10]; § Zu g r i f f au f d e n ge s a m t e n Ar r a y § z. B . al s Pa r a m e t e r ( da z u sp ä t e r me h r ) § System.out.println ( myArray ); // erlaubt aber macht nicht was wir wollen .... § Zu g r i f f au f El e m e n t e … 109 In de x 0 1 2 3 4 5 6 7 8 9 We r t 0 0 0 0 0 0 0 0 0 0 myArray Zu g r i f f au f El e m e n t e de s Ar r a y s … er f o r d er t [ .. ] ( mi t le g a le m In d e x ) ( we n n Ar r a y ex i s i t i e r t ) myArray [1] = 99; int b = myArray [7]; System.out.println ( myArray [1]); //99 [..] is t au c h ei n Op e r a t o r ( mi t hö c hs t e m Ra ng ) So n s t ma c h t myArray [1]+1 ke i n e n Si n n 110 Ja v a Re f e r e n z va r i a b l e in Zu w e i s u n g e n § Zu w e i su n g e n m i tt e l s de r Re f e r e n z v a r i a b l e für ei n en Ar r a y än d e r n di e El e m e n t e de s A r r a y s myArray [1] = 99; Li n k e Se i t e (v o n = ) is t ke i n e Re f e r e n z v a r i a b l e so n d e r n di e Au s w a h l ei n es El e m e n t s ( das mi t In d e x 1 ) w e l c h e s ge ä n d e r t wi r d § Zu w e i s u n g ände r t ni c h t di e Re f e r e n z v a r i a b l e myArray § Di e Re f e r e n z v a r i a b l e ve r w e i s t ( we i t e r h i n ) a u f d e n se l b e n Ar r a y § myArray [0] un v e r ände r t ( nur El e m e n t 1 ha t ande r e n We r t ) 112 Zu g r i f f mi t Ja v a Re f e r e n z t y p Va r i a b l e int[] myArray = new int[10]; myArray [1] = 99; 113 In de x 0 1 2 3 4 5 6 7 8 9 We r t 0 99 0 0 0 0 0 0 0 0 myArray Ja v a V ari ab l e – Re f e r e n z t y p § int[] myArray de k l a r i e r t ei n e Re f e r e n z v a r i a b l e ( ka n n fü r Ar r a y s v on int We r t e n ge b r a u c ht we r d e n ) § Sp e i c h e r t / lie f e r t In f o r m a t i o n d i e Zu g r i f f au f A r r a y er l a u b t § No c h gi b t es ke i n e n Be r e i ch de r Da t e n sp e i c h e r t § Er s t ei n e Zu w e i su n g ve r k n ü p f t Re f e r e n z v a r i a b l e mi t ei n em Ar r a y § En t w e de r in d e r De k l a r a t i o n int[] myArray = new int[10] ; § int[] someArray = {0, 1, 4, 9}; § Od e r i n se p a r a t e n Sc h r i t t e n § int[] myArray ; § myArray = new int[10]; 114 Ja v a V ari ab l e – Re f e r e n z t y p § int[] myArray de k l a r i e r t ei n e Re f e r e n z v a r i a b l e ( ka n n fü r Ar r a y s v on int We r t e n ge b r a u c ht we r d e n ) § Er s t ei n e Zu w e i s u n g ve r k n ü p f t Re f e r e n z v a r i a b l e mi t ei n em Ar r a y § En t w e de r in d e r De k l a r a t i o n int[] myArray = new int[10] ; § Od e r i n se p a r a t e n Sc h r i t t e n § int[] myArray ; § myArray = new int[10]; § Od e r dur c h Zu w e i s u n g ei n es ande r e n Ar r a y s § int[] newArray = myArray ; 115 Ja v a Re f e r e n z va r i a b l e § Wi r mü s s en un t e r s c he i de n zw i s c h e n § Zu g r i f f auf ei n El e m e n t ( mi t t e l s name[index] ) § Zu g r i f f auf de n A r r a y , auf de n di e Re f e r e n z v a r i a b l e ve r w e i s t § z.B . um ande r e Re f e r e n z v a r i a b l e zu se t z e n ( = name ) § Re f e r e n z v a r i a b l e is t ei n e Ku r z f o r m um zu sag e n : d i e s is t ei n e Ja v a V ar i ab l e d e s Ty p s «R e f e r e n ce a u f … . » long[] longArray ; // Ve r w e i s t au f A rr a y mi t long El e m e n t e n int[] intArray ; // Ve r w e i s t au f A rr a y mi t int El e m e n t e n 117 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 3. 0 Ar r a y s ( Re i h e n ) Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 Bo n u s Ü b u n g e n § Si e k ö n n e n ( ab d e m n äc h s t e n A u f g ab e n b l a t t) «B o n u s p u n k t e » für di e B a s i s pr üfung s a m m e l n § Bo n u s p u n k t e h e lf e n d ie N o t e a n z u h e b e n § Ma x i m a l n o t e a u c h o h n e B o n u s e r r e i c h b a r § Bo n u s er h ö h t d i e N o t e d er Ba s i s p r üfung um m a x i m a l 0 . 2 5 § 80% ( od e r m e h r ) d e r Pu n k t e f ü r B on u s a u f g a b e n e r g e b e n v ol l e n Bo n u s , d a r u n t e r pr o po r t i o na l a n g e p a s s t 2 Bo n u s Üb u n g e n § An r e i z § Nu r d i e B o n u s a u f g a b e n : r i s k a n t e S t r a t e g i e § Si e m ü sse n d i e A u f g ab e n se l b e r lö s e n . § Ab s c h r e i b e n (od e r a b s c h r e i b e n l a s s e n ) i s t u n e h r l i c h e s Ve r h a l t e n u n d w i r d n a c h d e r E T H D i s z i p l i n a r v e r o r d n u n g ge a h n d e t . 3 Se l b e r l ö s e n ! § Si e k ö n n e n m i t an d e r e n ü b e r d i e A u f g ab e n r e d e n . § Vi e l l e i ch t z e i ch n e n S i e e i n e S ki z z e a u f e i n e T a f e l , e i n B l a t t , e i n T a b l e t … § Si e en t w i c k l en ei n P r o g r a m m ( se g m e n t ) § Si e d ü r f e n k e i n e A u f z e i c h n u n g e n a u s d e m T r e f f e n m i t n e h m e n § Al l e Au f z e i c h n u n g e n w e r d e n w e g g e w or f e n . § Si e w ar t e n ( m i n d e s t e n s) 1 Stu n d e n ac h d e m T r e f f e n b e v o r Si e e tw as au f sc h r e i b e n § Sk i z z e n , E n t w ü r f e , P r o g r a m m se g m e n t e , e t c . 4 Üb e r s i c h t § 3. 0 A r r a y s § 3. 1 M o t i v a t i o n § 3. 2 D e k l a r a t i o n § 3. 3 A r b e i t e n m i t A r r a y s § 3. 4 A r r a y s u n d M e t h o d e n 5 3. 3 A rb e i t e n m i t A rr a y s 6 Ja v a V ari ab l e – Re f e r e n z t y p § Ei n e Re f e r e n z v a r i a b l e ( auc h : «r e f e r e n ce t y p e v a ri a b l e », V a ri a b l e ei n es Re f e r e n z t y p s ) er l au b t den Zu g ri f f au f ei n en Ar r a y int[] myArray ; § myArray is t ei n e Re f e r e n z v a r i a b l e ( ka n n für Ar r a y s v on int We r t e n ge b r a u c h t we r d e n ) § Ni c h t fü r ande r e Ar t e n vo n A r r a y s ( daz u sp ä t e r me h r ) § Sp e i c h e r t / lie f e r t I n f o r m a t io n d ie Zu g r i f f au f A rr a y e r la u b t § Na c h de r De k l a r a t i o n gi b t es no c h ke i n e n Pl a t z fü r di e Da t e n 7 Zu g r i f f au f El e m e n t e de s Ar r a y s … er f o r d er t [ .. ] ( mi t le g a le m In d e x ) ( we n n Ar r a y ex i s i t i e r t ) myArray [1] = 99; int b = myArray [7]; System.out.println ( myArray [1]); //99 [..] is t au c h ei n Op e r a t o r ( mi t hö c hs t e m Ra ng ) So n s t ma c h t myArray [1]+1 ke i n e n Si n n 9 Ja v a Re f e r e n z va r i a b l e § Wi r mü s s en un t e r s c he i de n zw i s c h e n § Zu g r i f f auf ei n El e m e n t ( mi t t e l s name[index] ) § Zu g r i f f auf de n A r r a y auf de n di e Re f e r e n z v a r i a b l e ve r w e i s t § z.B . um ande r e Re f e r e n z v a r i a b l e zu se t z e n ( = name ) § Re f e r e n z v a r i a b l e is t ei n e Ku r z f o r m um zu sag e n : d i e s is t ei n e Ja v a V ar i ab l e d e s Ty p s «R e f e r e n ce a u f … . » long[] longArray ; // Ve r w e i s t au f A rr a y mi t long El e m e n t e n int[] intArray ; // Ve r w e i s t au f A rr a y mi t int El e m e n t e n 11 § Du r c h ei n e Zu w e i su n g ka n n ei n e Re f e r e n z v a r i a b l e au f ei n en an d e r e n Ar r a y ve r w e i s e n int [] a = { 4, 3, 2, 1, 0}; int [] b = { 10, 20, 30, 40}; a = b; § Und we n n a ni c h t meh r au f di e s e n Ar r a y ve r w e i s e n so l l ? § Zu w e i s u n g de s be s o nde r e n We r t e s null a = null; § null he i s s t das a auf ke i n e n Ar r a y ve r w e i s t § Nu r no c h b ve r w e i s t je t zt auf de n A r r a y 12 In de x 0 1 2 3 4 We r t 4 3 2 1 0 a b In de x 0 1 2 3 We r t 10 20 30 40 null § null is t de r W e r t ei n er Re f e r e n z v a r i a b l e di e a uf ke i n e n Ar r a y ve r w e i s t . 13 int[] a = new int[10]; a[0] = 1; ✓ System.out.println(a.length); ✓ a = null; System.out.println(a.length); ✘ a[1] = 2; ✘ System.out.println(a); ✓ //null W a s pa s s ie r t m it de m Ar r a y {4 , 3 , 2 , 1 , 0}? Na c h Zu w e i s u n g vo n null ve r w e i s t ei n e Re f e r e n z v a r i a b l e auf ke i n e n Ar r a y int[] a = { 4, 3, 2, 1, 0}; int[] b = { 10, 20, 30, 40}; a = b; a = null; We n n ke i n e we i t e r e Re f e r e n z v a r i a b l e au f d e n A r r a y ve r w e i s t da nn is t de r A r r a y une r r e i c hba r § Ke i n e di r e k t e Au s w i r k u n g au f Pr o g r a m m a u s f ü h r u n g § Ka n n (u n d wi r d ) ir g e n d w a n n vo m Ja v a S y s t em en t f er n t we r d e n ( ni c h t uns e r Th e m a , ab h än g i g vo n V e r s i o n , Sp e i c h e r p l a t z , H o s t , … ) § Wi r kö n n e n uns au f d as E r s t e lle n ei n es ko r r e k t e n Pr o g r a m m s « be sc hr ä nk e n » 14 In de x 0 1 2 3 4 We r t 4 3 2 1 0 a b In de x 0 1 2 3 We r t 10 20 30 40 Re f e r e n c e S e m a n t i c s § We n n ei n e Re f e r e n z v a r i a b l e al s Op e r a n d i n ei n er Zu w e i su n g er s c h ei n t ( x=y ) da nn wi r d de r A r r a y ni c h t ko p i e r t so n d e r n be i de Va r i a b l e n be z i e he n si c h nun ( ve r w e i s e n nun) au f d e n se l b e n Ar r a y : Re f e r e n c e S e m a n t i c s ! § Va r i a b l e n x und y en t h a l t en nun ei n e Re f e r e n z (« r e f er en c e» , Ve r w e i s ) a u f d en se l b e n Ar r a y . Ve r ä n d e r u n g e n de r El e m e n t e ei n er Re f e r e n z v a r i a b l e be w i r k e n ei n e Än d e r u n g de r We r t e de r ande r e n Re f e r e n z v a r i a b l e . § Al i a s i n g : zw e i ( od e r me h r ) Re f e r e n z v a r i a b l e ve r w e i s e n auf de n se l b e n Ar r a y 15 3. 4 A rr a y s u n d Me t h od en § Ar r a y P a r a m e t e r § Ar r a y Rüc k g a be We r t e 19 Fi l t e r § Sc h r e i b e n Si e ei n Pr o gr a m m (s e g m e n t ) d a s i n ei n em Ar r a y al l e El e m e n t e < 0 a u f 0 s et z t § Zu m Be is p ie l fü r di e s e n Ar r a y : [11, - 42, - 5, 27, 0, 89] § So l l t e de r ge f i l t e r t e Ar r a y s o aus s e he n : [11, 0, 0, 27, 0, 89] § Da s Pr o gr a m m so l l t e für int Ar r a y s je d e r Gr ö s s e funk t i o ni e r e n . 20 Fi l t e r — Va r i a n t e 1 § De r A r r a y d e r El e m e n t e is t si c h t b ar , N a m e d e r Re f e r e n z v a r i a b l e numbers // filter the array numbers for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { numbers[i ] = 0; } } 21 Fi l t e r , V e rb e s s e rt e A n f o r d e ru n g e n § Sc h r e i b e n Si e ( au sg e h e n d vo n d e m Pr o gr a m m Se g m e n t d as ei n en Ar r a y fi l t e r t ) ei n e filter Me t h o d e § So l l d e n A r r a y , de s s e n We r t e zu fi l t e r n si n d , al s Pa r a m e t e r ak z e p t i e r e n . int [] numbers = {11, - 42, - 5, 27, 0, 89}; filter( the_numbers ); 22 Fi l t e r , V e rb e s s e rt e A n f o r d e ru n g e n § Sc h r e i b e n Si e ( au sg e h e n d vo n d e m Pr o gr a m m Se g m e n t d as ei n en Ar r a y fi l t e r t ) ei n e filter Me t h o d e § So l l d e n A r r a y , de s s e n We r t e zu fi l t e r n si n d , al s Pa r a m e t e r ak z e p t i e r e n . int [] numbers = {11, - 42, - 5, 27, 0, 89}; filter( the_numbers ); § Fr a g e n : 1. Wi e sc h r e i b e n wi r ei n e Met h o d e di e ei n en Ar r a y al s Pa r a m e t e r ha t ? 2. (W i e) Mü s s e n wi r de n In h a l t de s ge ä n d e r t e n Ar r a y s nac h Ve r a r b e i t u n g zu r ü c k ge b e n ? 23 Ar r a y P a r a m e t e r ( De k l a r a t i o n ) re t u rn _ t y pe m e th o dN am e ( ty p e [] na m e ) § De k l ar a t i o n ei n er Met h o d e me th o d Na me di e ei n en Ar r a y al s Pa r a m e t e r ak z e p t i e r t § … u n d da nn au c h er f o r d er t § me h r e r e Pa r a m e t e r mö g l i c h ( wi e bi s he r ), au c h ge w ö h n l i c h e ( sk a l a r e ) P a r a m e t e r § re t u rn _ t y p e : Ty p de s Rü c k g a b e w e r t e s § Di e be k a nn t e n Re g e l n ( we r d e n de m nä c hs t er w ei t er t ) § ty p e : Ty p de r El e m e n t e de s A r r a y s § na m e : N a m e d e s fo r m a l e n Pa r a m e t e r s 24 Ar r a y P a r a m e t e r ( De k l a r a t i o n ) re t u rn _ t y p e me th o d Na me ( ty p e [] na m e ) § Be i s p i e l : // Returns the average of the given array of numbers int average( int[] numbers ) { int sum = 0; for ( int i = 0; i < numbers.length ; i ++) { sum += numbers[i ]; } return sum / numbers.length ; } 25 Ar r a y P a r a m e t e r ( De k l a r a t i o n ) re tu rn _ ty p e me t h o d N a me ( ty p e [] na m e ) § In de r De k l a r a t i o n st e h t da s s ei n Ar r a y P a r a m e t e r ge b r a u c h t wi r d § Ke i n e An g a b e de r Gr ös s e § An g a b e de s Ty p s de r El e m e n t e § Ob w o h l di e Lä n g e de s A r r a y s ni c h t in d e r Pa r a m e t e r l i s t e er s c h ei n t so ka n n di e Met h o d e di e Lä n g e je d o c h he r aus f i nde n § le n g t h At t r i b u t name.length 26 Au f r u f ei n er Me t h o d e mi t Ar r a y P a r a m e t e r § Wi e g e h a b t ( A u f r u f e i n e r Me t h o d e m i t B a s i s t y p P a r a m e t e r n ) 27 Ar r a y P a r a m e t e r ( Auf r uf ) m e th o dN am e ( array N am e ); § ar r ayN am e : Na m e d e s ak tu e l l e n Pa r a m e t e r s § Bei s p i el : // figure out the average TA IQ int [] iq = {126, 84, 149, 167, 95}; int avg = average( iq ); System.out.println (\"Average IQ = \" + avg); 28 Ar r a y P a r a m e t e r ( Auf r uf ) m e th o dN am e ( array N am e ); § ar r ayN am e : Na m e d e s ak tu e l l e n Pa r a m e t e r s § Bei s p i el : // figure out the average TA IQ int [] iq = {126, 84, 149, 167, 95}; int avg = average( iq ); System.out.println (\"Average IQ = \" + avg); Ke i n e [] we n n de r Ar r a y übe r g e be n wi r d ! 29 Ar r a y Rü c kg ab e ( De k l a r a t i o n ) § Me t h o d e n kö n n e n au c h Ar r a y s zu r ü c k g e b e n re t u rn _ t y p e [] me th o d Na me ( Pa r a m e t e r L i s t e ) { re t u rn _ t y p e : Ty p de r El e m e n t e de s zu r ü c k g e g e b e n e n Ar r a y s § Wi ed er ve r w e n d e n wi r ei n return St a t e m e n t u m an z u g e b e n , w a s al s Er g e b n i s ei n er Me t h o d e zu r ü c k g e g e b e n wi r d . 30 Ar r a y Rü c kg ab e Be i s p i e l // Returns a new array with two copies of each value. // Example: [1, 4, 0, 7] - > [1, 1, 4, 4, 0, 0, 7, 7] int[] duplicateElements (int[] numbers) { int [] result = new int[2 * numbers.length ]; for ( int i = 0; i < numbers.length ; i ++) { result[2 * i ] = numbers[i ]; result[2 * i + 1] = numbers[i ]; } return result; } 31 Ar r a y Rü c kg ab e w e rt e § Di e au f r u f e n d e Me t h o d e so l l t e de n Rüc k g a be w e r t en t g eg en ne hm e n § Da f ür br auc he n wi r ei n e pas s e nde Va r i a b l e re t u rn _ t y pe [] na m e = m e th o dN am e ( p ar am e t e r s ); int[] iq = {126, 84, 149, 167, 95}; int[] iqd = duplicateElements ( iq ); 34 Fi l t e r , V e rb e s s e rt e A n f o r d e ru n g e n § Sc h r e i b e n Si e ( au sg e h e n d vo n d e m Pr o gr a m m Se g m e n t d as ei n en Ar r a y fi l t e r t ) ei n e filter Me t h o d e § So l l d e n A r r a y , de s s e n We r t e zu fi l t e r n si n d , al s Pa r a m e t e r ak z e p t i e r e n . int [] numbers = {11, - 42, - 5, 27, 0, 89}; filter( the_numbers ); § Fr a g e n : 1. Wi e sc h r e i b e n wi r ei n e Met h o d e di e ei n en Ar r a y al s Pa r a m e t e r ha t ? 2. (W i e) Mü s s e n wi r de n In h a l t de s ge ä n d e r t e n Ar r a y s nac h Ve r a r b e i t u n g zu r ü c k ge b e n ? 36 Fi l t e r – Va r i a n t e 2 § Sc h r e i b e n Si e ( au sg e h e n d vo n de m Pr o gr a m m Se g m e n t d as ei n en Ar r a y fi l t e r t ) ei n e filter Me t h o d e . § So l l d e n A r r a y , de s s e n We r t e zu fi l t e r n si n d , al s Pa r a m e t e r ak z e p t i e r e n . int [] numbers = {11, - 42, - 5, 27, 0, 89}; int [] filteredNumbers = filter(numbers); § An t w or t au f Fr a g e 1: int[] filter (int[] inputArray ) { … return resultArray ; } 37 Fi l t e r – vo l l s t ä n d i g e Va r i a n t e 2 int[] filter (int [] numbers) { int [] filtered = new int[numbers.length ]; for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { filtered[i ] = 0; } } return filtered; } 38 Fi l t e r – vo l l s t ä n d i g e Va r i a n t e 2 int[] filter (int [] numbers) { int [] filtered = new int[numbers.length ]; for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { filtered[i ] = 0; } } return filtered; } § Ve r g i s s t ( le id e r ) d i e We r t e di e > = 0 si n d ! 39 Fi l t e r – Va r i a n t e 3: Lö sung mi t Ei n s c h r ä n k u n g e n int[] filter (int[] numbers) { int [] filtered = new int [ numbers.length ]; for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { filtered[i ] = 0; } else { filtered[i ] = numbers[i ]; } } return filtered ; } 40 Di s k u s s i o n § Lö s ung ko r r e k t ( gi b t uns de n ge w ü n s c h te n Ar r a y ) § Ne h m e n wi r an d e r A r r a y h a t d i e Lä ng e 8’ 500’ 000 u n d 20 El e m e n t e < 0 § Wi e vi e l e Zu w e is u n g e n we r d e n au s g e f ü h r t ? § Wi e vi e l e da v o n si n d ab s o l u t no t w e ndi g ? § Ei n e Me t h o d e mö c h t e El e m e n t e ei n es Ar r a y s mo d i f i z i e r e n ohne di e El e m e n t e ko p i e r e n zu mü s s e n § Ei n Be i s p i e l vo n vi e l e n … 41 Ar r a y P a r a m e t e r § Wi r wo l l e n ei n er Me t h o d e er l a u b en , ei n en Ar r a y ( od e r ei n Obj e k t ) al s Pa r a m e t e r zu er h a l t en ohne da s s di e Ar r a y e l e m e n t e ko p i e r t we r d e n mü s s en § Wi r sp a r e n Ze i t . § Wi r sp a r e n Pl a tz . § Wi r kö n n e n Ve r ä n d e r u n g e n (« U p d a t es » ) di r e k t (« i n p l a c e» ) vo r n e h m e n § Da n n br a uc he n wi r ( ev t l ) au c h ke i n e n Rüc k g a be w e r t 42 W ir e r inne r n uns : R e f e r e nc e S e m a n t ic s § Re f e r e n c e S e m a n t i c s : E i n e V a r i a b l e en t h ä l t ei n e Re f e r e n z (« r e f e r e n c e » , Ve r w e i s ) a u f ei n en Ar r a y § We n n ei n e Re f e r e n z v a r i a b l e al s Op e r a n d i n ei n er Zu w e i s u n g er s c h ei n t dann wi r d de r A r r a y ni c h t ko p i e r t so n d e r n be i de Va r i a b l e n be z i e he n si c h nun ( ve r w e i s e n nun) auf de n se lb e n Ar r a y . § Ve r ä n d e r u n g e n de r El e m e n t e ei n er Re f e r e n z v a r i a b l e be w i r k e n ei n e Än d e r u n g de r We r t e de r ande r e n Re f e r e n z v a r i a b l e . 43 Üb e r g ab e e i n e s A rr a y P ar am e t e r s § Wi e e i n e Z u w e i s u n g int[] localA = new int[3]; int[] localB = localA; § // irgendwo: void method(int[] pA) { … } method(localA); § // beim Aufruf: int[] pA = localA; § Wi e g e h t d a s ? D a s S y s t e m k o p i e r t d i e I n f o r m a t i o n d i e b e s a g t , wo s i c h d e r A r r a y b e f i n d e t 44 Re f e r e n c e S e m a n t i c s § We n n wi r ei n en Ar r a y al s Pa r a m e t e r übe r g e be n ka n n di e au f g e r u f e n e Me t h o d e de n A r r a y ve r ä n d e r n und di e Ve r ä n d e r u n g e n si n d für de n Au f r u f e r si c h t b ar § Bei Va r i a b l e n ei n es Ba s i s t y p s ( int , double , boolean , … ) is t da s an d e r s 46 Fi l t e r , vo l l s t ä n d i g e Lö sung public static void filter (int [] numbers) { for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { numbers[ i ] = 0; } } } 47 Fi l t e r public static void filter ( int [] numbers) { for ( int i = 0; i < numbers.length ; i ++) { if ( numbers[i ] < 0) { numbers[i ] = 0; } } } int [] numbers = {11, - 42, - 5, 27, 0, 89}; filter(numbers); // Nach Ende von filter: numbers ist Array mit Werten // [11, 0, 0, 27, 0, 89] 48 Ar r a y al s Pa r a m e t e r § We n n ei n Ar r a y al s Pa r a m e t e r übe r g e be n wi r d , da nn wi r d de r A r r a y ni c h t ko p i e r t . D e r P a r a m e t e r ve r w e i s t au f d e n se l b e n ( ur s pr üngl i c he n ) Ar r a y . § We n n de r A r r a y mo d i f i z i e r t wi r d , dann wi r d auc h de r A r r a y , de n di e auf r uf e nde Met h o d e si e h t , ve r ä n d e r t . 50 Ar r a y P ar ame t er ve r w e n d e n Re f e r e n c e S e m a n t i c s § Wi r sag e n da s s Ar r a y P a r a m e t e r « by re f e re n c e » übe r g e be n we r d e n . § Ve r ä n d e r u n g e n in ei n er Met h o d e we r d e n vo n d e r auf r uf e nde n Met h o d e ge s e h e n . 51 Ve r w e i s e und Ar r a y s § Ar r a y s ve r w e n d e n Re f e r e n c e S e m a n t i c s . Wa r u m ? § Ef f i z i e n z . Das Ko p i e r e n gr o s s e r A r r a y s ko s t e t ( zu ) v i e l Ze i t . § Pr o g r a mms tr u k tu r . Es is t of t si n n v o l l (u n d lo g is c h ) we n n ve r s c h i e d e n e Met h o d e n mi t ei n em ( ge m e i n s a m e n ) A rr a y ar be i t e n . int [] dataSet = new int [ … ]; step1(); // mit dataSet step2(); // mit dataSet § Ob j e k t e ve r w e n d e n au c h Re f e r e n c e S e m a n t i c s 52 3. 4 A rr a y s u n d Me t h od en § Ar r a y P a r a m e t e r § Ar r a y Rüc k g a be We r t e § Ou t p u t ei n es Ar r a y s § In v a r ia n t e n – Bei s p i el mi t Ar r a y 53 Ar r a y s si nd Ob j e k t e § … ab e r vi e l e Op e r a t o r e n si n d für Ob j e k t e ni c h t de fi ni e r t § De r Ad d i ti on s op e r a t or + is t nur fü r St r i n g s de f i ni e r t String s = \"hello\"; String t = \"world\"; s = s + \" \" + t; // \"hello world\" Scanner sc = new Scanner( System.in ); Scanner ec = new Scanner( System.in ); sc = sc + ec ; // operator + cannot be applied § De r Mu l t i p l i k a t i o n s o p e r a t o r * is t auc h fü r St r i n g s ni c h t de f i ni e r t s = 2 * s ; // operator * cannot be applied § Au c h d i e mei s t en Ve r g l e i c h s o p e r a t o r e n si n d ni c h t de fi ni e r t § Und O ut put au c h ni c h t so wi e wi r es wo l l e n 54 Ar r a y s § Ma n c h m a l wü n s c h en wi r uns ( vi e l l e i c h t ) da s s ( z. B .) + de fi ni e r t is t int [] a = new int[10]; int [] b = new int[10]; a = a + b; // error if ( a >= b ) { … } // error § Ab e r J a v a un t e r s t üt z t di e s ni c h t . 56 Ve r g l e i c h e vo n A r r a y s § Le i d e r gi b t es ke i n equals für Ar r a y s § Wi e fü r St r i n g s: if (\" hello\".equals ( myString )) { … } § Ma n ka n n zw e i Ar r a y s we d e r mi t == no c h mi t equals ve r g l e i c h e n um zu pr üf e n ob si e di e se l b e n El e m e n t e habe n int [] a1 = {42, - 7, 1, 15}; int [] a2 = {42, - 7, 1, 15}; if ( a1 == a2 ) { ... } // incorrect! if ( a1.equals(a2) ) { ... } // incorrect! 57 Ar r a y s und O ut put § Au c h f ü r Ar r a y s g i b t e s e i n e D e f a u l t D a r s t e l l u n g § int[] myArray = new int[5]; § System.out.println(myArray); 58 Ar r a y s und O ut put § Au c h f ü r Ar r a y s g i b t e s e i n e D e f a u l t D a r s t e l l u n g § int[] myArray = new int[5]; § System.out.println(myArray); § Nu r l e i d e r h i l f t u n s d i e s e n i c h t w e i t e r 59 Ou t p u t I@2a139a55 Di e Kla s s e Arrays § Di e Kl a sse Arrays in d e r Bib lio t h e k java.util en t h ä l t ei n i g e Met h o d e n , d ie wi r in ei n er static Met h o d e auf r uf e n kö n n e n Me t h od n a m e De sc r i p t i o n binarySearch ( ar r ay , va l u e ) re t u r n s t h e i n d e x o f t h e g i v e n v a l u e i n a so r t ed ar r a y (or < 0 i f n ot f ou n d ) copyOf ( ar r ay , le n g t h ) re t u r n s a n e w c o p y o f a n a r r a y equals( ar r ay 1 , ar r ay 2 ) re t u r n s true if t h e t w o a r r a y s c o n t a i n s a m e e l e m e n t s in t h e s a m e o r d e r fill( ar r ay , va l u e ) set s ev er y el em en t t o t h e g i v en v a l u e sort( ar r ay ) ar r an g e s t h e e l e m e n t s i n t o s or t e d or d e r toString ( ar r ay ) re t u r n s a s t r i n g re p re s e n t i n g t h e a r r a y , s u c h a s \"[42, - 7, 1, 15]\" 60 Di e Arrays Kla s s e § Sy n t a x : Arrays. me t h o d N a me ( par am e t er s ) § me th o d Na me : Se r v i c e d e n wi r br a uc he n § par am e t e r ( s ) : E i n od e r me h r Pa r a m e t e r § Bei s p i el import java.util.Arrays ; int [] a1 = {42, - 7, 1, 15}; int [] a2 = {42, - 7, 1, 15}; if ( Arrays.equals(a1, a2) ) { ... } 61 Arrays.toString § Arrays.toString ni m m t ei n en Ar r a y al s Pa r a m e t e r u n d lie f e r t ei n en String mi t de n A r r a y El e m e n t e n int [] e = {0, 2, 4, 6, 8}; e[1] = e[3] + e[4]; System.out.println(\"e is \" + Arrays.toString(e )); Ou t p u t : e is [0, 14, 4, 6, 8] § Ei n f a c h e r We g Str i n g mi t de n We r t e n de s A r r a y s zu er h a l t en 63 3. 4 A rr a y s u n d Me t h od en § Ar r a y P a r a m e t e r § Ar r a y Rüc k g a be We r t e § Ou t p u t ei n es Ar r a y s § In v a r ia n t e n – Bei s p i el mi t Ar r a y 65 Si e er i n n er n si c h … § Me t h o d o l o g i e wi e wi r Sc h l e i f e und In v a r ia n t e n en t wi c k el n kö n n e n § Ke i n vo l l s t ä n d i g e s Re z e p t § Ni c h t st u r zu be f o l g e n – ab e r be s s e r al s de r « sc h n e l l e » We g , er s t d en Co d e zu en t wi c k el n und da nn di e In v a r ia n t e zu su c h e n . 66 Ei n e Me t h od ol og i e § Vo r s c h l a g ( funk t i o ni e r t übe r r a s c he nde r w e i s e of t ): 1. Be s t im m e n Si e zu e r s t di e In v a r i a n t e und la s s e n Si e si e di e ande r e n Sc h r i t t e le it e n (! ) § Wi e br i ng t uns je d e It e r a t i o n nähe r an das Zi e l ? § Wa s m u s s nac h je d e r It e r a t i o n ge l t e n ? 2. Sc h r e i b e n Si e ei n en Ru m p f de r di e In v a r i a n t e gü l t i g lä s s t 3. Be s t im m e n Si e de n L o o p T e s t s o , das s Te s t - is t - fa l s e d i e Po s t c o n d i t i o n im p liz ie r t 4. Sc h r e i b e n Si e di e In i t i a l i s i e r u n g so das s di e s e r Co d e d i e In v a r i a n t e si c h e r st e l l t . 67 Be i s p i e l Wi r wo l l e n da s s max de n gr ö s s t e n ( int ) W e r t en t h ä l t , d e r i n ei n em Ar r a y items au f tr i t t . ( int[] items ) 1. Be s t im m e n Si e zu e r s t di e In v a r i a n t e und la s s e n Si e si e di e ande r e n Sc h r i t t e le it e n § In v a r i a n t e : max sp e i c h e r t de n gr ö s s t e n We r t d e r El e m e n t e 0..k - 1 im Ar r a y items und items.length ≥ k ≥ 0 § Kü r z e n items.length mi t length ab § An d e r e In v a r i a n t e n si n d auc h mö g l i c h … 68 Wi r wo l l e n da s s max de n gr ö s s t e n ( int ) W e r t en t h ä l t , d e r i n ei n em Ar r a y items au f tr i t t . 2. Sc h r e i b e n Si e ei n en Ru m p f de r di e In v a r i a n t e gü l t i g lä s s t Po s t c o n d i t i o n im p liz ie r t {inv: max holds largest value in items[0..k - 1] ∧ length ≥ k ≥ 0 } while ( ) { // inv holds if (max < items[k]) { max = items[k]; // breaks invariant temporarily } else { // nothing to do } // max holds largest value in items[0..k] k = k+1; // invariant holds again } 70 Wi r wo l l e n da s s max de n gr ö s s t e n ( int ) W e r t en t h ä l t , d e r i n ei n em Ar r a y items au f tr i t t . 3. Be s t im m e n Si e L o o p T e s t so , das s Te s t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t {inv: max holds largest value in items[0..k - 1] ∧ length ≥ k ≥ 0 } while ( k != items.length ) { // inv holds if (max < items[k]) { max = items[k]; // breaks invariant temporarily } else { // nothing to do } // max holds largest value in items[0..k] k = k+1; // invariant holds again } 71 Wi r wo l l e n da s s max de n gr ö s s t e n ( int ) W e r t en t h ä l t , d e r i n ei n em Ar r a y items au f tr i t t . 3. Be s t im m e n Si e L o o p T e s t so , das s Te s t - fa l s e d i e P o s t c o n d i t i o n im p liz ie r t {inv: max holds largest value in items[0..k - 1] ∧ length ≥ k ≥ 0 } while ( k != items.length ) { // inv holds if (max < items[k]) { max = items[k]; // breaks invariant temporarily } else { // nothing to do } // max holds largest value in items[0..k] k = k+1; // invariant holds again } {post: k == items.length ∧ max largest … in items[0..k - 1] (also: max largest value in items) } 72 Wi r wo l l e n da s s max de n gr ö s s t e n ( int ) W e r t en t h ä l t , d e r i n ei n em Ar r a y items au f tr i t t . 4. Sc h r e i b e n Si e di e In i t i a l i s i e r u n g so das s di e s e r Co d e d i e In v a r i a n t e si c h e r st e l l t . k = 1; max = items[0]; {inv: max holds largest value in items[0..k - 1] ∧ length ≥ k ≥ 0 } while (k != items.length ) { // inv holds … k = k+1; // invariant holds again } 74 W a s m us s no c h ge l t e n ? § Di e In it ia lis ie r u n g ha t ei n e Pr e c o ndi t i o n: items.length > 0 { items.length > 0} k=1; max = items[0] ; {inv: max holds ... in items[0..k - 1] ∧ length ≥ k ≥ 0 } while (k != items.length ) { … } 75 P r e c o ndit io n § Es is t (j e na c h Si tu a ti o n ) ak z e p t ab e l ei n e so l c h e Pr e c o ndi t i o n zu er f o r d er n § Ab e r si e mu s s ang e g e be n se i n ! § Od e r wi r br a uc he n ei n e an d e r e Po s t c o n d i t i o n ( « i f l e n g t h i s 0 , …» ) u n d ei n If - St a t e m e n t d as di e s e n Fa l l pr üft § De r Ge w i nn für uns : Ge na ue Pr e c o ndi t i o ns ha l t e n fe s t , w a s de r C o de ( di e Me t h o d e ) vo m Kl i e n t e n er w a r t e t . § Fü r al l e le s b a r … 76 A r r a y Zu s a m m e n f a s s u n g § Re f e r e n c e S e m a n t i c s f ü r A r r a y s § Ei n e Z u w e i su n g a = b; mi t R e f er en z v a r i a b l en l ä s s t a au f de n s e l be n A r r a y w i e b ve r w e i s e n § We r t e w e r d e n ni c h t ko p i e r t § Da s se l b e g i l t w e n n e i n e R e f e r e n z v a r i a b l e a l s P a r a m e t e r übe r g e be n w i r d § Di e P ar am e t e r v ar i abl e v e r w e i s t auf de n s e l be n A r r a y und Än d e r u n g e n i n d e r M e th od e s i n d f ü r d e n Au f r u f e r s i c h tb a r 77 Zu r Er i n n e r u n g : V al u e S e man t i c s § Pa r a m e t e r ei n es Ba s i s t y p s ( int , double , … ) we r d e n mi t «v a l u e s e m a n t i cs » übe r g e be n § We r t wi r d ko p i e r t ( in it ia lis ie r t Pa r a m e t e r v a r i a b l e ) § Än d e r u n g e n de s P ar am e t e r s i n Met h o d e si n d fü r Au f r u f e r uns i c h t bar int a = 1; myMethod (a); System.out.println (a); 78 public static void myMethod ( int x) { x = 2*x; System.out.println (x); } Ou tp u t: 2 1 Re f e r e n c e S e m a n t i c s § Pa r a m e t e r ei n es Re f e r e n z t y p s ( int[] , … ) we r d e n mi t «r e f e r e n ce s e m a n t i cs » übe r g e be n § Di e Pa r a m e t e r v a r i a b l e ve r w e i s t auf de n se l b e n Ar r a y / da s s e lb e Ob j e k t § Än d e r u n g e n de s P ar am e t e r s i n Met h o d e si n d fü r Au f r u f e r si c h t b a r int [] a = {1,2}; myMethod (a); System.out.println ( Arrays.toString (a)); 80 public static void myMethod ( int [] x) { x[0] = 9; System.out.println (Arrays. toString (x)); } Ou tp u t: [9,2] [9,2] Pa r a m e t e r : Ba s i s t yp public static void main (String[] args ) { int j = 3; int k = plusOne (j); System.out.println (j); System.out.println (k); } public static int plusOne (int k) { k = k + 1; return k; } 82 Pa r a m e t e r : Ba s i s t yp public static void main (String[] args ) { int j = 3; int k = plusOne (j); System.out.println (j); System.out.println (k); } public static int plusOne (int k) { k = k + 1; return k; } 83 Ou t p u t : 3 4 Pa r a m e t e r : E l e m e n t ei n es Ba s i s t yp s public static void main (String[] args ) { int[] x = {2, 4, 6, 8}; int m = plusOne (x[0]); System.out.println ( Arrays.toString (x)); System.out.println (x); } public static int plusOne (int k) { k = k + 1; return k; } 84 Pa r a m e t e r : E l e m e n t ei n es Ba s i s t yp s public static void main (String[] args ) { int[] x = {2, 4, 6, 8}; int m = plusOne (x[0]); System.out.println ( Arrays.toString (x)); System.out.println (m); } public static int plusOne (int k) { k = k + 1; return k; } 85 Ou t p u t : [2 , 4 , 6 , 8 ] 3 Pa r a m e t e r : A r r a y public static void main (String[] args ) { int[] x = {2, 4, 6, 8}; plusOneA (x); System.out.println ( Arrays.toString (x)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 86 Pa r a m e t e r : A r r a y public static void main (String[] args ) { int[] x = {2, 4, 6, 8}; plusOneA (x); System.out.println ( Arrays.toString (x)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 87 Ou t p u t : [3 , 5 , 7 , 9 ] Pa r a m e t e r : A r r a y mi t al i as public static void main (String[] args ) { int[] a = {2, 4, 6, 8}; int[] b = a; plusOneA (a); System.out.println ( Arrays.toString (a)); System.out.println ( Arrays.toString (b)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 88 Pa r a m e t e r : A r r a y mi t al i as public static void main (String[] args ) { int[] a = {2, 4, 6, 8}; int[] b = a; plusOneA (a); System.out.println ( Arrays.toString (a)); System.out.println ( Arrays.toString (b)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 89 Ou t p u t : [3 , 5 , 7 , 9 ] [3 , 5 , 7 , 9 ] Pa r a m e t e r : A r r ay (u n d e s gi b t Ar r a y mi t gl e i ch e n El em en t en ) public static void main (String[] args ) { int[] c = {2, 4, 6, 8}; int[] d = {2, 4, 6, 8}; plusOneA (c); System.out.println ( Arrays.toString (c)); System.out.println ( Arrays.toString (d)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 90 Pa r a m e t e r : A r r ay (u n d e s gi b t Ar r a y mi t gl e i ch e n El em en t en ) public static void main (String[] args ) { int[] c = {2, 4, 6, 8}; int[] d = {2, 4, 6, 8}; plusOneA (c); System.out.println ( Arrays.toString (c)); System.out.println ( Arrays.toString (d)); } public static void plusOneA (int[] y) { for (int k=0; k< y.length ; k++) { y[k]++; } } 91 Ou t p u t : [3 , 5 , 7 , 9 ] [2 , 4 , 6 , 8 ] Pa r a m e t e r : A r r a y ( um s t ä ndlic h ) public static void main (String[] args ) { int[] f = {2, 4, 6, 8}; plusOneArrTemp (f); System.out.println ( Arrays.toString (f)); } public static void plusOneArrTemp (int[] y) { int[] t = y; for (int k=0; k< t.length ; k++) { t[k]++; } } 92 Pa r a m e t e r : A r r a y ( um s t ä ndlic h ) public static void main (String[] args ) { int[] f = {2, 4, 6, 8}; plusOneArrTemp (f); System.out.println ( Arrays.toString (f)); } public static void plusOneArrTemp (int[] y) { int[] t = y; for (int k=0; k< t.length ; k++) { t[k]++; } } 93 Ou t p u t : [3 , 5 , 7 , 9 ] Pa r a m e t e r : A r r a y ( um s t ä ndl i c h , mi t Rü c k g a b e ) public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; int[] h = plusOneMitRueck (g); System.out.println ( Arrays.toString (g)); System.out.println ( Arrays.toString (h)); } public static int[] plusOneMitRueck (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } return t; } 94 Pa r a m e t e r : A r r a y ( um s t ä ndl i c h , mi t Rü c k g a b e ) public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; int[] h = plusOneMitRueck (g); System.out.println ( Arrays.toString (g)); System.out.println ( Arrays.toString (h)); } public static int[] plusOneMitRueck (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } return t; } 95 Ou t p u t : [2 , 4 , 6 , 8 ] [3 , 5 , 7 , 9 ] Pa r a m e t e r : A r r a y – wa s wi r d au s g eg eb en ? public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; plusOhneEffekt (g); System.out.println ( Arrays.toString (g)); } public static void plusOhneEffekt (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } y = t; } 96 Po l l Ou t p u t : [? , ? , ? , ? ] Pa r a m e t e r : A r r a y – wa s wi r d au s g eg eb en ? public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; plusOhneEffekt (g); System.out.println ( Arrays.toString (g)); } public static void plusOhneEffekt (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } y = t; } 97 Po l l Ou t p u t : [2 , 4 , 6 , 8 ] Pa r a m e t e r : A r r a y – ab er oh n e W i rk u n g public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; plusOhneEffekt (g); System.out.println ( Arrays.toString (g)); } public static void plusOhneEffekt (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } y = t; } 98 Ou t p u t : [2 , 4 , 6 , 8 ] In d e x 0 1 2 3 We r t 2 4 6 8 In d e x 0 1 2 3 We r t 0 0 0 0 In d e x 0 1 2 3 We r t 3 5 7 9 Po l l Pa r a m e t e r : A r r a y – ab er oh n e W i rk u n g public static void main (String[] args ) { int[] g = {2, 4, 6, 8}; plusOhneEffekt (g); System.out.println ( Arrays.toString (g)); } public static void plusOhneEffekt (int[] y) { int[] t = new int[ y.length ]; for (int k=0; k< t.length ; k++) { t[k] = y[k]+1; } y = t; } 99 Ou t p u t : [2 , 4 , 6 , 8 ] In d e x 0 1 2 3 We r t 2 4 6 8 In d e x 0 1 2 3 We r t 3 5 7 9 Po l l 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 4. 0 Kl a s s e n und Ob j e k t e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 103 Üb e r s i c h t Ve r w a n d t e The m e n : § 3. 0 A r r a y s § 4. 0 K l a s s e n u n d Ob j e k t e Wi c h t i g um « in t e r e s s a n t e » Pr o gr a m m e zu sc h r e i b e n : § 5. 0 In p u t / O u t p u t 104 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e k t e ( al l g e m e i n ) 4. 2 Ob j e k t e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t wi c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Me t h o d e n 4. 7 Ko n s t r u k t o r e n 4. 8 Si c h tb ar k e i t vo n At t r i b u t e n 4. 9 static Me t h o d e n und V a r i a bl e 105 4. 1 K l a s s e n ( u n d O b j e k t e ) § Kl as s e n k ö n n e n i n Ja v a f ü r v e r s c h i e d e n e Z w e c k e v e r w e n d e t we r d e n 1. Im p l e m e n t a t i o n ei n es Al g or i th m u s od e r e i n e r « Ap p l i c a ti on » § Bie t e t « S e r v ic e » ( D ie n s t ) a n ( A p p lic a t io n is t e in An w e n d u n g s p r og r a m m ) – bi s he r i g e r Ei ns a t z v o n K l as s e n 2. Im p l e m e n t a t i o n v e r s c h i e d e n e r ( z u s a m m e n h ä n g e n d e r ) D i e n s t e i n ei n er J a v a B i b l i o t h ek § Be is p ie l: S c a n n e r 3. Vo n u n s e n t w i c k e l t e D i e n s t e § K e i n e s t r i k t e T r e n n u n g ( z . B . z w e i D i e n s t e d i e d u r c h P a r a m et e r au sg e w äh l t w e r d e n , v o n u n s e n tw i c k e l t e Ja v a B i b l i o th e k ) 106 Dr e i Ve r w e n d u n g e n vo n K l a s s e n § Kl as s e di e wi r s e l bs t en t wi c k el n um ei n ( ei n f a c h es ) P r ob l e m zu lö s e n § Met h o d e main wi r d aus g e f ühr t § Ev t l . mi t we i t e r e n ( public static ) Met h o d e n § Kl as s e n d i e wi r in ei n er Bi b l i o t h ek fi nde n § Z. B . Scanner , Arrays , … § Kl as s e n d i e w i r ( s p ä t e r ) s e l bs t e n t w i c k e l n § Um e i g e n e D i e n s t e z u e n t w i c k e l n § Mö g l i c h k e i t W e r t e ü b e r d a s E n d e e i n e r Met h o d e h i n a u s z u b e w a h r e n 107 Kla s s e n § Ei n e Kl as s e ( de k l a r i e r t al s class Name ) er l a u b t uns ei n en Al g or i t h m u s zu im p le m e n t ie r e n § Met h o d e main fä n g t an, ru f t gg f . ande r e Met h o d e n auf § Pa r a m e t e r : Lö s u n g / Met h o d e wi r d ang e pas s t § Rü c k g a b e w e r t : Ze r l e g u n g in Te i l p r o b l e m e § Met h o d e main lie f e r t An tw or t ( z.B . Au s g a b e auf Ko n s o l e ) § Ke y w o r d public (i n public class Name ) wi r d sp ä t e r ei n e Ro l l e sp i e l e n § Kl as s e en t h ä l t Pr o gr a m m 108 Di e n s t e vo n Kla s s e n § « Na m e n l os e r » Di e n s t § Kl a sse wi r d ge l a d e n / aus g e f ühr t § In E c l i p s e od e r vo n d e r S h e l l aus § Ru f t aut o m a t i s c h main auf § Kl a sse n n a m e is t Na me d e s Di e ns t e s /Se r vi ce § Si n n v o l l fü r Au f r u f im ID E , Be t r ie b s s y s t e m , S h e ll, … § Na me n l o s we i l Di e ns t ke i n e n ei g en en Na me n ha t § Mi t Na m e n au sg e w äh l t e r Di e n s t (i n Bi b l i o t h ek ) § Be is p ie le : nextInt () , nextString () , println () , toString () § Br a u c h e Kl a sse n n a m e n od e r Ob j e kt , mi t do t N o t a t i o n ( z. B . , console.nextInt (), Arrays.toString (...) ) 109 Ei n a n d e r e r Bl i c k § Di e n s t e B l i c k : S c a n n e r s t e l l t Di e n s t (e ) zu r V e r f ü g u n g § Br a u c h e e in S c a n n e r O b j e k t u m D ie n s t a u f z u r u f e n § Scanner console = new Scanner(System.in); § int x = console.nextInt(); § Da t e n B l i c k : F ü r S c a n n e r O b j e k t e si n d O p e r a t i o n e n de fi ni e r t , für System.out s i n d O p e r a t i o n e n d ef i n i e r t ( z . B . println(...) ) § Sc a n n e r O b j e k t u n d System.out mü s s e n b e s t i mm t e n Z u s t a n d habe n § Mü s s e n D a te n f ü r j e d e s O b j e k t s p e i c h e r n 110 Zu s t a n d p l u s O p e r a t i o n e n : T y p § Ei n ( Da t e n ) T y p b e sc h r e i b t ( b z w . b e s t i m m t ) z u l ä ssi g e Op e r a t i o n e n u n d z u l ä s s i g e W e r t e § Ba s i s t y p int : a ri t h m e t i s ch e O p e r a t o r e n , U m w a n d l u n g i n Str i n g s, k e i n e D i vi si o n d u r c h 0 § Ty p String : + Op e r a t o r , n e u e S t r i n g s d u r c h toUpperCase() § Ty p e int[] (i n t Ar r a y ): Z u g r i f f a u f E l e m e n t e , Ab f r a g e d e r Lä n g e 111 Kla s s e n be s c hr e ibe n ei n en Ty p § Ty p e n be s c hr e i be n Ei g e n sc h a f t e n vo n Da t e n § Ei n Ty p be s c hr e i b t ei n e Me n g e ( od e r Ka t e g o r i e ) v on Da t e n We r t e n . § Be s t im m t ( be s c hr änk t ) d i e Op e r a t i o n e n , d ie mi t di e s e n Da t e n ge m a c ht we r d e n kö n n e n § Bis h e r ei n i g e Be is p ie le vo n ( Da t e n ) ty p e n : S t r i n gs , A r r a y s , S c a n n e r § Ba s i s t y p en ( ga n z e Za h le n , re e l l e Za h le n , bo o l e s c he We r t e ) be s c hr e i be n Ty p oh n e Kl as s e § « Ei ng e baut », mi t « übl i c he n » Op e r a t i o n e n 112 Ob j ek t e § De r Beg r i f f « Ob j e k t » is t de r Sam m e l b e g r i f f für al l e Da t e n w e r t e , d i e dur c h ( ir g e n d ) ei n e Kl as s e be s c hr i e be n we r d e n . § Ei n S c anne r is t ei n Ob j e kt , ei n Zu f a l l s z a h l e n g e n e r a t o r is t ei n Ob j e kt , …, ei n St r i n g is t ei n Ob j e kt , ei n Ar r a y is t ei n Ob j e kt , … § We n n wi r uns au f ei n Ob j e k t be z i e he n sp r e c h e n wi r ( ma n c h ma l ) v on ei n em Ob j e k t e x a mp l a r ( ku r z : E x e m p l a r) § Be v o r ei n Pr o gr a m m mi t ei n em Ob j e k t (e x e m p l a r ) ar b e i t e n ka n n mu s s d i es es er s t er s c h a f f en (« er s t el l t », « in s t a n z ie r t ») we r d e n . 113 Ob j ek t Er s t e l l u n g § Be v o r ei n Pr o gr a m m mi t ei n em Ob j e k t ar b e i t e n ka n n mu s s di e s e s er s t er s c h a f f en we r d e n . § Da s ka n n mi t de m new Op e r a t o r ge s c h e h e n Scanner console; console = new Scanner( System.in ); Random rand; // Zufallszahlengenerator rand = new Random(); § Da s ka n n dur c h ei n e In it ia lis ie r u n g ge s c h e h e n String s =\"hello world\"; int[] myA = {1, 3, 4, 9}; 114 St ri n g s § Au c h S t r i n g s kö n n (t ) en mi t new Op e r a t o r er s t el l t we r d e n § String s = new String( \" hello world \" ); § Da s is t ab e r ni c h t emp f o h l en § Wa r u m ? Ku r z e An tw or t : we i l St r i n g s be s o nde r s ( op ti m i e r t ) be hande l t we r d e n . § La n g e An tw or t : sp ä t e r 116 Ar be it e n m it O bj e k t e n § Ei n e Re f e r e n z v a r i a b l e be z i e h t s i c h a uf e i n O bj e k t § z.B . e i n e n A r r a y § z.B . e i n e n S t r i n g § z.B . e i n e n S c a n n e r § Wi r b r a u c h e n e i n e R e f e r e n z v a r i a b l e u m m i t d e m O b j e k t ar b e i t e n z u k ö n n e n § z.B . u m e i n e M e t h o d e a u s z u f ü h r e n ( S t r i n g s , A r r a y s , … ) § z.B . u m a u f e i n E l e m e n t z u z u g r e i f e n ( [ ] O p e r a t o r f ü r A r r a y s ) § z.B . u m m i t e i n e m O p e r a t o r z u a r b e i t e n ( + f ü r S t r i n g s ) § z.B . u m O b je k t a l s P a r a m e t e r z u ü b e r g e b e n 117 4. 2 O b j e k t e a l s P a r a m e t e r § Wa s w i r f ü r A r r a y P a r a m e t e r g e l e r n t h a b e n g i l t a u c h f ü r (a n d e r e ) O b j e k t e 118 Ob j ek t e al s Pa r a m e t e r § Ob j e k t e kö n n e n an ei n e Me t h o d e al s Pa r a m e t e r übe r g e be n we r d e n § Di e übl i c he n Re g e l n ge l t e n (P a r a m e t e r m u s s de k l a r i e r t we r d e n , we n n ei n Pa r a m e t e r de k l a r i e r t is t da nn mu s s er übe r g e be n we r d e n ) § Es wi r d ei n e Re f e r e n z v a r i a b l e übe r g e be n § Re f e r e n c e S e m a n t i c s ! 119 Be i s p i e l : S c an n e r al s Pa r a m e t e r We n n me h r e r e Met h o d e n In p u t le s e n wo l l e n , de k l ar i e r e n Si e ei n en Scanner in main und übe r g e be n ih n an ande r e Met h o d e n al s Pa r a m e t e r . public static void main(String[] args ) { Scanner console = new Scanner( System.in ); int sum = readSum3(console); System.out.println (\"The sum is \" + sum); } // Prompts for 3 numbers and returns their sum. public static int readSum3(Scanner console) { System.out.print (\"Type 3 numbers: \"); int num1 = console.nextInt (); int num2 = console.nextInt (); int num3 = console.nextInt (); return num1 + num2 + num3; } 120 Random Be i s p i e l § Sc h r e i b e n Si e ei n Pr o gr a m m da s i n de r 1 . Pr i m a r s c hul k l a s s e zu m Re c h n e n ü b e n ve r w e n d e t we r d e n ka n n . 4 + 10 + 3 + 10 = 27 9 + 2 = 11 8 + 6 + 7 + 9 = 25 Wrong! The answer was 30 5 + 9 = 13 Wrong! The answer was 14 4 + 9 + 9 = 22 3 + 1 + 7 + 2 = 13 4 + 2 + 10 + 9 + 7 = 42 Wrong! The answer was 32 You earned 4 total points. § Es s o lle n Re c h n u n g e n mi t 2 - 5 Za h l e n zw i s c h e n 1 u n d 10 ge l ö s t we r d e n . § Es gi b t 1 Pu n k t fü r e in e ko r r e k t e An t w o r t , 0 fü r e in e fa l s c h e . § Da s Pr o g r a m m te r m i n i e r t na c h 3 fa l s c h e n An t w o r t e n . 121 Di e J a v a Random Kla s s e ran do m {a d j ect i v e} zu f ä l l i g wi l l k ü r l i c h [ wa h l l o s ] zu f a l l s b e d i n g t Zu f a lls - de m Zu f a ll übe r l a s s e n ( au s E - D Wö r t e r b u c h ) 122 Di e J a v a Random Kla s s e § Di e Random Kl as s e lie f e r t ei n en Zu f al l s z ah l e n g e n e r a t o r § Ps e u d o z u f a l l s z a h l e n . § Kl a sse Random is t auc h in java.util . import java.util.Random ; Me t h o d n a m e De s c r i p t i o n nextInt () re t u r n s a r a n d o m i n t e g e r nextInt ( max ) re t u r n s a r a n d o m i n t e g e r i n t h e r a n g e [ 0 , ma x ) in o t h e r w o r d s , 0 t o ma x - 1 i n c l u s i v e nextDouble () re t u r n s a r a n d o m re a l n u m b e r i n t h e r a n g e [ 0 . 0 , 1 . 0 ) 123 Di e J a v a Random Kla s s e § Be is p ie l : import java.util.Random ; Random rand = new Random(); int randomNumber = rand.nextInt (10); // 0 - 9 Me t h o d n a m e De s c r i p t i o n nextInt () re t u r n s a r a n d o m i n t e g e r nextInt ( max ) re t u r n s a r a n d o m i n t e g e r i n t h e r a n g e [ 0 , ma x ) in o t h e r w o r d s , 0 t o ma x - 1 i n c l u s i v e nextDouble () re t u r n s a r a n d o m re a l n u m b e r i n t h e r a n g e [ 0 . 0 , 1 . 0 ) 124 Er z e u g e n vo n Zu f a l l s z a h l e n § Häu f i g br a uc he n wi r ( ga n z e ) Zu f al l s z ah l e n zw i s c h e n 1 u n d N int n = rand.nextInt (20) + 1; // 1 - 20 inclusive § Um ei n e ga n z e Za h l in ir g e n d e in e m In t e r v a l [ mi n , ma x ] zu be k o m m e n ( in k lu s iv e Gr e nz e n ): na m e .nextInt ( siz e o f r a n g e ) + mi n ; // nam e Zu f a l l s z a h l e n g e n e r a t o r mi t ( siz e o f r a n g e ) = = ( ma x - mi n + 1 ) § Be is p ie l : E i n e zu f ä l l i g e ga n z e Za h l zwi s c h e n 4 u n d 10 ei n s c h l i es s l i c h : int n = rand.nextInt (7) + 4; 125 Fr ag e n zu Random Mi t di e s e r De k l a r a t i o n Random rand = new Random(); wi e wü r d en Si e er h a l t en ? 1. Ei ne zu f ä l l i g e ga n z e Za h l zwi s c h e n 1 u n d 47 ei n s c h l i es s l i c h ? int random1 = rand.nextInt (47) + 1; 2. Ei ne zu f ä l l i g e ga n z e Za h l zwi s c h e n 23 u n d 30 ei n s c h l i es s l i c h ? int random2 = rand.nextInt (8) + 23; 3. Ei ne zu f ä l l i g e ga n z e ge r ade Za h l zwi s c h e n 4 a n d 12 ei n s c h l i es s l i c h ? int random3 = rand.nextInt (5) * 2 + 4; 127 Random und an d e r e Ba s i s t yp e n § Di e Me t h o d e nextDouble lie f e r t ei n e re e l l e Za h l ( double ) zw i s c h e n 0. 0 u n d 1. 0 § Be is p ie l : ei n e zu f ä l l i g e No t e zwi s c h e n 1. 0 a n d 6. 0: double randomGrade = rand.nextDouble () * 5.0 + 1.0; § Je d e Me n g e vo n We r t e n ka n n au f d i e ga n z e n Za h le n ab g e b i l d e t we r d e n 128 Fr ag e zu Random § Sc h r e i b e n Si e ei n Pr o gr a m m um da s Ro l l e n zw e i e r Wü r f e l ( mi t je 6 S e i t e n ) zu si m u l i e r e n bi s di e Su m m e de r Wü r f e l 7 er g i b t . 2 + 4 = 6 3 + 5 = 8 5 + 6 = 11 1 + 1 = 2 4 + 3 = 7 Sie haben nach 5 Versuchen gewonnen ! 130 Lö sung // Rolls two dice until a sum of 7 is reached. import java.util .*; public class Dice { public static void main(String[] args ) { Random rand = new Random(); int tries = 0; int sum = 0; while (sum != 7) { int dice1 = rand.nextInt (6) + 1; // roll the dice once int dice2 = rand.nextInt (6) + 1; sum = dice1 + dice2; System.out.println (dice1 + \" + \" + dice2 + \" = \" + sum); tries++; } System.out.println (\" Sie haben nach \" + tries + \" Versuchen gewonnen !\"); } } 131 do/while Lö sung // Rolls two dice until a sum of 7 is reached. import java.util .*; public class Dice { public static void main(String[] args ) { Random rand = new Random(); int tries = 0; int sum; do { int dice1 = rand.nextInt (6) + 1; // one roll int dice2 = rand.nextInt (6) + 1; sum = dice1 + dice2; System.out.println (dice1 + \" + \" + dice2 + \" = \" + sum); tries++; } while (sum != 7); System.out.println (\" Sie haben nach \" + tries + \" Versuchen gewonnen !\"); } } 132 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 4. 0 Kl a s s e n und Ob j e k t e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e k t e ( al l g e m e i n ) 4. 2 Ob j e k t e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t wi c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Me t h o d e n 4. 7 Ko n s t r u k t o r e n 4. 8 Si c h tb ar k e i t vo n At t r i b u t e n 4. 9 static Me t h o d e n und V a r i a bl e 2 4. 3 K l a s s e n ( sel b er en tw i c k el n ) § Mo t i v a t i o n § Ob j e k t - or i e n t i e r t e s Pr o gr a m m i e r e n (O O P ) 13 Ar r a y s und ihr e Gr e nz e n ( fü r So f t w a r e E n t w u rf ) § Si e ha be n ei n Pr o gr a m m , d a s für ei n en Ve r e i n d i e Kö r p e r g r ö s s e (c m ) v on ve r s c h i e d e n e n Pe r s o n e n ei n l i es t . § Er s t e Ei ng abe gi b t an fü r wi e vi e l e Pe r s o n e n wi r di e Da t e n erh eb en wo l l e n § Je tz t wo l l e n wi r zu s ä t z l i c h da s Ge w i c h t (kg ) ei n l es en § So n s t is t das F o r m a t ni c h t ve r ä n d e r t § Kö n n t e so au sse h e n : 16 Anzahl Mitglieder ? 6 Groesse in cm: 165 Gewicht in kg: 52 Groesse in cm: 164 Gewicht in kg: 56 Groesse in cm: 158 … § Di e se Da t e n wo l l e n wi r an al y si e r e n , z. B . pr üf e n wi e we i t Ge w i c h t und Gr ö s s e vo n ei n a n d er ab h än g i g si n d , od e r de n Du r c h sc h n i t t be r e c hne n , … § Al s o le s e n wi r di e Da t e n ei n … 17 Ei n e ( sc h l ec h t e ) Lö sung ... Scanner input = new Scanner( System.in ); System.out.print (\" Anzahl Mitglieder ? \"); int personCount = input.nextInt (); int[] height = new int[ personCount ]; int [] weight = new int [ personCount ]; for (int i = 0; i < personCount ; i ++) { System.out.print (\" Groesse in cm: \"); // read each person height[ i ] = input.nextDouble (); System.out.print (\" Gewicht in kg: \"); weight[ i ] = input.nextDouble (); } ... 19 W a r um is t die s e Lö sung sc h l ec h t ? § Zw e i Ar r a y s d i e « p a r a l l e l » si n d § Lei c h t di e Üb e r s i c h t zu ve r l i e r e n § We n n wi r z.B . d i e Pe r s o n e n nac h ih r e r Gr ös s e so r t i e r e n wo l l e n mü s s e n wi r auf pas s e n , das s wi r de n Be z u g zwi s c h e n Höh e und Ge w i c h t ni c h t ve r l i e r e n § Wa s we n n wi r meh r al s 2 Di m e n si o n e n ha be n ? § Ad r e s s e n § Ge s c h l e c h t § … § Di e s i s t e i n Be i s p i e l ei n er h ä ufi g a uft r e t e nde n S i t ua t i o n 21 Ei n äh n l i c h e s P r o ble m § Ge g e b e n se i ei n e Da t e i mi t d e n ( X, Y ) S c h w e i z e r La nde s - ko o r d i n a t e n vo n Or t e n ; er s t er We r t gi b t di e An z a h l de r Or t e an : 4 2 679 520 1 212 273 Rigi 2 683 740 1 247 853 Zuerich (ETH HG) 2 617 036 1 091 691 Matterhorn 2 686 163 1 157 017 Gotthard (Pass) § Sc h r e ib e n Sie ei n P r o g r am m , d a s fü r ei n Ti e f d r u c k g e b i e t mi t Ze n t r u m ( X, Y ) b e s ti m m t in we l c h e n Or t e n es re g n e n wi r d Zentrum X Koordinate ? 2653891 Zentrum Y Koordinate ? 1156900 Ausdehnung Tiefdruckgebiet ? 7500 22 Scanner input = new Scanner(…); int locCount = input.nextInt (); int [] xCoords = new int [ locCount ]; int [] yCoords = new int [ locCount ]; for ( int i = 0; i < locCount ; i ++) { xCoords [ i ] = input.nextInt (); // read each location yCoords [ i ] = input.nextInt (); } ... 23 Be o b a c h t u n g e n § Di e Da t e n im 1. F a l l be s c hr e i be n ei n e Gr uppe vo n Pe r s o n e n § Si e so l l t e n al s Pe r s o n e n Ob j e kt e ge s p e i c h e r t we r d e n § Di e Da t e n im 2. F a l l be s c hr e i be n ei n e Me n g e vo n Punk t e n § in de r (X , Y ) Ebe ne ( od e r gg f . ( X , Y , Z ) Ra u m we n n wi r Höh e n i n f o habe n ) § Di e Da t e n so l l t e n be s s e r al s Pu n k t Ob j e kt e (« To p o P o i n t » Ob j e kt e ) ge s p e i c h e r t we r d e n § Di e Ob j e k t e sp e i c h e r n di e In f o r m a t io n e n für ei n en Or t / ei n e Pe r s o n 24 Be o b a c h t u n g e n § Ei n Person Ob j e k t : § Sp e i c h e r t das Ge w i c h t ei n er Pe r s o n § Sp e i c h e r t di e Gr ös s e ei n er Pe r s o n § Wi r kö n n e n Pe r s o n e n ve r g l e i c h e n § Wi r kö n n e n di e Gr ös s e (i n c m ) i n ande r e Ei nhe i t e n ( Zo l l ) um r e c hne n 25 Be o b a c h t u n g e n § Ei n TopoPoint Ob j e k t : § Sp e i c h e r t di e ( X , Y ) Ko o r d i n a te n ei n es Or t e s in S c h w e iz e r La n d es k o o r d i n a t en § Kö n n te we i t e r e We r t e sp e i c h e r n ( Höh e ü . M .) § Wi r kö n n t e n de n Ab s t a n d zu ei n em ande r e n Or t be r e c hne n ( z.B . u m zu pr üf e n ob si c h ei n Ti e f d r u c k g e b i e t übe r de m Or t be f i nde t ). § We n n wi r ei n e La n d k a rt e ze i c h n e n wo l l e n , dann wü s s t e je d e r TopoPoint wi e /w o er ge z e i c h n e t we r d e n so l l . 26 Be o b a c h t u n g e n § Pr o gr a m m e , d i e mi t Pe r s o n e n ( Punk t e n ) ar b e i t e n , kö n n t e n ei n f a c h er und kü r z e r we r d e n . § Gi b t es Un t e r s c hi e de zw i s c h e n de n be i de n Pr o bl e m e n ? 27 Kla s s e n und Ob j ek t e § Kl as s e (« c l a s s » ): E i n e Pr o gr a m m Ei n h e i t mi t de r wi r en t w ed er : 1. Ei ne n nam e nl o s e n Se r vi c e im p le m e n t ie r e n kö n n e n (vi a main(..) ) 2. Ei ne ne ue Ar t ( ne ue n Ty p ) v o n Ob j e kt e n be s c hr e i be n kö n n e n Di e K l as s e n Random und Scanner si n d Be is p ie le § Random be s c hr i e b ei n Ob j e k t , d a s Zu f a l l s z a h l e n er s t el l t ( mu s s t e mi t new er s ch a f f en we r d e n ) § Scanner be s c hr i e b ei n Ob j e k t , d a s Ei n g a b e vo n ei n er Da t e i , d e r Ko n s o l e , … er l a u b t ( mu s s t e mi t new er s ch a f f en we r d e n ) § Ob j e k t e sin d Ex e m p l ar e ei n er Kla sse mi t We r t ( en ) u n d erl a u b en Op e r a t i o n e n 28 Kla s s e n und Ob j ek t e § Kl as s e (« c l a s s » ): E i n e Pr o gr a m m Ei n h e i t mi t de r wi r en t w ed er : 1. Ei ne n nam e nl o s e n Se r vi c e im p le m e n t ie r e n kö n n e n (vi a main(..) ) 2. Ei ne ne ue Ar t ( ne ue n Ty p ) v o n Ob j e kt e n be s c hr e i be n kö n n e n Di e K l as s e n Random und Scanner si n d Be is p ie le § Ob j e k t (« ob j e c t » ): E i n Ge bi l de da s Zu s t an d (« s t a t e » ) u n d Ve r h a l t e n (« b e h a v i or » ) ve r b i n d e t § St e l l t Se r vi c e s zu r Ve r f ü g u n g ( Scanner : nextInt () ; Random : nextInt () ) 29 Kla s s e n und Ob j ek t e § Ob j e k t - or i e n t i e r t e s Pr o gr a m m i e r e n (« O O P » ): E i n Pr o gr a m m i e r m o de l da s ei n Pr o gr a m m al s ei n e Me n g e vo n au f e i n an d e r ei n wi r k en d en Ob j e k t e n or g a n i s i e r t . § Ob j e kt e « in t e r a g ie r e n » – ei n Ob j e kt ru f t Met h o d e n (Ser vi c es ) ei n es ande r e n Ob j e kt e s auf , di e dann We r t e zu r ü c k l i e f e r n § und/ od e r st e l l t Met h o d e n (Ser vi c es ) zu r Ve r f ü g u n g di e se i n e n Zu s t a n d ve r ä n d e r n ( kö n n e n ) u n d / od e r We r t e zu r ü c k l i e f e r n § Se h r al l g e m e i n – de c k t Str i n g s u n d Sc an n e r ab 31 Kla s s e n und Ob j ek t e§ Kl as s e (« c l a s s » ): E i n e Pr o gr a m m Ei n h e i t mi t de r wi r en t w ed er : 1. Ei ne n nam e nl o s e n Se r vi c e im p le m e n t ie r e n kö n n e n (vi a main(..) ) 2. Ei ne ne ue Ar t ( ne ue n Ty p ) v o n Ob j e kt e n be s c hr e i be n kö n n e n . § Ob j e k t (« ob j e c t » ): E i n Ge bi l de da s Zu s t an d (« s t a t e » ) u n d Ve r h a l t e n (« b e h a v i or » ) ve r b i n d e t . § Kl as s e is t di e Vo r l a g e ( Mu s t e r v o r l a g e , Sc h ab l o n e ) d i e Ob j e k t e be s c hr e i b t § Ob j e kt wi r d ge m ä s s Vo r l a g e er s c h a f f en 32 Kla s s e n und Ob j ek t e § Kl as s e be s c hr e i b t di e F o r m / Fu n k t i on a l i t ä t vo n Ob j e k t e n § Ob j e k t e si n d Ex e mp l a r e (« in s t a n c e s ») ei n er Kl as s e § Ma n c h e Au t or e n sp r e c h e n vo n Ob j e kt i n s t a n z e n ( st a t t Ob j e kt ) § Wi r d ei n Ob j e kt er s c h a f f en sp r i c h t ma n dann vo n d e r In s t a n zi i e r u n g § Di e Me n g e al l e r Ob j e k t e ei n er Kl as s e bi l de n ei n en Ty p § Ma n ka n n si c h au c h OOP oh n e Kl as s e n vo r s t e l l e n , ab e r vi e l e Pr o gr a m m i e r s pr a c he n (J a v a , C + + , C # ) si n d kl a s s e n b a s i e r t . 33 Ob j ek t - or i en t i er t es P r o g r a m m ie r e n § In d e r En t w i c k l u n g ei n es So f tw ar e S y s t e m s § In d e r Mo d e l l i e r u n g «r e a l e r» Si tu a ti o n e n 34 Ob j ek t - or i en t i er t es P r o g r a m m ie r e n § In d e r En t w i c k l u n g ei n es So f tw ar e S y s t e m s § Be is p ie l : I n p u t mi t Sc a n n e r § Sc a n n e r Ob j e kt wi r d er s t el l t , en t s p r ec h en d Pa r a m e t e r n § In d e r Mo d e l l i e r u n g «r e a l e r» Si tu a ti o n e n § Be is p ie l : P u s h B r o a d c a s t zu (G ru p p e v o n ) Sm a rt p h o n es § Mo d e l l i e r u n g ei n es Ne t z e s vo n S m a r t p h o n e s § Mo d e l l i e r u n g je d e s Ge r ä ts 35 § We n n wi r ei n en Sc an n e r ko n s t r u i e r e n da nn wi r d di e s e r für uns e r e An f or d e r u n g e n « he r g e s t e l l t » § Scanner (i n /java/ util ) is t di e al l g e m e i ne Be s c h r e ib u n g § Scanner ( System.in ) od e r Scanner( myFile ) si n d sp e z i e l l e Sc a n n e r § We n n wi r ei n Ne t z w e r k mo d el l i er en da nn wi r d für je d e n Kn o t e n (S m a r t p h on e ) ei n en t s p r ec h en d es Ob j e k t er s t el l t § Es gi b t ei n e ( al l g e m e i ne ) Be s c h r e ib u n g fü r Sm a r t p h o n e s § Je d e s Sm a r t p h o n e is t ande r s ko n f i g u r i e r t 39 Vo r l a g e n S m a rt P h o n e V o rl a g e ( M u s t e r) Zu s t a n d : Po s i t i o n Er r e i c h b ar e Na c h b a r n Ve r b l e i b e n d e Ba t t e ri e l a d u n g V e rh a l t e n : Ei n / Au s s c h a l t e n Up d a t e Na c h b a r n Li s t e Ko m m u n i k a t i o n ( Sn d , R e c ) Ph o n e # 1 Zu s t a n d : Po s t i o n =120, 6540 Na c h b a r n : { # 2 } Ba t t e ri e = 2 . 5 h r s V e rh a l t e n : Ei n / Au s s c h a l t e n Up d a t e Na c h b a r n Li s t e Ko m m u n i k a t i o n ( Sn d , R e c ) Ph o n e # 2 Zu s t a n d : Po s t i o n =310, 5740 Na c h b a r n : { # 1 ,# 3 } Ba t t e ri e = 3 . 4 1 h r s V e rh a l t e n : Ei n / Au s s c h a l t e n Up d a t e Na c h b a r n Li s t e Ko m m u n i k a t i o n ( Sn d , R e c ) Ph o n e # 3 Zu s t a n d : Po s t i o n =220, 6088 Na c h b a r n : { # 2 } Ba t t e ri e = 1 . 8 h r s V e rh a l t e n : Ei n / Au s s c h a l t e n Up d a t e Na c h b a r n Li s t e Ko m m u n i k a t i o n ( Sn d , R e c ) pr o du z i e r t 40 Bi l d e r vo n Sh r i t w o d in d e r W ik ip e d ia a u f En g l i s c h , C C B Y - SA 3 . 0 , h t t p s : / / co m m o n s . w i k i m e d i a . o r g /w / in d e x . p h p ? c u r id =1 0 7 6 7 2 2 0 Ko m m u n i k a t i o n o h n e B a s e S t a t i o n s § Se n d e N ac h r i c h t e n zu N a c h b a r ( n ) § Na c h b a r (n ) le it e t / le it e t w e it e r § Bi s z u m Z i el § .... 41 Vo r l a g e n § Ni c h t al l e De t a i l s si n d re l e va n t § Sm a r t p h o n e Fa r b e § Wi r wo l l e n Ko m m u n i k a t i o n s s o f t w a r e en t wi c k el n § Wa s is t wi c h t i g ? § ( Te i l ) d es Ve r h a l t e n s § Wa s is t un w i c h t i g ? § Wi e ei n Sm a r t p h o n e he r g e s t e l l t wi r d § Wi e ei n Sm a r t p h o n e ko n f i g u r i e r t wi r d 42 Ab s t r a k t io n § Ab s t r a k t i on : Ei n e re d u z i e r t e Be s c h r e i b u n g ( lä ss t ir r e le v a n t e De t ai l s we g ) § Wi r kö n n e n ( vi e l e ) Ge g e n s t ä n d e be nut z e n oh n e zu wi s s e n , wi e si e ge n a u fu n k t i o n i er en . § Au c h be i m Ve r h a l t e n ei n es Ob j e k t e s in t e r e s s ie r t uns nur wa s fü r ei n en Se r vi c e da s Ob j e k t an b i e t e t , ni c h t wi e er im p le m e n t ie r t is t . § Ab s t r a k t i on e n sin d ni c h t f al s c h ( od e r ri c h t i g ): sie sin d n ü tz l i c h od e r ni c h t § LED Lam p e : Li c h t q u e l l e § LED Lam p e : Ha l b l e i t e r mi t oh m s c h e n Wi d e r s t a n d 43 Ab s t r a k t io n § Ab s t r a k t i on für ei n en Kn o t e n (S m a r t p h on e ): § Si e ve r s t e h e n se i n Be n u t z e r v e r h a lt e n ( Sc h a l t e r , Re g l e r , Bild s c h ir m ) § Si e ve r s t e h e n ni c h t di e i n t e r ne Or g a n i s a t i o n , d ie Pr og r a m m e (M P E G ), et c . 44 Di e 1 . Auf g a be § Wi r wo l l e n ei n e ei n f a c h e Point Kl as s e pr o gr a m m i e r e n um zu le r n e n , wi e Kl as s e n de fi ni e r t we r d e n . § Pu n k t e in ei n er 2 - d Ebe ne § Wi r we r d e n ei n en Ty p vo n Ob j e kt e n de f i ni e r e n de n wi r Point ne nne n . § Je d e s Point Ob j e kt wi r d di e x / y Ko o r d i n a te n al s At t r i b u t (« a t t ri b u t e» , « f i el d s » ) sp e i c h e r n ( Zu s t a n d de s Pu n k t e s ) § Das Ve r h a l t e n je d e s Point Ob j e kt e s wi r d dur c h Met h o d e n (« m e t h o d s » ) be s c hr i e be n . 45 Point Ob j ek t e § Point Ob j e k t e kö n n e n vo n an d e r e n Pr o gr a m m e n ve r w e n d e t we r d e n§ « An d e r e Pr og r a m m e »: be s c hr i e be n dur c h Kl a sse n ( si e h e (1 ) u n d (2 )) § « ve r w e n d e t »: ru f en Met h o d e n auf , er s t el l en Point Ob j e kt e -- um ei n Ob j e kt zu ve r w e n d e n mü s s e n wi r es err ei c h en kö n n e n § Pr o gr a m m e di e Point Ob j e k t e ve r w e n d e n he i s s e n Kl i e n t e n (« c l i e n t p r og r a m s » ) d e r Point Kl as s e . § Sp ä t e r we r d e n wi r se h e n das s auc h di e Point Kl a sse Point Ob j e kt e ve r w e n d e n ka n n ( Point is t Kl i e n t vo n Point ) 46 Ar be it e n m it Point Ob j ek t en § Wi r b r a u c h e n e i n e V a r i a b l e § Re f e r e n z v a r i a b l e § Mu s s d e k l a r i e r t s e i n v o r V e r w e n d u n g § Ve r w e i s t a u f Point Ob j e kt § (H a b e n u n s e n t s c h i e d e n d i e s e O b j e k t e Point zu n e n n e n ) § Bei s p i el e f ü r D ek l a r a t i o n Point p1; Point home; 47 § De k l a r a t i o n m a c h t N a m e n ( d e r R e f e r e n z v a r i a b l e ) b e k a n n t § Br a u c h en ei n E x emp l a r w en n wi r d a mi t a r b ei t en w o l l en § Er s t e l l e n dur c h new Op e r a t o r § Bei s p i el Point p1 = new Point(); //Kombination Deklaration und Erstellen Point home; p1 = new Point(); 48 § De k l a r a t i o n m a c h t N a m e n ( d e r R e f e r e n z v a r i a b l e ) b e k a n n t § Br a u c h en ei n E x emp l a r w en n wi r d a mi t a r b ei t en w o l l en § Er s t e l l e n dur c h new Op e r a t o r § An a l og a r b e i t e n m i t Ar r a y s Point p1 = new Point(); int[] a = new int[10]; Point home; int[] b; p1 = new Point(); b = new int[12]; 49 Zu s t a n d p l u s O p e r a t i o n e n : T y p § Ei n ( Da t e n ) T y p b e sc h r e i b t ( b z w . b e s t i m m t ) z u l ä ssi g e Op e r a t i o n e n u n d z u l ä s s i g e W e r t e § Ty p e int[] (i n t Ar r a y ): Z u g r i f f a u f E l e m e n t e , Ab f r a g e d e r Lä n g e § Ty p e Point : Z u g ri f f a u f x / y K o o r d i n a t e n , V e r s ch i e b e n e i n e s Punk t e s , S pi e g e l ung , Ab s t a nd z w i s c he n z w e i Point Ob j e k t e n ( d i e z w e i P u n k t e e i n e r 2 - d E be ne m o de l l i e r e n) 50 Point Ob j ek t e ( er w ü n sc h t e Zu s t ä n d e ) Point p1 = new Point(); Point p2 = new Point(); // origin, (0, 0) § Da t e n für je d e s Point Ob j e k t : § Mu s s di e s e für je d e s Ob j e k t sp e i c h e r n ( ir g e n d w ie ) § Au f g a b e d e r Kl as s e At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s y y – Ko o r d i n a t e des Pu n kt e s 52 At t r i bu t We r t x ? y ? p1 Re f e r e n z v a r i a b l e ( k a n n a u f Point Ex e m pl ar e v e r w e i s e n) Point Ob j ek t e ( er w ü n sc h t e Zu s t ä n d e ) Point p1 = new Point(); p1.x = 5; new Point( p1.y = 2; § Da t e n für je d e s Point Ob j e k t : § Mu s s di e s e für je d e s Ob j e k t sp e i c h e r n ( ir g e n d w ie ) § Au f g a b e d e r Kl as s e At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s y y – Ko o r d i n a t e des Pu n kt e s 53 At t r i bu t We r t x 5 y 2 p1 Re f e r e n z v a r i a b l e ( k a n n a u f Point Ex e m pl ar e v e r w e i s e n) Point Ob j ek t e ( er w ü n sc h t e Zu s t ä n d e ) Point p1 = new Point(5, 2); Point p2 = new Point(); // was für Werte ? § Da t e n für je d e s Point Ob j e k t : 55 At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s y y – Ko o r d i n a t e des Pu n kt e s Point Ob j ek t e ( er w ü n sc h t e Zu s t ä n d e ) Point p1 = new Point(5, 2); Point p2 = new Point(); // was die Point Klasse // voreingestellt hat § Da t e n für je d e s Point Ob j e k t : 56 At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s y y – Ko o r d i n a t e des Pu n kt e s Point Ob j ek t e ( er w ü n sc h t e Zu s t ä n d e ) Point p1 = new Point(5, 2); Point p2 = new Point(); // Origin (0,0) § Da t e n für je d e s Point Ob j e k t : 57 At t r i bu t We r t x 0 y 0 p2 Re f e r e n z v a r i a b l e ( k a n n a u f Point Ex e m pl ar e v e r w e i s e n) At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s y y – Ko o r d i n a t e des Pu n kt e s Point Ob j ek t e ( er w ü n sc h t es Ve r h a l t e n ) § Me t h o d e n für je d e s Point Ob j e k t : Me t h o d e n Na m e Be c h r e i b u n g setLocation ( x , y ) Se t ze di e x und y Ko o r d i n a t e n di es es Pu n kt e s au f di es e We r t e translate( dx , dy ) Ve r ä n d e r e di e x u n d y Ko o r d i n a t e n des Pu n kt e s um di es e We r t e distance( p ) Wi e we i t is t der Pu n kt p vo n di es em Pu n kt en t f er n t draw( g ) Ze i c h n e den Pu n kt au f ei n er 2 - d Fl ä c h e g 60 At t r i bu t Na m e Be s c h r e i b u n g x x – Ko o r d i n a t e des Pu n kt e s in Sc h we i ze r Lan d e s k o o r d i n at e n y y – Ko o r d i n a t e des Pu n kt e s in Sc h we i ze r Lan d e s k o o r d i n at e n TopoPoint Ob j ek t e TopoPoint Zurich = new TopoPoint (2683779, 1247994); TopoPoint origin = new TopoPoint (); // new TopoPoint (2600000, 1200000) § Äh n l i c h e At t r i b u t e , ab e r an d e r e De f a u l t w e r t e 62 TopoPoint Ob j ek t e ( Ve r h a l t e n ) § Me t h o d e n für je d e s Point Ob j e k t : Me t h o d e n Na m e Be c h r e i b u n g setLocation ( x , y ) Se t ze di e x und y Ko o r d i n a t e n di es es Pu n kt e s au f di es e We r t e translate( dx , dy ) Ve r ä n d e r e di e x u n d y Ko o r d i n a t e n des Pu n kt e s um di es e We r t e distance( p ) Wi e we i t is t der Pu n kt p vo n di es em Pu n kt en t f er n t draw( g ) Ze i c h n e den Pu n kt au f ei n er 2 - d Fl ä c h e g 63 Point Kla s s e al s Vo r l a g e Po i n t c l a s s Zu s t a n d : int x , y Ve r h a l t e n : setLocation ( int x, int y) translate( int dx, int dy ) distance(Point p) draw(Graphics g) Po in t o b j e c t # 1 Zu s t a n d : x = 5, y = - 2 Ve r h a l t e n : setLocation ( int x, int y) translate( int dx, int dy ) distance(Point p) draw(Graphics g) Po in t o b j e c t # 2 Zu s t a n d : x = - 245, y = 1897 Ve r h a l t e n : setLocation ( int x, int y) translate( int dx, int dy ) distance(Point p) draw(Graphics g) Po in t o b j e c t # 3 Zu s t a n d : x = 18, y = 42 Ve r h a l t e n : setLocation ( int x, int y) translate( int dx, int dy ) distance(Point p) draw(Graphics g) 64 Kla s s e n und Ob j ek t e§ Kl as s e (« c l a s s » ): E i n e Pr o gr a m m Ei n h e i t mi t de r wi r en t w ed er : 1. Ei ne n nam e nl o s e n Se r vi c e im p le m e n t ie r e n kö n n e n (vi a main(..) ) 2. Ei ne ne ue Ar t ( ne ue n Ty p ) v o n Ob j e kt e n be s c hr e i be n kö n n e n . § Ob j e k t (« ob j e c t » ): E i n Ge bi l de da s Zu s t an d (« s t a t e » ) u n d Ve r h a l t e n (« b e h a v i or » ) ve r b i n d e t . § Kl as s e is t di e Vo r l a g e ( Mu s t e r v o r l a g e , Sc h ab l o n e ) d i e Ob j e k t e be s c hr e i b t § Ob j e kt wi r d ge m ä s s Vo r l a g e er s c h a f f en 66 Kla s s e n und Ob j ek t e§ Kl as s e (« c l a s s » ): E i n e Pr o gr a m m Ei n h e i t mi t de r wi r en t w ed er : 1. Ei ne n nam e nl o s e n Se r vi c e im p le m e n t ie r e n kö n n e n (vi a main(..) ) 2. Ei ne ne ue Ar t ( ne ue n Ty p ) v o n Ob j e kt e n be s c hr e i be n kö n n e n . § Ob j e k t (« ob j e c t » ): E i n Ge bi l de da s Zu s t an d (« s t a t e » ) u n d Ve r h a l t e n (« b e h a v i or » ) ve r b i n d e t . § Kl as s e is t di e Vo r l a g e ( Mu s t e r v o r l a g e , Sc h ab l o n e ) d i e Ob j e k t e be s c hr e i b t § Ob j e kt wi r d ge m ä s s Vo r l a g e er s c h a f f en § Vo r l a g e be s c hr e i b t We r t e : Zu s t a n d (A t t ri b u t e) § Vo r l a g e be s c hr e i b t Ve r h a l t e n : Op e r a t i o n e n ( Met h o d e n ) 67 4. 4 A t t ri b u t e Co p y ri g h t ( c ) P e a rs o n 2 0 1 3 . a n d T h o ma s G ro s s 2 0 1 6 Al l r i g h t s r e s e r v e d . 68 Zu s t a n d ei n es Ob j ek t : A t t r i b u t e 69 Po i n t Kla s s e , V e r s i o n 1 public class Point { int x ; int y ; } § Di e s e r Co d e m u ss i n ei n er Da t e i mi t Na me n Point.java abg e l e g t we r d e n . § Di e se r Co d e de fi ni e r t ei n en ne ue n Ty p mi t Na m e n Point . § Je d e s Point Ob j e kt en t h ä l t zw e i Da t e n : ei n e ga n z e Za h l ( int ) mi t Na me n x , u n d ei n e ga n z e Za h l ( int ) mi t Na me n y . § Fü r Point Ob j e kt e habe n wi r ( no c h ) ke i n Ve r h a l t e n de f i ni e r t . 70 Po i n t Kla s s e , V e r s i o n 1 public class Point { int x ; int y ; } § Di e s e r Co d e m u ss i n ei n er Da t e i mi t Na me n Point.java abg e l e g t we r d e n . § Di e se r Co d e de fi ni e r t ei n en ne ue n Ty p mi t Na m e n Point . § Je d e s Point Ob j e kt en t h ä l t zw e i Da t e n : ei n e ga n z e Za h l ( int ) mi t Na me n x , u n d ei n e ga n z e Za h l ( int ) mi t Na me n y . § Fü r Point Ob j e kt e habe n wi r ( no c h ) ke i n Ve r h a l t e n de f i ni e r t . 71 A t t r i b u t e j e d e s P o i n t Ob j e k t e s Re f e r e n z va r i a b l e fü r Point Ob j ek t e § Um a uf Point Ob j e k t e zu g r e i f e n zu kö n n e n br a uc he n wi r ei n e Re f e r e n z v a r i a b l e § Di e De k l ar a t i o n de r Re f e r e n z v a r i a b l e le g t de n Ty p de r Ob j e kt e fe s t , auf di e mi t t e l s di e s e r Va r i a b l e zu g e g r i f f e n we r d e n ka n n § Ty p hi e r : Kl a sse § Bei s p i el Point p1; § Ex e m p l a r d e r Kl as s e wi r d mi t new Op e r a t o r ko n s t r u i e r t home = new Point(); 73 At t r i b u t e § A t t r i b u t e ( « f i e l d » ) : E i n e V a r i a b l e in n e r h a lb ei n es Ob j e k t e s di e T e i l de s Ob j e k t Zu s t an d e s is t . ( Ma n c h m a l auc h Ob j e kt a t t r i b u t ge n a n nt .) § Je d e s Ob j e kt ha t se in e ei g en e Ko p i e je d e s At t r i b u t e s . § Sy n t a x für De k l a r a t i o n : § Wi e fü r Va r i a b l e i n Met h o d e n ty p e na m e ; 75 At t r i b u t e § A t t r i b u t e ( « f i e l d » ) : E i n e V a r i a b l e in n e r h a lb ei n es Ob j e k t e s di e T e i l de s Ob j e k t Zu s t an d e s is t . ( Ma n c h m a l auc h Ob j e kt a t t r i b u t ge n a n nt .) § Bei s p i el : public class Student { String name; // each Student object has a double notenDS ; // name and grade avg. field } 76 Zu g r i f f au f A t t ri b u t e § An d e r e Kl as s e n kö n n e n au f d i e A t tr i b u t e ei n es Ob j e k t e s mi t t el s Re f e r e n z v a r i a b l e zu g r e i f e n ( le s e n od e r ve r ä n d e r n ) § Zu g r i f f ( Les en ): va ri a b l e . at t r i bu t § Ve r ä n d e r n : va ri a b l e . at t r i bu t = va l u e ; § Bei s p i el (i n ei n er Me t h o d e ei n er be l i e bi g e n Kl as s e ): Point p1 = new Point(); Point p2 = new Point(); System.out.println(\"the x - coord is \" + p1.x); // access p2.y = 1290130; // modify 77 Zu g r i f f au f A t t ri b u t e § An d e r e Kl as s e n kö n n e n au f d i e A t tr i b u t e ei n es Ob j e k t e s mi t t el s Re f e r e n z v a r i a b l e zu g r e i f e n ( le s e n od e r ve r ä n d e r n ) § Zu g r i f f ( Les en ): va ri a b l e . at t r i bu t § Ve r ä n d e r n : va ri a b l e . at t r i bu t = va l u e ; § Wi r sag e n «d i e ( Re f e r e n z )V a r i a b l e wi r d der e f er en z i er t » ( u m a u f ei n At t r i b u t zu zu g r e i f e n bz w . ei n e Me t h o d e au f z u r u f e n ) § «D o t N o t a t i o n » – Re f e r e n z v a r i a b l e . ( Pu n k t , do t ) At t r i b u t 79 Zu g r i f f au f A t t ri b u t e : Lä ng e ei n es Ar r a y s § Si e er r i n n er n si c h : je d e r Ar r a y ( ei n Ob j e k t – ab e r oh n e Kl as s e !) ha t da s At t r i b u t length , w e l c h e s d i e Lä n g e an g i b t § int [] myArray ; § Zu g r i f f ( Les en ): myArray.length § Ve r ä n d e r n : ni c h t mö g l i c h § Wi r sag e n «d i e ( Re f e r e n z )V a r i a b l e myArray wi r d « der e f er en z i er t » ( u m a u f d a s At t r i b u t length zu zu g r e i f e n ) § «D o t N o t a t i o n » – Re f e r e n z v a r i a b l e . ( Pu n k t , do t ) At t r i b u t 80 Ar be it e n mi t Ob j ek t en § Ko n k r e t e s Ob j e k t er s t el l t na c h Vo r l a g e in Kl as s e § Ob j e kt i n s t a n z , In s t a n z (\" i n s t a n c e\" ) § Ex e m p l a r de r Kl a sse § Zu g r i f f au f A t tr i b u t e nur mö g l i c h we n n es E x emp l a r gi b t § Kl a sse is t di e Vo r l a g e § Dahe r kö n n e n in d e r Kl a sse ke i n e An w e i s u n g e n se i n ( aus s e r fü r In i t a l i s i e r u n g und i n Met h o d e n ) § Op e r a t o r new er s t el l t Ex e m pl ar e § Re f e r e n z au f ko n k r e t e s Ob j e k t 81 Ar be it e n mi t Ob j ek t en ( Z u sa m m e n f a ssu n g ) § new lie f e r t Ve r w e i s (« R e f e r e n c e » ) a u f E x e m p l a r § Ka n n in e in e r Va r i a b l e ge s p e i c h e r t we r d e n Point p = new Point(); § Wi r sa g e n das s p ei n e Re f e r e n z v a r i a b l e (« r e f er en c e v a ri a b l e» ) is t . § Ge n a u e r : p is t ei n e Va r i a b l e ei n es Re f e r e n z t y p s § Im Ge g e n s a tz zu Va r i a b l e n ei n es Ba s is t y p e s ( ei n g eb a u t en Ty p s ) § Zu g r i f f au f Ob j e k t a t t r i b u t e vi a Re f e r e n z v a r i a b l e § «D o t N o t a t i o n » int z = p.x ; // p refers to a Point, see above 82 Re f e r e n c e S e m a n t i c s § Fü r Re f e r e n c e V a r i a b l e s ge l t e n di e Re f e r e n c e Sem an t i cs Re g e l n Point p1 = new Point(); p1.x = 3; p1.y = 2; Point p2 = p1; // p2.x == 3, p2.y == 2 p2.x = 4; // p2.x == 4, p2.y == 2 // p1.x == 4, p2.y == 2 § Fü r Ob j e k t e wi e für Ar r a y s 83 At t r i bu t We r t x 3 y 2 At t r i bu t We r t x 4 y 2 Re f e r e n c e S e m a n t i c s § Wi r br a uc he n ei n en We g , ei n e Re f e r e n c e V a r i a b l e zu r ü c k zu - s et z e n Point p1 = new Point(); p1.x = 3; p1.y = 2; Point p2 = p1; // p2.x == 3, p2.y == 2 p2.x = 4; // p2.x == 4, p2.y == 2 // p1.x == 4, p2.y == 2 § p2 so l l ni c h t meh r au f p1 ve r w e i s e n 88 Re f e r e n c e S e m a n t i c s § Wi r br a uc he n ei n en We g , ei n e Re f e r e n c e V a r i a b l e zu r ü c k zu - s et z e n Point p1 = new Point(); p1.x = 3; p1.y = 2; Point p2 = p1; // p2.x == 3, p2.y == 2 p2.x = 4; // p2.x == 4, p2.y == 2 // p1.x == 4, p2.y == 2 § p2 so l l ni c h t meh r au f p1 ve r w e i s e n § Bes o n d er er We r t null ( gut für al l e Kl asse n ) p2 = null; // only p1 refers to Point (4,2) 89 null – ei n be s o nde r e r We r t § null is t ei n We r t ( d e n je d e Re f e r e n z v a r i a b l e ha be n ka n n ) § Va r i a b l e mi t Re f e r e n c e S e m a n t i c s § Bei s p i el e Point p2; p2 = null; // forget whatever p2 referred to! int[] a = new int[10]; a = null; // forget this array! String s = \"Hello\"; s = null; // forget this string § Ha t ei n e Va r i a b l e d e n W e r t null so sp r e c h e n wi r ma n c h ma l vo n ei n er «n u l l r e f e r e n ce » 90 null § null is t de r W e r t ei n er Re f e r e n z v a r i a b l e di e a uf ke i n Ob j e k t ve r w e i s t . Point p = new Point(); p.x = 1; ✓ p = null; p.y = 2; ✘ 91 int [] a = new int[10]; a[0] = 1; ✓ System.out.println(a.length); ✓ a = null; System.out.println(a.length); ✘ a[1] = 2; ✘ Wo f ü r null ( no c h ) g ut is t § Wi r er i n n er n uns ( vi e l l e i c h t ): Wi r d ei n ne ue r Ar r a y er s t el l t int[] data = new int[...]; String[] words = new String[...]; § so wi r d je d e s El e m e n t a u f ei n en We r t de r N ul l « en t s p r i c h t » ge s e t z t § Vo r e i n s t e l l u n g (« d e f a u l t » ) § Ar r a y El e m e n t e , d i e a u f Ob j e k t e ve r w e i s e n kö n n e n , we r d e n mi t null in it ia lis ie r t 93 Ty p e De f a u l t W e r t int 0 double 0.0 boolean false String ( od e r an d e r e s Ob j e k t ) null Ar r a y s mi t Ob j ek tv er w ei sen § Di e El e m e n t e ei n es Ar r a y s für Ob j e k t v e r w e i s e we r d e n mi t null in it ia lis ie r t . String[] words = new String[5]; DrawingPanel [] windows = new DrawingPanel[3]; in d e x 0 1 2 3 4 va l u e nul l nul l nul l nul l nul l in d e x 0 1 2 va l u e nul l nul l nul l wo rd s wi n d o ws 94 Wo f ü r null gu t is t § Sp e i c h e r n vo n null in ei n em Ar r a y E l e m e n t ( ei n es dur c h ei n e Kl a s s e de f i ni e r t e n Ty p s ) String[] words = {\" ein \", \" einfaches \", \" Beispiel \"}; words[1] = null; 95 in d e x 0 1 2 va l u e \" ei n \" nul l \" Be i s p i e l \" Ar be it e n m it null § Ha t e i n e R e f e r e n z v ar i ab l e d e n W e r t null , s o k ö n n e n w i r s i e ni c h t de r e f e r e nz i e r e n § Ke i n Z u g r i f f a u f A t t r i b u t e o d e r a u f L ä n g e e i n e s A r r a y s § Zu r E r i n n e r u n g : De r e f e r e n z i e r e n (« d e r e f e r e n c e » ): Zu g r i f f au f At t r i b u t e od e r Me t h o d e n ei n es Ob j e k t e s in D o t N o t a t io n , z. B . s.length () für Str i n g s od e r a.length für Ar r a y a . § Ei nm al mi t Met h o d e , ei n m a l al s At t r i b u t 96 Nu l l R e f er en c e E x c ep ti on § Es is t ni c h t er l a u b t , null zu de r e f e r e nz i e r e n § Fe h l e r ( er r o r ) im Pr og r a m m , zu r La u f z ei t en t d ec k t , h a t E x c e p t io n zu r Fo l g e ). Point p1 = new Point(); p1.x = 3; p1.y = 2; Point p2 = p1; // p2.x == 3, p2.y == 2 p2 = null; System.out.println (\"p2.x :\" + p2.x); //ERROR Exception in thread \"main\" java.lang.NullPointerException at C1.main(C1.java:9) § null is t ni c h t ir g e n d e in Ob j e k t , d. h. es gi b t ke i n e Me t h o d e n od e r Da t e n (A t t r i b u t e ) 97 Nu l l R e f er en c e E x c ep ti on String[] words = new String[5]; System.out.println (\"word is: \" + words[0]); words[0] = words[0]. toUpperCase (); // ERROR Ou t p u t : word is: null Exception in thread \"main\" java.lang.NullPointerException at Example.main (Example.java: 8) § De r N a m e java.lang.NullPointerException ve r r ät et w a s übe r di e Im p le m e n t ie r u n g vo n R e f e r e n c e s in d e x 0 1 2 3 4 va l u e nul l nul l nul l nul l nul l 98 Ei n s c h u b Fr a g e : S i n d null und ! (d e r l e e r e S t r i n g ) d a s s e l b e ? An t w or t : Ne i n . § De r l e e r e S t r i n g ( \"\" ) i s t e i n S t r i n g d e r k e i n e n B u c h s t a b e n en t h ä l t . § Si e k ö n n e n m i t d e m St r i n g a r b e i t e n , z . B . A d d i t i o n v o n \"\" und e i ne m int We r t ( B e i s p i e l \"\"+ 67 ) er g i b t d en St ri n g \"67\" § null is t d e r W e r t e in e r R e f e r e n z v a r ia b le , d ie a u f n ic h t s ve r w e i s t . § Ma n k a n n d i e R ef e r e n z v a r i a b l e n i c h t d e r ef e r e n z i e r e n 99 Ar be it e n m it null § Pr üf e n ob ei n e Va r i a b l e od e r Ar r a y E l e m e n t null is t if (words[2] == null) { ... } § Ve r h i n d e r t da s Au f t r e t e n ei n er Ex c e p t i o n ( « La u f z e i t f e h l e r ») § Wi r le r n e n sp ä t e r me h r übe r Ex c e p t i o ns und auc h wi e ei n Pr og r a m m auf Ex c e p t i o ns re a g i e re n ka n n . § Ab e r : E x c e p ti on s so l l e n di e Au s n a h m e se i n – ei n Pr og r a m m so l l t e das Au f tr e t e n ve r h i n d e r n . 100 lue g e , l o s e , la uf e … § Si e kö n n e n pr üf e n ob ei n e Re f e r e n z null is t be v o r ei n e Me t h o d e für ei n Ob j e k t au f g e r u f e n wi r d . String[] words = new String[5]; words[0] = \"hello\"; words[2] = \"goodbye\"; // words[1], [3], [4] are null for ( int i = 0; i < words.length ; i ++) { if (words[ i ] != null) { words[ i ] = words[ i ]. toUpperCase (); } } in d e x 0 1 2 3 4 va l u e \"HELLO\" nul l \"GOODBYE\" nul l nul l wo rd s 101 lue g e , l o s e , la uf e … § Si e kö n n e n pr üf e n ob ei n e Re f e r e n z null is t be v o r ei n e Me t h o d e für ei n Ob j e k t au f g e r u f e n wi r d . String[] words = new String[5]; words[0] = \"hello\"; words[2] = \"goodbye\"; // words[1], [3], [4] are null for ( int i = 0; i < words.length ; i ++) { if (words[ i ] != null) { if (words[ i ].equals(\"goodbye\") { words[ i ] = words[ i ]. toUpperCase (); } } } in d e x 0 1 2 3 4 va l u e \"hello\" nul l \"GOODBYE\" nul l nul l wo rd s 102 lue g e , l o s e , la uf e … Be d i n g t e A u s w e r t u n g h i l f t ! § Si e kö n n e n pr üf e n ob ei n e Re f e r e n z null is t be v o r ei n e Me t h o d e für ei n Ob j e k t au f g e r u f e n wi r d . String[] words = new String[5]; words[0] = \"hello\"; words[2] = \"goodbye\"; // words[1], [3], [4] are null for ( int i = 0; i < words.length ; i ++) { if (words[ i ] != null && words[ i ].equals(\"goodbye\")) { words[ i ] = words[ i ]. toUpperCase (); } } in d e x 0 1 2 3 4 va l u e \"hello\" nul l \"GOODBYE\" nul l nul l 103 wo rd s Wo f ü r null gu t is t § Übe r g e be n vo n null al s ei n Pa r a m e t e r ei n er Me t h o d e System.out.println (null); // null § Met h o d e mu s s Re f e r e n z v a r i a b l e al s Pa r a m e t e r er w a rt en public static void foo(int[] numbers) { . . . } public static void foo(Point p) { . . . } § Da m i t dr üc k e n wi r au s : ke i n Ar r a y , ke i n Point Ob j e k t , … § Vo r s i c h t : Met h o d e mu s s ev tl . übe r pr üf e n ob Pa r a m e t e r null is t ! § Zu r ü c k g e b e n vo n null vo n ei n er Me t h o d e ( wi r d of t ve r w e n d e t um ei n en Fe h l e r an z u z e i g e n ) return null; 106 ( 1 . ) Zu s a m m e n f a s s u n g § Ei n e Re f e r e n z v a r i a b l e (« r e f e r e n c e t y p e v a r i a b l e » , V a r i a b l e ei n es Re f e r e n z t y p s ) er l au b t den Zu g ri f f au f ei n en Ar r a y od e r ei n Ob j e k t e x a mp l a r Point p; // Verweis auf Pointexemplar int[] myarray ; // Verweis auf Array von int Elementen String s; // Verweis auf String Point[] parray ; // Verweis auf Array von Pointverweisen § Zu w e i su n g m u ss R e f e r e n z v ar i ab l e m i t O b j e k t e x am p l ar o d e r Ar r a y v e r kn ü p f e n § So n s t gi b t es ke i n e n Ar r a y od e r Ex e m pl a r di e Da t e n s p e ic h e r e n 108 § Zu w e i su n g m u ss R e f e r e n z v ar i ab l e m i t O b j e k t e x am p l ar o d e r Ar r a y v e r kn ü p f e n Point p; p = new Point(); Point q; q = p; int[] myarray ; myarray = new int[100]; ( oder ) myarray = {1, 2, 3}; int[] yarray ; yarray = myarray ; String s; s = \"Hello\"; String t; t = s + \" Again\"; Point[] parray ; parray = new Point[4]; § Ha t ei n e Re f e r e n z v a r i a b l e de n W e r t null so ve r w e i s t si e au f ke i n Ob j e k t 109 § Re f e r e n z v a r i a b l e ve r w e n d e n für Ob j e k t e ( ei n s c h l i es s l i c h Ar r a y s ) R e f e r e n c e S e m a n t i c s § Zw e i ( od e r me h r ) Re f e r e n z v a r i a b l e kö n n e n au f d as s e lb e Ob j e k t ve r w e i s e n Point p1 = new Point(); p1.x = 3; p1.y = 2; Point p2 = p1; // p2.x == 3, p2.y == 2 p2.x = 4; // p2.x == 4, p2.y == 2 // p1.x == 4, p2.y == 2 § Än d e r u n g e n mi t t e l s ei n er Re f e r e n z v a r i a b l e si n d auc h mi t t e l s de r ande r e n Re f e r e n z v a r i a b l e si c h t b a r § Ar r a y u n d Ob j e k t Pa r a m e t e r ve r w e n d e n Re f e r e n c e S e m a n t i c s 110 § Si n d d i e El e m e n t e ei n es Ar r a y s ei n Re f e r e n z t y p so sp e i c h e r t de r A r r a y ni c h t di e Ob j e kt e ( ex a m p l a r e ) so n d e r n Ve r w e i s e auf Ob j e kt e . § Si nd di e E l e m e nt e Ba s i s t y p e n so wi r d de r W e r t ge s p e i c h e r t § Di e In i t i a l i s i e r u n g erf o r d ert of t zw e i Sc h r i t t e (i n di e s e r Re i h e n f o l g e ): 1. In i t i a l i s i e r u n g de s A r r a y s ( Je de s E l e m e nt wi r d auf null ge s e t z t be i Ob j e k t e n ; 0 , 0.0 , od e r false be i Ba s i s t y p e n ) 2. In i t i a l i s i e r u n g de r El e m e n t e String[] words = new String[4]; // phase 1 for (int i = 0; i < words.length ; i ++) { words[ i ] = \"word\" + i ; // phase 2 } in d e x 0 1 2 3 va l u e \"word0\" \"word1\" \"word2\" \"word3\" wo rd s 111 Re f e r e n z va r i a b l e u n d B a s i s t y p V a r i a b l e § De r U n t e r sc h i e d i n d e r B e h a n d l u n g a l s P a r a m e t e r i s t n i c h t übe r r a s c he nd § Ef f i z i e n z Ü b e r l e g u n g e n u n d p r a k t i s c h e N o t w e n d i g k e i t f o r d e r n i h r e n Tr i b u t § Au c h i n d e r « r e a l e n W e l t » f i n d e n w i r ä h n l i c h e S i t u a t i on 112 Vo r Y a h o o , L y c o s , A l t a V i s t a … u n d … G o o g l e § Es g a b B i b l i o t h e k e n § No c h i mme r … § Fi n d e n e i n e s T e xt e s ni c h t i m m e r e i n f a c h § Sc h o n d a m a l s 11 3 L o n g R o o m I n t e ri o r , T ri n i t y C o l l e g e D u b l i n Ph o t o b y D A V I D I L I F F . L i c e n s e : C C BY - SA 3 . 0 W ie f inde t m a n e in Do k um e n t ? § Je d e s D o k u m e n t h a t e i n e « Si g n a tu r » -- Fo l g e v o n Bu c h s t a b en u n d Z i f f er n § Di e se F o l g e b e s t i m m t w o d a s Do k u m e n t a b g e l e g t i s t § Wi r s a g e n a u c h d a s s d i e F o l g e d i e « K l a s s i f i k a t i o n » i s t § Es g i b t v e r s c hi e de ne K l as s i f i k a t i o ns s y s t e m e § Ei n häuf i g v e r w e nde t e s S y s t e m s : L o C § (U S) Li b r a r y o f C o n g r es s § Ni c h t p e r f e k t , a b e r f l e x i b e l u n d s e i t E i n f ü h r u n g ( 1 8 9 7 ! ! ) i mme r we i t e r e n t w i c k e l t 114115 Vi e l e D o k u m e n t e ( i n s b e s o n d e r e B ü ch e r ) d r u ck e n d i e S i gn a t u r a u f S e i t e 2 od e r s t e l l e n s i e on l i n e zu r V e r f ü g u n g 117118119 ht t ps : / / c o m m o ns . w i k i m e di a . o r g / w i k i / F i l e : L i br a r y O f C o ng r e s s C l a s s i f i c a t i o n. j pg Ra ys o n h o @ O p e n G r i d S c h e d u l e r / G r i d E n g i n e , P u b l i c d o m a i n , v i a W i k i m e d i a C o m m o n s § Zu r ü c k z u R e f e r e n z v ar i ab l e n u n d B asi s t y p V ar i ab l e n § Uns e r e B i bl i o t he k bi e t e t e i ne n t o l l e n S e r v i c e a n: § We n n e i n D o k u m e n t ( d a s w i r w o l l e n ) e i n k u r z e r T e x t i s t , d a n n k o p i e r t di e B i bl i o t he k f ür uns das Do k um e n t 120121 Ku r z e r Te x t : Qu e l l e : h t t p s : / / o p e n c l i p a r t . o r g / d e t a i l / 2 8 5 4 Ko p i e r e r ht t p s : / / en . w i k i s o u r c e. o r g /w i k i / Pa g e : E m i l y _ D i c k i n s o n _ P o e m s _( 1 8 9 0 ) . dj v u /3 0 § Zu r ü c k z u R e f e r e n z v ar i ab l e n u n d B asi s t y p V ar i ab l e n § Uns e r e B i bl i o t he k bi e t e t e i ne n t o l l e n S e r v i c e a n: § We n n e i n D o k u m e n t ( d a s w i r w o l l e n ) e i n k u r z e r T e x t i s t , d a n n k o p i e r t di e B i bl i o t he k f ür uns das Do k um e n t § We n n d a s D o k u m e n t e i n l a n g e r T e x t i s t , d a n n s a g t u n s d e r K a t a l o g de r B i bl i o t he k w o das Do k um e n t i m R e g al s t e h t 122 Ka t a l o g Ka r t e : La g e 124 La ng e r Te x t : Qu e l l e : ht t ps : / / c o m m o ns . w i k i m e di a . o r g / w i k i / F i l e : C o py r i g ht _ C a r d_ C a t a l o g _ F i l e s . j pg ht t ps : / / c o m m o ns . w i k i m e di a . o r g / w i k i / F i l e : L i br a r y _ c a r d. j pg ht t ps : / / c o m m o ns . w i k i m e di a . o r g / w i k i / F i l e : H K _ W a n_ C ha i _ L i br a r y _ I ns i de _ B o o k c a s e _ a . j pg ht t ps : / / co m m o n s . w i k i m e d i a . o r g /w i k i / Fi l e: Li b r a r y O f C o n g r es s C l a s s i f i c a t i o n . j p g QA76 Flanagan, David 73 Java in a J38 nutshell F553 2005 Ku r z e r T e x t : C o p y § Kö n n e n I h r e Ko p i e v e r ä n d e r n : § Or i g i n a l u n v e r ä n d e r t § Vi e l e ( gl e i ch z e i t i g e ) K o p i e n mö g l i c h§ Je de unbe s c hr änk t nut z bar L a n g e r T e x t : L i b r a r y C a r d § Ca r d g i b t L a g e ( i m A r ch i v ) a n § Do r t s t e h t d a s B u c h § Ca r d ≠ Bu c h § Än d e r u n g e n v o n a n d e r e n si c h t b a r (B i t t e k ei ne S ei t en en t f er nen) § Nu r e i n e r k a n n z u r s e l b e n Z e i t be ar be i t e n § Ka n n Ka r t e k o p i e r e n , a b e r e s gi b t n u r e i n B u c h § Ka n n n e u e N u m m e r a u f C a r d sc h r e ib e n § Ke i n E i n f l u s s a u f a l te s B u c h / C a r d 125 Ba s i s t y p : Co p y § Au f r u f e r k a n n W e r t v e r ä n d e r n : § Or i g i n a l u n v e r ä n d e r t § Vi e l e ( gl e i ch z e i t i g e ) K o p i e n mö g l i c h§ Je de unbe s c hr änk t nut z bar Re f e r e n c e T y p e : Re f e r e n c e § Re f e r e n z v e r w e i s t a u f A r r a y / O b j e k t § Ar r a y / O b j e k t l i e g t i m S p e i c h e r § Re f e r e n z ≠ Ar r a y ( b z w . O b j e k t ) § Än d e r u n g e n v o n a n d e r e n s i c h t b a r § N u r b e s t i m m t e Ä n d e ru n g e n m ö g l i c h § Nu r e i n e r so l l t e zu r s e lb e n Z e it be ar be i t e n (nä c hs t es S em es t er ) § Ka n n R ef e r e n z w e i t e r g e b e n , a b e r e s gi b t n u r e i n e n A r r a y b z w . e i n O b j e k t 126 Ve r g l e i c h d e c k t n i c h t a l l e A s p e k t e a b … . Ei n s c h u b : Math Kla s s e 127 Au c h ma n c h ma l hi l fr e i c h : Math Kl a s s e 128 Me t h o d n ame De s c r i p t i o n Math.abs (va l u e ) ab s o l u t e v al u e Math.ceil (va l u e ) ro und s up Math.floor (va l u e ) ro und s d o w n Math.log10(va l u e ) lo g a r i t h m , b a s e 1 0 Math.max (va l u e 1 ,va l u e 2 ) la r g e r o f t w o v a lu e s Math.min (va l u e 1 ,va l u e 2 ) sm a l l e r o f tw o v a l ue s Math.pow (ba s e ,ex p ) ba s e to th e ex p pow e r Math.random () ra n d o m double be t w e e n 0 a n d 1 Math.round (va l u e ) ne a re st w ho l e num b e r Math.sqrt (va l u e ) sq ua re ro o t Math.sin (va l u e ) Math.cos (va l u e ) Math.tan (va l u e ) si ne / c o si ne / ta ng e nt o f an an g l e i n r ad i an s Math.toDegrees (va l u e ) Math.toRadians (va l u e ) co n v e r t d e g r e e s t o ra d i a n s a n d b a c k Co n st a n t De s c r i p t i o n Math.E 2. 7182818. . . Math.PI 3. 1415926. . . Auf r uf vo n Math Me t h od en Sy n t a x : Math. me t h o d N a me ( par am e t er s ) § me th o d Na me : Se r v i c e d e n wi r br a uc he n § par am e t e r ( s ) : E i n od e r me h r Pa r a m e t e r § Bei s p i el e : double squareRoot = Math.sqrt(121.0); System.out.println(squareRoot ); // 11.0 int absoluteValue = Math.abs( - 50); System.out.println(absoluteValue ); // 50 System.out.println(Math.min(3, 7) + 2); // 5 130 Be s o n d e r h e i t e n vo n Math Me t h od en § Ei n i g e Math Me t h o d e n lie f e r e n ke i n e n int We r t ob w oh l wi r es er w a r t en ( kö n n t e n ) § Li e f ern ei n en double We r t : int x = Math.pow (10, 3); // ERROR: incompatible types § Wo l l e n wi r ei n en int We r t , s o is t Ca s t nö t i g int x = (int) Math.pow (10, 3); // 1000 132 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e kt e ( al l g e m e i n ) 4. 2 Ob j e kt e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t w i c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Me t h o d e n 4. 7 Si c h tb ar k e i t vo n At t r i b u t e n 4. 8 Ko n s t r u k t o r e n 4. 9 static Me t h o d e n und V a r i a bl e 138 4. 5 K l a s s e n u n d i h r e K l i e n t e n 140 Ar be it e n mi t Ob j ek t en § Kl i e n t e n si n d al l e di e Pr o g r am m e di e Ex e m p l a r e ei n er Kl a s s e er s t el l en od e r auf Ex e m p l a r e zu g r e i f e n ( kö n n e n ) [ z. B . we i l si e al s Pa r a m e t e r übe r g e be n wu r d e n ] § Klie n t : Be z i e h u n g zw i s c h e n Kla sse n § P r o g r am m : m u s s i n ei n er Kla sse se in § We n n Zu g r i f f mö g l i c h is t : Kl i e n t 141 Kl a s s e n und Kl i e n t e n § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } 143 Kl a s s e n und Kl i e n t e n § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Di e Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 2 x 4 y 3 144 new Op e r a t or § De r new Op e r a t o r in it ia lis ie r t di e A t t r i but e mi t ei n em We r t de r « N ul l » en t s p r i c h t § Fü r int At t r i b u t e : 0 § Fü r double At t r i b u t e : 0.0 § Fü r boolean At t r i b u t e : false § Fü r Re f e r e n z auf String ( od e r ande r e s ) Ob j e kt : null 145 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 0 y 0 146 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 0 147 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 2 148 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 2 x 0 y 0 149 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 2 x 4 y 0 150 Kl a s s e n u n d Kl i e n t e n - Ze i t l u p e § Point.java is t ( al l e i n e ) ke i n au s f ü h r b ar e s Pr o gr a m m§ Ei ne Kl a sse ka n n vo n Kl i e n t e n ve r w e n d e t we r d e n . PointMain.java ( Kl i e n t ) public class PointMain { public static void main(String[] args ) { Point p1 = new Point(); p1.x = 7; p1.y = 2; Point p2 = new Point(); p2.x = 4; p2.y = 3; ... } } Point.java ( Kl a s s e fü r Ob j e k t e ) public class Point { int x ; int y ; } x 7 y 2 x 4 y 3 151 PointMain Be i s p i e l fü r Klie n t public class PointMain { public static void main(String [] args ) { // create two Point objects Point p1 = new Point(); p1.y = 2; System.out.println (p1.x + \", \" + p1.y); // 0, 2 Point p2 = new Point(); p2.x = 4; // 4, 0 // change p2 and then print it p2.x += 2; p2.y++; System.out.println(p2.x + \", \" + p2.y); // 6, 1 } } 153 Ar r a y s m it R e f e r e nz e n ( « V e r w e is e n» ) String[] words; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( words ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . ... 154 Ar r a y s mi t Ob j ek tv er w ei sen § Di e El e m e n t e ei n es Ar r a y s für Ob j e k t v e r w e i s e we r d e n mi t null in it ia lis ie r t . String[] words = new String[5]; in d e x 0 1 2 3 4 va l u e nul l nul l nul l nul l nul l wo rd s 155 Di e g a n z e W a h r h e i t ü b e r Ar r a y s Point[] places; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( places ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . 156 Di e g a n z e W a h r h e i t Point[] places; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( places ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . § In i t i a l i s i e r u n g w i e b e i S t r i n g A r r a y s places = new Point[10]; 157 in d e x 0 1 2 3 4 5 6 7 8 9 va l u e nul l nul l nul l nul l nul l nul l nul l nul l nul l nul l places W ir e r inne r n uns (v ie lle ic h t ) Wi r d ei n ne ue r Ar r a y er s t el l t int[] data = new int[...]; String[] words = new String[...]; so wi r d je d e s El e m e n t a u f ei n en We r t d e r N u l l « en t s p r i c h t » ge s e t z t § Vo r e i n s t e l l u n g (« d e f a u l t » ) Ty p e De f a ul t W e r t int 0 double 0.0 boolean false String ( od e r an d e r e s Ob j e k t ) null 158 Di e g a n z e W a h r h e i t Point[] places; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( places ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . places = new Point[10]; § Na c h In it ia lis ie r u n g (d e s Ar r a y s ) kö n n e n wi r et w a s sp e i c h e r n places[0] = new Point(); § El e m e n t m i t I n d e x 0 v e r w e i s t j e t z t a u f P u n k t ( 0 , 0 ) 159 Di e g a n z e W a h r h e i t § places[0] is t e in e V a r ia b le d ie e in e R e f e r e n z ( a u f e in Point Ex e m p l a r ) e n t h ä l t 161 in d e x 0 1 2 3 4 5 6 7 8 9 va l u e nul l nul l nul l nul l nul l nul l nul l nul l nul l places x 0 y 0 Di e g a n z e W a h r h e i t § places[0] is t e in e V a r ia b le d ie e in e R e f e r e n z ( a u f e in Point Ex e m p l a r ) e n t h ä l t § Je tz t k ö n n e n w i r m i t d e m E x e m p l ar ar b e i t e n places[0].x = 8; places[0].y = 5; 162 in d e x 0 1 2 3 4 5 6 7 8 9 va l u e nul l nul l nul l nul l nul l nul l nul l nul l nul l places x 0 y 0 x 8 y 5 Di e g a n z e W a h r h e i t § places[k] s i n d V a r i a b l e d i e e i n e R ef e r e n z ( a u f e i n Point Ex e m p l a r ) e n t h a l t e n k ö n n e n ( k≥0 , k<places.length ) § We i t e r e E x e m p l a r e i m A r r a y s p e i c h e r n : places[2] = new Point(); places[2].y = 7; 163 in d e x 0 1 2 3 4 5 6 7 8 9 va l u e nul l nul l nul l nul l nul l nul l nul l nul l places x 8 y 5 x 0 y 7 Di e g a n z e W a h r h e i t Point[] places; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( places ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . ... a u f e in e n A r r a y v o n V e r w e is e n ( R e f e r e n z e n ) a u f Point Ob j e k t e § El e m e n t places[k] en t h ä l t V er w ei s a u f ei n k o n k r e t es E x em p l a r § Od e r null we n n k e i n E x e m p l a r v o r h a n d e n § null ka n n f ü r a l l e K l a s s e n v e r w e n d e t w e r d e n 164 Di e g a n z e W a h r h e i t Point[] places; § De k l a r i e r t e i n e n e u e R e f e r e n z v a r i a b l e ( places ) d i e s i c h a u f ei n en A r r a y b e z i eh en k a n n . . . ... d a z u m u s s d e r A r r a y e x is t ie r e n § places = new Point[4]; § So n s t h a t places de n W e r t null we n n k e i n A r r a y vo r h a n d e n i s t § null ka n n f ü r a l l e A r r a y s o d e r K l a s s e n v e r w e n d e t w e r d e n 165 Kla s s e n: Zu s t a n d und Ve r h a l t e n § At t r i b u t e ei n es Ob j e k t s kö n n e n ei n en be l i e bi g e n Ty p ha be n und le g e n de n Zu s t a n d ( le g a le We r t e ) f e s t § Ba s is t y p e n § St r i n g s § Ar r a y s § … § Da s Ve r h a l t e n ( Me n g e de r Op e r a t i o n e n ) wi r d dur c h Me t h o d e n be s t i m m t § Un d ev tl . si n d Op e r a t o r e n zu l ä s s i g – abe r ni c h t fü r vo n uns en t w i c k l t e Kl a sse n 170 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 4. 0 Kl a s s e n und Ob j e k t e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e k t e ( al l g e m e i n ) 4. 2 Ob j e k t e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t wi c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Me t h o d e n 4. 7 Ko n s t r u k t o r e n 4. 8 Si c h tb ar k e i t vo n At t r i b u t e n 4. 9 static Me t h o d e n und V a r i a bl e 2 4. 6 Me t h od en Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 - 9 Al l r i g h t s r e s e r v e d . 3 Ei n P r o b l e m ( Ar b e i t s z e i t be r e c hne n ) § Di e F i l e hours.txt en t h ä l t di e fo l ge n d e n Da t e n : ID N a m e in d e r Wo c h e ge a r b e i t e t e St unde n (p r o Ar b e i t s t a g ) 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 789 Steffie 8.0 8.0 8.0 8.0 7.5 § Wi r wo l l e n ei n P r o g r am m sc h r e ib e n d as d i e An z a h l St u n d e n fü r je d e Pe r s o n be r e c hne t : Paula (ID#123) worked 31.4 hours (7.85 hours/day) Erich (ID#456) worked 36.8 hours (7.36 hours/day) Steffie (ID#789) worked 39.5 hours (7.9 hours/day) 4 Wa s fü r ei n Ob j ek t br a uc he n wir ? § Mo d e l l i e r u n g de r « P e r s o n» § Op e r a t i o n e n mi t Pe r s o n e n § Vi e l l e i ch t wo l l e n wi r ei n Pr og r a m m um de n Lo h n zu be r e c hne n § An z a h l St u n d e n × St u n d e n l o h n 5 At t r i b u t e § At t r i b u t e kö n n e n kö n n e n ei n en be l i e bi g e n Ty p habe n § Ba s i s t y p e n § St r in g s § Ar r a y s § … 6 Be i s p i e l Ar be it s z e it § Si n n v o l l wä r e hi e r ei n Ty p Person public class Person { String name; int id; double[] hours; } § Uns e r Pr o gr a m m ( main ) ar b e i t e t da nn mi t ei n em Ar r a y v on ( Re f e r e n z e n au f ) Person Ob j e k t e n Scanner input = new Scanner(new File(\"data.txt \")); Person[] staff = new Person[ input.nextInt ()] ; for (int i = 0; i < staff.length ; i ++) { staff[i ] = readData(input ); } 7 Be i s p i e l Ar be it s z e it Al s o i n ei n er Kl as s e HoursWorked ( Kl i e n t vo n Person ) public class HoursWorked { public static void main (String[] args ) { Scanner input = new Scanner(new File(\" data.txt \")); Person[] staff = new Person[ input.nextInt ()]; for (int i = 0; i < staff.length ; i ++) { staff[ i ] = readData (input); } //compute hours worked … } 9 Me t h od en be s c hr e ibe n da s Ve r h a l t e n § Bes c h r ei b en da s Ve r h a l t e n ei n es Ob j e k t e s § Ve r h a l t e n – Zu s t an d sän d e r u n g e n od e r Ab f r a g e n de s Zu s t an d e s 10 Re d u n d a n z im Klie n t e n § Uns e r Kl i e n t e n p r o g r am m mö c h t e de n Lo h n für al l e An g e s t e l l t e n be r e c hne n 11 § Ge g e b e n ei n Ar r a y 1 staff vo n Person Ob j e kt e n : double salary; // compute salary in loop for (int i = 0; i < staff.length ; i ++) { double sum = 0; for (int j = 0; j < staff[ i ]. hours.length ; j++ ) { sum += staff[ i ].hours[j]; }; salary = sum * 20.00; //print salary ... } // for i 1 : Ar r a y v o n R e f e r e nz e n au f Person Ob j e k t e n 12 Wa s g e h t h i e r v o r ? for (int i = 0; i < staff.length ; i ++) { double sum = 0; for (int j = 0; j < staff[ i ]. hours.length ; j++ ) { sum += staff[ i ].hours[j]; }; }; 13 in d e x 0 1 2 va l u e staff name \"P a u l a \" id 123 hours in d e x 0 1 2 3 va l u e 12. 5 8. 1 7. 6 3. 2 in d e x 0 1 2 3 4 va l u e name \"E r i c h \" id 456 hours name \" St e f f i e \" id 789 hours in d e x 0 1 2 3 4 va l u e Re d u n d a n z im Klie n t e n § We n n wi r di e s e Ber ec h n u n g an meh r er en St e l l e n dur c h führ e n wo l l e n , mü s s en wi r de n C o de ko p i e r e n … § Di e s e Ar t v on Re d u n d a n z ka n n mi t ei n er Met h o d e ve r h i n d e r t we r d e n § Me t h o d e computePay(Person p ) public static double computePay(Person p ) { double sum = 0; for ( int k = 0; k < p.hours.length ; k ++) { sum += p.hours[k ]; } return sum * 20.00; } 15 Oh n e Re d u n d a n z , V e r s i o n 1 § main wü r d e da nn di e s e Me t h o d e au f r u f e n // compute total wages to be paid double totalWages = 0.0; for (int i = 0; i < staff.length ; i ++) { totalWages += computePay(staff[i ]); } 16 Beis p iel ( vo l l s t ä n d i g e r ) public class HoursWorked { public static void main (String[] args ) { Scanner input = new Scanner(new File(\" data.txt \")); Person[] staff = new Person[ input.nextInt ()]; for (int i = 0; i < staff.length ; i ++) { staff[ i ] = readData (input); } double totalWages = 0.0; for (int i = 0; i < staff.length ; i ++) { totalWages += computePay (staff[ i ]); } } //main public static double computePay (Person p) { double sum = 0; for ( int k = 0; k < p.hours.length ; k++) { sum += p.hours [k]; } return sum * 20.00 ; } // computePay } 17 P r o ble m e mi t die s e r P r o g r a m m s t r uk t ur § Me t h o d e computePay (…) is t Te i l vo n HoursWorked ( de m Kl i e n t e n ) § Je d e s Pr og r a m m das mi t Person Ob j e kt e n ar be i t e t mü s s t e ei n e computePay (…) Met h o d e im p le m e n t ie r e n . § Ob j e k t e er l a u b en Wi e d e r v e r w e n d u n g vo n C o d e – ab e r di e s e fi nde t ni c h t st a t t we n n je d e r Kl i e n t de n C o de für di e Ge ha l t s be r e c hnung dupl i z i e r e n mu s s . 19 P r o ble m e mi t die s e r P r o g r a m m s t r uk t ur § Di e Me t h o d e computePay (…) mu s s vi e l e Ei n z e l h e i t e n übe r di e I m pl e m e n t a t i o n v o n Person Ob j e k t e n wi s s en for ( int k = 0; k < p.hours.length ; k ++) sum += p.hours[k ]; } § Di e A t t r i b u t e v o n Person kö n n t e n si c h ab e r än d e r n 20 Ei n e mö g l i c h e Ände r ung § De r A r r a y hours en t h ä l t di e An z a h l Stu n d e n , d i e ei n e Pe r s o n an ei n em Ta g ge a r b e i t e t ha t . § Wa s we n n wi r zw i s c h e n Nor m a l z e i t und Übe r s t unde n un t e r s c he i de n wo l l e n ? § Er s t e n 8 St u n d e n /T a g si n d No r ma l z e i t , sF r 20. 00 p r o St u n d e § Üb e r 8 St u n d e n gi l t al s Üb e r s t u n d e , 2 5 % Zu s c h l a g § Wi r mü s s en Person Ob j e k t e an p asse n und di e Me t h o d e n computePay (…) in al l e n Kl i e n t e n an p asse n 21 Person mi t Üb e r s t u n d e n At t r i b u t public class Person { String name; int id ; double[] hours; double[] overtime; } § Vi e l e an d e r e At t r i b u t e für ri ch t i g e Pe r s o n e n d a t e n … 22 computePay mi t Üb e r s t u n d e n public static double computePay(Person p ) { double sumStd = 0.0; double sumOvt = 0.0; for ( int i = 0; i < p.hours.length ; i ++) { sumStd += p.hours[i ]; } for ( int i = 0; i < p.overtime.length ; i ++) { sumOvt += p.overtime[i ]; } return sumStd * 20.00 + sumOvt * 25.00; } 23 P r o ble m e mi t die s e r P r o g r a m m s t r uk t ur § Wi r wo l l e n Kl as s e n en t wi c k el n di e ( in n e r h a lb ei n es be s t i m m t e n Ra hm e ns ) v on d e n Kl i e n t e n una bhä ngi g ( we i t e r ) en t wi c k el t we r d e n kö n n e n . § Wi r wo l l e n Kl i e n t e n en t wi c k el n di e v o n de r I m pl e m e n t a t i o n de r K l a s s e n ( di e si e ve r w e n d e n ) una bhä ngi g si n d . 24 P r o ble m e mi t die s e r P r o g r a m m s t r uk t ur § Im Kl i e n t e n is t übe r ha up t ni c h t er s i c h t l i c h da s s computePay ( …) ei n e M e t h o d e f ü r Person Ob j e k t e i s t § Es w i r d e i n Person Ob j e kt a l s P a r a m et e r ü be r g e be n for ( int i = 0; i < staff.length ; i ++) { totalWages += computePay (staff[ i ]); } § Person Ob j e k t e si n d Pa r a m e t e r , ab e r ke i n we i t e r e r Be z u g zu r Person Kl as s e 26 P r o ble m e mi t die s e r P r o g r a m m s t r uk t ur § Kl as s e n so l l t e n Zu s t an d und Ve r h a l t e n ko m b i n i e r e n . § Be r e c h n u n g de s Ge h a l t e s computePay (…) is t ei n Ve r h a l t e n das e ng mi t de n Da t e n ei n es Person Ob j e kt e s ve r b u n d e n is t . § Di e se Me t h o d e ge h ö r t da he r in je d e s Person Ob j e k t . § Dann ka n n di e s e Met h o d e in D o t N o t a t io n auf g e r uf e n we r d e n § totalWages += staff[ i ]. computePay (); 2728 Me t h od en fü r Ex e m p l a r e § Ei n e Me t h o d e ( au c h «o b je ct m e t h o d ») ex i s t i e r t in n e r h a lb je d e s Ob j e k t (e x e m p l a r )s ei n er Kl as s e und be s c hr e i b t da s Ve r h a l t e n ei n es Ob j e k t e s . § Sy n t a x : public ty p e na m e ( par am e t er s ) { st a t e m e n t s ; } § Se l b e Sy n t a x wi e be i de n bi s he r be k ann t e n Met h o d e n abe r ohne das Ke y w o r d static 30 Ty p d e r R ü c k g a b e Pa r a m e t e r l i s t e Na m e d e r M e t h o d e 31 Be i sp i e l e public class Greetings { public void hello(String name) { System.out.println(\"HELLO \" + name); } } public class Person { String name; int id; double[] hours; double[] overtime ; public String nameIs () { // return name return name ; } } // usage example on next slide 33 Be i s p i e l e , Ei n s a t z public class HoursWorked { public static void main (String [] args ) { Scanner input = new Scanner(new File(\"data.txt \")); Person[] staff = new Person[ input.nextInt ()]; Greetings friendly = new Greetings(); for (int i = 0; i < staff.length ; i ++) { staff[i ] = readData(input ); } // process entries for employees for (int i = 0; i < staff.length ; i ++) { friendly.hello (staff[ i ]. nameIs ()); } } 3435 Be m e r k u n g e n § Ei n e M e t h o d e k a n n si c h a u f A t t r i b u t e b e z i e h e n § Be is p ie l name in Met h o d e nameIs () § Wi r br a uc he n ei n Ex e m p l a r u m ei n e Me t h o d e au f z u r u f e n § In « D o t N o t a t i o n » § Be is p ie l friendly und staff[ i ] in main 36 Person Ob j e k t e mi t Me t h o d e computePay public class Person { String name; int id; double[] hours; double[] overtime; // Computes wages, 25% overtime supplement public double computePay () { double sumStd = 0; double sumOvt = 0; for ( int i = 0; i < hours.length ; i ++) { sumStd += hours[i ]; } for ( int i = 0; i < overtime.length ; i ++) { sumOvt += overtime[i ]; } return sumStd * 20.00 + sumOvt * 25.00; } } 3738 Me t h od en fü r Ex e m p l a r e public class Person { String name; int id; double[] hours; double[] overtime; // Computes wages, 25% overtime supplement public double computePay () { … } } § Di e computePay Met h o d h a t ni c h t me h r ei n en Person p Pa r a m e t e r . § Wi e « we i s s » d i e Met h o d e wi e v i e l e St u n d e n ei n e Pe r s o n ge a r b e i t e t ha t ? § Wi e erh ä l t di e Met h o d e Zu g a n g zu Da t e n in hours und overtime ? 39 § Je d e s Person Ob j e k t h a t s e i n e ei g en e Ko p i e de r computePay Me t h o d e , d i e mi t de m Zu s t a n d di e s e s Ob j e k t e s ar b e i t e t : Person p1 = new Person(); // read data Person p2 = new Person(); // read data p1.computePay(); p2.computePay(); Person Ob j ek t e mi t Me t h od en 40 name \" xxxx \" id n hours in d e x 0 1 2 va l u e X X X name \" yyyy \" id m hours in d e x 0 1 2 3 va l u e X X X X computePay computePay 41 Person p1 = new Person(); // read data Person p2 = new Person(); // read data p1.computePay(); p2.computePay(); public double computePay () { // this code can see p1's data } hours[0] 12.5 hours[1] 8.1 hours[2] 7.6 p2 p1 public double computePay () { // this code can see p2's data } hours[0] 4.0 hours[1] 11.6 hours[2] 6.5 4445 De r im pliz it e Pa r a m e t e r Im p liz it e r (« i m p l i c i t » ) P a r a m e t e r : Re f e r e n z au f Ob j e k t für da s di e Me t h o d e au f g e r u f e n wi r d . § Wä h r e n d de r Au s f ü h r u n g vo n p1.computePay(); is t de r im p liz it e Pa r a m e t e r d a s Ob j e kt auf das p1 ve r w e i s t . § Wä h r e n d de r Au s f ü h r u n g vo n p2.computePay(); is t de r im p liz it e Pa r a m e t e r d a s Ob j e kt auf das p2 ve r w e i s t . § Di e Me t h o d e wi r d im Ko n t e x t ei n es ko n k r e t e n Ob j e k t e s au sg e f ü h r t . § computePay ka n n auf hours und overtime de s Ob j e kt e s zu g r e i f e n fü r das di e s e Met h o d e auf g e r uf e n wu r d e . § Met h o d e wi r d « fü r » d i e s e s Ob j e kt auf g e r uf e n ; Met h o d e wi r d auf di e s e s Ob j e kt « ang e w e nde t » 47 Person Ob j e k t e mi t Me t h o d e n public class Person { String name; int id; boolean leftCompany ; double[] hours; double[] overtime; // Computes wages, 25% overtime supplement public double computePay () { double sumStd = 0; double sumOvt = 0; for (int i = 0; i < hours.length ; i ++) { sumStd += hours[i ]; } for (int i = 0; i < overtime.length ; i ++) { sumOvt += overtime[i ]; } return sumStd * 20.00 + sumOvt * 25.00; } 48 Person mi t Me t h o d e present // weiter in class Person // Find out if employee left public void present() { if ( leftCompany ) { System.out.println (\"Left company\"); } else { System.out.println (\"Still employed\"); } } } //class Person 49 De r im pliz it e Pa r a m e t e r Im p liz it e r (« i m p l i c i t » ) P a r a m e t e r : Re f e r e n z au f Ob j e k t für da s di e Me t h o d e au f g e r u f e n wi r d . § Wä h r e n d de r Au s f ü h r u n g vo n p1.computePay(); ve r w e i s t de r im p liz it e Pa r a m e t e r a u f d a s Ob j e kt auf das p1 ve r w e i s t . § Wä h r e n d de r Au s f ü h r u n g vo n p2.computePay(); ve r w e i s t de r im p liz it e Pa r a m e t e r a u f d a s Ob j e kt auf das p2 ve r w e i s t . § Di e ( Ob j e kt ) Met h o d e n kö n n e n mi t de n At t r i b u t e n di e s e s Ob j e kt (e x em p l a r)s ar be i t e n ( d. h. le s e n und sc h r e i b e n ). § Ei ne ( Ob j e kt ) Met h o d e wi r d im Ko n te x t ei n es ko n k r e t e n Ob j e kt e (e x em p l a r)s aus g e f ühr t . § computePay ka n n auf hours und overtime de s Ob j e kt e s zu g r e i f e n fü r das di e s e Met h o d e auf g e r uf e n wu r d e . 50 Me t h od en § Ex i s t i e r e n in n e r h a lb je d e s Ob j e k t ( ex a m p l a r s ) ei n er Kl as s e und be s c hr e i be n da s Ve r h a l t e n de s Ob j e k t e s § Ar b e i t e n mi t de n At t r i b u t w e r t e n di e s e s Ex e m pl ar s § Di e se s Ex e m p l a r : im p liz it e r Pa r a m e t e r § Met h o d e ha t Zu g r i f f auf A t t r i but e wi e auf ei n en Pa r a m e t e r -- auc h we n n das Ob j e kt e x e m p l a r ni c h t in d e r Pa r a m e t e r l i s t e er s c h ei n t 51 Po i n t Kla s s e , V e r s i o n 2 § Und w a s für Me t h o d e n so l l e n wi r für di e Kl as s e Point de fi ni e r e n ? public class Point { int x ; int y ; } § Bi s h er ha t t e n wi r ke i n Ve r h a l t e n für Point Ob j e k t e di s k ut i e r t . 52 // A Point object represents an (x, y) location. public class Point { int x ; int y ; public void setLocation (int newX , int newY ) { x = newX ; y = newY ; } public void translate(int dx, int dy ) { setLocation (x + dx, y + dy ); } 53 Me t h od en § Kö n n e n a n d e r e M e t h o d e n a u f r u f e n § Wi e b i s h e r – abe r e v t l . m i t i m pl i z i t e m P ar am e t e r § Au c h Au f r u f d e r s e l b e n M e t h od e i s t m ög l i c h § … u n d m a n c h m a l v on V or t e i l § Bei s p i el : S i e w o l l en A n z a h l L eer z ei c h en ( \" \" ) i n S t r i n g z ä h l en § Ge h t a u c h a n d e r s … 54 Kla s s e M y S t r ing § Kö n n e n S t r i n g n i c h t m o d i f i z i e r e n § Au c h k e i n e n e u e n M e th od e n h i n zu f ü g e n § Al s o n e u e K l a s s e : M y S tr i n g public class MyString { String s ; public static void main ( String [] args ) { MyString beispiel = new MyString (); beispiel.s = \" Nach Besuch der Veranstaltung sollen Sie einfache Programme in Java systematisch entwickeln koennen .\" ; int count = beispiel. leer () ; System.out.println ( \" Anzahl Leerzeichen : \" + count); } // geht weiter 55 // weiter public int leer () { if ( s.length () == 0) { return 0; } if ( s.length () == 1) { if ( s.equals ( \" \" )) { return 1; } else { return 0; } } else { MyString front = new MyString (); front.s = s.substring (0, ( s.length ()+1)/2); MyString back = new MyString (); back.s = s.substring (( s.length ()+1)/2); return front.leer () + back.leer (); } } // leer } // MyString 56575859 Meh r At t r i b u t e fü r Person public class Person { String name; int id; double hourlyRate ; double[] hours; double[] overtime; // various methods … } § We n n wi r für je d e Pe r s o n d e n Stu n d e n l o h n fe s t h a l t e n wo l l e n 60 Zu g r i f f au f A t t ri b u t e § Je d e r Kl i e n t ka n n ( bi s he r ) a u f al l e At t r i b u t e ei n es Ob j e k t e s zu g r e i f e n ( le s e n und/ od e r mo d i f i z i er en ) § Di e s is t ni c h t im m e r ge w ü n s c h t § So n s t kö n n t e je d e r hourlyRate ve r ä n d e r n … § Al s Vo r b e r e i t u n g für ei n e be s s e r e Str u k tu r be t r a c h t e n wi r zw e i Ar t e n vo n Me t h o d e n : 61 Me t h od en § Ac c e s s or Me t h o d e («ac c e s s o r »): Ei n e Me t h o d e di e e s erl a u b t de n Zu s t a n d ei n es Ob j e k t e s an z u s e h e n § Be i s p i e l : getAdresse () , getHourlyRate () § Ha t se h r of t ei n en Rüc k g a be w e r t de r ni c h t void is t (n on - void re t u r n ) § Mu t a t o r Me t h o d e («m u t a t o r »): Ei n e Me t h o d e di e de n Zu s t a n d ei n es Ob j e k t s ve r ä n d e r t § Be i s p i e l e : setHourlyRate (…) , addTrainingTime (…), setAdresse (…) 62 Mu t a t or Me t h od en § Sc h r e i b e n Si e ei n e Me t h o d e setHourlyRate di e de n Stu n d e n l o h n au f d e n übe r g e be ne n Be t r a g newRate ( vo m Ty p double ) s et z t . § Sc h r e i b e n Si e ei n e Me t h o d e addTrainingTime di e für je d e n ge a r b e i t e t e n Ta g d i e Nor m a l a r b e i t s z e i t um extraTime ( ei n Pa r a m e t e r vo m Ty p double ) er h ö h t . 64 Mu t a t or Me t h od en public void setHourlyRate (double newRate ) { hourlyRate = newRate ; } public void addTrainingTime (double extraTime ) { for ( int i = 0; i < hours.length ; i ++ ) { hours[ i ] += extraTime ; } 66 Ac c e s s o r Me t h od en § Sc h r e i b e n Si e ei n e Me t h o d e distanceFromOrigin di e de n Ab s t a n d ( al s double ) ei n es Punk t e s vo m Nu l l p u n k t (0, 0) zu r ü c k g i b t . § Fr a g e n : § F o r m e l : Py t h a g o r a s § Ty p de s Rü c k g a b e w e r t e s : double public class Point { int x; int y; } 67 Ac c e s s o r Me t h od en public double distanceFromOrigin () { return Math.sqrt (x * x + y * y); } 69 Ac c e s s o r Me t h od en § Sc h r e i b e n Si e ei n e Me t h o d e distance di e de n Ab s t a n d ( al s double ) zu ei n em an d e r e n Punk t be r e c hne t § Fr a g e n : § Fo r m e l fü r Ab s t a n d zwi s c h e n (x 1 , y 1 ) u n d (x 2 ,y 2 ): § Wa s is t / si n d de r / di e P ar am e t e r § Ty p de s Rü c k g a b e w e r t e s : double 70 ( ) ( ) 2 12 2 12 yyxx -+- Ac c e s s o r Me t h o d e n public double distance(Point other) { int dx = x - other.x ; int dy = y - other.y ; return Math.sqrt (dx * dx + dy * dy ); } 71 Ac c e s s o r Me t h o d e n public double distance(Point other) { int dx = x - other.x ; int dy = y - other.y ; return Math.sqrt (dx * dx + dy * dy ); } // andere Implementation von distanceFromOrigin public double distanceFromOrigin () { Point origin = new Point(); // init (0,0) return distance(origin); } 72 Aus g a be ( Dr u c k e n ) v o n Ob j ek t en Oh n e we i t e r e Hi l f e we i s s da s J a v a S y s t e m ni c h t , wi e ei n Ob j e k t ge d r u c k t we r d e n so l l : Person[] staff = new Person[size]; // read from file for (int i = 0; i < staff.length ; i ++) { System.out.println(\"MA \" + i + \" ist \" + staff[i ]); } Au s g a b e : MA 0 ist Person@c17164 MA 1 ist Person@1fb8ee3 MA 2 ist Person@61de33 74 Aus g a be ( Dr u c k e n ) v o n Ob j ek t en Oh n e we i t e r e Hi l f e we i s s da s J a v a S y s t e m ni c h t , wi e ei n Ob j e k t ge d r u c k t we r d e n so l l : Person[] staff = new Person[size]; // read from file for (int i = 0; i < staff.length ; i ++) { System.out.println(\"MA \" + i + \" ist \" + staff[i ]); } 75 St r i n g St r i n g int St r i n g Re f . P e r s o n St r i n g de f aul t A k t i o n . . . . Um w an d l u n g z u String ... d u r c h M e t h o d e toString() au s d e r Kl asse Me t ho de ex i s t i e r t a u c h w e n n w i r s i e n i c h t g e s c h r i e b e n h a b e n § Sa g t Ja v a S y s t e m wi e Ob j e k t in String ve r w a n d e l t wi r d for (int i = 0; i < staff.length ; i ++) { System.out.println (\"MA \" + i + \" ist \" + staff[ i ] ); } § Ni c h t unb e d i ng t w a s wi r wo l l e n 78 Um w an d l u n g z u String ... d u r c h M e t h o d e toString() au s d e r Kl asse § Me t h o d e e x i s t i e r t a u c h w e n n w i r s i e n i c h t g e s c h r i e b e n h a b e n § Sa g t Ja v a S y s t e m wi e Ob j e k t in String ve r w a n d e l t wi r d for (int i = 0; i < staff.length ; i ++) { System.out.println (\"MA \" + i + \" ist \" + staff[ i ]. toString () ); } § Ni c h t unb e d i ng t w a s wi r wo l l e n 79 Di e toString Me t h od e § Di e d e f a u l t toString Me t h o d e is t § Kl a sse n N a m e @ Ad r e s s e _ i m _ S p e i c h e r § Ni c h t das w as wi r wo l l e n …. a b e r w i r k ö nne n uns e i ne e i g e ne s c ha f f e n § Bes s er e toString Me t h o d e public String toString () { // I n s t r u k t io n e n di e e in e n String fü r di e s e s Ob j e k t zu r ü c k g e b e n } § Na m e d e r Me t h o d e , K e y w o r d public , r et u r n Ty p String , und ( ke i n ) P a r a m e t e r mü s s en ge n a u st i m m e n 83 toString Be i s p i e l // Returns a String representing this Person. // Put in class Person! public String toString () { return name + \" (#\" + id + \") ist \" + Arrays.toString (hours) + \" \" + Arrays.toString (overtime); } 85 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e kt e ( al l g e m e i n ) 4. 2 Ob j e kt e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t w i c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Met h o d e n 4. 7 Si c h tb ar k e i t vo n At t r i b u t e n 4. 8 Ko n s t r u k t o r e n 4. 9 static Me t h o d e n und V a r i a bl e 87 4. 7 Si c h t b ark e i t fü r At t r i b u t e 88 Me t h od en d er K l a sse P er son … k ö n n e n z u g r e i f e n au f ( le s e n und/ od e r mo d i f i z i er en ) § Pa r a m e t e r § In d e r M e t h o d e d e k la r ie r t e V a r ia b le § A t t r i b u t e d e s O b j e k t s ( i m p l i z i e r t e r P a r a m et e r ) § In d e r K l a s s e d e k l a r i e r t § Bei s p i el : M e t h o d e computePay() § So w i e au f A t tr i b u t e d e r Kl asse n d e r e n Kl i e n t Person is t 90 Zu g r i f f au f A t t ri b u t e § Je d e r Kl i e n t ka n n ( bi s he r ) a u f al l e At t r i b u t e ei n es Ob j e k t e s zu g r e i f e n ( le s e n und/ od e r mo d i f i z i er en ) § Ac c e s s or u n d M u t a t or Met h o d e n st r u k t u r i e r e n de n C o de abe r Zu g r i f f is t no c h im m e r mö g l i c h § Di e s is t ni c h t im m e r ge w ü n s c h t § So n s t kö n n t e je d e r hourlyRate ve r ä n d e r n … public void myFriend(Person p) { p.hourlyRate = p.hourlyRate * 2.0; } 91 Zu g r i f f au f A t t ri b u t e § Je d e r Kl i e n t ka n n ( bi s he r ) a u f al l e At t r i b u t e ei n es Ob j e k t e s zu g r e i f e n ( le s e n und/ od e r mo d i f i z i er en ) § Wi e k ö n n e n w i r O b j e k t e x e m p l a r e s o k o n s t r u i e r e n d a s s (m a n c h e / a l l e ) A t t r i b u t e « g e s c h ü t z t » s i n d ? § Gr u n d p r ob l e m d e r Ab k a p s e l u n g ( « E n c a p s u l a ti on » ) 92 «E n c ap s u l a t i o n » ( Da t e n k a p s e l u n g ) § Bi s h er : D e f i n i t i o n v o n Va r i a b l e n in Me t h o d e n § … m i t S i c h tb a r k e i t i n d e r M e th od e § Je tz t: O b j e k t e h ab e n e i n e n Zu s t an d ( O b j e k t a t tr i b u t e ) § Va r i a b l e a u s s e r h a l b v o n M e t h o d e n d e k l a r i e r t § Zu g r i f f ( D o t - No t a t i o n ) mi t t e l s R e f e r e n z v a r i a b l e D O T Na me § Zu g r i f f i n M e t h o d e ( N a m e g e n ü g t ) § Kl as s e n b i e t e n M e c h an i s m u s d e r A b k ap s e l u n g § «E n c a p s u l a t i o n » ( m a n c h m a l D a t e n k a p s e l u n g ) 9395 public class Point { int x; int y; } // in einem Klienten Point p1 = new Point() ; p1.x = 6; At t r i b u t e x und y si n d für je d e n Kl i e n t e n si c h t b ar x 6 y 0 En c a p s u l a t i o n § Id e e : Ve r s t e c k e n de r D e t a i l s de r I m pl e m e n t a t i o n ei n er Kl as s e vo r de n Kl i e n t e n de r Kl as s e § Enc ap s ul a t i o n zwi n g t zu r Ab s tr a k ti o n . § Tr e n n u n g vo n Ve r h a l t e n (e x t ern si c h t b a r ) u n d Zu s t a n d (i n t ern ) § Sc h ü t z t di e Da t e n ei n es Ob j e kt e s vo r unbe ab s i c h t i g t e n od e r une r w üns c h t e n Op e r a t i o n e n § Enc ap s ul a t i o n erl a u b t An p a s s u n g ( en ) d er I m p l em en t a t i o n ohne Än d e r u n g e n de r Kl i e n t e n Pr og r a m m e § Gr undl a g e für We i t e r e n t w i c k l u n g / Wi e d e r v e r w e n d u n g 96 En c a p s u l a t i o n § Bei de r D e fi ni t i o n ei n es At t r i b u t e s kö n n e n wi r de s s e n Si c h tb ar k e i t an g e b e n § At t r i b u t e d i e nur in t e r n ( d. h . v o n Met h o d e n de r Kl a sse ) ge ä n d e r t bz w ge l e s e n we r d e n kö n n e n § At t r i b u t e a u f d i e « v o n aus s e n » ( d. h. au s Met h o de n in Kl i en t en – d. h . ex t e r n ) zu g e g r i f f e n we r d e n ka n n § Zu g r i f f mi t Do t N o t a t i o n § Bis h e r in uns e r e n Kl a sse n ve r w e n d e t um ni c h t zu v i e l auf ei n m a l erk l ä r en zu mü s s e n § Sp ä t e r le r n e n wi r no c h an d e r e Mö g l i c h k e i t e n ke n n e n , in t e r n e u n d ex t e r n e At t r i b u t e zu tr e n n e n 98 At t r i b u t e mi t Si c h t b ark e i t private Ei n At t r i b u t (« f i e l d » ) a u f d a s nur in n e r h a lb de r Kl as s e zu g e g r i f f e n we r d e n ka n n § Sy n t a x : private ty p e na m e ; § Bei s p i el e ( al l e s At t r i b u t e ei n er Kl as s e !) private int id ; private String lastName ; 99 At t r i b u t e mi t Si c h t b ark e i t private Ei n At t r i b u t (« f i e l d » ) a u f d a s ni c h t vo n au s s er h al b de r Kl as s e zu g e g r i f f e n we r d e n ka n n § Sy n t a x : private ty p e na m e ; § Bei s p i el e ( al l e s At t r i b u t e ei n er Kl as s e !) private double d ; private String[] names ; 100 Po i n t K l a s s e , Ve r s i o n 2 m i t S i c h t b a r k e i t s e i n s c h r ä n k u n g // A Point object represents an (x, y) location. public class Point { private int x ; private int y ; public void setLocation (int newX , int newY ) { x = newX ; y = newY ; } public void translate(int dx, int dy ) { setLocation (x + dx, y + dy ); } 101 P r iv a t e A t t r ibut e public class Person { private String name ; private int id ; private double hourlyRate ; private double[] hours ; private double[] overtime ; // various methods public double computePay () { ... for ( int i = 0; i < hours .length ; i ++) ... } } Di r e k t e r Zu g r i f f au f A t tr i b u t e i n Me t h o d e n de r Kl as s e wi e bi s he r 102 Person Kl as s e mi t Me t ho de computePay public class Person { private String name; private int id; private double hourlyRate ; private double[] hours; private double[] overtime; // Computes wages, 25% overtime supplement public double computePay () { double sumStd = 0; double sumOvt = 0; for ( int i = 0; i < hours.length ; i ++) { sumStd += hours[i ]; } for ( int i = 0; i < overtime.length ; i ++) { sumOvt += overtime[i ]; } return sumStd * hourlyRate + sumOvt * hourlyRate * 1.25; } } 103 Pr i v a t e A t tr i b u t e // irgendwo in einem Klienten Person myRecord = …; // set to my Person object myRecord.hourlyRate = 50.0; //ERROR Kl i e n t e n Pr o gr a m m wi r d ni c h t übe r s e t z t we g e n une r l a ub t e n Zu g r i f f s au f p r i v a t e s At t r i b u t : PersonExample.java:17: hourlyRate has private access in Person myRecord.hourlyRate = 50.0; 105 public class Person { ... private double hourlyRate ; ... // various methods } At t r i b u t e oh n e Si c h t b ark e i t In f o r m a tio n We n n wi r ni c h t di e Si c h t b a r k e i t ( mi t private ) ei n s c h r ä n k en dann is t das At t r i b u t fü r uns übe r al l si c h t b a r § In d e r Kl a s s e § In al l e n K l i e nt e n § Das At t r i b u t ha t vo r e i n g e s t e l l t e (« d e f a u l t » ) Si c h t b a r k e i t § Di e ge n a u e n Re g e l n fo l g e n sp ä t e r nac hde m wi r me h r Ko n z e p t e ke n n e n . § Nu r private sc h r ä n k t Si c h b a r k e i t ei n – Ac c e s s or / M u t a t or Met h o d e n st r u k t u r i e r e n Pr og r a m m abe r ke i n Ei n f l us s auf Si c h t b a r k e i t § Sy n t a x : ty p e na m e ; 106 Zu g r i f f au f p ri v a t e A t t ri b u t e § Nu r Me t h o d e n di e in de r Kl as s e de fi ni e r t si n d kö n n e n au f pr i v a t e A t t r i but e zu g r e i f e n§ Si e h e Met h o d e computePay § We n n Zu g r i f f vo n e x t e r n er l a u b t se i n so l l da nn mu s s d i e Kl as s e da für Me t h o d e n zu r Ve r f ü g u n g st e l l e n § Ac c e s s or Met h o d e (n ) § Mu t a t o r Met h o d e (n ) 107 Zu g r i f f au f d e n pr iv a t e n Zu s t a n d // A read - only access to the hourlyRate field // (accessor) public int getHourlyRate () { return hourlyRate ; } // Allows clients to change the hourlyRate field // (mutator) public void setHourlyRate ( int newRate ) { hourlyRate = newRate ; } 108 Zugr i ff auf de n pr i v a t e n Zus t and , im Kl i e n t e n § Da s Kl i e n t e n p r o g r am m si e h t da nn so au s : Person myRecord = … // z.B. staff[j] System.out.println ( myRecord.getHourlyRate () ); myRecord.setHourlyRate (40); 109 Vo r t e i l e Mu t a t or / A c c essor Me t h od e § Me t h o d e n kö n n e n zu s ä t z l i c h e Ko n t r o l l e n vo r n e h m e n § Ch e ck Re c h t ei n e Än d e r u n g vo r z u n e h m e n § Lo g al l e r Än d e r u n g e n § Me t h o d e n kö n n e n Tr a n s f o r m a t i o n e n vo r n e h m e n 110 Point Kl a s s e , V e r s io n 3 // A Point object represents an (x, y) location. public class Point { private int x ; private int y ; public Point ( int initialX , int initialY ) { x = initialX ; y = initialY ; } public int getX () { return x ; } public int getY () { return y ; } public void setX (int newX ) { x = newX ; } public void setY (int newY ) { ... public double distanceFromOrigin () { return Math.sqrt (x * x + y * y); } public void setLocation (int newX , int newY ) { setX ( newX ); setY ( newY ); } public void translate( int dx, int dy ) { setLocation (x + dx, y + dy ); } 111 Vo r t e i l e de r E nc a p s ula t io n § Ab s t r a k t i on de s Ob j e k t e s und de s Kl i e n t e n § Ob j e kt : st e l l t Met h o d e n zu r Ve r f ü g u n g , « ve r h e i m l i c h t » Im p l e m e n t a t i o n § Kl i e n t : ru f t Met h o d e n auf , ke i n e An n a h m e n übe r di e I m pl e m e n t a t i o n § Sc h u tz vo r une r w üns c h t e m Zu g r i f f § Ac c e s s or / Mu t a t o r Met h o d e n si n d op t i ona l § Be is p ie l : Person oh n e setHourlyRate Met h o d e § Ob j e kt ka n n ( z.B .) ei n Pr ot ok ol l de r Zu g r i f f e anl e g e n § Wa n n wu r d e hourlyRate ge ä n d e r t § Ob j e kt ka n n we i t e r e Ko n t r o l l e n dur c h f ühr e n ( Er l aubni s …) 112 Vo r t e i l e de r E nc a p s ula t io n § Ob j e k t ka n n di e I m pl e m e n t a t i o n ve r ä n d e r n § Be is p ie l : Kl a sse Point kö n n t e Po l a r k o o r d i n a t e n ( r , θ ) ve r w e n d e n – Na me n de r Met h o d e n si n d gl e i ch abe r di e Im p l e m e n t a t i o n ände r t si c h § Be is p ie l : Kl a sse Person un t e r s c he i de t zwi s c h e n No r ma l z e i t , Üb e r z e i t und Üb e r s t u n d e n § Kö n n e n de n Zu s t an d ei n es Ob j e k t e s we i t e r e n Bes c h r ä n k u n g en un t e r w e r f e n § Be is p ie l : hourlyRate mu s s po s i t i v se i n § Ei n Da t um m us s ei n en Mo n a t v o n 1 b i s 1 2 en t h a l t en u. s . w . 113 En c a p s u l a t i o n ( Hi n w ei s ) § Ni c h t nur At t r i b u t e kö n n e n private se i n , au c h Me t h o d e n § Ni c h t - öf f e n tl i c h e s Ve r h a l t e n § Si n n v o l l we n n wi r aus Met h o d e n ge m e i n s a m e An w e i s u n g e n he r aus ne hm e n (u n d i n ei n er ei g en en Met h o d e zu s a m m e n f a s s e n ) abe r si c h e r s t e l l e n wo l l e n , das s di e s e Met h o d e ni c h t vo n ei n em Kl i e n t e n di r e k t auf g e r uf e n wi r d § Sy n t a x : private ty p e na m e ( par am e t er s ) { st a t e m e n t s ; } 114 En c a p s u l a t i o n § Bi s h er : V a ri a b l e ( od e r Pa r a m e t e r ) i n Me t h o d e ge s c h ü t z t § De k l ar i e r t Va r i a b l e fü r Blo c k ( bz w Pa r a m e t e r fü r Bo d y d e r Met h o d e ) § Ke i n Zu g r i f f vo n aus s e n § Je tz t : A t t ri b u t e de k l a r i e r e n «V a ri a b l e » für di e Me t h o d e n de r Kl as s e § At t r i b u t ge s c h ü t z t we n n si e private si n d § Ve r a n t w o r t u n g de r En t w i c k l e r § Wa s pa s s i e r t be i Na m e n s k on f l i k t e n ? 115 Be i s p i e l Kl a s s e public class Bsp { private int x ; int y ; public int method1( int x) { return x+1 ; // x ?? } public int method1( int y) { return y+1 ; // y ?? } public int method1( int z) { int x = z+1; return x ; // x ?? } } 117 So l l t e private ei n en Un t e r s c h i e d m a c h e n ? We l c h e s x ? We l c h e s y ? We l c h e s x ? Na m en sk on fl i k t e § Di e in n e r e De k l a r a t i o n ge w i n n t d. h. ve r d e c k t (« s h a d o w s » ) di e äu sse r e De k l a r a t i o n public class Beispiel { int x = 0 ; public int increment () { int x = 1; //sets method - local variable return x + 1 ; } ... } 118 Na m en sk on fl i k t e § Di e in n e r e De k l a r a t i o n ge w i n n t d. h. ve r d e c k t (« s h a d o w s » ) di e äu sse r e De k l a r a t i o n public class Beispiel { int x = 0 ; public int increment ( int x ) { x = 1; //sets parameter variable return x + 1 ; } ... } 119 Ve r d e c k e n vo n Va r i a b l e n (« sha do wing » ) § sh ad o w i n g : Zw e i Va r i a b l e mi t de m se l b e n Na m e n di e be i de si c h t b ar si n d . § No r ma l e r w e i s e in J a v a ille g a l – Au s n a h m e we n n ei n e de r Va r i a b l e n ei n At t r i b u t (« f i el d » ) ei n er Kl a sse is t . § Se i e n x und y At t r i b u t e § We n n ei n e Met h o d e x und y al s Pa r a m e t e r h a t , dann be z i e he n si c h x und y auf di e P ar am e t e r § We n n ei n e Met h o d e x und y al s Va r i a b l e de k l ar i e r t dann be z i e he n si c h x und y auf di e V ar i abl e 121 Ve r d e c k e n vo n Va r i a b l e n (« sha do w i ng» ) public class Point { private int x; private int y; public void method1() { // A: x bezieht sich auf } public void method2( int x) { // B: x bezieht sich auf } public void method3() { int x; // C: x bezieht sich auf } } 122 Po l l Ve r d e c k e n vo n Va r i a b l e n (« sha do w i ng» ) public class Point { private int x; private int y; public void method1() { // A: x bezieht sich auf Attribut x } public void method2( int x) { // B: x bezieht sich auf Parameter x } public void method3() { int x; // C: x bezieht sich auf Variable x } } 123 Po l l Ve r d e c k e n vo n Va r i a b l e n (« sha do w i ng» ) public class Point { int x; int y; public void method1() { // D: x bezieht sich auf } public void method2( int x) { // E: x bezieht sich auf } public void method3() { int x; // F: x bezieht sich auf } } 124 Po l l Ve r d e c k e n vo n Va r i a b l e n (« sha do w i ng» ) public class Point { int x; int y; public void method1() { // D: x bezieht sich auf Attribut x } public void method2( int x) { // E: x bezieht sich auf Parameter x } public void method3() { int x; // F: x bezieht sich auf Variable x } } 125 Po l l Un d w as w e n n … § Si e h ab e n e i n e Kl asse m i t A t tr i b u t x und e i ne ( v i e l l e i c h t la n g e ) M e t h o d e m it P a r a m e t e r v a r ia b le x … § Es g i b t k e i ne n be s s e r e n N am e f ür de n P ar am e t e r … public class Point { int x; public void method1(double x) { // Need to set attribute x! x = … } } § … u n d S i e m ü s s e n i n d i e s e r Me t h o d e d a s A t t r i b u t x s et z e n 126 Zu r Er i n n e r u n g : D e r im pliz it e Pa r a m e t e r Im p liz it e r (« i m p l i c i t » ) P a r a m e t e r : Re f e r e n z au f Ob j e k t für da s di e Me t h o d e au f g e r u f e n wi r d . § Di e Me t h o d e wi r d im Ko n t e x t ei n es ko n k r e t e n Ob j e k t e s au sg e f ü h r t § Au c h für de n im p liz it e n Pa r a m e t e r gi b t es ei n e Pa r a m e t e r v a r i a b l e : this 127 Pa r a m e t e r v a r i a b l e this § this ve r w e i s t au f d as Ob j e k t für da s ei n e Me t h o d e au f g e r u f e n wi r d ( im p liz it e r Pa r a m e t e r ) § this wi r d aut o m a t i s c h ge s e t z t (T ei l d es Au f r u f s ei n er Ob j e kt m et h o d e ) § De f i n i e r t ( nur ) i n ei n er Me t h o d e de r Kl as s e (u n d au c h nur do r t zu ve r w e n d e n ) § Ex pl i z i t e r Zu g r i f f auf ei n At t r i b u t : this . va r i a b l e § Ex pl i z i t e r Au f r u f ei n er Met h o d e : this . me t h o d ( par am e t e r s ); § At t r i b u t od e r Met h o d e de r se l b e n Kl a sse § Er l aub t abe r um s t ändl i c h ( Me t h o d e ka n n ni c h t ve r d e c k t se i n ) 128 Ei n s a t z v o n this § Si e h ab e n e i n e Kl asse m i t A t tr i b u t x und e i ne ( v i e l l e i c h t la n g e ) M e t h o d e m it P a r a m e t e r v a r ia b le x … § Es g i b t k e i ne n be s s e r e n N am e f ür de n P ar am e t e r … § Mi t this kö n n e n S i e a u f d a s A t t r i b u t z u g r e i f e n public class Point { int x; public void method1(double x) { // Need to set attribute x! this. x = (int)(x/2); } } 129 4. 8 Ko n s t r u k t o r e n 131 K o n s t r u kt i o n und In i t i a l i s i e r u n g vo n Ob j e k t e n § De r new Op e r a t o r lie f e r t ei n e Re f e r e n z ( ei n en Ve r w e i s ) a u f ei n ne ue s Ob j e k t § new cl a s s (): Re f e r e n z auf Ex e m pl ar de r Kl a sse cl a s s § Ka n n in Re f e r e n z v a r i a b l e ge s p e i c h e r t we r d e n § Point p = new Point(); § Ka n n in A r r a y v o n Re f e r e n z e n ge s p e i c h e r t we r d e n § Point[] pa = new Point[10]; § pa[0] = new Point(); § Re f e r e n z mu s s ge s p e i c h e r t we r d e n so n s t is t da s E x e m pl a r unde r w i de r r ufl i c h ve r l o r e n 132 Initia lisie r ung vo n Ob j ek t en § Bi s h er wa r e n meh r er e An w e i s u n g e n nö t i g , u m ei n Ex e m p l a r ei n er Kl as s e zu ko n s t r u i e r e n und es zu in it ia lis ie r e n : Point p = new Point(); p.x = 3; p.y = 8; § (N+ 1) An w e i s u n g e n be i N At t r i b u t e n § La n g e Fo l g e n vo n An w e i s u n g e n § Lei c h t et w a s zu übe r s e he n 133 Initia lisie r ung vo n Ob j ek t en § Bes s er wä r e es di e We r t e für di e A t t r i but e gl e i c h an z u g e b e n : Point p = new Point( 3, 8 ); // better! Person employee = new Person(\"Paula\", 123); § Wi r kö n n e n so et w a s für vi e l e Ar t e n vo n Ob j e k t e n in J a v a ma c h en . 134 Ko n s t r u k t o r e n Ko n s t r u k t o r (« c on s t r u c t or » ): In it ia lis ie r t de n Zu s t an d ei n es ne ue n Ob j e k t e s . public ty p e ( par am e t e r s ) { st a t e m e nt s ; } § ty p e is t de r N am e de r Kl a sse § Au s g e f ü h r t we n n de r new Op e r a t o r ang e w e nde t wi r d § Es gi b t ke i n e n Rü c k g a b e w e r t § Im Ru m p f kö n n e n be l i e bi g e An w e i s u n g e n auf t r e t e n ( wi e in Met h o d e ) 135 Ko n s t r u k t o r e n § Ei n Ko n s t r u k t o r is t ke i n e Me t h o d e § Ko n s t r u k t o r e n si n d op t i on a l § We n n ei n e Kl a sse n d e f i n i t i o n ke i n e n Ko n s t r u k t o r en t h ä l t , dann st e l l t Ja v a ei n en ( vo r e i n g e s t e l l t e n ) de f au l t Ko n s t r u k t o r (« de f au l t co n s t r u c t o r ») zu r Ve r f ü g u n g § De r de f aul t Ko n s t r u k t o r ha t ke i n e Pa r a m e t e r – se t z t al l e F e l de r auf ei n en We r t d e r « N u l l » en s p ri c h t ( en t w ed er 0 , 0.0 , false od e r null ) 136 Be i s p i e l e vo n Ko n s t r u k t o r e n public class Point { private int x; private int y; // Constructs a Point at the given x/y location. public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } // Methods ... } 137 Be i s p i e l e vo n Ko n s t r u k t o r e n public class Person { private String name; private int id; private double hourlyRate ; private double[] hours; private double[] overtime; // Constructs a Person with given name and Id public Person(String firstName , int uniqueId ) { name = firstName ; id = uniqueId ; } // Methods ... } 139 Ko n s t r u k t o r § A t t r i b u t e , d i e ni c h t in ei n em Ko n s t r u k t o r au f ei n en We r t ge s e t z t we r d e n , we r d e n au f N u l l ge s e t z t ( 0 , 0.0 , false or null ). § Be is p ie l : public Point ( int initialX ) { x = initialX ; } Point p1 = new Point(7); // p1.y == 0 140 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); 141 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public void setLocation(int newX , int newY ) { … x y p1 144 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public void setLocation(int newX , int newY ) { … x 0 y 0 p1 145 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public void setLocation(int newX , int newY ) { … x 7 y 0 p1 146 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public void setLocation(int newX , int newY ) { … x 7 y 2 p1 147 Aus f ühr ung ei n es Ko n s t r u k t o r s in Ze i t l u p e § Wa s pa s s i e r t we n n di e s e r Co d e au sg e f ü h r t wi r d ? Point p1 = new Point(7, 2); public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public void setLocation(int newX , int newY ) { … x 7 y 2 p1 148 Meh r er e Ko n s t r u k t o r e n Ei n e Kl as s e ka n n meh r er e Ko n s t r u k t o r e n ha be n . § Je d e r Ko n s t r u k t o r mu s s ei n e un v e r w e c hs e l bar e Li s t e vo n Pa r a m e t e r n habe n § En t s c he i de nd is t das s di e Ty p e n de r Pa r a m e t e r l i s t e un v e r w e c hs e l bar si n d § Er l aub t public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public Point( int initialX ) {x = initialX ; y = 0;} § Ni c h t erl a u b t public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public Point(int a, int b ) { x = a; y = b ; } 149 int , int int in t , in t in t , in t § Sc h r e i b e n Si e ei n en Point Ko n s t r u k t o r oh n e Pa r a m e t e r , d e r de n Punk t mi t (0, 0) in it ia lis ie r t für di e Kl as s e Point public class Point { private int x; private int y; } 151 Ei n f a c h e Auf g a be § Sc h r e ib e n Sie ei n en Point Ko n s t r u k t o r oh n e Pa r a m e t e r , d e r d e n Pu n k t mi t (0 , 0 ) in it ia lisie r t fü r di e Kla sse Point public class Point { private int x; private int y; // Constructs a new point at (0, 0). public Point() { x = 0; y = 0; } } 152 Ei n f a c h e Auf g a beEn c a p s u l a t i o n u n d Na m en sr ä u m e § Ko n s t r u k t o r e n si n d ke i n e Me t h o d e n ab e r es ge l t e n di e se l b e n Re g e l n für Na m e n s r ä u m e . § Pa r a m e t e r de fi ni e r t ei n e Va r i a b l e für de n Rum p f de s Ko n s t r u k t o r s § Wa s pas s i e r t we n n wi r x und y al s Na me n fü r di e P ar am e t e r ve r w e n d e n ( wo l l e n )? § Z. B . für de n Ko n s t r u k t o r für Point Ob j e k t e : public Point ( int initialX , int initialY ) { x = initialX ; y = initialY ; } 153 En c a p s u l a t i o n u n d Na m en sr ä u m e § Ko n s t r u k t o r für Point Ob j e k t e ( mi t pr o bl e m a t i s c he n Na m e n für Pa r a m e t e r v a r i a b l e ): public Point ( int x , int y ) { x = x ; y = y ; } § De r Pa r a m e t e r n a m e ve r d e c k t (s h a d o w s ) d a s At t r i b u t de r Kl as s e Point § Sc h l e c h t fü r Ko n s t r u k t o r de r j a At t r i b u t in it ia lis ie r e n so l l 154 Pa r a m e t e r v a r i a b l e this § this ve r w e i s t au f d as Ob j e k t für da s ei n e Me t h o d e au f g e r u f e n wi r d ( im p liz it e r Pa r a m e t e r ) § An a l og ve r w e i s t this in ei n em Ko n s t r u k t o r au f d as Ob j e k t da s ge r a d e ko n s t r u i e r t ( in it ia lis ie r t ) wi r d § Ex pl i z i t e r Zu g r i f f auf ei n At t r i b u t : this . va r i a b l e § this wi r d au t o m a ti sc h ge s e t z t (T e i l d e s Au f r u f s ei n er Ob j e k t me t h o d e bz w . ei n es Ko n s t r u k t o r s ) 155 Als o … public class Point { private int x ; private int y ; ... public Point (int x , int y ) { this. x = x ; this. y = y ; } } In n e r h a lb de s Ko n s t r u k t o r s Point § Um si c h auf das At t r i b u t x zu be z i e he n : ve r w e n d e this.x § Um si c h auf de n P ar am e t e r x zu be z i e he n : ve r w e n d e x 156 Ko n s t r u k t o r e n § Ko n s t r u k t o r e n si n d op t i on a l § We n n ei n e Kl a sse n d e f i n i t i o n ke i n e n Ko n s t r u k t o r en t h ä l t , dann st e l l t Ja v a ei n en ( vo r e i n g e s t e l l t e n ) de f au l t Ko n s t r u k t o r (« de f au l t co n s t r u c t o r ») zu r Ve r f ü g u n g § De r d e f a u l t Ko n s t r u k t o r ha t ke i n e Pa r a m e t e r – se t z t al l e F e l d e r au f ei n en We r t d e r «N u l l » en s p r i c h t ( en t w ed er 0 , 0.0 , false od e r null ) § AB E R : d e r ( vo r e i n g e s t e l l t e ) de f au l t Ko n s t r u k t o r ex i s t i e r t nur we n n ei n e Kl as s e ke i n e n Ko n s t r u k t o r se l b e r de fi ni e r t . 157 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 5. 0 I n p u t / O u t p u t Th o m a s R . G r o s s u n d M i c h a e l Fa e s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 Üb e r s i c h t 5. 1 Ar b e i t e n mi t Da t e i e n 5. 2 Scanner im Ei n sa t z / Bei s p i el e 5. 3 Ou t p u t 5. 4 Ei n f a c h e Gr a phi s c he Ben u t z er o b er f l ä c h e (G U I ) 2 Ma n i p u l i er en vo n Da t e i e n § Kl as s e File er l a u b t Op e r a t i o n e n mi t Da t e i e n (Fi l e s ) § Les en / sc h r e i b e n § In f o r m a t i o n e n abr uf e n , z.B . Gr ös s e § Um b e n e n n e n , lö s c h e n , … 3 import java.io.File ; File file = new File( \" example.txt \" ); if ( file.exists () && file.length () > 1000) { file.delete (); } Im p o r t nö t i g ! File - Me t h od en 4 exists() Gi b t true zu r ü c k , f a lls di e s e Da t e i ex i s t i e r t , so n s t false canRead () Gi b t true zu r ü c k , f a l l s d i e s e D a t e i g e l e s e n we r d e n k a n n , s o n s t false getName () Gi b t de n Na m e n di e s e r Da t e i zu r ü c k length() Gi b t di e Da t e i g r ö s s e , in B y t e s , zu r ü c k delete() Lö s c h t di e Da t e i ! renameTo (file) Be n e n n t di e Da t e i um ! Da t e i - «H an d l e » § Aus d r uc k new File(\"example.txt\") er s t el l t ke i n e Da t e i ! § So n d e r n nur ei n Ob j e k t (« h a n d l e » ), w e l c h e s für ei n e Da t e i mi t di e s e m Na m e n st e h t § Un d mi t we l c h e m di e s e Da t e i ma n i p u l i e r t we r d e n ka n n § Da t e i , für we l c h e File st e h t , ka n n ex i s t i e re n od e r ni c h t § De s hal b : exists() 5 Lesen au s ei n er Da t e i § Da s kö n n e n Si e sc h o n ! § Od e r kü r z e r : 6 import java.io.File ; import java.util.Scanner ; File file = new File( \"input.txt\" ); Scanner scanner = new Scanner( ); int zahl = scanner.nextInt (); file Scanner scanner = new Scanner( new File( \"input.txt\" )); Ei n s c h u b : T e x t - Da t e i er s t el l en § In E c lip s e a u f Pr o j e k t re c h t s k l i c k e n à Ne w à Fi l e 78 Ei n s c h u b : T e x t - Da t e i er s t el l en § In E c lip s e a u f Pr o j e k t re c h t s k l i c k e n à Ne w à Fi l e § Da t e i n a m e n ei n g eb en , z. B . in p u t . t x t à Fi ni s h § In E d it o r T e x t ei n g eb en , z. B . 42 , da nn sp e i c h e r n § Ni c h t da s Ze i l e n e n d e ve r g e s s e n 11 Do k u m e n t a t i o n fü r Scanner ht t p s : / / do c s . o r ac l e . c o m / en /j a v a / ja v a s e /1 7 /d o cs/ api / ja v a .b a s e /j a v a /u t i l / Sc anne r . h t m l 12 … n oc h v i e l m e h r T e x t f ol g t Ko n s t r u k t o r e n § Es gi b t ve r s c h i e d e n e Mö g l i c h k e i t e n , ei n en Scanner au f z u se tz e n § Un t e r s c hi e dl i c he Ar t e n vo n I n p u t Qu e l l e n § Di e I nput Que l l e wi r d de m Ko n s t r u k t o r al s Pa r a m e t e r übe r g e be n § Es gi b t fü r je d e Ar t v on I n p u t Qu e l l e ei n en Ko n s t r u k t o r 13 Scanner Ko n s t r u k t o r e n 14 Er s t e l l e n , D e t a i l 15 Wa s be de ut e t da s ? Co mp i l e r - Fe h l e r … § We n n wi r ni c h t s ma c h en , re k l a m i e r t de r C o m pi l e r … 16 Wa s si n d Ex c e p t i o n s ? § Ei n e Ex c e p t i on (« Au s n a h m e ») is t di e Fo l g e ei n es Fe h l e r s de r zu r La u f z e i t de s Pr o gr a m m e s fe s t g e s t e l l t wi r d : § Ei n e ga n z e Za h l dur c h 0 di v i di e r e n § Zu g r i f f au f ei n Ar r a y - El e m e n t , d a s ni c h t ex i s t i e r t § De r e f e r e n z i e r e n ei n er Re f e r e n z v a r i a b l e mi t We r t null § Le s e n ei n es fa l s c h e n Ty p s im Scanner § Les en ein er Da tei , d i e nic h t ex is tier t 17 Abla uf ( 1 . Appr o x im a t io n) § Fe h l e r wi r d fe s t g e s t e l l t § Ei n e Ex c e p t i o n wi r d ge n e r i e r t § Sp ä t e r dar übe r me h r § Ex c e p t i o ns si n d auc h wi e d e r Ob j e kt e § Di e Ex c e p t i o n wi r d we i t e r g e r e i c h t bi s ei n Te i l d e s Pr o gr a m m s di e s e Ex c e p t i o n be a r be i t e n ka n n § Wi r sag e n , ei n Pr o gr a m m mi t ei n em Fe h l e r « wi r f t » (« th ro w s» ) ei n e Ex c e p t i o n . 18 Ex c e p t i o n - Be i s p i e l 19 void main() { // ... foo(); // ... } void foo() { bar(); // ... } void bar() { int x = 2; int y = 10/x; // ... } Ex c e p t i o n - Be i s p i e l 20 void main() { // ... foo(); // ... } void foo() { bar(); // ... } void bar() { int x = 0 ; int y = 10/x ; // ... } Fe h l e r ! Ex c e p t i o n s au f f an g e n § Ei n Pr o gr a m m ka n n Ex c e p t i o n s au c h « au f f an g e n » ( « ca t c h » ), um a uf Fe h l e r zu re a g i e re n ( da z u sp ä t e r me hr ) § Ma n c h e E x c e p t i o n s mü s s e n vo m Pr o gr a m m au f g e f an g e n we r d e n ! § Es gi b t Ex c e p t i o ns , di e kö n n e n übe r al l auf t r e t e n (D i vi s i o n dur c h 0, De r e f e r e nz i e r e n vo n null , … ) – auf di e s e Ex c e p t i o ns is t das J a v a Sy s t e m vo r b e r e i t e t § Fü r ande r e Ex c e p t i o ns br auc h t das S y s t e m Hi l f e um zu wi s s e n , w o ei n e Ex c e p t i o n be hande l t wi r d 21 Ex c e p t i o n s au f f an g e n § Ex c e p t i o n s für di e da s S y s t e m meh r In f o r m a t io n e n br a uc h t he i s s e n «ch e ck e d E x ce p t i o n s » ( übe r pr üft e Au s n a h m e n ) § We r pr ü f t ? D e r C o m p i l e r § Co m p i l e r pr üf t das s di e Ex c e p t i o n en t w ed er lo k a l auf g e f ang e n wi r d od e r di e auf g e r uf e ne Met h o d e gi b t an, das s ei n e Ex c e p t i o n auf t r e t e n ka n n . § So n s t wi r d das Pr og r a m m ni c h t übe r s e t z t § Mü s s e n fe s t l e g e n , wi e uns e r Pr og r a m m mi t I/ O - Pr ob l e m e n um g e h t … 22 throws - Ank ündigung § throws : An kü n d i g u n g in d e r De k l a r a t i o n ei n er Me t h o d e § De k l ar i e r t , das s Met h o d e ev tl . ei n e Ex c e p t i o n wi r f t … § … und ni c h t se lb e r wi e d e r au f f än gt ! § D. h . we r di e Me t h o d e au f r u f t , m u s s d i e E x c e p t i o n fa n g e n ( od e r si e wi ed er u m an k ü n d i g e n ) § Sy n t a x : public static re tT y p e na m e (…) throws type § od e r public re tT y p e na m e (…) throws type § Wo b e i type di e A r t de r ge w o r f e n e n Ex c e p t i o n is t 23 throws - Ank ündigung § Wa s für Me t h o d e n gi l t , gi l t au c h für Ko n s t r u k t o r e n § throws : An kü n d i g u n g in d e r De k l a r a t i o n ei n es Ko n s t r u k t o r s § We r di e s e n Ko n s t r u k t o r ve r w e n d e t mu s s E x c e pt i o n s fa n g e n ( od e r si e wi e d e r u m ank ündi g e n ) § Sy n t a x : public cType (…) throws eType § Wo b e i eType di e A r t de r ge w o r f e n e n Ex c e p t i o n is t und § cType is t de r N am e de r Kl a sse fü r de n Ko n s t r u k t o r 24 Da s ke n n e n wir do c h sc h on … 25 throws - Be i s p i e l § Je tz t is t de r C o m pi l e r zu f r i e d e n ! § Ex c e p t i o ns , we l c h e di e main - Met h o d e wi r f t , we r d e n vo m Sy s t e m ge f a n ge n (u n d pr o duz i e r e n ei n en St a c k t r a c e ) 26 \u0000 Adde ndum § Ni c h t a l l e K on s t r u k t or e n v on Scanner we r f e n mö g l i c h er w ei s e ei n e E x c ep t i o n § De sh a l b k o n n t e n w i r e i n e n S c a n n e r f ü r System.in er s t el l en new Scanner(System.in) // Konstruktor für InputStream new Scanner(new File(\"input.txt\")) // Konstruktor für File 27 Üb e r s i c h t 5. 1 Ar b e i t e n mi t Da t e i e n 5. 2 Scanner im Ei n sa t z / Bei s p i el e 5. 3 Ou t p u t 5. 4 Ei n f a c h e Gr a phi s c he Ben u t z er o b er f l ä c h e (G U I ) 28 5. 2 I n p u t ( so w ei t mi t Scanner ) § Fo l g e vo n Ze i c h e n di e de r Scanner lie s t : To k e n § In p u t E l e m e n t § Er w ar t e t e Ze i c h e n häng e n vo n Met h o d e ( z.B . nextDouble () ) ab § Scanner ze r l e g t de n In h a lt ei n er Fi l e i n T ok e n s 29 Scanner Me t h od en Me t h od De sc r i p t i o n nextInt () re a d s a n int f r om t h e u s e r a n d r e t u r n s i t nextDouble () re a d s a double f r om t h e u s e r next() r e a d s a on e - w or d String f r om t h e u s e r nextLine () r e a d s a on e -li n e String f r om t h e u s e r Input T o k e ns § We n n ei n e In p u t Da t e i di e s e Ze i c h e n ( Bu c h s t a b en ) en t h ä l t : 23 3.14 \"John Smith\" § Da n n ka n n de r Scanner di e T o k e ns al s In p u t ve r s c h i e d e n e r Ty p e n in t e r p r e t ie r e n : To k e n Ty p e ( s ) 23 int , double , String 3.14 double , String \"John String Smith\" String 32 Fi l e s u n d d e r I n p u t C u r s o r ( «Z e i g e r») § Ne h m e n wi r an , ei n e Da t e i weather.txt en t h ä l t di e s e n Te x t : 16.2 23.5 19.1 7.4 22.8 18.5 - 1.8 14.9 § Fü r de n Scanner is t je d e r In p u t ei n e Fo l g e vo n Bu c h s t a b e n : 16.2 23.5 \\ n 19.1 7.4 22.8 \\ n \\ n 18.5 - 1.8 14.9 \\ n ^ § ^ is t de r « in p u t c u r so r » : di e au g e n b l i c k l i c h e Po s i t i o n d e s Scanner s § \\ n st e ht fü r «N e u e Ze i l e » od e r « Um b r u c h » is t ab e r ein Ze i c h e n in d e r Da t e i 34 Ve r a r b e i t e n ei n er Input F ile § De r Sc an n e r id e n t if iz ie r t ei n To k e n § Da s T o k e n wi r d ge l e s e n und a n de n Au f r u f e r de s S c a nne r s ab g e l i e f e r t § An n a h m e : ke i n e Fe h l e r § Dabe i wi r d de r C ur s o r übe r di e ge l e s e n e n Bu c h s t a b e n ge f ü h r t § Wi r sag e n de r Sc an n e r ko n s u m i e r t da s T o k e n 36 Ko n s u m i e r e n vo n I n p u t § Ko n s u m i e r e n vo n T o k e n s : I n p u t le s e n und da be i Cu r s o r we i t e r be w e g e n§ Au f r u f vo n nextInt , nextDouble , et c . be w e g t de n C ur s o r hi n t e r das ak t ue l l e To k e n . 16.2 23.5 \\ n19.1 7.4 22.8 \\ n \\ n18.5 - 1.8 14.9 \\ n ^ § Di e Da t e i wi r d da be i ni c h t ve r ä n d e r t 37 Ko n s u m i e r e n vo n I n p u t , Te i l 2 § Au f r u f vo n nextInt , nextDouble , e t c . be w e g t de n C ur s o r hi n t e r das ak t ue l l e To k e n . 16.2 23.5 \\ n19.1 7.4 22.8 \\ n \\ n18.5 - 1.8 14.9 \\ n ^ double d = input.nextDouble (); // 16.2 16.2 23.5 \\ n19.1 7.4 22.8 \\ n \\ n18.5 - 1.8 14.9 \\ n ^ String s = input.next (); // \"23.5\" 16.2 23.5 \\ n19.1 7.4 22.8 \\ n \\ n18.5 - 1.8 14.9 \\ n ^ 38 Fi l e I n p u t A u f g ab e 1 § Ge g e be n ei n e Fi l e mi t We t t e r Da t e n § Sc h r e i b e n Si e ei n Pr o gr a m m da s de n Te m p e r a t u r u n t e r s c h i e d zw i s c h e n zw e i au f e i n an d e r fo l g e n d e n Ta g e n be r e c hne t . 16.2 23.5 19.1 7.4 22.8 18.5 - 1.8 14.9 16.2 to 23.5, change = 7.3 23.5 to 19.1, change = - 4.4 19.1 to 7.4, change = - 11.7 7.4 to 22.8, change = 15.4 22.8 to 18.5, change = - 4.3 18.5 to - 1.8, change = - 20.3 - 1.8 to 14.9, change = 16.7 40 Fi l e I n p u t An t w o r t // Displays changes in temperature from data in an input file. import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class Temperatures { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\" weather.txt \")); double prev = input.nextDouble (); // fencepost for ( int i = 1; i <= 7; i ++) { double next = input.nextDouble (); System.out.println(prev + \" to \" + next + \", change = \" + (next - prev )); prev = next; } } } 41 Lesen ei n er ga n z e n Fi l e § Ne h m e n wi r an uns e r Pr o gr a m m so l l t e für ei n e be l i e bi g e An z a h l vo n Za h le n in d e r Da t e i funk t i o ni e r e n . § Bis je t zt wu r d e n zu s ä t z l i c h e Da t e n ni c h t ge l e s e n . § We n n di e Da t e i we n i g e r Da t e n en t h ä l t – wa s pas s i e r t dann ? Ei n La u f z ei t f eh l er ! Be is p ie l mi t ei n er Da t e i mi t 3 Za h l e n : 16.2 to 23.5, change = 7.3 23.5 to 19.1, change = - 4.4 Exception in thread \"main\" java.util.NoSuchElementException at java.util.Scanner.throwFor(Scanner.java:838) at java.util.Scanner.next(Scanner.java:1347) at Temperatures.main(Temperatures.java:12) 42 Scanner Ex c e p t i o n s § NoSuchElementException § Ve r s u c h übe r das Ende de r Da t e i hi naus z ul e s e n § InputMismatchException § Ve r s u c h de n fa l s c h e n Ty p e v o n Da t e n zu le s e n ( z.B . le s e n vo n \"hi\" al s int ). 43 Scanner Ex c e p t i o n s be he be n § Fi n d e n Si e d i e St e l l e im Ex c e p t i o n T e x t , d i e si c h au f ei n e Ze i l e Ih r e s Pr o gr a m m s be z i e h t § Er s t e Ze i l e di e si c h auf Ih r Pr og r a m m be z i e h t ; o f t ge ge n Ende de r Fe h l e r m e l d u n g Exception in thread \"main\" java.util.NoSuchElementException at java.util.Scanner.throwFor (Scanner.java:838) at java.util.Scanner.next (Scanner.java:1347) at Temperatures.main (Temperatures.java:12) 44 Scanner Me t h od en § Di e se Scanner Me t h o d e n pr üf e n ob gül t i g e r In p u t vo r l i e g t § Ko n s u m i e r e n ke i n e n In p u t – lie f e r e n nur In f o r m a t io n übe r da s nä c hs t e To k e n § Pr a k ti s c h um vo r a u s z u s e h e n wa s fü r In p u t ko m m t um s o La u f z ei t f eh l er zu ve r h i n d e r n . Me t h o d De s c r i p t i o n hasNext () re t u r n s true if t h e r e is a n e x t t o k e n hasNextInt () re t u r n s true if t h e r e is a n e x t t o k e n an d i t c an b e r e ad as an int hasNextDouble () re t u r n s true if t h e r e is a n e x t t o k e n an d i t c an b e r e ad as a double 45 Ge br a uc h de r hasNext Me t h od e § Um Le s e n mi t ei n em unpa s s e nde n Ty p zu ve r m e i d e n : Scanner console = new Scanner(System.in ); System.out.print(\"How old are you? \"); if ( console.hasNextInt ()) { int age = console.nextInt (); // will not crash! System.out.println(\"Wow , \" + age + \" is old!\"); } else { System.out.println(\"You didn't type an integer.\"); } 46 Ge br a uc h de r hasNext Me t h od e § Um ni c h t übe r da s En d e ei n er Da t e i hi na us z ul e s e n : Scanner input = new Scanner( new File(\" example.txt \")); if ( input.hasNext ()) { String token = input.next (); // will not crash! System.out.println(\"next token is \" + token); } 47 Fi l e I n p u t Auf g a be 2 § Ve r ä n d e r n Si e d as Te m p e r a t u r Pr o gr a m m , s o da s s es di e ge s a m t e Fi l e ve r a r b e i t e t , una bhä ngi g vo n d e r An z a h l de r Da t e n sä t z e in d e r F ile . § Be is p ie l : Mi t Da t e n fü r de n 9 . T ag wä r e de r O ut put : 16.2 to 23.5, change = 7.3 23.5 to 19.1, change = - 4.4 19.1 to 7.4, change = - 11.7 7.4 to 22.8, change = 15.4 22.8 to 18.5, change = - 4.3 18.5 to - 1.8, change = - 20.3 - 1.8 to 14.9, change = 16.7 14.9 to 16.1, change = 1.2 48 Fi l e I n p u t Lö sung 2 // Displays changes in temperature from data in an input file. import java.io.File ; // for File import java.io.FileNotFoundException ; import java.util.Scanner ; // for Scanner public class Temperatures { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\"weather.txt \")); double prev = input.nextDouble (); // fencepost while ( input.hasNextDouble ()) { double next = input.nextDouble (); System.out.println(prev + \" to \" + next + \", change = \" + (next - prev )); prev = next; } } } 49 Fi l e I n p u t Auf g a be 3 § Mo d i f i zi e r e n Sie d as Te m p e r a t u r P r o g r am m so d as s es au c h d an n fu n k t i on i e r t we n n d i e In p u t Da t e i ni c h t - num e r i s c he To k e n s en t h ä l t . § Di e s e so l l t e n ig n o r ie r t we r d e n § Fü r d i e In p u t F i l e weather2.txt so llt e d as P r o g r am m de n se lb e n Ou t p u t lie f e r e n wi e vo r h e r 16.2 23.5 Dienstag 19.1 Mittwoch 7.4 Do.Wert : 22.8 18.5 - 1.8 < -- Messfehler ??? -- Stefan P. 14.9 : - ) § Si e kö n n e n da v o n au s g e h e n da s s da s 1 . T o k e n ei n e re e l l e Za h l is t . 50 Fi l e I n p u t Lö sung 3 // Displays changes in temperature from data in an input file. import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class Temperatures2 { public static void main(String[] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\"weather.txt \")); double prev = input.nextDouble (); // fencepost while ( input.hasNext ()) { if ( input.hasNextDouble ()) { double next = input.nextDouble (); System.out.println(prev + \" to \" + next + \", change = \" + (next - prev )); prev = next; } else { input.next (); // throw away unwanted token } } } } 51 Fi l e I n p u t Lö sung 3 // Displays changes in temperature from data in an input file. import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class Temperatures2 { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\"weather.txt \")); double prev = input.nextDouble (); // fencepost while ( input.hasNext ()) { if ( input.hasNextDouble ()) { double next = input.nextDouble (); System.out.println(prev + \" to \" + next + \", change = \" + (next - prev )); prev = next; } else { input.next (); // throw away unwanted token } } } } 52 Ei n we i t e r e s Pr o b l e m ( Ar b ei t s z ei t be r e c hne n ) § Di e F i l e hours.txt en t h ä l t di e fo l g e n d e n Da t e n : 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 789 Steffie 8.0 8.0 8.0 8.0 7.5 § Wi r wo l l (t ) en ei n Pr o gr a m m sc h r e i b e n da s di e An z a h l Stu n d e n für je d e Pe r s o n be r e c hne t : Paula (ID#123) worked 31.4 hours (7.85 hours/day) Erich (ID#456) worked 36.8 hours (7.36 hours/day) Steffie (ID#789) worked 39.5 hours (7.9 hours/day) 53 Pr o P e r s on e i n e Z e i l e Ei n we i t e r e s Pr o b l e m ( Ar b ei t s z ei t be r e c hne n ) § Di e F i l e hours.txt en t h ä l t di e fo l g e n d e n Da t e n : 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 789 Steffie 8.0 8.0 8.0 8.0 7.5 § Wi r ha t t e n di e D e t a i l s de s Ei n l e se n s de r Da t e n zu r ü c k g e s t e l l t . § Je tz t se h e n wi r wi e wi r di e Da t e i le s e n kö n n e n 54 Pr o P e r s on e i n e Z e i l e Ei n we i t e r e s P r o ble m ( HoursWorked In p u t) § Fa n g e n wi r mi t de n T o k e n a n und be ha nde l n je d e s To k e n … 55 Lö sungs v e r suc h ( HoursWorked In p u t) // Let’s try to fill in the body … import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class HoursWorked { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\" hours.txt \")); while ( input.hasNext ()) { } } } 56 ( Fe h l e r h a f te ) Lö sung für HoursWorked In p u t // This solution does not work! while ( input.hasNext ()) { // process one person int id = input.nextInt (); String name = input.next (); double totalHours = 0.0; int days = 0; while ( input.hasNextDouble ()) { totalHours += input.nextDouble (); days++; } System.out.println(name + \" (ID#\" + id + \") worked \" + totalHours + \" hours (” + ( totalHours / days) + \" hours/day)\"); } 57 Fe h l e r h a f t e r Ou tp u t u n d E x c ep ti o n Paula (ID#123) worked 487.4 hours (97.48 hours/day) Exception in thread \"main\" java.util.InputMismatchException at java.util.Scanner.throwFor(Scanner.java:840) at java.util.Scanner.next(Scanner.java:1461) at java.util.Scanner.nextInt(Scanner.java:2091) at HoursWorked.main(HoursBad.java:9) 58 ( Fe h l e r h a f te ) Lö sung zu r Stu n d e n b e r e ch n u n g // This solution does not work! while ( input.hasNext ()) { // process one person int id = input.nextInt (); String name = input.next (); double totalHours = 0.0; int days = 0; while ( input.hasNextDouble ()) { totalHours += input.nextDouble (); days++; } System.out.println(name + \" (ID#\" + id + \") worked \" + totalHours + \" hours (” + ( totalHours / days) + \" hours/day)\"); } 60 123 Pa u l a 12.5 8.1 7.6 3.2 456 True True True True 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 … ( Fe h l e r h a f te ) Lö sung zu r Stu n d e n b e r e ch n u n g // This solution does not work! while ( input.hasNext ()) { // process one person int id = input.nextInt (); String name = input.next (); double totalHours = 0.0; int days = 0; while ( input.hasNextDouble ()) { totalHours += input.nextDouble (); days++; } System.out.println(name + \" (ID#\" + id + \") worked \" + totalHours + \" hours (” + ( totalHours / days) + \" hours/day)\"); } 61 123 Pa u l a Fa l s e 12.5 8.1 7.6 3.2 456 True True True True True 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 … Paula (ID#123) worked 487.4 hours (97.48 hours/day) ( Fe h l e r h a f te ) Lö sung zu r Stu n d e n b e r e ch n u n g // This solution does not work! while ( input.hasNext ()) { // process one person int id = input.nextInt (); String name = input.next (); double totalHours = 0.0; int days = 0; while ( input.hasNextDouble ()) { totalHours += input.nextDouble (); days++; } System.out.println(name + \" (ID#\" + id + \") worked \" + totalHours + \" hours (” + ( totalHours / days) + \" hours/day)\"); } 62 123 Pa u l a Er i c h 12.5 8.1 7.6 3.2 456 True True True True True 123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 … Fe h l e r h a f t e r Ou tp u t § Et w a s lie f fa l s c h … § Di e in n e r e while Sc h l e i f e ha t di e Pe r s o n a l n u m m e r de r näc hs t e n Pe r s o n ge l e s e n . § Wi r wo l l e n di e T o k e ns ve r a r b e i t e n abe r wi r wo l l e n auc h wi s s e n , w o ei n e Ze i l e en d e t e ( \\ n sa g t an wa n n di e Da t e n fü r ei n e Pe r s o n abg e s c hl o s s e n si n d ). § Ei n e be s s e r e Lö s u n g ba s i e r t au f ei n em hy b r i d e n An s a t z : § Zu e r s t : ze r l e g e de n I nput i n Ze i l e n . § Dann ze r l e g e je d e Ze i l e in T o k e n s . 63 Ze i l e n - ba s ie r t e Scanner Ak t iv it ä t Scanner input = new Scanner( new File(\" fi l e N a m e \")); while ( input.hasNextLine ()) { String line = input.nextLine (); // bearbeiten dieser Zeile } Me t h o d De s c r i p t i o n nextLine () re t u r n s n e x t e n t i re l i n e o f i n p u t (f r o m c u r s o r t o \\ n ) hasNextLine () re t u r n s true if t h e r e a r e a n y m o r e lin e s o f in p u t t o re a d (a l w a y s t r u e f o r c o n s o l e i n p u t ) 64 Ve r a r b e i t e n vo n I n p u t Ze i l e n 23 3.14 John Smith \"Hello\" world 45.2 19 § De r Scanner lie s t di e Ze i l e n fo l g e n d e r m a s s e n : 23 \\ t3.14 John Smith \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ String line = input.nextLine (); 23 \\ t3.14 John Smith \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ § Je d e s \\ n Ze i c h e n wi r d ko n s u m i e r t ab e r ni c h t an d i e au f r u f e n d e Me t h o d e übe r g e be n . 65 Ve r a r b e i t e n vo n I n p u t Ze i l e n 23 3.14 John Smith \"Hello\" world 45.2 19 23 \\ t3.14 John Smith \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ § De r Scanner lie s t di e Ze i l e n fo l g e n d e r m a s s e n we i t e r : String line2 = input.nextLine (); 23 \\ t3.14 John Smith \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ § Vo r s i c h t : Je d e s \\ n Ze i c h e n wu r d e ko n s u m i e r t ab e r ni c h t an d i e au f r u f e n d e Me t h o d e übe r g e be n . 66 Scanner fü r St ri n g s § Ei n Scanner ka n n au c h di e T o k e ns i n ei n em String fi nde n : Scanner nam e = new Scanner( ei n St r i n g ); § Bei s p i el : String text = \"15 3.2 hello 9 27.5\"; Scanner scan = new Scanner(text ); int num = scan.nextInt (); System.out.println(num ); // 15 double num2 = scan.nextDouble (); System.out.println(num2); // 3.2 String word = scan.next (); System.out.println(word ); // hello 67 Ze i l e n und T o k e ns // Counts the words on each line of a file Scanner input = new Scanner( new File(\"input.txt \")); while ( input.hasNextLine ()) { String line = input.nextLine (); Scanner lineScan = new Scanner(line ); // process the contents of this line … } In p u t f ile input.txt : Ou t p u t t o c o n s o l e : The quick brown fox jumps over the lazy dog. Line has 6 words Line has 3 words 68 // Counts the words on each line of a file Scanner input = new Scanner( new File(\"input.txt \")); while ( input.hasNextLine ()) { String line = input.nextLine (); Scanner lineScan = new Scanner(line); int count = 0; // process the contents of this line while ( lineScan.hasNext ()) { String word = lineScan.next (); count++; } System.out.println(\"Line has \" + count + \" words\"); } 69 Zur üc k zu r Au f g a b e , d ie Stu n d e n zu be r e c hne n § Ve r b e s s e r n Si e da s HoursWorked Pr o gr a m s o , da s s es di e In p u t F ile ri ch t i g lie s t :123 Paula 12.5 8.1 7.6 3.2 456 Erich 4.0 11.6 6.5 2.7 12 789 Steffi 8.0 8.0 8.0 8.0 7.5 § Ge w ü n s c h t e r Ou t p u t : Paula (ID#123) worked 31.4 hours (7.85 hours/day) Erich (ID#456) worked 36.8 hours (7.36 hours/day) Steffi (ID#789) worked 39.5 hours (7.9 hours/day) 70 ( Fe h l e r h a f te ) Lö sung für HoursWorked In p u t // This solution does not work! while ( input.hasNext ()) { // process one person int id = input.nextInt (); String name = input.next (); double totalHours = 0.0; int days = 0; while ( input.hasNextDouble ()) { totalHours += input.nextDouble (); days++; } System.out.println(name + \" (ID#\" + id + \") worked \" + totalHours + \" hours (” + ( totalHours / days) + \" hours/day)\"); } 71 // Processes an employee input file and outputs each employee's hours. import java.io.File ; import java.io.FileNotFoundException ; import java.util.Scanner ; public class Hours { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\"hours.txt \")); while ( input.hasNextLine ()) { String line = input.nextLine (); Scanner lineScan = new Scanner(line ); int id = lineScan.nextInt (); // e.g. 456 String name = lineScan.next (); // e.g. \"Erich\" double sum = 0.0; int count = 0; while ( lineScan.hasNextDouble ()) { sum = sum + lineScan.nextDouble (); count++; } 72 K o r r e kt e Lö sung // Ende letzte Folie while ( input.hasNextLine ()) { String line = input.nextLine (); Scanner lineScan = new Scanner(line ); int id = lineScan.nextInt (); // e.g. 456 String name = lineScan.next (); // e.g. \"Erich\" double sum = 0.0; int count = 0; while ( lineScan.hasNextDouble ()) { sum = sum + lineScan.nextDouble (); count++; } double average = sum / count; System.out.println (name + \" (ID#\" + id + \") worked \" + sum + \" hours (\" + average + \" hours/day)\"); } } } 74 W a r nung : T o k e n s u n d Ze i l e n zu s a m m e n § Vo r s i c h t be i de r Ve r w e n d u n g vo n nextLine we n n au c h To k e n - ba s i e r t e Me t h o d e n für de n se l b e n Scanner ve r w e n d e t we r d e n . 23 3.14 Joe \"Hello\" world 45.2 19 § Wi r se h e n ei n en int We r t , ei n en double We r t u n d dann ei n e Ze i l e Te x t . 75 To k e n s u n d Ze i l e n § Hi e r is t ei n er s t er Ve r s u c h : § Wi r ( ve r s u c h e n ) 23 und 3.14 mi t nextInt und nextDouble zu le s e n und wo l l e n dann Joe \"Hello\" world mi t nextLine le s e n . System.out.println ( input.nextInt ()); // 23 System.out.println ( input.nextDouble ()); // 3.14 System.out.println ( input.nextLine ()); // § Ab e r d e r Au f r u f vo n nextLine lie f e r t ke i n e n Ou t p u t ! Wa r u m ? 76 23 3.14 Joe \"Hello\" world 45.2 19 To k e n s u n d Ze i l e n § Si e so l l t e n ni c h t To k e n s u n d Ze i l e n vo m se l b e n Scanner le s e n : 23 3.14 Joe \"Hello\" world 45.2 19 input.nextInt () // 23 23 \\ t3.14 \\ nJoe \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ input.nextDouble () // 3.14 23 \\ t3.14 \\ nJoe \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ input.nextLine () // \"\" (empty!) 23 \\ t3.14 \\ nJoe \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ input.nextLine () // \"Joe \\ t \\ \"Hello \\ \" world\" 23 \\ t3.14 \\ nJoe \\ t\"Hello \" world \\ n \\ t \\ t45.2 19 \\ n ^ 77 Be i s p i e l Scanner console = new Scanner( System.in ); System.out.print (\"Enter your age: \"); int age = console.nextInt (); System.out.print (\"Now enter your name: \"); String name = console.nextLine () ; System.out.println (name + \" is \" + age + \" years old.\"); 78 Be i s p i e l F o r t s e t z ung § Pr o t o k o l l de r Au s f ü h r u n g ( Ben u t z er Ei n g a b e un t e r s t r i c he n ): Enter your age: 12 Now enter your name: Sideshow Bob is 12 years old . § Wa r u m ? § In p u t in s g e s a m t : 12 \\ nSideshow Bob § Na c h nextInt (): 12 \\ nSideshow Bob ^ § Na c h nextLine (): 12 \\ nSideshow Bob ^ 79 Üb e r s i c h t 5. 1 Ar b e i t e n mi t Da t e i e n 5. 2 Scanner im Ei n sa t z / Bei s p i el e 5. 3 Ou t p u t 5. 4 Ei n f a c h e Gr a phi s c he Ben u t z er o b er f l ä c h e (G U I ) 82 PrintStream - Kla s s e § Wi e File au s java.io ; er l a u b t es Da t e n au s z u g e b e n ( z. B . in ei n e File ) § Al l e Me t h o d e n , d i e wi r vo n System.out ke n n e n , funk t i o ni e r e n au c h für PrintStream ! § D. h . print() , println () § Sy n t a x : 83 File file = new File( \"example.txt\" ); PrintStream output = new PrintStream (file); PrintStream output = new PrintStream ( new File( \" example.txt \" )); St a t t in Ko n s o l e , i n Da t e i 84 import java.io.File ; import java.io.FileNotFoundException ; import java.io.PrintStream ; File file = new File(\" output.txt \"); PrintStream fileOutput = new PrintStream (file); for ( int i = 0; i < 10; i ++) { .print(\" Hello World \"); .print( i ); . println (\" ! \" ); } System.out System.out System.out fileOutput fileOutput fileOutput Da t e i - Aus g a be § We n n Da t e i ni c h t ex i s t i e r t , wi r d si e er s t el l t § We n n si e ex i s t i e r t , wi r d si e üb e r s c hr i e b e n ! § Au s g a b e an se h e n : § In E c l i p s e a u f Pr oj e k t re c h t s k l i c k e n à Re f r e s h § Da t e i out p ut . t x t so l l t e er s c h ei n en ( im Pr o j e k t , ni c h t im Ja v a sr c Fo l d e r ) § Do ppe l k l i c k 85 Meh r übe r PrintStream PrintStream na m e = new PrintStream ( new File(\" fi l e n a m e \")); § Öf f n et di e Da t e i ( zu m Sc h r e i b e n ) § Fa l l s ke i n e Da t e i mi t di e s e m Na m e n ex i s t i e r t so wi r d si e er s t el l t § So l l t e di e Da t e i sc h o n ex i s t i e r e n so wi r d si e üb er s c hr i eb en . § Be lie b t e r (? ) Fe h l e r : ei n e Da t e i in ei n er Met h o d e zu m Sc h r e i b e n öf f n e n § Di e Met h o d e me h r f a c h aus f ühr e n § Di e Da t e i wi r d wi e d e r h o l t ge ö f f n e t , a lt e r In h a l t ge ht ve r l o r e n § Nu r d e r le t z t e Ou t p u t ka n n in d e r Da t e i ge f u n d e n we r d e n § Ou t p u t d e n d a s Pr o g r a m m pr o duz i e r t er s ch ei n t in ei n er Da t e i , ni c h t im Ko n s o l e Fe n st e r . Mi t Ed i t o r ( od e r ID E ) d e n In h a lt ans e he n . 86 Meh r übe r PrintStream PrintStream na m e = new PrintStream ( new File(\" fi l e n a m e \")); § Ar b e i t e n Si e ni c h t mi t de r se l b e n Da t e i al s In p u t ( Les en dur c h Scanner ) und O ut put ( Sc h r e i b e n mi t PrintStream ) zu r se l b e n Ze i t ! § Si e übe r s c hr e i be n di e I nput Da t e i und er s e t z en si e dur c h ei n e le e r e Da t e i (0 B y t e). 87 PrintStream Auf g a be § Mo d i f i e r e n Si e d i e vo r h e r i g e Ve r s i o n v o n Hours so da s s es ei n en PrintStream ve r w e n d e t um O ut put i n di e F i l e hours_out.txt zu sc h r e i b e n § Das Pr og r a m m so l l ke i n e n Ko n s o l e n Ou t p u t pr o duz i e r e n . § Ab e r d i e Da t e i hours_out.txt so l l er s c h a f f en we r d e n und di e s e n Te x t en t h a l t en : Paula (ID#123) worked 31.4 hours (7.85 hours/day) Erich (ID#456) worked 36.8 hours (7.36 hours/day) Steffi (ID#789) worked 39.5 hours (7.9 hours/day) 89 PrintStream Lö sung // Processes an employee input file and outputs each employee's hours. import java.io.File ; // for File import java.io.FileNotFoundException ; import java.io.PrintStream ; import java.util.Scanner ; // for Scanner public class Hours2 { public static void main(String [] args ) throws FileNotFoundException { Scanner input = new Scanner( new File(\"hours.txt \")); PrintStream out = new PrintStream( new File(\"hours_out.txt \")); while ( input.hasNextLine ()) { String line = input.nextLine (); Scanner lineScan = new Scanner(line ); int id = lineScan.nextInt (); // e.g. 456 String name = lineScan.next (); // e.g. \"Eric\" double sum = 0.0; int count = 0; // while 90 PrintStream Lö sung while ( lineScan.hasNextDouble ()) { sum = sum + lineScan.nextDouble (); count++; } double average = sum / count; out.println(name + \" (ID#\" + id + \") worked \" + sum + \" hours (\" + average + \" hours/day)\"); } } } 91 Be i s p i e l : Fi l e n am e n al s Us e r I n p u t § Wi r kö n n e n de n Na m e n de r F i l e , di e ge l e s e n we r d e n so l l , vo m Ben u t z er er f r a g en . § De r N am e de r F i l e kö n n t e Leerz ei c h en en t h a l t en ; ve r w e n d e n Si e nextLine () , ni c h t next() // prompt for input file name Scanner console = new Scanner( System.in ); System.out.print (\"Type a file name to use: \"); String filename = console.nextLine (); Scanner input = new Scanner( new File( filename )); 92 Be i s p i e l : Fi l e n am e n al s Us e r I n p u t § Di e Kl as s e File st e l l t ei n e exists Me t h o d e zu r Ve r f ü g u n g um zu te s te n ob de r F i l e na m e si c h au f ei n e Fi l e be z i e h t ( ve r h i n d e r t FileNotFoundException sp ä t e r ): File file = new File(\" hours.txt \"); if (! file.exists ()) { // try a second input file as a backup System.out.print (\" hours.txt file not found!\"); file = new File(\"hours2.txt\"); } 94 Üb e r s i c h t 5. 1 Ar b e i t e n mi t Da t e i e n 5. 2 Scanner im Ei n sa t z / Bei s p i el e 5. 3 Ou t p u t 5. 4 Ei n f a c h e Gr a phi s c he Ben u t z er o b er f l ä c h e (G U I ) 9596 5. 4 Ei n f a c h e G r a p h i sc h e B e n u t z e r o b e r f l ä c h e ( G U I ) De m o b e i I n t e r e sse i n Ü b u n g e n «G UI » § GUI : Gr a phi c a l Us e r I n t e r f a c e § ( Gr a fi s c he Ben u t z er o b er f l ä c h e / - sc h n i t t s t e l l e ) § The m a : In p u t / O u t p u t (I / O ) § Bi s h er , In p u t / O u t p u t übe r di e Ko n s o l e § Ou t p u t : System.out.println () § In p u t : new Scanner(System.in). nextInt () 98 Ps e u d o - GU I s § Ma n ka n n di e Ko n s o l e für vi e l e s ve r w e n d e n … § … ab e r wo hö r t de r Sp ass au f ? 99 [147.0, 149.6) ├─╫─┤ [149.6, 152.2) ├──────╫──────────────┤ [152.2, 154.8) ├──────╫────────────┤ [154.8, 157.4) ├───────╫────────┤ [157.4, 160.0) ├──────╫──────────────────┤ [160.0, 162.6) ├─────────────╫───────────────────┤ [162.6, 165.2) ├─────────╫─────────────────────────────────┤ [165.2, 167.8) ├─────────╫────────────────┤ [167.8, 170.4) ├───────────╫─────────────────┤ [170.4, 173.0) ├─────────────╫──────────────────────────┤ [173.0, 175.6) ├──────────────╫───────────────┤ [175.6, 178.2) ├────────────────╫─────────────────────────────┤ [178.2, 180.8) ├──────────────╫──────────┤ [180.8, 183.4) ├─────────╫─────────┤ [183.4, 186.0) ├────────────╫───────────────┤ [186.0, 188.6) ├──────────╫───────────┤ [188.6, 191.2) ├───────────╫───────────────┤ [191.2, 193.8) ├─────────╫──────┤ [193.8, 196.4) [196.4, 199.0) ├─╫─┤ ----------------------------------- | | | | | +++++++ | | +++++++ | | +++++++ | | +++++++++++++++++++++ | | +++++++++++++++++++++ | | +++++++++++++++++++++ | | +++++++ | | +++++++ | | +++++++ | | | | | ----------------------------------- « Ri c h t i g e » G UI s (d i e d e n Na m e n gr a phi s c h ve r d i e n e n ) § In p u t / O u t p u t in ei n em Fe n s t e r , d. h. gr a fi s c h 100 « Ec h t e » G UI s § Vo r t e i l e § 2 - od e r so g a r 3 - di m e ns i o nal ( Ko n s o l e is t 1 - di m e ns i o nal ) § Ei ng abe dur c h Ma u s / Ge s t e n mö g l i c h § Of t in t u it iv e r und ans pr e c he nde r § Na c h t e i l : Ho h e Ko m p l e x i t ä t ge ge n ü b e r Ko n s o l e § Ko n t r o l l f l u s s : Pr og r a m m mu s s je d e r z e i t auf Be n u t z e r re a g i e re n § Ve r s c h i e d e n e St e u e r e l e m e n t e : Kn ö p f e , Te x t b o x e n , Au s w a h l b o x e n , Li s t en , Me n ü s , D r a g - and - dr o p… § La y o u t m u s s si c h an Fe n s t e r g r ö s s e anpas s e n 102 Ko m p l e x i t ä t 103 § Wo l l e n J a v a P r o g r a m m e i n m a l e n t w i c k e l n § Dann auf L i nux , M ac O S , und M i c r o s o f t W i ndo w s S y s t e m e n aus f ühr e n § Ab e r j e d e s B e t r i e b s s y s t e m h a t (h e u t e ) e i n e i g e n e s G UI Sy s t e m § Mi t d e n e i g e n e n V o r s t e l l u n g e n w i e e i n F e n s t e r a u s s e h e n s o l l § En t w e d e r m a c h t J a v a a l l e s se l b s t o d e r m u ss si c h a n p a sse n Mi c r osoft W i n d o w s 104 Ma c O S 10. x Sc h a r f e E c k e n v s Ru n d e E c k e n Po s i t i o n d e s N a m e n s Gr ö s s e d e s Ko n t r o l s t r e i f e n s St e u e r f e l d (e r ) Window - Kla s s e § Ei n f a c h e Fe n s t e r oh n e St e u e r e l e m e n t e od e r an p assb ar e s La y o u t § En t w i c k e l t vo n M i c h a e l Fa e s 105 import gui.Window ; public class Empty { public static void main(String[] args ) { Window window = new Window( \" Empty \" , 500, 300); window.open (); window.waitUntilClosed (); } } 106107 § Vo r d e f i n i e r t e Window - Kl as s e ( wi e Scanner ) § Ne u e s Fe n s t e r er s t el l en mi t new Window(…) import gui.Window ; public class Empty { public static void main(String[] args ) { Window window = new Window(\" Empty \", 500, 300); window.open (); window.waitUntilClosed (); } } Window - Klasse 108 Fe n st e r t i t e l Br e i t e Hö h e Window - Me t h od en 109 open() Fe n s te r wi r d ge ö f f n e t , d. h . si c h t b a r close() Fe n s te r wi r d ge s c h l o s s e n , d. h . uns i c h t ba r waitUntilClosed () Pr o g r a m m wa r t e t , b is Be n u t z e r da s F e ns t e r sc h l i e ss t ( z. B. dur c h de n ● od e r ⨉ kl i c k e n ) isOpen () Gi b t true zu r ü c k , f a lls Fe n s te r ge r a d e of f e n is t , so n s t false Ze i c h n e n § We i t e r e Me t h o d e n um Fo r m e n , T e x t od e r Bi l d er au f d as Fe n s t e r zu ze i c h n e n 110 import gui.Window ; public class Square { public static void main(String[] args ) { Window window = new Window(\" Square \", 500, 300); window.fillRect (20, 20, 50, 50); window.open (); window.waitUntilClosed (); } } Br e i t e Hö h e 111 Ze i c h n e n § We i t e r e Me t h o d e n um Fo r m e n , T e x t od e r Bi l d er au f d as Fe n s t e r zu zeic h n en 112 import gui.Window ; public class Square { public static void main(String[] args ) { Window window = new Window( \" Square \" , 500, 300); window.fillRect ( 20 , 20 , 50 , 50 ); window.open (); window.waitUntilClosed (); } } x - Ko o r d i n a t e y - Ko o r d i n a t e Br e i t e Hö h e Fe n s t e r - Ko o r d i n a t e n sy s t e m § GUI s 113 § Ma t h e m a t i k Ei n h e i t : 1 P i x e l Meh r Ze i c h n e n 114 Window window = new Window( \" Squares \" , 500, 300); for ( int i = 0; i < 4; i ++) { window.fillRect (60 * i + 20, 60 * i + 20, 50, 50); } window.open (); window.waitUntilClosed (); 115 Window window = new Window( \" Squares \" , 500, 300); for ( int i = 0; i < 4; i ++) { window.fillRect ( 60 * i + 20 , 60 * i + 20 , 50, 50); } window.open (); window.waitUntilClosed (); Meh r Ze i c h n e n 116 Window window = new Window( \" Squares \" , 500, 300); window.setColor ( 255, 0, 0 ); for ( int i = 0; i < 4; i ++) { window.fillRect (60 * i + 20, 60 * i + 20, 50, 50); } window.open (); window.waitUntilClosed (); Fa r b e n ! § Fa r b e bl e i b t so la n g e be s t e he n , bi s si e wi e d e r ge ä n d e r t wi r d . 117 Fa r b e n mi s c h e n § Al l e Fa r b e n we r d e n au s dr e i Gr undf a r be n ge m i s c h t : § Mi s c h u n g funk t i o ni e r t « ad d i ti v ”, d. h. meh r vo n ei n er Gr undf a r be gi b t he l l e r e n Fa r b t o n . 118 Bi l d v o n Be n u t z e r Bb 3 c x v , en . w i k i p ed i a . o r g / w i k i / I m a g e: R G B _ i l l u m i n a t i o n . j p g Bl a u Gr ü n Ro t R G B Fa r b e n mi s c h e n § Fa r b e n be fi nde n si c h in ei n em 3D - Ra um , mi t Ac h s e n R , G , B : 119 Bi l d v o n Be n u t z e r Sh a rk D , c o m m o n s . w ik im e d ia . o r g / w ik i/ Fi l e : R G B _ c o l o r _ s o l i d_ c ube .png setColor ( 255 , 0 , 0 ); setColor ( 0 , 255 , 0 ); setColor ( 0 , 0 , 255 ); setColor ( 255 , 0 , 255 ); setColor ( 255 , 255 , 255 ); setColor ( 0 , 0 , 0 ); setColor ( 127 , 127 , 127 ); setColor ( 70 , 80 , 120 ); Abla uf fü r ei n f a c h e GU I - Pr o g r am m e 1. Er s t e l l e n ei n es Fe n s t e r s : new Window(…) « Lei n wa n d er wer b en » 2. In h a lt au sg e b e n , d. h . ze i c h n e n : setColor (…) , fill…() « Lei n wa n d be m al e n » 3. Fe n s t e r si c h t b ar ma c h en : open() «V e r n i s s a g e » 120121 Ei n f a c h e Ze i c h e n - Me t h od en § Tr i c k : fillRect (x, y, 1, 1) ze i c h n e t ei n z el n en Pi x e l ! fillRect ( double x, double y, double width, double height ) Ze i c h n e t ei n ( au s g e f ü l l t e s ) Re c h t e c k de r Gr ö s s e width × height , w e lc h e s d ie lin k e ob e r e Ec k e be i m Pu n k t ( x , y ) h a t fillCircle ( double x, double y, double radius) Ze i c h n e t ei n en ( au s g e f ü l l t e n ) Kr e i s mi t Rad i u s radius , w e lc h e s d e n Mi t t e l p u n k t be i m Pu n k t ( x , y ) h a t fillOval ( double x, double y, double width, double height) … P ix e lw e is e ze i c h n e n § Fa r b e de s P i x e l s is t abhäng i g vo n d e r Po s i t i o n . J e me h r x, de s t o me h r Gr ü n , us w . 122 Window window = new Window(\" Pixels \", 255, 255); for ( int x = 0; x < 255; x++) { for ( int y = 0; y < 255; y++) { window.setColor ( 127 , x , y ); window.fillRect (x, y, 1, 1); } } window.open (); window.waitUntilClosed (); Fu n k t i o n e n - P lo t t e r 123 int width = 500, height = 300; Window window = new Window(\" Plotter \", width, height); for ( int i = 0; i < width; i ++) { double x = 0.05 * i ; double y = Math.sin (x); window.fillRect ( i , y * height/4 + height/2, 1, 1); } window.open (); window.waitUntilClosed (); 124 Ko o r d i n a t e n t r a n s fo r m a t i o n 125 int width = 500, height = 300; Window window = new Window(\" Plotter \", width, height); for ( int i = 0; i < width; i ++) { double x = 0.05 * i ; double y = Math.sin (x); window.fillRect ( i , y * height/4 + height/2 , 1, 1); } window.open (); window.waitUntilClosed (); 1 x - Ei n h e i t = 2 0 px 1 y - Ei n h e i t = Hö he /4 y - Ac h s e in d e r Mi t t e des Fe n s t e r s Ände r n de s Fe n s t e r i n h a l t s ?? § Bi s h er : Fe n s t e r er s t el l en , ze i c h n e n , an z e i g e n . § Wa s , we n n wi r Fe n s t e r i n h a l t än d e r n mö c h t en ? § Ge h t ni c h t , Ze i c h n u n g mu s s « ve r ö f f e n t l i c h t » we r d e n ! 126 Window window = new Window(\" Fenster \", 500, 300); // Zeichnen window.open (); window.waitUntilClosed (); ? Ve r ö f f e n t l i c h e n vo n Ände r ung e n 127 refresh() Ze i g t di e ak t u e l l e Ze i c h n u n g im Fe n s te r an . refresh( int waitTime ) Ze i g t di e ak t u e l l e Ze i c h n u n g im Fe n s te r an . Um ei n ko n s t a n t e s Ze i t i n t e r v a l l zw i s c h e n me h r e r e n Re f re s h s zu er r ei c h en , ze i g t di e s e Me t h o d e di e Än d e r u n g e n er s t waitTime Mi l l i s e k u n d e n na c h de m le t z t e n Au f r u f vo n refresh() an . refreshAndClear ( int waitTime ) Ze i g t wi e refresh( waitTime ) di e ak t u e l l e Ze i c h n u n g an , ab e r le e r t di e Ze i c h n u n g s f l ä c h e da na c h fü r ei n ne ue s Bi l d . P lo t t e n , an i mi e rt ! 128 int width = 500, height = 300; Window window = new Window(\" Plotter \", width, height); window.open (); for ( int i = 0; i < width; i ++) { double x = 0.05 * i ; double y = Math.sin (x); window.fillRect ( i , y * height/4 + height/2, 1, 1); window.refresh (10); } window.waitUntilClosed (); 129 Od er , mi t refreshAndClear () 130 int width = 500, height = 300; Window window = new Window(\" Plotter \", width, height); window.open (); for ( int i = 0; i < width; i ++) { double x = 0.05 * i ; double y = Math.sin (x); window. fillCircle ( i , y * height/4 + height/2, 10 ); window.refreshAndClear (10); } window.waitUntilClosed (); 131 Abla uf fü r an i m i e r t e GU I - Pr o g r am m e 1. Er s t e l l e n ei n es Fe n s t e r s : new Window(…) 2. Fe n s t e r si c h t b ar ma c h en : open() 3. Ani m i e r e n a. Ze i c h n e n : fill…() b. Ak tu e l l e Ze i c h n u n g ve r ö f f e n t l i c h e n : refresh() od e r refreshAndClear () 132 Inp ut /Output? § Ar t e n vo n G U I - In p u t : § Ta s t e n dr üc k e n § Ma u s k l i c k s / - be w e g ung e n § To u c h - Ge s t e n § … 133 In t e r a k tio n 134 int width = 500, height = 300; Window window = new Window(\" Moving \", width, height); window.open (); int x = width/2; while ( window. isOpen () ) { if ( window.isKeyPressed (\"left\")) { x -- ; } if ( window.isKeyPressed (\"right\")) { x++; } window.fillCircle ( x , height/2, 10); window.refreshAndClear (10); } In t e r a k tio n 135 int width = 800, height = 400; PongGame game = new PongGame (width, height); Window window = new Window(\"Pong\", width, height); window.open (); while ( window.isOpen ()) { if ( window.isKeyPressed (\"w\")) { game.move (game.p1, true ); } if ( window.isKeyPressed (\"s\")) { game.move (game.p1, false ); } In t e r a k t i o n - Fo r t s e t z u n g 136 if ( window.isKeyPressed (\"up\")) { game.move (game.p2, true); } if ( window.isKeyPressed (\"down\")) { game.move (game.p2, false); } game.step (); drawPlayer (window, game.p1); drawPlayer (window, game.p2); for ( BallNode n = game.balls.first ; n != null; n = n.next ) { drawBall (window, n.ball ); } window.refreshAndClear (20); } Me t h od en fü r Ei n g a b e 137 isKeyPressed (String keyName ) Gi b t true zu r ü c k , f a lls ge ge b e n e Ta s t e im Mo me n t ge r a d e ge d r ü c k t wi r d , false an d ern f al l s isLeftMouseButtonPressed () / isRightMouseButtonPressed () Gi b t true zu r ü c k , f a lls d ie lin k e / re c h t e Ma u s t a s t e im Mo me n t ge r a d e ge d r ü c k t wi r d , false an d ern f al l s wasKeyTyped (String keyName ) / was… MouseButtonClicked () Gi b t true zu r ü c k , f a lls d ie ge ge b e n e Ta s t e ge r a d e « ge t i p p t ”/ « ge k l i c k t » wu r d e , f a ls e an d ern f al l s getMouseX () / getMouseY () Gi b t di e ak t u el l e X - /Y - Ko o r d i n a t e de s Ma u s z e i g e r s (C u r s o r s ) zu r ü c k Abla uf fü r in t e r a k t iv e GU I - Pr o g r am m e 1. Er s t e l l e n ei n es Fe n s t e r s : new Window(…) 2. Fe n s t e r si c h t b ar ma c h en : open() 3. In t e r a g ie r e n a. Be n u t z e r e in g a b e n ab f r ag e n : is…Pressed() b. Ze i c h n e n : fill…() c. Ak tu e l l e Ze i c h n u n g ve r ö f f e n t l i c h e n : refresh() od e r refreshAndClear () 138 Me h r Window - Me t h o d e n 139 drawRect (x, y, width, height ) Ze i c h n e t di e Ko n t u r ei n es Re c h t e c k s drawCircle (x, y, radius) drawLine (x1, y1, x2, y2) drawString (string, x, y) Ze i c h n e t de n ge ge b e n e n St r i n g s o , da s s si c h di e Gr u n d l i n i e de s er s t en Ze i c h e n s be i ( x , y ) be f i nde t drawImage (path, x, y) Ze i c h n e t da s Bi l d , d a s si c h in d e r Da t e i be i path be f i nde t , mi t de r lin k e n ob e r e n Ec k e be i ( x , y ) drawImageCentered (path, x, y) setColor (red, green, blue) Se t zt di e Fa r b e fü r di e fo l g e n d e n Ze i c h e n b e f e h l e au f d e n RG B - We r t ge ge b e n dur c h red , green , blue setStrokeWidth (width) Se t zt di e St r i c h d i c k e fü r di e fo l g e n d e n draw - Ze i c h e n b e f e h l e setFontSize ( fontSize ) Se t zt di e Sc h r i f t g r ö s s e fü r di e fo l g e n d e n drawString - Be f e h l e ... 252 - 0027 Ei n f ü h r u n g in d ie Pr o g r a m m i e r u n g 4. 0 Kl a s s e n und Ob j e k t e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h 1 4. 0 K l a s s e n u n d Ob j ek t e : Üb e r s i c h t 4. 1 K l a s s e n u n d Ob j e k t e ( al l g e m e i n ) 4. 2 Ob j e k t e al s Pa r a m e t e r 4. 3 K l a s s e n ( se l b e r en t wi c k el n ) 4. 4 A t t r i b u t e 4. 5 K l a s s e n u n d i h r e K l i e n t e n 4. 6 Me t h o d e n 4. 7 Si c h tb ar k e i t vo n At t r i b u t e n 4. 8 Ko n s t r u k t o r e n 4. 9 static Me t h o d e n und V a r i a bl e 2 4. 8 Ko n s t r u k t o r e n 3 Meh r er e Ko n s t r u k t o r e n Ei n e Kl as s e ka n n meh r er e Ko n s t r u k t o r e n ha be n . § Je d e r Ko n s t r u k t o r mu s s ei n e un v e r w e c hs e l bar e Li s t e vo n Pa r a m e t e r n habe n § En t s c he i de nd is t das s di e Ty p e n de r Pa r a m e t e r l i s t e un v e r w e c hs e l bar si n d § Er l aub t public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public Point( int initialX ) {x = initialX ; y = 0;} § Ni c h t erl a u b t public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } public Point(int a, int b ) { x = a; y = b ; } 4 int , int int in t , in t in t , in t Meh r er e Ko n s t r u k t o r e n § Ma n c h m a l mu s s ei n Ko n s t r u k t o r ei n en an d e r e n au f r u f e n § De l e g a t i o n ( ei n es Te i l s ) d e r In i t i a l i s i e r u n g an ande r e n Ko n s t r u k t o r § Mi t this(…) ka n n ma n ei n en an d e r e n Ko n s t r u k t o r au f r u f e n § Ei n Ko n s t r u k t o r ru f t ei n en ande r e n auf : § this ( par am e t er s ); § par am e t e r s : Li s t e de r P ar am e t e r , ka n n le e r s e in § Kl a m m e r n ( und ) wi c h t i g § Be is p ie l fü r si n n v o l l e n Ei ns a t z ... 5 Ei n e n an d e r e n Ko n s t r u k t o r au f ru f e n public class Point { private int x ; private int y ; public Point () { x = 0; y = 0; } public Point ( int x , int y ) { this. x = x ; this. y = y ; } ... } 6 Ei n e n an d e r e n Ko n s t r u k t o r au f ru f e n public class Point { private int x ; private int y ; public Point () { x = 0; y = 0; } public Point ( int x , int y ) { this. x = x ; this. y = y ; } ... } 7 Da w i r Point(int,int) de f i ni e r t e n g i b t e s k e i ne n de f aul t K o ns t r uk o r Ei n e n an d e r e n Ko n s t r u k t o r au f ru f e n public class Point { private int x ; private int y ; public Point () { x = 0; y = 0; } public Point ( int x , int y ) { this. x = x ; this. y = y ; } ... } Pr og r a m m k ön n t e Point() br auc he n Point(0,0) erl ed i g t d en J o b abe r Point() mu s s e x p l i z i t de f i ni e r t w e r de n! 8 Ei n e n an d e r e n Ko n s t r u k t o r au f ru f e n public class Point { private int x ; private int y ; public Point () { this (0, 0) ; // calls (x, y) constructor } public Point ( int x , int y ) { this. x = x ; this. y = y ; } ... } 11 Ei n e n an d e r e n Ko n s t r u k t o r au f ru f e n § Ve r m e i d e t Re d u n d a n z zw i s c h e n Ko n s t r u k t o r e n § Nu r ei n Ko n s t r u k t o r ka n n ei n en an d e r e n Ko n s t r u k t o r au f r u f e n § Ei ne Met h o d e ka n n ni c h t ei n en Ko n s t r u k t o r auf r uf e n ! 13 Hä u fi g e Fe h l e r in Ko n s t r u k t o r e n 1. ( Er n e u t e ) De k l a r a t i o n vo n At t r i b u t e n al s Va r i a b l e : public Point(int initialX , int initialY ) { int x = initialX ; int y = initialY ; } § Je t z t gi b t es Va r i a b l e x und y di e nur im Ko n s t r u k t o r be k ann t si n d . Di e s e erh a l t en ei n en We r t – abe r di e A t t r i but e we r d e n ni c h t mo d i f i z i e r t und bl e i be n 0 . 15 Hä u fi g e Fe h l e r in Ko n s t r u k t o r e n 2. Ve r s e h e n t l i c h für de n Ko n s t r u k t o r ei n en Rüc k g a be w e r t de k l a r i e r e n : public void Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } § Ni c h t di e De f i ni t i o n ei n es Ko n s t r u k t o r s so n d e r n di e De f i ni t i o n ei n er Met h o d e mi t Na me n Point § Er l aub t abe r ni c h t si n n v o l l 16 Hä u fi g e Fe h l e r mi t Ko n s t r u k t o r e n 3. D e n pa r a m e t e r l o s e n de f a ul t Ko n s t r u k t o r ve r w e n d e n we n n an d e r e Ko n s t r u k t o r e n de fi ni e r t wu r d en ab e r ke i n ne ue r pa r a m e t e r l o s e r Ko n s t r u k t o r de fi ni e r t wu r d e . public class PPoint { int x ; int y ; public PPoint (int initialX , int initialY ) { … } // methods } // in the client PPoint p = new PPoint () ; 17 4. 9 static Me t h od en und Va r i a b l e n 19 Ku r z e Ge s c hic h t e de r Me t h od en di e wi r in d e r Vo r l e s u n g ke n n e n ge l e r n t ha t t e n § public static void main (String[] args ) { … } § public static void na m e () { … } § public static void na m e ( ty p e na m e ) { … } § public static ty p e na m e ( ty p e na m e ) { … } § public ty p e na m e ( ty p e na m e ) { … } § private ty p e na m e ( ty p e na m e ) { … } 20 Ku r z e Ge s c hic h t e de r Me t h od en di e wi r in d e r Vo r l e s u n g ke n n e n ge l e r n t ha t t e n § public static void main (String[] args ) { … } § public static void na m e () { … } § public static void na m e ( ty p e na m e ) { … } § public static ty p e na m e ( ty p e na m e ) { … } § public ty p e na m e ( ty p e na m e ) { … } § private ty p e na m e ( ty p e na m e ) { … } 21 Na m e n l os e r S e r v i c e (H i l f s )M e t h od e f ü r … m i t P a r a m e t e r n … u n d R ü c k g a b e w e r t Me t h o d e ( ü b e r a l l s i c h t b a r ) Me t h o d e ( i n t e r n s i c h t b a r ) Wa s be de ut e t static wir k lic h ? Me t h o d e n di e wi r in d e r Vo r l e s u n g ke n n e n ge l e r n t ha t t e n § public static void main (String[] args ) { … } § public static void na m e () { … } § public static void na m e ( ty p e na m e ) { … } § public static ty p e na m e ( ty p e na m e ) { … } § public ty p e na m e ( ty p e na m e ) { … } § private ty p e na m e ( ty p e na m e ) { … } 22 Wa s be de ut e t static wir k lic h ? Me t h o d e n di e wi r in d e r Vo r l e s u n g ke n n e n ge l e r n t ha t t e n § public static ty p e na m e ( ty p e na m e ) { … } § Ka n n vo n main ( od e r an d e r e r Me t h o d e mi t static Ei g e n sc h a f t ) au f g e r u f e n we r d e n § public ty p e na m e ( ty p e na m e ) { … } § Ka n n für Ob j e k t au f g e r u f e n we r d e n : v o n Me t h o d e (i n Kl as s e ) od e r mi t «D o t » N o t a t i o n v o n au sse r h al b § Es m us s ei n Ex e m pl ar ge b e n 23 Vo m Pr o g r am m z um (S o f tw a r e )S y s t e m § Fa s t a l l e S o f t w a r e Sy s t e m e be s t e he n au s vi e l e n Kl as s e n § Ei ne Ha u p tk l a s s e ru f t Met h o d e n ande r e r Kl a sse n a u f § Ha u p tk l a s s e ha t ei n e An f a n g s m e th od e public static void main (String[] args ) Ma i n C l a s s # 1 main method1 method2 Cl a s s #2 method3 method5 Cl a s s #3 method4 method6 § Vo r t e i l e : § Co d e Wi e d e r v e r w e n d u n g § Gl i e d e r t das Pr og r a m m in übe r s c haubar e Te i l e 25 Vo m Pr o g r am m z um (S o f tw a r e )S y s t e m § Fa s t a l l e S o f t w a r e Sy s t e m e be s t e he n au s vi e l e n Kl as s e n § Ei ne Ha u p tk l a s s e ru f t Met h o d e n ande r e r Kl a sse n a u f § Ha u p tk l a s s e ha t ei n e An f a n g s m e th od e public static void main (String[] args ) Ma i n C l a s s # 1 main method1 method2 Cl a s s #2 method3 method5 Cl a s s #3 method4 method6 26 Ma i n C l a s s # 4 main methodA methodB Ei n Pr o g r am m mi t Re d u n d a n z , Auf g a be 1 // This program sees whether some interesting numbers are prime. public class Primes1 { public static void main (String[] args ) { int [] nums = {1234517, 859501, 53, 142}; for ( int i = 0; i < nums.length ; i ++ ) { if ( isPrime ( nums [ i ])) { System.out.println ( nums [ i ] + \" is prime\"); } } } // continued on next slide 27 Ei n Pr o g r a m m mi t Re d u n d a n z , Au f g a b e 1, Te i l 2 // Returns the number of factors of the given integer. public static int countFactors ( int number ) { int count = 0 ; for ( int i = 1; i <= number; i ++ ) { if ( number % i == 0 ) { count++; // i is a factor of the number } } return count ; } // Returns true if the given number is prime. public static boolean isPrime ( int number ) { return countFactors (number) == 2 ; } } 28 Ei n Pr o g r am m mi t Re d u n d a n z , Auf g a be 2 // This program prints all prime numbers up to a maximum. public class Primes2 { public static void main (String[] args ) { Scanner console = new Scanner(System.in ) ; System.out.print(\"Max number? \") ; int max = console.nextInt () ; for ( int i = 2; i <= max; i ++ ) { if ( isPrime (i ) ) { System.out.print(i + \" \") ; } } System.out.println () ; } // continued on next slide 29 Ei n Pr o g r a m m mi t Re d u n d a n z , Au f g a b e 2, Te i l 2 // Returns true if the given number is prime. public static boolean isPrime (int candidate ) { return countFactors (candidate) == 2 ; } // Returns the number of factors of the given integer. public static int countFactors (int candidate ) { int count = 0 ; for (int i = 1; i <= candidate; i ++ ) { if ( candidate % i == 0 ) { count ++ ; // i is a factor of the number } } return count ; } } 30 Re d u n d a n z in Pr o g r am m e n § Wi r mö c h t en di e ge m e i n s a m e n Me t h o d e n nur ei n ma l sc h r e i b e n § … n u r e i n m a l d ok u m e n ti e r e n § ... n u r e i n m a l t e s t e n § ... ( s p ä te r ) n u r e i n m a l v e r ä nde r n ( f al l s n ö ti g ) § Kl as s e n g e b e n u n s d i e M ö gl i c hk e i t g e m e i ns a m e s V e r ha l t e n (v on O b j e k t e n ) z u s a m m e n z u f a s s e n . 31 Re d u n d a n z e n public class Primes1 { public static int countFactors (int number ) { .. } public static boolean isPrime (int number ) { .. } } public class Primes2 { public static boolean isPrime (int candidate ) { .. } public static int countFactors (int candidate ) {.. } } 32 Kla s s e n al s Mod u l e § Mo d u l : wi ed er v er w en d b a r e So f tw ar e , i n ei n er Kl as s e ab g e l e g t . § Be is p ie le vo n Mo d u l e n (Kl a s s en ): Math , Arrays , System § Im Bei s p i el le g e n wi r di e ge m e i n s a m e n Me t h o d e n in ei n er Kl as s e Factors ab 33 Vo m Pr o g r am m z um (S o f tw a r e )S y s t e m § Fa s t a l l e S o f t w a r e Sy s t e m e be s t e he n au s vi e l e n Kl as s e n § Ei ne Ha u p tk l a s s e ru f t Met h o d e n ande r e r Kl a sse n a u f § Ha u p tk l a s s e ha t ei n e An f a n g s m e th od e public static void main (String[] args ) Pr im e s1 main Fac t o r s isPrime (int) countFactors (int) 34 Pr im e s2 main Kla s s e n al s Mod u l e // This class is a module that contains useful methods // related to factors and prime numbers. public class Factors { // Returns the number of factors of the given integer. public static int countFactors ( int number ) { int count = 0 ; for ( int i = 1; i <= number; i ++ ) { if ( number % i == 0 ) { count++ ; // i is a factor of the number } } return count ; } 35 Kla s s e n al s Mod u l e // Returns true if the given number is prime. public static boolean isPrime ( int number) { return countFactors (number) == 2; } } // Factors 36 Mod u l e § Ei n M o d u l is t Te i l ei n es Pr o gr a m m s , ni c h t ei n vo l l s t ä n d i g e s ( au s f ü h r b ar e s ) Pr o gr a m m . § Es gi b t ke i n e main Met h o d e . C o d e ka n n ni c h t di r e k t aus g e f ühr t we r d e n . § Mo d u l e so l l e n vo n Kl i e n t e n ( Pr og r a m m e n /Kl a sse n ) ve r w e n d e t we r d e n . § Sy n t a x : cl a s s . me th o d ( par am e t e r s ); cl a s s : N a m e d e r Kl a sse § Be is p ie l : § int factorsOf24 = Factors.countFactors (24) ; 37 static Va r i a b l e u n d Me t h od en § static : is t Te i l ei n er Kl as s e , ni c h t Te i l ( At t r i b u t ) ei n es Ob j e k t (e x e m p l a r )s . § Kl a sse n kö n n e n static Met h o d e n und Va r i a b l e habe n § ( Lei d er ) he i s s e n « static Va r i a b l e » im Eng l i s c he n ma n c h ma l «f i e l d s » § Ei ne static Va r i a b l e ex i s t i e r t nur ei n m a l – Met h o d e n al l e r Ex e m pl ar e de r Kl a sse kö n n e n auf di e s e zu g r e i f e n § Ei ne static Va r i a b l e wi r d ni c h t ( wi e ei n At t r i b u t ) fü r je d e s Ob j e kt ge s c h a f f e n . § St a t t static Va r i a b l e ve r w e n d e n vi e l e Au t or e n de n Beg r i f f «cl a s s v a ri a b l e » ( « Kl as s e n v ar i ab l e ») 38 static Va r i a b l e u n d Me t h od en § static : is t Te i l ei n er Kl as s e , ni c h t Te i l ( At t r i b u t ) ei n es Ob j e k t (e x e m p l a r )s . § Da h e r … § static Va r i a b l e u n d Met h o d e n ex i s t i e r e n nur ei n m a l und l e be n s o la n g e wi e di e Kl a sse § At t r i b u t e u n d ( Ob j e kt ) Met h o d e n ex i s t i e r e n so la n g e wi r auf das Ex e m pl ar zu g r e i f e n kö n n e n § static : Le b e n s d a u e r unbe gr e nz t ( wä h re n d der Au s f ü h r u n g des Pr o g r a m m s ) 39 static Va r i a b l e u n d Me t h od en § static : is t Te i l ei n er Kl as s e , ni c h t Te i l ( At t r i b u t ) ei n es Ob j e k t (e x e m p l a r )s . § Da h e r … § static Va r i a b l e u n d Met h o d e n ex i s t i e r e n nur ei n m a l und l e be n s o la n g e wi e di e Kl a sse § At t r i b u t e u n d ( Ob j e kt ) Met h o d e n ex i s t i e r e n so la n g e wi r auf das Ex e m pl ar zu g r e i f e n kö n n e n § static : Le b e n s d a u e r unbe gr e nz t ( wä h re n d der Au s f ü h r u n g des Pr o g r a m m s ) § Kl a sse n kö n n e n auc h en t s o r g t we r d e n – abe r ni c h t in « Ei n f ühr ung …» 40 static Va r i a b l e u n d Me t h od en § static : is t Te i l ei n er Kl as s e , ni c h t Te i l ( At t r i b u t ) ei n es Ob j e k t (e x e m p l a r )s u n d ei n e Kl as s e n v ar i ab l e ( static Va r i a b l e ) ex i s t i e r t § Ei ne Kl a sse n v a r i a b l e ( static Va r i a b l e ) ex i s t i e r t auc h we n n es ke i n e Ex e m pl ar e de r Kl a sse gi b t § Ei ne static Met h o d e ka n n oh n e Ob j e kt (e x em p l a r) aus g e f ühr t we r d e n § static Va r i a b l e so l l t e n di e Aus na hm e se i n § Im « No r ma l f a l l » ve r w e n d e n wi r Ob j e kt a t t r i b u t e § Fa s t im m e r is t (i n Ih r e n Pr og r a m m e n ) static fa l s c h ! 41 42 cl as s C Zu s t a n d (s t a t e): private static int staticFieldA private static String staticFieldB private int field1; private double field2; Ve r h a l t e n (beh a v i o r) od e r Se rv i c e : public static void someStaticMethodC () public static void someStaticMethodD () public void method3() public int method4() ob j e c t # 1 st a t e: int field1 double field2 beh a v i o r : public void method3() public int method4() ob j e c t # 2 st a t e: int field1 double field2 beh a v i o r : public void method3() public int method4() ob j e c t # 3 st a t e: int field1 double field2 beh a v i o r : public void method3() public int method4() § Ei n e static Me t h o d e is t ei n e Me t h o d e für di e Kl as s e § Ei n e static Me t h o d e ka n n oh n e ei n e Re f e r e n z au f ei n Ex e m p l a r au f g e r u f e n we r d e n . cl as s . me t h o d ( par am e t er s ); § De sh a l b ha be n wi r z. B . Arrays.toString ( …) od e r Math.abs(... ) au f r u f e n k ö nne n. 44 Be i s p i e l , Te i l 1 // This program sees whether some interesting numbers are prime. public class Primes { public static void main (String[] args ) { int [] nums = {1234517, 859501, 53, 142} ; for ( int i = 0; i < nums.length ; i ++ ) { if ( Factors .isPrime ( nums [ i ]) ) { System.out.println ( nums [ i ] + \" is prime\") ; } } } } 45 Be i s p i e l , Te i l 2 // This program prints all prime numbers up to a given maximum. public class Primes2 { public static void main (String[] args ) { Scanner console = new Scanner( System.in ) ; System.out.print (\"Max number? \") ; int max = console.nextInt () ; for ( int i = 2; i <= max; i ++ ) { if ( Factors .isPrime ( i ) ) { System.out.print ( i + \" \") ; } } System.out.println () ; } } 46 static Va r i a b l e § static Va r i a b l e : Mi t de r Kl as s e ge s p e i c h e r t , ni c h t mi t je d e m Ob j e k t e x e mp l a r § Ge me i n s a me (« s h a r ed » ) V a r i a b l e fü r al l e Ex e m pl ar e § Ka n n vo n al l e n Met h o d e n al l e r Ex e m pl ar e ge l e s e n und mo d i f i z i e r t we r d e n § In s b e s o n d e r e Mo d i f i k a t i o n e n si n d kr i t i s ch § Lei c h t di e Üb e r s i c h t zu ve r l i e r e n § Vo r s i c h t be i static § So l c h e Va r i a b l e sp e i c h e r n Zu s t a n d übe r me h r e r e Au f r u f e fü r ve rs c h i e d e n e Ex e m pl ar e 47 Gem ei ns a m e (« s h a r e d » ) V a r i a b l e für al l e Ex e m p l a r e § Vo r s i c h t : w e l c h e M e t h o d e k a n n d i e s e V a r i a b l e v e r ä n d e r n ? § Ve r m e i d e n w e n n n i c h t a b s o l u t n o t w e n d i g § (S i c h e r e ) Au s n a h m e : D i e V a r i a b l e k a n n n i c h t v e r ä n d e r t we r d e n § Ei n f ac h be i B as i s t y pe n da di e V ar i abl e de n W e r t s pe i c he r t § Be i R e f e r e n z v a r ia b le n k o m p liz ie r t e r 48 Gem ei ns a m e (« s h a r e d » ) V a r i a b l e für al l e Ex e m p l a r e § Vo r s i c h t : w e l c h e M e t h o d e k a n n d i e s e V a r i a b l e v e r ä n d e r n ? § Ve r m e i d e n w e n n n i c h t a b s o l u t n o t w e n d i g § (S i c h e r e ) Au s n a h m e : D i e V a r i a b l e k a n n n i c h t v e r ä n d e r t we r d e n – Ke y w o r d final § Ei n f ac h be i B as i s t y pe n da di e V ar i abl e de n W e r t s pe i c he r t § Be i R e f e r e n z v a r ia b le n k o m p liz ie r t e r 49 Mod u l e i n J a v a Bi b l i o t h e k e n // Java's built - in Math class is a module public class Math { public static final double PI = 3.14159265358979323846 ; ... public static int abs ( int a ) { if ( a >= 0 ) { return a ; } else { return - a ; } } public static double toDegrees (double radians ) { return radians * 180 / PI ; } } 50 De k l a r a t i o n (u n d gg f . D e fi n i ti o n ) v o n static V a ri a b l e n Se l b e Re g e l n wi e fü r At t r i b u t e od e r ( Met h o d e n )V a ri a b l e private static ty p e na m e ; private static ty p e na m e = va l u e ; od e r static ty p e na m e ; static ty p e na m e = va l u e ; § Be is p ie l : private static int theAnswer = 42; 51 Zu g r i f f au f static Va r i a b l e § In n e r h a lb de r Kl as s e in d e r d ie V a r ia b le de k l a r i e r t wu r d e : va r N a m e // get the value va r N a m e = va l u e ; // set the value § Au s ei n er an d e r e n Kl as s e ( so f e r n ni c h t private ) Cl a ssN a m e . va r N a m e // get the value Cl a ssN a m e . va r N a m e = va l u e ; // set the value 52 Zu g r i f f au f static Va r i a b l e § Im Nor m a l f a l l si n d static Va r i a b l e private es se i de nn si e si n d final § final : W e r t ka n n nac h In i t i a l i s i e r u n g ni c h t ge ä n d e r t we r d e n § Da m i t au f ( static ) V a r i a b l e i n al l en an d e r e n Kl as s e n zu g e g r i f f e n we r d e n ka n n mü s s en di e s e Va r i a b l e n public se i n § Al s o (i n ei n er Kl as s e ) public static ty p e na m e ; public static ty p e na m e = va l u e ; § Ke y w o r d public er l a u b t Zu g r i f f vo n übe r a l l ( sp ä t e r me h r daz u ) 53 Zu g r i f f au f static Va r i a b l e § Au s ei n er an d e r e n Kl as s e ( we n n di e V a r i a bl e public is t ): Cl a ssN a m e . fi e l d N a m e // get the value Cl a ssN a m e . fi e l d N a m e = va l u e ; // set the value 54 Zu g r i f f au f static Va r i a b l e § Au s ei n er an d e r e n Kl as s e ( we n n di e V a r i a bl e public is t ): Cl a ssN a m e . fi e l d N a m e // get the value Cl a ssN a m e . fi e l d N a m e = va l u e ; // set the value § … do c h public static so l l t e final se i n ! § We n n ni c h t final , da nn nur dur c h Ac c e s s or / M u t a t or Me t h o d e n er r ei c h b a r (a l s o private ) 55 Üb u n g ( Be i s p i e l fü r no t w e ndig e s static ) § Er w e i t e r n Si e di e Kl as s e Person so , da s s je d e s ne ue Ob j e k t ei n e ei n d eu t i g e ID für di e ne ue Pe r s o n er h ä l t § Al t e s De s i g n ha t t e ei n en Ko n s t r u k t o r de r di e I D al s Pa r a m e t e r übe r nahm Person employee1 = new Person(\"Paula\", 123); Person employee2 = new Person(\"Erich\", 123); § Wi r wo l l e n je t zt di e I D i n de r Kl as s e ve r wa l t e n / zu w e i s e n 56 public class Person { String name; int id; double hourlyRate ; double[] hours; double[] overtime; // Constructs a Person with given name and Id public Person(String firstname , int uniqueId ) { name = firstname ; id = uniqueId ; } // Methods ... } 57 § Id e e : e in e static (K l a s s e n )V a r i a b l e h ä l t f e s t , w i e v i e l e Ob j e k t e x e mp l a r e s c h o n e r s t e l l t w u r d e n § Mu s s static s e i n d a f ü r a l l e E x e m p l a r e § Au c h w e n n z w i s c h e n d u r c h e s k e i n e E x e m p l a r e m e h r g i b t § We r k a n n e r s t e l l t e E x e m p l a r e z ä h l e n ? 58 § Id e e : e in e static (K l a s s e n )V a r i a b l e h ä l t f e s t , w i e v i e l e Ob j e k t e x e mp l a r e s c h o n e r s t e l l t w u r d e n § Mu s s static s e i n d a f ü r a l l e E x e m p l a r e § Au c h w e n n z w i s c h e n d u r c h e s k e i n e E x e m p l a r e m e h r g i b t § We r k a n n e r s t e l l t e E x e m p l a r e z ä h l e n ? § Ko n s t r u k t o r 59 public class Person { private static int uniqueId = 0; String name; int id; double hourlyRate ; double[] hours; double[] overtime; // Constructs a Person with given name and assigns ID public Person(String firstname ) { name = firstname ; id = uniqueId ++; } // Methods ... } 60 static Me t h od en § We n n es static (K l a s s e n )V a r i a b l e gi b t , da nn br a uc he n wi r ( ev t l .) au c h Ac c e s s or u n d M u t a t or Me t h o d e n § De nn di e V ar i abl e so l l t e private se i n … § So l c h e Me t h o d e n mü s s en oh n e Ob j e k t (e x e m p l a r ) au f g e r u f e n we r d e n kö n n e n § De nn di e V ar i abl e ex i s t i e r e n ja unabhäng i g vo n Ex e m pl ar e n de r Kl a sse § So l c h e Me t h o d e n we r d e n dur c h da s K e y w o r d static ge k e n n z e i c h n e t § Wi e d i e Met h o d e n ei n es Mo d u l s 62 static Me t h od en § So n s t än d e r t si c h ni c h t s in d e r D e f in it io n so l c h e r Me t h o d e n § public static ty p e na m e ( par am e t er s ) { St a t e m e n ts ; } § Di e s si n d di e Me t h o d e n di e wi r zu e r s t ke n n e n g e l e r n t ha be n § Dam al s ka n n t e n wi r ke i n e Kl a sse n od e r Ob j e kt e x e m p l a r e § Au s r e i c h e n d fü r « nam e nl o s e n » S e r v i c e § De s hal b ka n n main vo r Er s t e l l ung de s er s t en Ob j e kt s auf g e r uf e n we r d e n 63 Ty p d e r R ü c k g a b e Pa r a m e t e r l i s t e Na m e d e r M e t h o d e static Me t h od en § static Me t h o d e : Me t h o d e di e i n de r Kl as s e au f g e se tz t is t § Oh n e Be z u g zu ei n em Ob j e kt e x e m p l a r § Ge m e i n s a m fü r al l e Ex e m pl ar e , ni c h t fü r je d e s Ex e m pl ar § D. h . Ni c h t mi t de n At t r i b u t e n /d e m Zu s t a n d ei n es Ex e m pl ar s ve r b u n d e n § Es gi b t ke i n e n im p liz it e n Pa r a m e t e r this § Dahe r ka n n ei n e so l c h e Met h o d e ni c h t auf de n Zu s t a n d ei n es Ob j e kt s zu g r e i f e n , d. h . ( Ob j e kt )A t t ri b u t e kö n n e n ni c h t ge l e s e n od e r ge s c h r i e b e n we r d e n . 64 Üb u n g ( Be i s p i e l static Me t h od e ) § Er w e i t e r n Si e d i e Kl as s e Person um ei n e Me t h o d e ( numberEmployees ) di e di e An z a h l de r bi s he r er s t el l t en Person Ob j e k t e zu r ü c k g i b t . § Mu s s a u f static Kl a sse n v a r i a b l e zu g r e i f e n 65 Üb u n g § Er w e i t e r n Si e d i e Kl as s e Person um ei n e Me t h o d e di e di e An z a h l de r bi s he r er s t el l t en Person Ob j e k t e zu r ü c k g i b t . § Wa s mü s s en wi r fe s t l e g e n ? § Si c h t b a r k e i t ( We r ka n n Met h o d e au f ru f en ?) § Rü c k g a b e w e r t § Pa r a m e t e r (W a s br a uc h t Met h o d e um J o b zu e r le d ig e n ?) § Leb en s d a u er (S o la n g e wi e e in Ex e m pl a r , s o la n g e wi e di e Kl a s s e ?) 66 public class Person { private static int uniqueId = 0; String name; int id; double hourlyRate ; double[] hours; double[] overtime; // Constructs a Person with given name and assigns ID public Person(String firstname ) { name = firstname ; id = uniqueId ++; } // Methods public static int numberEmployees ( ) { } } 67 Üb u n g § Er w e i t e r n Si e d i e Kl as s e Person um ei n e Me t h o d e di e di e An z a h l de r bi s he r er s t el l t en Person Ob j e k t e zu r ü c k g i b t . § Wa s mü s s en wi r fe s t l e g e n ? § Si c h t b a r k e i t ( We r ka n n Met h o d e au f ru f en ?) § Rü c k g a b e w e r t § Pa r a m e t e r (W a s br a uc h t Met h o d e um J o b zu e r le d ig e n ?) § Leb en s d a u er (S o la n g e wi e e in Ex e m pl a r , s o la n g e wi e di e Kl a s s e ?) 68 Po l l public class Person { private static int uniqueId = 0 ; String name ; int id ; double hourlyRate ; double[] hours ; double[] overtime ; // Constructs a Person with given name and assigns ID public Person (String firstname ) { name = firstname ; id = uniqueId ++ ; } // Methods public static int numberEmployees ( ) { return uniqueId ; } } 69 Po l l public class Person { private static int uniqueId = 0; String name; int id; double hourlyRate ; double[] hours; double[] overtime; // Constructs a Person with given name and assigns ID public Person(String firstname ) { name = firstname ; id = uniqueId ++; } // Methods public static int numberEmployees () { return uniqueId ; } } 7071 Zu s a m m e n f a s s u n g Ja v a K l as s e n § Ei n e Kl as s e ka n n in ei n em gr o s s e n So f tw ar e S y s t e m : 1. Ei n Pr o g r a mm en t h a l t en 2. Ei ne Ob j e k t Kl a s s e ( d. h . Ty p ) de f i ni e r e n 3. Ei n Mo du l de f i ni e r e n 72 Zu s a m m e n f a s s u n g Ja v a K l as s e n § Ei n e Kl as s e ka n n in ei n em gr o s s e n So f tw ar e S y s t e m : 1. Ei n Pr o g r a mm en t h a l t en : H a t ei n e public static main Met h o d e und gg f . ande r e static Met h o d e n . § No r ma l e r w e i s e oh n e static Va r i a b l e ( aus s e r si e si n d final ) § Im p l e m e n t i e r t ei n en Se r vi c e fü r Be n u t z e r 73 Zu s a m m e n f a s s u n g Ja v a K l as s e n § Ei n e Kl as s e ka n n in ei n em gr o s s e n So f tw ar e S y s t e m : 2. Ei ne n Ty p de f i ni e r e n : D i e Ob j e k t Kl a s s e be s c hr e i b t ne ue n Ty p vo n Ob j e kt e n ( We r t e und Ve r h a l t e n ) § De k l ar i e r t Ob j e kt a t t r i b u t e , Ko n s t r u k t o r e n und Met h o d e n § De k l ar i e r t mö g l i c h e r w e i s e static Va r i a b l e od e r Met h o d e n , abe r di e s e sp i e l e n i. A . ei n e un t e r g e o r dne t e Ro l l e § Is t abg e k ap s e l t (« en c a p s u l a t ed » ) – al l e A t t r i but e (u n d so l l t e es si e ge b e n … static Va r i a b l e n ) si n d private § Be is p ie l vo n Ob j e k t Kl a s s en : Point , Person, Random, Scanner 74 Zu s a m m e n f a s s u n g Ja v a K l as s e n § Ei n e Kl as s e ka n n in ei n em gr o s s e n So f tw ar e S y s t e m : 3. Ei n M o dul de f i ni e r e n : Wi e d e r v e r w e n d b a r e r Co d e d e r dur c h static Met h o d e n im p le m e n t ie r t is t 4. Be is p ie l : Math , Arrays , Factors 75 Wo st e h e n wir ? § Ke r n k o n z e p t e für ei n f a c h e Pr o gr a m m e § if - el s e, i f - el s e - if § Sc h l e i f e n : f o r , w h i l e , d o … w h i l e § Au s d r ü ck e ( e i n s ch l i e s s l i ch Z u w e i s u n g e n ) § Än d e r u n g e n de r Au s f ü h r u n g s r e i h e n f ol g e dur c h Met h o d e n a u f r u f § Str u k tu r i e r u n g in Me t h o d e n § Pa r a m e t e r § Rü c k g a b e w e r t e 76 Wo st e h e n wir ? § En t w u r f ( ei n f a c h er ) K l a s s e n § At t r i b u t e § Met h o d e n § « Kl a sse n v a r i a b l e » § Er s t e Sc h r i t t e mi t Ja v a S y s t e m § Sc a n n e r , M a t h , F i l e , Pr i n tS tr e a m , R a n d o m 77 Wo st e h e n wir ? § De k l a r a t i o n vo n Va r i a b l e n ei n es Ba s i s t y p s § De k l a r a t i o n vo n Va r i a b l e n ei n es Re f e r e n z t y p s § So w o h l ei n z el n e Va r i a b l e al s au c h Ar r a y s § Er s t e l l e n vo n Ob j e k t ( ex e m p l a re n ) 78 We n n Si e me h r le s e n wo l l e n § (u n d d a s so l l t e n Si e …) § Le h rb ü ch e r § Ja v a D o k u m e n t a ti o n 7980 S. Re g e s und M . S t e pp , B u ild in g J a v a Pr o g r a m s: A B a c k t o B a si c s A p p r o a c h , 5t h Ed i t i o n , P e a r s o n , I S B N 9 7 8 - 0 - 13 - 5471944. R. S e d g e wi c k u n d K . W a y n e , In t r o d u c t i o n t o Pr o g r a m m i n g i n J a va : A n I n t e r d i sc i p l i n a r y Ap p r o a ch ( 2 n d E d i t i o n ) , 2017, Ad d i s o n - We s l e y , I S B N 978 - 0 - 67 - 233784 - 0 81 S. Re g e s und M . St e p p , B u ild in g J a v a Pr o g r a m s: A B a c k t o B a si c s A p p r o a c h , 4t h Ed i t i o n , P e a r s o n , I S B N 9 7 8 - 0 - 13 - 432276 - 6. R. S e d g e wi c k u n d K . W a y n e , Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g mi t Ja v a , 2 0 1 1 , (D e u t s c h ) IS B N 9 7 8 - 3 - 86894 - 0476 - 3. 82 R. S e d g e wi c k u n d K . W a y n e , In t r o d u c t i o n t o Pr o g r a m m i n g i n J a va : A n I n t e r d i sc i p l i n a r y Ap p r o a ch ( 2 n d E d i t i o n ) , 2017, Ad d i s o n - We s l e y , I S B N 978 - 0 - 67 - 233784 - 0 S. Re g e s und M . St e p p , B u ild in g J a v a Pr o g r a m s: A B a c k t o B a si c s A p p r o a c h , 4t h Ed i t i o n , P e a r s o n , I S B N 9 7 8 - 0 - 13 - 432276 - 6. Ja v a Lehr büc her § Es gi b t vi e l e (i n vi e l e n Sp r ac h e n ) § We r f e n Si e ei n en Blic k auc h in ande r e Bü c h e r § Ma n c h e Bü c h e r si n d auc h on l i n e ve r f ü g b a r 83 Ja v a In f o r m a tio ne n § On l i n e gi b t es di e Sp r ac h b e sc h r e i b u n g so w i e di e Do k u m e n t a t i o n de r A PI s § Wi r we r d e n im La u f e de s S e m e s t e r s ei n i g e Bi b l i o t h ek en (u n d we i t e r e Kl as s e n ) ke n n e n l e r n e n § Nu t z e n Si e di e o nl i ne In f o r m a t i o n e n 8485 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 6. 0 Ar b e i t e n mi t Ob j e k t e n und Kl a s s e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 2 0 , 2 0 2 1 Al l r i g h t s r e s e r v e d . 86 Üb e r s i c h t 6. 1 Sti l und Ko n v e n t i o n e n § Hi n w e i s e (u n d Re g e l n ) fü r ve r s t ä n d l i c h e Pr og r a m m e § Te i l 1 : Ni c h t vo l l s t ä n d i g – sp ä t e r er w ei t ert 6. 2 Da t e n s t r u k t u r e n mi t Ve r k n ü p f u n g e n 6. 3 En t w u r f vo n ( ab g e k ap se l t e n ) K l a s s e n 6. 4 Pr o gr a m m be i s pi e l und – au s f ü h r u n g 6. 5 ( Me h r ) Op t i o n e n für Si c h tb ar k e i t Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 7 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 88 6. 1 St i l und Ko n v e n t i o n e n Hi n w e i s e f ü r v e r s t än d l i c h e P r o g r am m e § Ei n f a c h e R e g e l n § Se tz e n E c l i ps e /I DE v o r a u s § Üb e r l a s s e n S i e Ec l i p s e La y o u t u n d Fo r m a t t i e r u n g 89 Hi n w ei se und Re g e l n § Ni c h t st r i k t § Au s n a h m e n kö n n e n si n n v o l l se i n . § Ab e r m a n so l l t e si c h wi r k l i c h gu t übe r l e g e n , ob ei n e Au s n a h m e ge r e c ht f e r t i g t is t . § Wa s is t da s Zi e l so l c h e r ( al l e r ) Re g e l n ? 90 § Pr o gr a m m e so l l e n gut le s b a r se i n . § Mö g l i c h s t ko m p a k t (« D on ’ t r e p e a t y o u r s e l f » ) 91 § Pr o gr a m m e so l l e n gut le s b a r se i n . § Wi c h t i g e Le s e r si n d § De v e l o pm e n t t e am / M ai n t e nanc e t e am § An d e r e Pr og r a m m i e r e r (d i e mi t de r Pr ob l e m s t e l l u n g ve r t r a u t si n d ) § De r C o m pi l e r § Mö g l i c h s t ko m p a k t (« D on ’ t r e p e a t y o u r s e l f » ) 92 Ec l i p s e F o r m a t t i e r u n g So u r c e - > F o r m a t 94 Pr o g r am m La y o ut § Au f e i n a n d e r f ol g e n d e An w e i s u n g e n un t e r e i na nde r int x = 10; int y = x + 1; § Gl e i c h we i t ei n g erü c k t § Ni c h t : int x = 10; int y = x+1; int z = y*2; z = z+1; 95 «Wh i t e Sp ac e »: Zw i s c h e n r a u m & Le e r z e i c he n § Ko s t e n we n i g – kö n n e n he l f e n § Ei n r ü c k e n vo n Bl ö c k en § Tr e n n e n Ke y w o r d s § for ▢ (int i = 1; …) od e r while ▢ (true) § for( int i =1; …) od e r while(true) § Ab e r § myMethod ( params ) od e r myMethod () § myMethod ▢ (params) , myMethod ▢▢▢ () od e r myM ( ▢ param ▢ ) § Me t h o d e n a u f r u f e si n d so sc h n e l l zu er k en n en 98 ▢ : Le e r z e i c he n , zu r Illu s t r a t io n he r v o r g e ho be n Leer z eic hen § Zu w e i su n g so p e r a t o r = mi t Le e rz e i ch e n ab g e se tz t § Ke i n e Le e rz e i ch e n na c h ( od e r vo r ) § Ni c h t ( ▢ od e r ▢ ) 99 « Ne w L i n es » § Sc h r e i b e n Si e C o d e d e r dur c hs uc h t we r d e n ka n n § new Op e r a t o r mi t Ko n s t r u k t o r au f ei n e Ze i l e , ei n Le e rz e i ch e n § Al s o new ▢ Foo (parameter) und ni c h t new ↵ Foo(parameter) od e r auc h ni c h t new ▢▢▢ Foo(parameter) § La n g e Au s d r ü c k e : na c h Op e r a t o r tr e n n e n § und R e s t ei n rü c k en 101 a+b+c+d we n n ke i n Pl a t z a+b + c+d Ve r w e n d e n Si e { und } // Good if (x < 0) { computeHead (x); } else { colorHead (x); } // Not good if (x < 0) computeHead (x); 103 Po s i t i o n v o n { und } § Di e si c h öf f n e n d e Kl am m e r { st e h t in d e r Ze i l e , d i e d e n ne ue n Bl o c k be gi nn t if (foo()) { ni c h t if (foo() { … § Di e si c h sc h l i e sse n d e Kl am m e r wi r d so w e i t ei n g r ü c k t wi e di e An w e i s u n g , d i e d e n B l o c k be gi nn t § ... ma c h t E c l i ps e für Si e . . . 104 § Ve r w e n d e n Si e { und } … ab e r ni c h t meh r al s nö n g double eps = 0; while (eps > bound) { n++ eps = findPoint (n); } { double approx = 0.0; double sum = 0.0; for (int i = 0; i <= 25; i ++) { approx += 1.0/ Math.pow (n, 2); } } 111 Da t e i La y o ut § Re i h e n f o l g e in Da t e i Na m e . j a v a § Im p o r t § (H a u p t ) Kl a sse ( public class Name … ) § main Met h o d e ( w e n n v o r h a n d e n ) § ande r e M e t ho de n § gg f . a n d e r e K l a s s e n ( s p ä t e r m e h r ) 113 Kla s s e n § A t t r i b u t e d i e ve r ä n d e r t we r d e n kö n n e n si n d private § Zu g r i f f vi a « g e t t e r » u n d « se t t e r » Met h o d e n § Fl e x i b e l – ka n n Dar s t e l l ung (d es A t t ri b u t es ) sp ä t e r ände r n § Me t h o d e n si n d zu e r s t private und bl e i be n private – es se i de nn ei n Kl i e n t ru f t si e au f § Dann si n d si e public (b i s wi r we i t e r e Op t i o n e n ke n n e n le r n e n ) § Kl as s e n si n d public we n n es Kl i e n t e n gi b t 114 Re g e l n fü r Na m en 115 § Nu r Bu c h s t a b en und Zi f f e r n § Ke i n e _, $ , e t c. § Ke i n e Um l a u t e § Kl as s e n n am e n : Mi t G r o s s B u c h s t a b e n § Me t h o d e n n a m e n § We n n mö g l i c h mi t Ve r b § er s t er Bu c h s t a b e kl e i n in s e r t , r e m o v e , dr a w L i ne § Na m e n für Va r i a b l e : be s c hr e i be nd § Ku r z e Na me n fü r Lo o p c o u n t er for ( int i ; …) 116 Va r i a b l e n n a m e n § Ku r z e Va r i a b l e n n a m e n re s e r v i e r t für Lo o p c o u n t e r § D. h . i , j, k us w s o llt e n im m e r Lo o pc o un t e r s e in § I d e a le r w e is e im for St a t e m e n t de k l a r i e r t § for ( int i = 0; …; i ++) { … } § for (double d : measuredTemp ) { … } § St an d ar d Ko n v e n t i o n § My C l a s s fü r Ty p e n : K l a s s e n u n d I n t e r f a c e s § My C l a s s () is t da nn de r Ko n s t r u k t o r de r Kl a s s e § my V a r i a b l e fü r A t t r ib u t e , P a r a m e t e r u n d V a r ia b le ( static und l o c a l ) § my M e t h o d () fü r Met h o d e n § MY _ C O N ST A N T fü r Ko n s t a n t e n ( s in d final ) 117 Va r i a b l e n n a m e n § Ke i n e Ty p /M e t a i n f o r m a t i o n im Na m e n // Good int i ; int responses; // Not good int [] scoreArray ; double doubleNote ; § Ma s s e i n h e i t so l l ( we n n re l e va n t ) Te i l de s N a m e s s e i n // Good int refreshIntervalMs ; 118 Va r i a b l e § De k l a r a t i o n in de m Bl o c k i n de m Va r i a b l e ge b r a u c h t wi r d // Not good int i ; .... for ( i = 0; i < weight.length ; i ++) { .... } // Good for ( int i = 0; i < weight.length ; i ++) { .... } 120 ( Me t h od en ) Va r i a b l e n § Ei n e Va r i a b l e p r o De k l a r a t i o n . In it a lis ie r u n g ni c h t ve r g e s s e n . // Not good int k, m; … k = ...; // Good int k = 100; int m = 0; // Also i.O . int k; k = ...; 121 § Fü r Pa r a m e t e r ge l t e n di e se l b e n Re g e l n wi e für ( Me t h o d e n - lo k a le ) Va r i a b l e n 122 Ar r a y s § Ob w o h l di e J a v a S yn t a x fl e x i be l is t , ve r b i n d e n wi r di e [] mi t de m Ty p de r Ar r a y e l e m e n t e // Good String[] args ; // Not good String args []; // Java akzeptiert das … String ▢ [] args ; // Java akzeptiert das … § De r Ty p is t « String Ar r a y » – da he r di e P o s i t i o n für [] 123 Co d e 124 Fa k t o r i s i e r u n g § Si e er i n n er n si c h an d i e Ze r l e g u n g ei n er Za h l in Pr i m z a hl e n § Kl a sse Factors – Mo d u l fü r ande r e Kl a sse n ( Pr og r a m m e ) § Od e r d i e Ze r l e g u n g vo n Po l y n o m e n (i n d er Ma t h e m a t i k ) § « Fa k t o r i s i e r u n g » -- Ze r l e g u n g in T e r m e / Te i l e § Id e e : ke i n e Übe r l a ppung § Fa k t o r i s i e r u n g (« f a c t or i n g » ) v on C od e : He r au s ar b e i t e n vo n ge m e i n s a m e n / re d u n d a n t e n An w e i s u n g e n § In d e r P r a x i s o f Re f a k t o r i s i e r u n g (« r e f a c t o ri n g » ) Fa k t o r i s i e r u n g für if/else An w e i s u n g e n § Ex a m p l e : if (a == 1) { System.out.println(a ); x = 3; b = b + x ; } else if (a == 2) { System.out.println(a ); x = 6; y = y + 10; b = b + x ; } else { // a == 3 System.out.println(a ); x = 9; b = b + x ; } System.out.println(a ); b = b + x ; Fa k t o r i s i e r u n g für if/else An w e i s u n g e n § Ex a m p l e : if (a == 1) { System.out.println(a ); x = 3; b = b + x ; } else if (a == 2) { System.out.println(a ); x = 6; y = y + 10; b = b + x ; } else { // a == 3 System.out.println(a ); x = 9; b = b + x ; } System.out.println(a ); x = 3 * a; b = b + x ; Fa k t o r i s i e r u n g für if/else An w e i s u n g e n § Ex a m p l e : if (a == 1) { System.out.println(a ); x = 3; b = b + x ; } else if (a == 2) { System.out.println(a ); x = 6; y = y + 10; b = b + x ; } else { // a == 3 System.out.println(a ); x = 9; b = b + x ; } System.out.println (a); x = 3 * a; if (a == 2) { y = y + 10; } b = b + x; Bo o l e s c h e Aus dr üc k e if (((x>0) && (y>0)) && (z > 0)) { // block 1 } else if (((x>0) && (y>0)) && (z < 0)) { // block 2 } else if (((x>0) && (y>0)) && (z == 0)) { // block 3 } § Wa s is t an di e s e m Co d e Bei s p i el sc h l e c h t ? 131 Bo o l e s c h e Aus dr üc k e if (((x>0) && (y>0)) && (z > 0)) { // block 1 } else if (((x>0) && (y>0)) && (z < 0)) { // block 2 } else if (((x>0) && (y>0)) && (z == 0)) { // block 3 } § Wa s is t an di e s e m Co d e Bei s p i el sc h l e c h t ? § (x>0) && (y>0) me h r f a c h be r e c hne t und unübe r s i c h t l i c h 132 Be i s p i e l -- Fa k t o r i s i e r u n g if (((x>0) && (y>0))) { if (z > 0) { // block 1 } else if (z < 0) { // block 2 } else if (z == 0) { // block 3 } } 133 Me t h od en § Ku r z e Me t h o d e n si n d sc h n e l l e r zu le s e n § Ke i n e Co d e Dupl i k a t i o n ! § Me t h o d e n er l a u b en Wi e d e r v e r w e n d u n g § In d e r R e g e l ni c h t meh r al s 20 - 40 An w e i s u n g e n pr o Me t h o d e § Es gi b t ma n c h ma l gu t e Gr ü n d e fü r Au s n a h m e n § ( z.B . switch St a t e m e n t , ge s c h a c ht e l t e if - St a t e m e n t s) § We n n es meh r An w e i s u n g e n gi b t : s e p a r a t e Me t h o d e ! 136 Me t h od en § Ku r z e Pa r a m e t e r l i s t e n § If y o u h a v e a p r o c e d u r e w i t h t e n p a r a m e t e r s , y o u p r o b a b l y m i s s e d so m e . (A l a n P erl i s Epi g r am s i n P r o g r am m i ng ) § Ei n e Me t h o d e so l l t e ei n Pr o bl e m / ei n e Au f g a b e lö s e n 137 § Ku r z e Met h o d e n si n d sc h n e l l e r zu ve r s t e h e n Me t h od en § Ku r z e Pa r a m e t e r l i s t e n § If y o u h a v e a p r o c e d u r e w i t h t e n p a r a m e t e r s , y o u p r o b a b l y m i s s e d so m e . (A l a n P erl i s Epi g r am s i n P r o g r am m i ng ) § Ei n e Me t h o d e so l l t e ei n Pr o bl e m / ei n e Au f g a b e lö s e n 138 § Ku r z e Met h o d e n mi t ku r z e n Pa r a m e t e r l i s t e n si n d sc h n e l l e r zu ve r s t e h e n En t w u r f v o n / A u o e i l u n g i n M e t h o d e n 140 At t r i b u t e e i n e s Ex e m p l a r s Me t h o d e Me t h od en h el f en n i c h t u n b ed i n g t 141 At t r i b u t e e i n e s Ex e m p l a r s Me t h o d e n Me t h od en h el f en v i el l ei c h t 142 At t r i b u t e e i n e s Ex e m p l a r s Me t h o d e n St a t t 143 St ru k t u r m i t M e h rf ac h v e r w e n d u n g 144 Ma n c h m a l r u o si c h ei n e Me t h od e a u f … 146 Re k u r s i v e M e t h o d e n § Ei n e M e t h o d e f() is t r e k u r s iv , w e n n e in A u f r u f v o n f() wi ed er z u ei n em A u f r u f v o n f() führ e n k a nn § f() is t di r ek t re ku r s i v w e n n d e r A u f r u f v o n f() im R u m p f vo n f() au f tr i t t § Ei ne M e t ho de g() is t in d ir e k t r e k u r s iv , w e n n d e r A u f r u f v o n g() zu m Au f r u f v on h() (u n d d i es er z u m A u f ru f v o n … ) f ü h rt , i n d em d a n n g() wi e d e r a u f g e r u f e n wi r d § g() à h() à m() à …. à g() 147 Re k u r s i v e M e t h o d e n § … s i n d m a n c h m a l d e r b e s t e W e g e i n P r o b l e m z u l ö s e n § … s i n d I t e r a t i o n ( S c h l e i f e n ) o f t ü b e r l e g e n § ... s i n d o ft k ü r z e r a l s S c h l e i f e n § … h a b e n e i n e e i n f a c h e r e K on tr ol l s tr u k tu r ( w e n i g e r i f - Fä l l e , z . B . ) § … k om m e n m i t w e n i g e r V a r i a b l e n a u s § … h a b e n o f t e i n e n e i n f a c h e n K o r r e k t h e i t s b e w e i s § Sp ä t e r m e h r d a z u § … u n d s i n d i n m a n c h e n P r o g r a m m i e r s p r a c h e n d e r e i n z i g e We g , W i e d e r h o l u n g e n a u s z u d r ü c k e n 148 Re k u r s i v e M e t h o d e n § Wi r e r i n n e r n u n s : E B N F e r l a u b t e R e k u r s i o n u n d I t e r a t i o n § Ge na us o v i e l e Pr o gr a m m i e r s pr a c he n § z.B . J a v a 149 It e r a tio n v s. R e k ur sio n § Gr undi de e : E i n Pr o bl e m v e r k l e i ne r n – bi s e s e i n f a c h z u l ö s e n is t ( o d e r k e in e w e it e r e Z e r le g u n g m ö g lic h is t ) § Bei s p i el : § An n a h m e : W i r l e b e n i n e i n e r a l tr u i s ti s c h e n Ge s e l l s c h a f t. W e n n je m a n d u n s f r a g t , s o s p e n d e n w i r 1 R a p p e n § Au f g a b e : W i r w ol l e n s F r 1' 000. 00 f ü r e i n e n g u t e n Z w e c k s a m m e l n 150 Qu e l l e : ht t ps : / / upl o a d. w i k i m e di a . o r g / w i k i pe di a / de / 0 / 0 0 / E i nr a ppe n. png ( GN U F r e e D o c u m e n t a t i o n L i c e n s e , v e r s i o n 1 . 2 ) It e r a tio n v s. R e k ur sio n § It e r a n v e L ö s u n g : § Wi r f r a g e n 1 0 0 ' 0 0 0 P e r s o n e n u n d s a mme l n v o m j e d e r 1 R a p p e n e i n § Re k u r s i v e L ö s u n g : § We n n u n s e i n e P e r s o n u m 1 R a p p e n f r a g t , s o g e b e n w i r d e r P e r s o n 1 Ra p p e n , so n s t (d . h . es w i l l j em a n d m eh r a l s 1 R a p p en ) § Ko n t a k k e r e 1 0 P e r s o n e n u n d b e a u l r a g e j e d e , 1 / 1 0 d e s B e t r a g e s z u sa m m e l n , d e r v o n u n s v e r l a n g t w i r d § Leg e d a s v o n d i es en P er s o n en g es a m m el t e G el d i n ei n e S c h a c h t el § Ge b e d i e S c h a c h t e l d e r P e r s on , d i e u n s g e f r a g t h a t 151 § It e r a t io n : D a s P r o b le m is t in 1 0 0 ' 0 0 0 T e il - Pr o bl e m e z e r l e g t § Je d e s T e i l - Pr ob l e m i s t g l e i c h g r os s § Re k u rs i o n : D i e T e i l - Pr o bl e m e w e r de n k l e i ne r und k l e i ne r § … b i s n u r n oc h 1 Ra p p e n g e s a m m e l t w e r d e n m u s s § (ei n k l ei n er es P r o b l em g i b t es n i c h t , 1 R a p p en i s t d i e k l ei n s t e Mü n z e ) 152 solve() : Ei n e r e k u r s i v e M e t h o d e ( M u s t e r ) We n n d a s P r o b l e m n i c h t w e i t e r z e r l e g t w e r d e n k a n n ( m i n i m a l i s t , B a s i s f a l l ) : lö s e P r o b le m d ir e k t ( o h n e R e k u r s io n ) u n d lie f e r e d ie L ö s u n g so n s t 1. Ze r l e g e P r o b l e m i n e i n o d e r m e h r äh n l i c h e , abe r kl e i n e r e Te i l - Pr ob l e m e TP 1 , T P 2 , … , T P n 2. Ru f e r e k u r s i v solve() auf , um di e kl e i n e r e n Te i l - Pr ob l e m e zu l ös e n ( d e n n di e s e s i nd äh n l i c h ): solve (T P 1 ), solve (T P 2 ), … , solve (T P n ) 3. Fü g e d i e L ö s u n g e n d e r T e i l - Pr ob l e m e ( v on solve ( TP i ) g el i e f ert ) zu s a m m e n u m d a s u r s p r ü n g l i c h e Pr ob l e m zu l ös e n 4. Li e f er e d i e Lö s u n g z u m u r s p rü n g l i c h en P r o b l em (a n d en A u f ru f er) 153 Üb u n g § Wi r s a g e n e i n e g a n z e p o s i n v e Z a h l N h a t d i e E i g e n s c h a o AZ T ( a lle Z iﬀ e r n s in d T ei l er ) w en n j ed e Z i ﬀ er v o n N d i e Z a h l N oh n e R e s t t e i l t . § Bei s p i el § 124, 128 h a b e n d i e AZ T E i g e n s c h a l § 127, 104 h a b e n s i e n i c h t § Beo b a c h t u n g : ei n e Z a h l mi t Z i ﬀ er 0 h a t n i e d i e A Z T Ei g e n sc h a o 154 Üb u n g § Sc h r e i b e n Si e e i n P r o g r am m ( e i n e M e th o d e ) d i e f ü r e i n e po s i t i v e g a nz e Z a hl N true zu r ü c k g i b t , w e n n N d i e A Z T Ei g e n sc h a f t h a t . § Zu r E r i n n e r u n g : o b e i n e Z ah l o h n e R e s t t e i l t k ö n n e n w i r m i t de m m o dul o - Op e r a t o r % fe s t s t e l l e n § Di e k - te Z i f f e r e r h a l te n w i r dur c h / 10 k (v o n r ec h t s n a c h l i n k s ) 155 Lö sung public class AZT { public static void main(String[] args ) { System.out.println (\"124 : \" + azt (124)); } public static boolean azt (int x) { } } 156157 1 2 4 124 % 1 == 0 ? 124 % 2 == 0 ? 124 % 4 == 0 ? ✓ ✓ ✓ AZ T ✓ 158 1 2 4 124 % 4 == 0 ? 124 % 2 == 0 ? 124 % 1 == 0 ? ✓ ✓ ✓ AZ T ✓ 159 4 3 1 431 % 1 == 0 ? 431 % 3 == 0 ? 431 % 4 == 0 ? ✓ ✘ AZ T ✘ Lö sung § % 10 lie f e r t le t z t e Z if f e r Z § Mü s s e n E i n g a b e Z a h l N b e r e i t h a l t e n § Um z u p r ü f e n o b Z d i e Z a h l N o h n e R e s t t e i l t 160 Lö sung § % 10 lie f e r t le t z t e Z if f e r Z § Mü s s e n E i n g a b e Z a h l N b e r e i t h a l t e n § Um z u p r ü f e n o b Z d i e Z a h l N o h n e R e s t t e i l t § Id e e : e in e H e lf e r - Me t h o d e m i t z w e i P a r a m e t e r n : d i e Z a h l N und da s R e s i duum ( Z i ff e r n di e no c h ni c h t un t e r s uc h t w ur de n) § N w i r d « w e i t e r g e r e i c h t » , R e s i d u u m w i r d i mme r k l e i n e r § He l f e r - Met h o d e p r ü f t , o b N d u r c h Z o h n e R e s t t e i l b a r i s t § We n n j a : A u f r u f v o n H e l f e r - Met h o d e m i t R e s i d u u m \\ { Z } 161 Lö sung -- Re s i d u u m § Re s i d u u m : Z i f f e r n d i e n o c h n i c h t u n t e rs u c h t w u rd e n § Kö n n te n e i n e M e n g e n e h m e n ( a l l e Z i f f e r n v o n N ) § Kö n n te n e i n e n A r r a y n e h m e n ( a l l e Z i f f e r n v o n N ) § Ei n f a c h : Di v i si o n d u r c h 1 0 « e n t f e r n t » l e t z t e Z i f f e r § Re s i d u u m : Z a h l § Mü s s e n H e l f e r - Me t h o d e a m A n f a n g m i t R e s i d u u m N a u f r u f e n 163 Lö sung public class AZT { public static void main(String[] args ) { System.out.println (\"124 : \" + azt (124)); } public static boolean azt (int x) { return azt_helper (x, x); } } 164 azt_helper(int origin, int residuum) § Wa n n s i n d w i r f e r t i g ? § We n n a l l e Z i f f e r n u n t e r s u c h t w u r d e n u n d T e i l e r s i n d § Dann ha t di e Z ahl di e A Z T Ei g e ns c ha f t § We n n a l l e Z i f f e r n u n t e r s u c h t w u r d e n : e s g i b t k e i n e w e i t e r e n Zi f f e r n § D. h . r e s i d u u m i s t 0 § (E s w u r d e i m m er d i e l e t z t e Z i f f er u n t er s u c h t ) 165 azt_helper : Ei n e r e k u r s i v e M e t h o d e We n n d a s P r o b l e m n i c h t w e i t e r z e r l e g t w e r d e n k a n n ( m i n i m a l i s t , B a s i s f a l l ) : lö s e P r o b le m d ir e k t ( o h n e R e k u r s io n ) u n d lie f e r e d ie L ö s u n g public static boolean azt_helper ( int origin, int residuum) { if (residuum == 0) { return true; } 166 azt_helper : Ei n e r e k u r s i v e M e t h o d e so n s t 1. Ze r l e g e P r o b l e m i n e i n o d e r m e h r äh n l i c h e , abe r kl e i n e r e Te i l - Pr ob l e m e TP 1 , T P 2 , … , T P n 2. TP 1 : L e t z t e Z i f f e r v o n residuum : N i ch t 0 u n d t e i l t di e Z ahl N o hne R e s t ? 3. TP 2 : Ü b r i g e Z i f f e r n v o n residuum 2. Ru f e r e k u r s i v azt - helper(...) auf , um das kl e i n e r e Te i l - Pr ob l e m TP 2 zu lö s e n ( d e n n d ie s e s is t äh n l i c h ) 3. Fü g e d i e L ö s u n g e n d e r T e i l - Pr ob l e m e zu s a m m e n u m d a s u r s p r ü n g l i c h e Pr ob l e m zu l ös e n 4. Li e f er e d i e Lö s u n g z u m u r s p rü n g l i c h en P r o b l em (a n d en A u f ru f er) 167 azt_helper(int origin, int residuum) Is t origin dur c h l e t z t e Z i ff e r v o n residuum te i l b a r ? § We n n d i e l e t z t e Z i f f e r e i n e 0 i s t , d a n n m a c h t d i e s e F r a g e ke i n e n S i n n ( u n d d i e Z a h l h a t n i c h t d i e A Z T E i g e n s c h a f t ) § Di e s m üs s e n w i r pr üf e n be v o r ob i g e B e d i n g u n g g e p r ü f t w e r d e n k a n n 168 Lö sung public static boolean azt_helper (int origin, int residuum) { if (residuum == 0) { return true; } else { // Letzte Ziffer von residuum: ≠ 0 und teilt die Zahl N ohne Rest? boolean resultTP1; resultTP1 = (residuum%10!=0) && (origin%(residuum%10)==0); // Rufe rekursiv azt - helper(...) fuer TP2 auf boolean resultTP2 = azt_helper (origin, residuum/10); return resultTP1 && resultTP2; } } 169 azt_helper : Ei n e r e k u r s i v e M e t h o d e so n s t 1. Ze r l e g e P r o b l e m i n e i n o d e r m e h r äh n l i c h e , abe r kl e i n e r e Te i l - Pr ob l e m e TP 1 , T P 2 , … , T P n 2. TP 1 : L e t z t e Z i f f e r v o n residuum : N i ch t 0 u n d t e i l t di e Z ahl N o hne R e s t ? 3. TP 2 : Ü b r i g e Z i f f e r n v o n residuum . 2. Ru f e r e k u r s i v azt - helper(...) auf , um das kl e i n e r e Te i l - Pr ob l e m TP 2 zu lö s e n ( d e n n d ie s e s is t äh n l i c h ) 3. Fü g e d i e L ö s u n g e n d e r T e i l - Pr ob l e m e zu s a m m e n u m d a s u r s p r ü n g l i c h e Pr ob l e m zu l ös e n 4. Li e f er e d i e Lö s u n g z u m u r s p rü n g l i c h en P r o b l em (a n d en A u f ru f er) 170 Lö sung public static boolean azt_helper (int origin, int residuum) { if (residuum == 0) { return true; } else { // Letzte Ziffer von residuum: ≠ 0 und teilt die Zahl N ohne Rest? boolean resultTP1; resultTP1 = (residuum%10!=0) && (origin%(residuum%10)==0); // Rufe rekursiv azt - helper(...) fuer TP2 auf boolean resultTP2 = azt_helper (origin, residuum/10); return resultTP1 && resultTP2; } } 171 azt_helper : Ei n e r e k u r s i v e M e t h o d e so n s t 1. Ze r l e g e P r o b l e m i n e i n o d e r m e h r äh n l i c h e , abe r kl e i n e r e Te i l - Pr ob l e m e TP 1 , T P 2 , … , T P n 2. TP 1 : L e t z t e Z i f f e r v o n residuum : N i ch t 0 u n d t e i l t di e Z ahl N o hne R e s t ? 3. TP 2 : Ü b r i g e Z i f f e r n v o n residuum . 2. Ru f e r e k u r s i v azt - helper(...) auf , um das kl e i n e r e Te i l - Pr ob l e m TP 2 zu lö s e n ( d e n n d ie s e s is t äh n l i c h ) 3. Fü g e d i e L ö s u n g e n d e r T e i l - Pr ob l e m e zu s a m m e n u m d a s u r s p r ü n g l i c h e Pr ob l e m zu l ös e n 4. Li e f er e d i e Lö s u n g z u m u r s p rü n g l i c h en P r o b l em (a n d en A u f ru f er) 172 Lö sung public static boolean azt_helper (int origin, int residuum) { if (residuum == 0) { return true; } else { // Letzte Ziffer von residuum: ≠ 0 und teilt die Zahl N ohne Rest? boolean resultTP1; resultTP1 = (residuum%10!=0) && (origin%(residuum%10)==0); // Rufe rekursiv azt - helper(...) fuer TP2 auf boolean resultTP2 = azt_helper (origin, residuum/10); return resultTP1 && resultTP2; } } 173 Ve r e i n f a c h t … m i t « s h o rt - c i r c u i t » A u s w e rt u n g 174 public static boolean azt_helper (int origin, int residuum) { if (residuum == 0) { return true; } else { return // Letzte Ziffer von residuum: ≠ 0 und teilt die Zahl N ohne Rest? ( (residuum%10!=0) && (origin%(residuum%10)==0) && // Rufe rekursiv azt - helper(...) fuer TP2 auf azt_helper (origin, residuum/10) ); } } 6. 2 Da t e n s t r u k t u r e n mi t Ve r k ü p f u n g e n 175 Da t e n s t r u k t u r e n mi t Ve r k ü p f u n g e n § Bi s h er ha t t e n wi r Ar r a y s al s Da t e n s t r u k t u r ke n n e n ge l e r n t § Ei n A r r a y be s t e h t aus El e m e n t e n ei n es Ty p s int[] ia = {42, - 3, 17, 9}; § Gr ös s e mu s s im Vo r a u s be k ann t se i n § En t w e de r fü r new int[length] od e r fü r In i t i a l i s i e r u n g § Of t wo l l e n wi r mi t ei n er unbe s t i m m t e n An z a h l vo n El e m e n t e n ar b e i t e n . 176 In de x 0 1 2 3 We r t 42 - 3 17 9 Da t e n s t r u k t u r e n mi t Ve r k ü p f u n g e n § Wi r wo l l e n mi t ei n er unb e s t i m m t e n § An z a h l vo n El e m e n t e n ar b e i t e n § Kö n n e n ni c h t be r e c hne n wi e v i e l e § El e m e n t e wi r br auc he n we r d e n § Di e se kö n n e n wi r al s ve r k nüp ft e Ob j e k t e (« lin k e d o b j e c t s ») or g a n i s i e r e n . Je d e s Ob j e k t ( Kn o t e n ) sp e i c h e r t ei n El e m e n t und ei n en Ve r w e i s au f ei n en an d e r e n Kn o t e n . list 42 - 3 17 9 178 ? In de x 0 1 2 3 We r t 42 - 3 17 9 Da t e n s t r u k t u r e n mi t Ve r k ü p f u n g e n § Wi r wo l l e n mi t ei n er unb e s t i m m t e n § An z a h l vo n El e m e n t e n ar b e i t e n § Kö n n e n ni c h t be r e c hne n wi e v i e l e § El e m e n t e wi r br auc he n we r d e n § Di e se kö n n e n wi r al s ve r k nüp ft e Ob j e k t e (« lin k e d o b j e c t s ») or g a n i s i e r e n . Je d e s Ob j e k t ( Kn o t e n ) sp e i c h e r t ei n El e m e n t und ei n en Ve r w e i s au f ei n en an d e r e n Kn o t e n . list 42 - 3 17 9 179 In de x 0 1 2 3 We r t 42 - 3 17 9 null Da t e n s t r u k t u r e n mi t Ve r k ü p f u n g e n § Wi r wo l l e n mi t ei n er unb e s t i m m t e n § An z a h l vo n El e m e n t e n ar b e i t e n § Kö n n e n ni c h t be r e c hne n wi e v i e l e § El e m e n t e wi r br auc he n we r d e n § Di e se kö n n e n wi r al s ve r k nüp ft e Ob j e k t e (« lin k e d o b j e c t s ») or g a n i s i e r e n . Je d e s Ob j e k t ( Kn o t e n ) sp e i c h e r t ei n El e m e n t und ei n en Ve r w e i s au f ei n en an d e r e n Kn o t e n . list 42 - 3 17 9 180 In de x 0 1 2 3 We r t 42 - 3 17 9 Ei n e Kla s s e fü r Kn o t e n ei n er Lis t e public class ListNode { int data ; ??? next ; } § Je d e r Kn o t e n de r Li s t e sp e i c h e r t : § De n W e r t ei n er ga n z e n ( int ) Za h l § Ei ne n Ve r w e i s auf ei n en ande r e n Li s t en k n o t en § ListNode s kö n n e n zu ei n er K et t e ve r b und e n (« l i n k ed» ) we r - de n um ei n e Me n g e od e r Li s t e vo n We r t e n zu sp e i c h e r n . da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 da t a ne x t 9 181 Ei n e Kla s s e fü r Kn o t e n ei n er Lis t e public class ListNode { int data ; ListNode next ; } § Je d e r Kn o t e n de r Li s t e sp e i c h e r t : § De n W e r t ei n er ga n z e n ( int ) Za h l § Ei ne n Ve r w e i s auf ei n en ande r e n Li s t en k n o t en § ListNode s kö n n e n zu ei n er K et t e ve r b und e n (« l i n k ed» ) we r - de n um ei n e Me n g e od e r Li s t e vo n We r t e n zu sp e i c h e r n . da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 da t a ne x t 9 182 ListNode Klie n t - Be i s p i e l public class ConstructList1 { public static void main (String [] args ) { ListNode list = new ListNode (); list.data = 42; list.next = new ListNode (); list.next.data = - 3; list.next.next = new ListNode (); list.next.next.data = 17; list.next.next.next = null ; System.out.println(list.data + \" \" + list.next.data + \" \" + list.next.next.data ); // 42 - 3 17 } } da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 list 183184 Ko n s t r u k t o r fü r Kn o t e n ei n er Lis t e public class ListNode { int data ; ListNode next ; public ListNode (int data ) { this. data = data ; this. next = null ; } public ListNode(int data , ListNode next ) { this. data = data ; this. next = next ; } } 185 Üb u n g § Mo d i f i z i e r e n Si e da s le t z t e Kl i e n t e n p r o g r am m so da s s es di e s e Ko n s t r u k t o r e n ve r w e n d e t . 186 ListNode Klie n t – mi t Ko n s t r u k t o r public class ConstructList1 { public static void main (String [] args ) { ListNode list = new ListNode (42, new ListNode ( - 3, new ListNode (17))); System.out.println ( list.data + \" \" + list.next.data + \" \" + list.next.next.data ); // 42 - 3 17 } } da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 list 187 ListNode Klie n t – mi t Ko n s t r u k t o r public class ConstructList1 { public static void main (String [] args ) { ListNode list = new ListNode (42, new ListNode ( - 3, new ListNode (17))); System.out.println ( list.data + \" \" + list.next.data + \" \" + list.next.next.data ); // 42 - 3 17 } } da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 list 188 ListNode Klie n t – mi t Ko n s t r u k t o r public class ConstructList1 { public static void main (String [] args ) { ListNode list = new ListNode (42, new ListNode ( - 3, new ListNode (17))); System.out.println ( list.data + \" \" + list.next.data + \" \" + list.next.next.data ); // 42 - 3 17 } } da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 list 189190 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 1 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 20 list da t a ne x t 10 da t a ne x t 20 list da t a ne x t 30 191 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 1 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? list.next.next = new ListNode (30); da t a ne x t 10 da t a ne x t 20 list da t a ne x t 10 da t a ne x t 20 list da t a ne x t 30 193194 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 2 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 20 list da t a ne x t 30 da t a ne x t 10 list da t a ne x t 20 195 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 2 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 20 list da t a ne x t 30 da t a ne x t 10 list da t a ne x t 20 197 list = new ListNode(30, list); Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 3 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 20 list1 da t a ne x t 30 da t a ne x t 40 list2 da t a ne x t 10 da t a ne x t 30 list1 da t a ne x t 40 list2 da t a ne x t 20 198 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 3 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : da t a ne x t 10 da t a ne x t 20 list1 da t a ne x t 30 da t a ne x t 40 list2 rest 199 rest = list2.next; list2.next = list1.next; list1.next = list2; list2 = rest; ListNode rest, list1, list2; rest = list2.next; list2.next = list1.next; list1.next = list2; list2 = rest; 201 Zu w e i s u n g e n mi t Re f e r e n z va r i a b l e n Va r i a b l e = We r t ; § Di e Va r i a b l e (l i n k s v o n = ) is t Re f e r e n z v a r i a b l e § En t w e d e r At t r i b u t ( z. B . , next ) ei n es dur c h ei n e an d e r e Re fe r e n z v a r i a b l e ( z. B . , a ) be s t i mm t e n Ob j e k t s od e r Va r i a b l e / P a r a m e t e r ei n er Me t h o d e § Re f e r e n z v a r i a b l e ( z.B . ListNode next ) sp e i c h e r n Ve r w e i s auf Ob j e k t ( z. B . a.next ve r w e i s t auf näc hs t e s E l e m e nt ei n er Li s t e ) § De r We r t ( re c h t s vo n = ) is t ei n Ve r w e i s auf ei n Ex e m pl ar ( ei n Re c h t e c k , ei n Wi n d o w , ei n El e m e n t ei n er Li s t e , us w .) § Ty p de s E x e mpl a r s mus s mi t Re fe r e n z v a r i a b l e übe r e i ns t i mme n § Ja v a er l a u b t ke i n e a r i th m e ti s c h e n Au s d r ü c k e mi t Re fe r e n z v a r i a b l e n , da he r mus s We r t au c h ei n e Re fe r e n z v a r i a b l e se i n od e r ei n en Ve r w e i s er s t el l en ( mi t t e l s new o. ä .) 202 Re f e r e n z e n vs . Ob j ek t e Va r i a b l e = We r t ; Fü r di e Li s t e re c h t s : § a.next = We r t ; he i s s t anpas s e n wo r a u f ze i g t § Va r i a b l e = a.next ; he i s s t di e Va r i a b l e se t z e n so das s si e auf ze i g t da t a ne x t 10 a da t a ne x t 20 1 2 1 2 203 Re f e r e n z e n ve r ä n d e r n § We n n da s Pr o gr a m m sag t : a.next = b.next ; § da nn he i s s t da s : § «L a s s e d i e Va r i a b l e a.next auf de n se l b e n We r t ( Ob j e k t ) ze i g e n wi e b.next » § Od e r : « L a s s e a.next auf de n se l b e n Or t wi e b.next ve r w e i s e n .» da t a ne x t 10 a da t a ne x t 20 da t a ne x t 30 b da t a ne x t 40 204205 § Ne h m e n wi r an wi r ha be n ei n e la n g e K et t e vo n Kn o t e n : § Wi r wi s s e n ni c h t wi e la n g di e Ke t t e is t . § Wi e kö n n t e n wi r di e We r t e in al l e n Kn o t e n au sg e b e n ? da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 206 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 4 Alg o r it hm us Ps e u d o c o d e § Fa n g e n wi r am An f a n g de r Li s t e an § list ve r w e i s t auf 1 . Kn o t e n § while ( es gi b t no c h Kn o t e n au s z u g e b e n ): § Ge b e de n data We r t d e s Kn o t e n s aus § Ge h e we i t e r zu m näc hs t e n Kn o t e n vi a d a s next At t r i b u t . § Wi e wi s s en wi r ob no c h Kn o t e n au s z u g e b e n si n d ? § Wi r habe n ei n en Ve r w e i s auf ei n en Kn o t e n § Na c h de r Au s g a b e de s le t z t e n Kn o t e n s is t se i n next At t r i b u t e null . da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 208 Alg o r it hm us Ps e u d o c o d e § Fa n g e n wi r am An f a n g de r Li s t e an § list ve r w e i s t auf 1 . Kn o t e n § while ( es gi b t no c h Kn o t e n au s z u g e b e n ): § Ge b e de n data We r t d e s Kn o t e n s aus § Ge h e we i t e r zu m näc hs t e n Kn o t e n vi a d a s next At t r i b u t . § Wi e kö n n e n wi r uns dur c h di e Li s t e ar b e i t e n ? § list = list.next ; // is this a good idea? da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 209 Aba r be it e n ei n er Lis t e ? § Ei n ( sc h l e c h t e r ) We g je d e n We r t i n de r Li s t e au s z u g e b e n : while (list != null ) { System.out.println(list.data ); list = list.next ; // move to next node } § Wa s is t da s Pr o bl e m ? 210 Aba r be it e n ei n er Lis t e ? § Ei n ( sc h l e c h t e r ) We g je d e n We r t i n de r Li s t e au s z u g e b e n : while (list != null ) { System.out.println(list.data ); list = list.next ; // move to next node } § Wa s is t da s Pr o bl e m ? § Wi r ve r l i e r e n di e Li s t e wä h r e n d wi r si e aus g e be n da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 211 Ei n e we i t e r e Re f e r e n z : current § Wi r wo l l e n list ni c h t ve r ä n d e r n . Wi r de k l a r i e r e n ei n e an d e r e Va r i a b l e u n d än d e r n di e s e . § Ei ne ListNode ( Re f e r e n z )V a ri a b l e is t ni c h t ei n ListNode Ob j e kt § … so n d e r n ei n e Re f e r e n z ( Ve r w e i s ) a u f ei n Ob j e kt ListNode current = list; da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 current 212 Ei n e we i t e r e Re f e r e n z : current ListNode current = list; § Wa s pa s s i e r t we n n wi r je t zt di e s e An w e i s u n g au s f ü h r e n : current = current.next ; da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 current 213 Ei n e we i t e r e Re f e r e n z : current ListNode current = list; § Wa s pa s s i e r t we n n wi r je t zt di e s e An w e i s u n g au s f ü h r e n : current = current.next ; da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 current 214 Ko r r e k t e s Du r c h l a u f e n ei n er Lis t e § De r ko r r e k t e We g je d e n We r t d e r Li s t e au s z u g e b e n : ListNode current = list; while (current != null ) { System.out.println(current.data ); current = current.next ; // move to next node } § Das Ve r ä n d e r n vo n current ha t ke i n e n Ei n f l us s auf di e Li s t e . da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 215 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 5 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 1000 216 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 6. 0 Ar b e i t e n mi t Ob j e k t e n und Kl a s s e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 2 0 , 2 0 2 1 Al l r i g h t s r e s e r v e d . 1 Üb e r s i c h t 6. 1 Sti l und Ko n v e n t i o n e n § Hi n w e i s e (u n d Re g e l n ) fü r ve r s t ä n d l i c h e Pr og r a m m e § Te i l 1 : Ni c h t vo l l s t ä n d i g – sp ä t e r er w ei t ert 6. 2 Da t e n s t r u k t u r e n mi t Ve r k n ü p f u n g e n 6. 3 En t w u r f vo n ( ab g e k ap se l t e n ) K l a s s e n 6. 4 Pr o gr a m m be i s pi e l und – au s f ü h r u n g 6. 5 ( Me h r ) Op t i o n e n für Si c h tb ar k e i t Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 7 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 2 Ko r r e k t e s Du r c h l a u f e n ei n er Lis t e § De r ko r r e k t e We g je d e n We r t d e r Li s t e au s z u g e b e n : ListNode current = list; while (current != null ) { System.out.println(current.data ); current = current.next ; // move to next node } § Das Ve r ä n d e r n vo n current ha t ke i n e n Ei n f l us s auf di e Li s t e . da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 20 3 6. 3 En t w u r f vo n ( ab g e k ap s e l t e n ) K la sse n 4 Ei n e Kla s s e LinkedIntList § ListNode s so l l e n ni c h t vo n Kl i e n t e n di r e k t ve r ä n d e r t we r d e n . § Al s o en t wi c k el n wi r ei n e Kl as s e di e di e Kn o t e n ve r s t e c k t : LinkedIntList . fr o n t Li n k ed I n t Li s t Li s t N o d e Li s t N o d e Li s t N o d e da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 5 Ei n e Kla s s e LinkedIntList § Kl i e n t e n ar b e i t e n mi t LinkedIntList , ni c h t mi t ListNode Ob j e k t e n . § Wi r kö n n e n di e El e m e n t e num e r i e r e n (v on 0 a n ) fr o n t Li n k ed I n t Li s t Li s t N o d e Li s t N o d e Li s t N o d e da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 6 § Ha t d i e Me t h o d e n § add(value) - fü g e ne ue s El e m e n t am Ende hi nz u § remove() - en t f ern e er s t es El e m e n t § Di e Li s t e is t al s K et t e vo n Kn o t e n in t e r n im p le m e n t ie r t § Das LinkedIntList Ob j e kt en t h ä l t ei n e Re f e r e n z auf das er s t e El e m e n t i n front fr o n t Li n k ed I n t Li s t Li s t N o d e Li s t N o d e Li s t N o d e da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 7 § Ha t we i t e r e Me t h o d e n § add( value,index ) - fü g e El e m e n t i n P o s i t i o n k hi nz u § remove(index) - en t f ern e k - te s El e m e n t § Da s LinkedIntList Ob j e k t en t h ä l t ei n e Re f e r e n z au f d as er s t e El e m e n t i n front § null im next At t r i b u t si g n a l i si e r t Ende de r Li s t e § Ha t front de n W e r t null so is t di e Li s t e le e r fr o n t ad d ( v al u e ) ad d ( i n d e x , v al u e ) in d e x O f (v a l u e ) re m o v e ( i nd e x ) si z e ( ) to S tr i n g () Li n k ed I n t Li s t Li s t N o d e Li s t N o d e Li s t N o d e da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 8 Na m en vo n Me t h od en § In ei n er Kl as s e kö n n e n ve r s c h i e d e n e Me t h o d e n de n se l b e n Na m e n ha be n public void add ( int value) { … } public void add (int value, int index) { … } § Di e Ty p e n de r P a r a m e t e r mü s s en un t e r s c hi e dl i c h se i n public void add ( int value) { … } public void add ( int index) { … } // not OK § Ei n N a m e ( z. B , add ) für meh r er e Im p le m e n t a t io n e n § «O v e r l o a d i n g » -- in J a v a erl a u b t we n n Pa r a m e t e r l i s t e n un t e r s c hi e dl i c h 9 LinkedIntList Kla s s e v1 public class LinkedIntList { private ListNode front; public LinkedIntList () { front = null ; } // me t h o d s } fr o n t = Li n k ed I n t Li s t 10 Di e add Me t h od e // Adds the given value to the end of the list. public void add( int value) { ... } § Wi e wo l l e n wi r ei n en ne ue n Kn o t e n am En d e hi nz ufüg e n ? § Si n d d i e We r t e in d e r Li s t e vo r di e s e m Sc h r i t t wi c h t i g ? fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 11 Ei n El e m e n t i n ei n e le e r e Lis t e hinz uf üg e n § Be v o r 20 hi nz ug e füg t wi r d : Da n a c h : fr o n t = fr o n t = da t a ne x t 20 el em en t 0 12 Ei n El e m e n t i n ei n e le e r e Lis t e hinz uf üg e n § Be v o r 20 hi nz ug e füg t wi r d : Da n a c h : § Wi r mü s s en ei n en Kn o t e n er s t el l en und a n di e Li s t e an h än g e n . fr o n t = fr o n t = da t a ne x t 20 el em en t 0 13 Di e add Me t h od e , 1. Ve r s u c h // Adds the given value to the end of the list. public void add( int value) { if (front == null ) { // adding to an empty list front = new ListNode (value); } else { // adding to the end of an existing list ... } } 14 § Be v o r 20 am En d e hi nz ug e füg t wi r d : § Da n a c h : fr o n t = da t a ne x t 42 da t a ne x t - 3 fr o n t = da t a ne x t 42 da t a ne x t 20 el em en t 0 el em en t 2 el em en t 0 el em en t 1 An ei n e nic h t - le e r e Lis t e an h än g e n da t a ne x t - 3 el em en t 1 15 da t a ne x t - 3 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t zu r Li s t e hi nz uz ufüg e n mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . fr o n t = da t a ne x t 42 el em en t 0 el em en t 1 16 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t zu r Li s t e hi nz uz ufüg e n mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . § Wi e dur c hl a uf e n wi r ei n e Li s t e ? fr o n t = da t a ne x t 42 el em en t 0 el em en t 1 17 current = list; while ( current != null ) { current = current .next ; // move to next node } da t a ne x t - 3 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t zu r Li s t e hi nz uz ufüg e n mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . § Wi e dur c hl a uf e n wi r ei n e Li s t e ? § Wa s für ei n en Ty p mu s s current ha be n ? fr o n t = da t a ne x t 42 el em en t 0 el em en t 1 18 da t a ne x t - 3 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t zu r Li s t e hi nz uz ufüg e n mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . § Wi e dur c hl a uf e n wi r ei n e Li s t e ? § Wa s für ei n en Ty p mu s s current ha be n ? ListNode fr o n t = da t a ne x t 42 el em en t 0 el em en t 1 19 da t a ne x t - 3 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t zu r Li s t e hi nz uz ufüg e n mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . § Wo r a u f so l l t e current ve r w e i s e n we n n wi r 20 am En d e ei n f ü g en wo l l e n ? § We l c h e r L o o p T e s t lä s s t uns an di e s e r St e l l e an h al t e n ? fr o n t = da t a ne x t 42 el em en t 0 el em en t 1 20 da t a ne x t - 3 Di e add Me t h o d e // Adds the given value to the end of the list. public void add( int value) { if (front == null ) { // adding to an empty list front = new ListNode (value); } else { // adding to the end of an existing list ListNode current = front; while ( current.next != null ) { current = current.next ; } current.next = new ListNode (value); } } 21 Ve r k n ü p f t e Kn o t e n -- Üb u n g s p r o b l e m 5 We l c h e Fo l g e vo n An w e i s u n g e n ve r ä n d e r t di e s e s Bi l d : in d ie s e s ? da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 10 da t a ne x t 990 list ... da t a ne x t 1000 22 Im ple m e n t a tio n v o n get // Returns value in list at given index. // 0 <= index < size() -- legal index for list public int get( int index) { ... } § Im p le m e n t ie r e n Si e di e get Me t h o d e . fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 23 Di e get Me t h od e // Returns value in list at given index. // 0 <= index < size() public int get( int index) { ListNode current = front; for ( int i = 0; i < index; i ++) { current = current.next ; } return current.data ; } 24 Im ple m e n t a tio n v o n add (inde x ) // Inserts the given value at the given index. public void add( int value, int index) { ... } § Im p le m e n t ie r e n Si e di e s e Va r i a n t e de r add Me t h o d e . fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 25 Im ple m e n t a tio n v o n add (inde x ) // Inserts the given value at the given index. public void add( int value, int index) { ... } § Im p le m e n t ie r e n Si e di e s e Va r i a n t e de r add Me t h o d e . fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 26 Po l l Di e 2 . Va r i a n t e de r add Me t h o d e // Inserts the given value at the given index. // 0 <= index <= size() public void add( int value, int index) { if (index == 0) { // like adding to an empty list front = new ListNode (value, front); } else { // inserting into an existing list ListNode current = front; for ( int i = 0; i < index - 1; i ++) { current = current.next ; } current.next = new ListNode (value, current.next ); } } 27 Po l l Im ple m e n t a tio n v o n add (inde x ) § add(3, 20) fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 28 Po l l da t a ne x t 32 el em en t 3 fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 20 el em en t 3 da t a ne x t 32 el em en t 4 Im ple m e n t a tio n v o n add (inde x ) § add(4, 99) fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 29 Po l l da t a ne x t 32 el em en t 3 fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 32 el em en t 3 da t a ne x t 99 el em en t 4 // Inserts the given value at the given index. // 0 <= index <= size() public void add( int value, int index) { if (index == 0) { // like adding to an empty list front = new ListNode (value, front); } else { // inserting into an existing list ListNode current = front; for ( int i = 0; i < index - 1; i ++) { current = current.next ; } current.next = new ListNode (value, current.next ); } } 30 Po l l current b: indexa: index - 1 c:index+1 current value : indexa: index - 1 b:index+1 c:index+2 El e m e n t en tf er n en : remove // Removes the list's first value. public void remove() { ... } § Wi e en t f er n t ma n d en er s t en Kn o t e n ei n er Li s t e ? § Is t de r In h a lt de r Li s t e wi c h t i g we n n wi r de n er s t en Kn o t e n en t f er n en wo l l e n ? 34 En t f e r n e n de s er s t en El e m e n t s § Vo r de m En t f e r n e n de s er s t en El e m e n t s: § Na c h d e m ei n El e m e n t en t f er n t wu r d e : Na c h d e m 2 El e m e n t e … : fr o n t = da t a ne x t 20 fr o n t = da t a ne x t 42 da t a ne x t 20 el em en t 0 el em en t 1 el em en t 0 fr o n t = 35 remove Me t h od e // Removes the first value. // List must not be empty. public void remove() { if (front != null ) { front = front.next ; } } § Ve r h a l t e n ni c h t de fi ni e r t we n n Li s t e le e r § We r is t ve r a n t w o r t l i c h ? § Wo l l e n wi r wi r k l i c h ke i n e n Rü c k g a b e w e r t ? 36 remove Me t h od e // Removes the first value. // List must not be empty. public int remove() { if (front != null ) { int result = front.data ; front = front.next ; return result; } } 37 remove Me t h od e // Removes the first value. // List must not be empty. public int remove() { if (front != null ) { int result = front.data ; front = front.next ; return result; } } § Im An s a t z ri ch t i g – ab e r vo n J a v a ni c h t ak z e p ti e r t § Ke i n Rü c k g a b e w e r t ( fe h l e n d e s return St a t e m e n t ) i n e l se - Blo c k 38 remove Me t h od e // Removes and returns the first value. // List must not be empty. public int remove() { if (front != null ) { int result = front.data ; front = front.next ; return result; } else { System.exit ( - 1); return 0; //never executed } } 39 remove Me t h od e // Removes and returns the first value. // List must not be empty. public int remove() { if (front != null ) { int result = front.data ; front = front.next ; return result; } else { System.exit ( - 1); return 0; //never executed, keeps Java happy } } 40 Ei n e we i t e r e remove Me t h od e // Removes value at given index from list. // Precondition: 0 <= index < size public void remove( int index) { ... } § Wi e kö n n e n wi r ei n be l i e bi g e s El e m e n t d e r Li s t e en t f er n en ? § Is t de r In h a lt de r Li s t e wi c h t i g we n n wi r ei n en Kn o t e n en t f er n en wo l l e n ? 43 En t f e r n e n ei n es El e m e n t e s § Vo r de m En t f e r n e n de s E l e m e n t s mi t In d e x 1 : § Da n a c h : fr o n t = da t a ne x t 20 fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 20 el em en t 0 el em en t 1 el em en t 2 el em en t 0 el em en t 1 da t a ne x t 42 44 Vo r s i c h t an d e r Ka n t e ! § Um ei n El e m e n t au s der Li s t e zu en t f er n en mü s s en wi r da s next At t r i b u t de s vo r h e r i g e n Kn o t e n s mo d i f i z i er en . 45 fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 20 el em en t 0 el em en t 1 el em en t 2 En t f e r n e n de s E le m e n t s mi t Inde x 0 § Vo r En t f e r n e n de s E l e m e n t s mi t In d e x 0 : § Da n a c h : fr o n t = da t a ne x t - 3 da t a ne x t 20 fr o n t = da t a ne x t 42 da t a ne x t - 3 da t a ne x t 20 el em en t 0 el em en t 1 el em en t 2 el em en t 0 el em en t 1 46 En t f e r n e n de s ei n z i g en El e m e n t e s § Da v o r : Da n a c h : § Wi r mü s s en da s front At t r i b u t au f null s et z e n (s o da s s es ni c h t au f ei n en ListNode ve r w e i s t ) § Is t da s ei n So n d e r f al l de n wi r im Pr o gr a m m be ha nde l n mü s s en ? fr o n t fr o n t = da t a ne x t 20 el em en t 0 48 remove Me t h od e ( Va r i a n t e 2) // Removes value at given index from list. // Precondition: 0 <= index < size() public void remove( int index) { if (index == 0) { // special case: removing first element front = front.next ; } else { // removing from elsewhere in the list ListNode current = front; for ( int i = 0; i < index - 1; i ++) { current = current.next ; } current.next = current.next.next ; } } 49 remove Me t ho de ( V a ri a n t e 2) // Removes value at given index from list. // Precondition: 0 <= index < size() public void remove( int index) { if (index == 0) { // special case: removing first element front = front.next ; } else { // removing from elsewhere in the list ListNode current = front; for ( int i = 0; i < index - 1; i ++) { current = current.next ; } current.next = current.next.next ; } } 50 current c: indexa: index - 1 d:index+1 current b: indexa: index - 1 c:index+1 d:index+2 LinkedIntList Kla s s e v2 public class LinkedIntList { private ListNode front; public LinkedIntList () { front = null; } public void add ( int value) { … } public void add ( int value, int index) { … } public int remove() { … } public void remove( int index) { … } } fr o n t = Li n k ed I n t Li s t 56 Üb u n g § Sc h r e i b e n Si e ei n e Met h o d e addSorted di e de n W e r t ei n er ga n z e n Za h l al s Pa r a m e t e r ak z e p t i e r t und di e s e n We r t i n d i e so r t ie r t e Li s t e an de r ri c h t i g en Po s i t i o n ei n f ü g t ( d. h ., d i e Li s t e is t auc h danac h so r t i e r t ). § Vo r addSorted (17) : § Na c h addSorted (17) : fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 fr o n t = da t a ne x t - 4 da t a ne x t 17 da t a ne x t 22 el em en t 0 el em en t 2 el em en t 3 da t a ne x t 8 el em en t 1 57 De r « Nor m a l f a l l »: ir g e ndw o ei n fü g en § Ei n f ü g e n ei n es El e m e n t e s « im In n e r e n » d e r Li s t e : addSorted (17) § We l c h e Ve r w e i s e ( Re f e r e n z e n ) mü s s e n ge ä n d e r t we r d e n ? § Wa s fü r ei n e Sc h l e i f e bi e t e t si c h an? § Wa n n so l l t e di e Sc h l e i f e te r m i n i e r e n ? fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 58 Er s t e r Ve r s u c h § Fe h l e r h a f t e Sc h l e i f e : ListNode current = front; while ( current.data < value) { current = current.next ; } § Wo is t de r Fe h l e r ? § Di e Sc h l e i f e en d e t zu sp ä t um di e Li s t e ko r r e k t zu ve r ä n d e r n . fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 cu r r e n t 60 Ide e : vo r a u s s c h a u e n § Ko r r e k t e Sc h l e i f e : ListNode current = front; while ( current . next .data < value) { current = current.next ; } § Di e s m al hö r t di e Sc h l e i f e an de r ri c h t i g en St e l l e auf . fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 cu r r e n t 61 Sp e zi al f al l 1: Hi n z u fü g en am En d e § Hi n z u f ü g e n am En d e de r Li s t e : addSorted (42) Exception in thread \"main\": java.lang.NullPointerException § Wa r u m gi b t es ei n e Ex c e p t i o n ? § Wa s kö n n e n wi r än d e r n um di e s e n Fa l l ri ch t i g zu be ha nde l n ? fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 63 Meh r er e Te s t s fü r die Sc h l e i f e § Fe h l e r be he be n in d e r Sc h l e i f e : ListNode current = front; while ( current.next != null && current.next.data < value) { current = current.next ; } § Mü s s e n pr üf e n ob next de n W e r t null ha t be v o r wi r das data At t r i b u t de s Kn o t e n s ( d. h. , next.value ) pr üf e n fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 cu r r e n t 64 while ( current . next .data < value) { while ( current.next != null && current.next.data < value) { Ve r s i o n 1 – no c h ni c h t vo l l s t ä n d i g // Adds given value to list in sorted order. // Precondition: Existing elements are sorted public void addSorted ( int value) { // insert in middle or end of list ListNode current = front; while ( current.next != null && current.next.data < value) { current = current.next ; } current.next = new ListNode (value, current.next ); } } 65 Sp e zi al f al l 2: Hi n z u fü g en am An f a ng § Ei n f ü g e n am An f a n g de r Li s t e : addSorted ( - 10) § Wa s pas s i e r t je t zt in uns e r e m Pr og r a m m ? § Wi e kö n n e n wi r di e s e n Fe h l e r be he be n ? fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 68 Hi n z u fü g en am An f a ng § Ei n e we i t e r e Ve r b e s s e r u n g de s Pr o gr a m m s if (value <= front.data ) { // insert at front of list front = new ListNode (value, front); } else { // insert in middle or end of list ListNode current = front; while ( current.next != null && current.next.data < value) { current = current.next ; } current.next = new ListNode (value, current.next ); } § Ka n n di e s e Met h o d e je t zt al l e mö g l i c h e n Fä l l e be hande l n ? 70 Sp e zi al f al l 3: Leer e Lis t e § Hi n z u f ü g e n (a m An f a n g ) zu ei n er le e r e n Li s t e : addSorted (42) § Wa s pas s i e r t je t zt in uns e r e m Pr og r a m m ? § Wi e kö n n e n wi r di e s e n Fe h l e r be he be n ? fr o n t = 71 En d g ü l t i g e Ve r s i o n // Adds given value to list in sorted order. // Precondition: Existing elements are sorted public void addSorted ( int value) { if ( front == null || value <= front.data ) { // insert at front of list front = new ListNode (value, front); } else { // insert in middle of list ListNode current = front; while ( current.next != null && current.next.data < value) { current = current.next ; } current.next = new ListNode (value, current.next ); } } 72 LinkedIntList Kla s s e v2 public class LinkedIntList { private ListNode front; public LinkedIntList () { front = null; } public void add ( int value) { … } public int remove() { … } public int size() { … } public int getFront () { … } public void setFront () { … } ... } fr o n t = Li n k ed I n t Li s t 73 ( Ve r k n ü p f t e ) Lis t e vs . A r r a y § Al g or i t h m u s um di e We r t e de r Li s t e au s z u g e b e n : ListNode front = ...; ListNode current = front; while (current != null ) { System.out.println ( current.data ); current = current.next ; } § Al g or i t h m u s um di e We r t e de s A r r a y s au s z u g e b e n : int [] a = ...; int i = 0; while ( i < a.length ) { System.out.println (a[ i ]); i ++; } 74 Di s k u s s i o n Lis t e vs . A r r a y § Vo r t e i l Ar r a y § Vo r t e i l Li s t e 75 Di s k u s s i o n Lis t e vs . A r r a y § Vo r t e i l Ar r a y § Ko n s t a n te Zu g r i f f s z e i t § Vo r t e i l Li s t e § Gr ös s e fl e x i b e l 76 Ei n pa a r Fr ag e n 1. Wa s is t de r Un t e r s c hi e d zw i s c h e n ei n er LinkedIntList und ei n em ListNode ? 2. Wa s is t de r Un t e r s c hi e d zw i s c h e n ei n er le e r e n und ei n er null Li s t e ? Wi e kö n n e n wi r je d e vo n ih n e n ko n s t r u i e r e n / ge n e r i e r e n 77 Ei n pa a r Fr ag e n 3. Di e A t t r i b u t e v o n ListNode si n d ni c h t private ? Is t da s gut e r od e r sc h l e c h t e r Sti l ? 4. We l c h e n Ef f e k t ha t di e s e s Co d es eg men t au f ei n e LinkedIntList values ? ListNode current = values.getFront (); current = null; 78 An t w o r t e n 1. Wa s is t de r Un t e r s c hi e d zw i s c h e n ei n er LinkedIntList und ei n em ListNode ? § Ei n e LinkedIntList Li s t e be s t e h t au s 0 od e r meh r ListNode Kn o t e n . § Je d e r Kn o t e n is t ei n ListNode Ob j e kt § Je d e r Kn o t e n en t h ä l t ei n en ei n z i g en ( int ) W ert . 79 An t w o r t e n 2. Wa s is t de r Un t e r s c hi e d zw i s c h e n ei n er le e r e n und ei n er null Li s t e ? Wi e kö n n e n wi r je d e vo n ih n e n ko n s t r u i e r e n / ge n e r i e r e n § Nu l l - Li s t e : Re f e r e n z v a r i a b l e für Li s t e ha t W e r t nul l § LinkedIntList list = null ; le e r e Li s t e : Li s t e en t h ä l t ke i n e El e m e n t e § LinkedIntList list = new LinkedIntList (); 80 An t w o r t e n 3. Di e A t t r i b u t e v o n ListNode si n d ni c h t private ? Is t da s gut e r od e r sc h l e c h t e r Sti l ? § Da s ka n n ma n ve r t r e t e n da LinkedIntList de r ei n z i g e Kl i e n t vo n ListNode is t § An d e r e Pr og r a m m e ma n i p u l i e r e n ni c h t di e ListNode Ob j e kt e so n d e r n ar be i t e n mi t Met h o d e n de r LinkedIntList Kl a sse . § Es gi b t in J a v a no c h be sse r e M ö g lic h k e it e n , so l c he Kl a s s e n zu or g a n i s i e r e n , ab e r di e le r n e n wi r er s t spä t e r ke n n e n 81 An t w o r t e n 4. We l c h e n Ef f e k t ha t di e s e s Co d es eg men t au f ei n e LinkedIntList values ? ListNode current = values.getFront (); current = null; § Di e se Zu w e i su n g e n än d e r n di e Li s t e ni c h t . D ie Li s t e ka n n nur au f fo l g e n d e We i s e ve r ä n d e r t we r d e n : § Än d e r n de s front At t r i b u t e s § Än d e r n de s next Ve r w e i s e s auf ei n en Kn o t e n in d e r Li s t e § ( Än d e r n de s data At t r i b u t e s ei n es Kn o t e n s ) 82 Ande r e Op er a ti o n en fü r Lis t en § Im p l e m e n t i e r e n Si e we i t e r e Met h o d e n fü r LinkedIntList : § int size() § boolean isEmpty () § void clear() § String toString () § int indexOf (int) § boolean contains(int) § void push(int) § int pop() § int top() § De k l ar i e r e n Si e ei n elements At t r i b u t so das s di e An z a h l Kn o t e n sc h n e l l zu r ü c k g e g e b e n we r d e n ka n n . 83 Da s elements At t r i b u t e § De k l a r i e r e n Si e ei n elements At t r i b u t so da s s di e An z a h l Kn o t e n sc h n e l l zu r ü c k g e g e b e n we r d e n ka n n . § Id e e : wi r ve r ä n d e r n elements we n n di e Li s t e ve r ä n d e r t wi r d . § We l c h e Me t h o d e n si n d be t r o ff e n ( d. h. , mü s s en elements au f d e n ak tu e l l e n St an d br i ng e n )? 84 LinkedIntList Kla s s e v3 (M in im a l) public class LinkedIntList { private ListNode front; private int elements = 0; public LinkedIntList () { front = null; } public void add ( int value) { … } public int remove() { … } public int size() { return elements; } public int getFront () { … } public void setFront … ... } fr o n t = Li n k ed I n t Li s t 85 LinkedIntList Kla s s e v3 (M in im a l) public class LinkedIntList { private ListNode front; private int elements = 0; public LinkedIntList () { front = null; } public void add ( int value) { … } public int remove() { … } public int size() { … } public int getFront () { … } public void setFront () { … } ... } fr o n t = Li n k ed I n t Li s t 86 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 6. 0 Ar b e i t e n mi t Ob j e k t e n und Kl a s s e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 2 0 , 2 0 2 1 Al l r i g h t s r e s e r v e d . 87 Üb e r s i c h t 6. 1 Sti l und Ko n v e n t i o n e n § Hi n w e i s e (u n d Re g e l n ) fü r ve r s t ä n d l i c h e Pr og r a m m e § Te i l 1 : Ni c h t vo l l s t ä n d i g – sp ä t e r er w ei t ert 6. 2 Da t e n s t r u k t u r e n mi t Ve r k n ü p f u n g e n 6. 3 En t w u r f vo n ( ab g e k ap se l t e n ) K l a s s e n 6. 4 Pr o gr a m m be i s pi e l und – au s f ü h r u n g 6. 5 ( Me h r ) Op t i o n e n für Si c h tb ar k e i t Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 7 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 88 Za h l e n § Wi r ha be n int , long und double ke n n e n g e l e r n t § double is t de r be v o r z ug t e Ba s is t y p fü r « re e l l e Za h l e n » § Ab e r double is t en d l i c h ( ge n a u s o wi e int und long …) § Ka n n nur ei n e Ap p r o x i m a ti on dar s t e l l e n § Wi r er i n n er n uns : re e l l e Za h l e n um f a s s e n ra ti o n a l e Za h l e n und ir r a t io n a le Za h l e n § Ra ti on a l e Za h l e n : la s s e n si c h al s Br u c h ga n z e r Za h l e n dar s t e l l e n § Ka n n double ( we n i g s t e n s ) r a t i on a l e Za h le n ex a k t da r s t e l l e n ? Ra t i o n al e Za h l e n § Au c h für ra t i o n a l e Za h le n is t double nur ei n e Ap p r o xi m a t i on double x = (1.0/2.0) + (1.0/3.0) + (1.0/6.0); System.out.println(x ); § Ab e r r a t i on a l e Za h le n kö n n e n al s Br u c h ga n z e r Za h le n ex a k t da r g e s t e l l t we r d e n : wi r br a uc he n ei n en ne ue n Ty p Output 0.9999999999999999 + = 2 1 3 1 6 1 1+ Br ü c h e ( ga n z e r Za h l e n ) § Ei n B r u c h h a t ei n en Ne n n e r und ei n en Zä h le r § Es gi b t di e übl i c he n ar i th m e ti sc h e n Op e r a t i o n e n § So l l e n wi r je t zt ei n e Kl as s e Br u c h en t wi c k el n ? 91 a b + c d = ad + bc bd a b – c d = ad – bc bd a b x c d = ac a b c d = bd ad bc Ad d i t i o n : Su b t r a c t i o n : Mu l t i p l i c a t i o n : Di v i s i o n : : Kla s s e Bruch public class Bruch { private int zaehler; private int nenner; public Bruch add(Bruch a, Bruch b) { … } public Bruch multiply(Bruch a, Bruch b) { … } public Bruch subtract(Bruch a, Bruch b) { … } public Bruch divide(Bruch a, Bruch b) { … } 92 Kla s s e Bruch public class Bruch { private int zaehler; private int nenner; public static Bruch add(Bruch a, Bruch b) { … } public static Bruch multiply(Bruch a, Bruch b) { … } public static Bruch subtract(Bruch a, Bruch b) { … } public static Bruch divide(Bruch a, Bruch b) { … } 93 Kla s s e Bruch public class Bruch { private int zaehler; private int nenner; public static Bruch add(Bruch a, Bruch b) { … } public static Bruch multiply(Bruch a, Bruch b) { … } public static Bruch subtract(Bruch a, Bruch b) { … } public static Bruch divide(Bruch a, Bruch b) { … } 94 Br ü c h e § Wa s si n d di e A t t r i but e ? § Ne n n e r , Zä h l e r § Wa s si n d di e Me t h o d e n ? § Ad d i e r e n , su b t r a h i e r e n , mu l t i p l i z i e r e n , di v i di e r e n – abe r wa s no c h ? § Wa s so l l für Ex e m p l a r e de r Kl as s e ge l t e n ? § We l c h e In v a r i a n t e n ? § Wi r wo l l e n Br ü c h e ve r g l e i c h e n kö n n e n 95 Br ü c h e § Wi r wo l l e n Br ü c h e ve r g l e i c h e n kö n n e n 96 ? 2 1 3 1 ? 3 2 4 3 ? 3 2 3 1 ? 4 2 2 1 ? 3 - 2 2 - 3 ? - 8 - 4 2 4 Br ü c h e § Ka n o n i s c h e Da r s t e l l u n g § Zä h l e r und Ne n n e r so we i t wi e mö g l i c h ge k ü r z t § Ne n n e r im m e r po s i t i v § Is t de r Ne n n e r ne g a t i v , s o ne g i e r e n wi r de n Zä h l e r § In v a r ia n t e n für di e Ex e m p l a r e § We r is t da f ür ve r a n t w o r t l i c h ? § Ko n s t r u k t o r – abe r dann dar f ni e m and di e A t t r i but e ände r n § Je d e Met h o d e di e ei n en Br u c h al s Er g e bni s lie f e r t 97 Ve r a n t w o r t u n g b e i M e t h o d e n … § Ko n s t r u k t o r : Bruch(int z, int n) { zaehler = z; nenner = n; } § Ad d M e t h od e : public Bruch add(Bruch x) { Bruch result; result = new Bruch(0,0); result.zaehler = zaehler * x.nenner + x.zaehler * nenner ; result.nenner = nenner * x.nenner ; return simplify (result); } 98 public class Bruch { private int zaehler; private int nenner; public class Bruch { private int zaehler; private int nenner; Ve r a n t w o r t u n g b e i M e t h o d e n … simplify Me t h o d e : private Bruch simplify(Bruch x) { int gcd ; gcd = euclid ( x.zaehler,x.nenner ); x.zaehler /= gcd ; x.nenner /= gcd ; return x; } /* Euclid's algorithm, see http:// www.nist.gov /dads/HTML/ euclidalgo.html */ private int euclid (int a, int b) { if (b==0) { return a; } else { return euclid (b, a % b); } } 99 § Wi r b r a u c h e n d i e simplify Me t h o d e f ü r j e d e a r i t h m e t i s c h e Op e r a t i o n § Is t k e i n e M e t h o d e fü r E x e m p l a r § (K ö n n t e static se i n ) § We l c h e a n d e r e n F a l l s t r i c k e g i b t e s ? § Br a u c h e n w ir e in e M e t h o d e add(int i) ? public Bruch add( int i ) { return simplify( new Bruch( zaehler + i * nenner , nenner )); } § Vi e l l e i c h t d o c h K o n s t r u k t o r e n ( m e h r e r e ! ) v e r a n t w o r t l i c h 100 Ve r a n t w o r t u n g b e i M e t h o d e n …Kla s s e fü r Ra t i o n al e Za h l e n : Rational § Ne u e r Na m e -- Br u c h is t nur ei n e Da r s t e l l u n g ei n er ra t i o n a l e n Za h l § At t r i b u t e ( so l l t e n private se i n ) § num (n u m er a t o r) -- Zä h l e r , int § den (d en o m i n a t o r) – Ne n n e r , int § Ko n s t r u k t o r e n § Rational() – § Rational(int x) – § Rational(int n, int d) – 101 0 1 x 1 n d Kla s s e fü r Ra t i o n al e Za h l e n : Rational § Me t h o d e n § Fü r di e ar i t hm e t i s c he n Op e r a t i o n e n : § add § multiply § subtract § divide § toString () fü r Au s g a b e § Hi l f s f u n k ti o n § gcd um de n gr ö s s t e n ge m e i n s a m e n Te i l e r zu fi n d e n 102 Im ple m e n t a tio n v o n Rational § Ko n s t r u k t o r e n st e l l e n si c h e r da s s Zä h le r und Ne n n e r au f d i e kl e i n s t m ög l i c h e n We r t e « ge k ü r z t » we r d e n§ Da si c h di e Ex e m pl ar e de r Kl a sse ni e ände r n bl e i b t di e s e Ei g e ns c ha f t be s t e he n § Fi n d e n ei n d eu t i g e Dar s t e l l ung ( 1/2 , 2/4 , 3/6 , … im m e r num : 1 , den : 2 ) § Me t h o d e n add , subtract , … er s t el l en im m e r ne ue Ex e m p l a r e § Ei ne r de r Op e r a n d e n is t de r im p liz it e Pa r a m e t e r , d e r ande r e das Ar g u m e n t Rational newNumber = someNumber.add ( anotherNumber ); § (A u f d en im p liz it e n Pa r a m e t e r wi r d dur c h this zu g e g r i f f e n ) public class Rational { /* Attributes: * Private instance variables */ private int num; /* The numerator of this Rational */ private int den; /* The denominator of this Rational */ /* Creates a string representation of this rational number. * @return The string representation of this rational number */ public String toString() { if (den == 1) { return \"\" + num; } else { return num + \"/\" + den; } } Kl a s s e Rational /* Creates a new Rational initialized to zero. */ public Rational() { this(0); } /* Creates a new Rational from the integer argument. * @param n The initial value */ public Rational(int n) { this(n, 1); } /* Creates a new Rational with the value x / y. * @param x The numerator of the rational number * @param y The denominator of the rational number */ public Rational(int x, int y) { int g = gcd(Math.abs(x), Math.abs(y)); num = x / g; den = Math.abs(y) / g; if (y < 0) num = - num; } Kl a s s e RationalKl a s s e Rational /* Subtracts the rational number r from this one. * @param r The rational number to be subtracted * @return The result of subtracting r from the current number */ public Rational subtract(Rational r) { return new Rational(this.num * r.den - r.num * this.den, this.den * r.den); } /* Multiplies this number by the rational number r. * @param r The rational number used as a multiplier * @return The result of multiplying the current number by r */ public Rational multiply(Rational r) { return new Rational(this.num * r.num, this.den * r.den); } Kl a s s e Rational /* Divides this number by the rational number r. * @param r The rational number used as a divisor * @return The result of dividing the current number by r */ public Rational divide(Rational r) { return new Rational(this.num * r.den, this.den * r.num); } /* Adds the rational number r to this one and returns the sum. * @param r The rational number to be added * @return The sum of the current number and r */ public Rational add(Rational r) { return new Rational(this.num * r.den + r.num * this.den, this.den * r.den); } Kl a s s e Rational /* Calculates the greatest common divisor using Euclid's algorithm. * @param x First integer * @param y Second integer * @return The greatest common divisor of x and y */ private int gcd(int x, int y) { int r = x % y; while (r != 0) { x = y; y = r; r = x % y; } return y; } } // Rational Si m u l a t i o n § Wi r wo l l e n se h e n wi e ei n ei n f a c h es Pr o gr a m m dr e i ra t i o n a l e Za h le n ad d i e r t § Da n a c h we r f e n wi r ei n en Bl i c k hi n t e r di e Ku l i s s e n § Da s Er g e b n i s di e s e r Ber ec h n u n g so l l ( t e ) ex a k t se i n 1 se i n § Im Ge g e n s a tz zu r Re c h n u n g mi t double + 2 1 3 1 6 1 + // in class TestRational public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add (b).add(c); System.out.println (a + \" + \" + b + \" + \" + c + \" = \" + sum); } 110 c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 2 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 2 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 2 1 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 2 1 1 2 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 3 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 3 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 3 1 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 3 1 1 3 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 6 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 6 1 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 6 1 1 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 5 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 6 5 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 5 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 5 6 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 5 6 1 5 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 1 2 1 3 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 5 6 1 5 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 36 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 36 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) 36 c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 36 36 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 36 36 36 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 36 36 36 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 te m p or a r y re s u l t public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 36 36 36 1 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 1 1 te m p or a r y re s u l t Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 1 1 te m p or a r y re s u l t Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) 1/2 + 1/3 + 1/6 = 1 c sumba public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } Te s t R a t i ona l 5 6 1 2 1 3 1 6 1 1 te m p or a r y re s u l t 1/2 + 1/3 + 1/6 = 1 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 2 1 1 2 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 3 1 1 3 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 1 6 1 1 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 1 2 r num den 1 3 6 5 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 5 6 1 5 6 public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } this num den 5 6 r num den 1 6 36 36 public Rational(int x, int y) { int g = gcd ( Math.abs (x), Math.abs (y)); num = x / g; den = Math.abs (y) / g; if (y < 0) num = - num; } y gx this num den 36 36 36 1 1 Ba s e d o n E r i c R o b e r t s , Th e Ar t a n d S c i e n c e o f J a v a Pe a r s o n ( 2 0 0 7 ) Bl i c k h i n t e r d i e K u l i s s e n § Wi r s a h e n w a s f ü r B e r e c h n u n g e n g e m a c h t w u r d e n § Ab e r d i e M e t h od e n (u n d O b j e k t e ) m ü s s e n a u c h (i r g e n d w o) ge s p e i c h e r t w e r d e n § Dahe r s e he n w i r uns j e t z t an, w i e de r S pe i c he r pl a t z v e r w e nde t w i r d 149 Sp e i c h e r und Addr e s s e n § Je d e s By t e im Sp e i c h e r ha t ei n e Ad r e s s e – ei n e Za h l zwi s c h e n 0 u n d ei n er Ob e r g r e n z e § Im Be is p ie l si n d Ad r e s s e n in He x a d e z i m a l - no t a t i o n mi t 4 St e l l e n ang e z e i g t § Im Ja v a S y s t e m si n d di e Ad r e s s e n uns i c h t bar und das Be is p ie l ze i g t wi l l k ü r l i c h e We r t e § Il l u s t r a t i o n e n mi t By t e s si n d unübe r s i c h t l i c h dahe r fa s s e n wi r 4 B y t e s zu ei n em Wo r t zu s a m m e n und ze i g e n im m e r Wo r t a d r e s s e n (d i e dann in 4 - er Sc h r i t t e n ans t e i g e n ) 0000 0001 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B FFF4 FFF5 FFF6 FFF7 FFF8 FFF9 FFFA FFFB FFFC FFFD FFFE FFFF 0000 0004 0008 000C 0010 0014 0018 001C 0020 0024 0028 002C FFD 0 FFD 4 FFD 8 FFD C FFE 0 FFE 4 FFE 8 FFE C FFF0 FFF4 FFF8 FFFC . . . . . . § Fü r ei n e de k l a r i e r t e Va r i a b l e m u s s d a s La u f z e i t s y s t e m Sp e i c h e r p l a tz fi nde n § De r S p e i c h e r d e s C o m p u t e r s is t in ve r s c h i e d e n e Ber ei c h e un t e r t e i l t § Ge n a u e r : d e r T e i l d e s Sp e i c h e r s de n uns e r Ja v a Pr og r a m m nut z e n dar f § Ei n Ber ei c h is t re s e r v i e r t für di e Va r i a b l e n di e im m e r ex i s i t i e re n ( wä h r e n d de r ge s a m t e n La u f z e i t de s Pr o gr a m m s ) § Dazu ge h ö r t e n Ko n s t a n te n , In f o r m a t i o n e n übe r Kl a sse n , e t c . § Di e s e r Be r e ic h he i s s t «s t a t i c d a t a » Sp e i c h e rp l a t z fü r Va r i a b l eSp e i c h e rp l a t z fü r Va r i a b l e § Ob j e k t e di e dur c h de n new Op e r a t o r er s c h a f f en we r d e n , we r d e n im «h e ap» ( Hal d e ) ab g e l e g t . § Fü r je d e au f g e r u f e n e Me t h o d e st e l l t da s La u f z e i t s y s t e m ei n en ne ue n Ber ei c h zu r Ve r f ü g u n g § Di e s e r he i s s t «S t a c k Fr a m e » § Al l e St a c k F r a m e s we r d e n in ei n em St a c k or g a n i s i e r t § Va r i a b l e , d i e i n ei n er Met h o d e de k l ar i e r t wu r d e n , fi n d e n Pl a tz im St a c k F r a m e § Pa r a m e t e r übr i g e ns auc h … 152 § Ma n c h m a l si n d St ac k u n d He ap so an g e o r d n e t , da s s si e ge ge n e i n a n d e r wa c h s e n § Je d e Re g i o n ka n n so g r o ss wi e mö g l i c h we r d e n ( be i ge ge b e n e m Sp e i c h e r p l a t z ) st at i c da t a 0000 st a c k FFFF he a p St ac k u n d H e ap § Ei n ei n f a c h es Mo d e l l di e s e r Ber ei c h e hi l ft , ve r s c h i e d e n e As p e k t e vo n J a v a zu ve r s t e h e n § Da Pr o gr a m m e of t i n ei n er Me t h o d e Va r i a b l e de k l a r i e r e n , di e a uf Ex e m p l a r e ve r w e i s e n , mü s s en wi r so w o h l de n H e a p al s au c h de n S t a c k im Au g e be ha l t e n § In d e n fo l g e n d e n Fo l i e n ze i g e n wi r lin k s d e n H e a p u n d re c h t s de n S t a c k § Ge tr e n n t dur c h Li n i e § St a c k - He a p Di ag r am m 155 St ac k u n d H e ap § We n n ei n e Me t h o d e au f g e r u f e n wi r d , da nn mu s s d er ne ue St ac k F r am e ge n u g Pl a t z für al l e ( lo k a le n ) Va r i a b l e n ha be n § We n n ei n e Me t h o d e fe r t i g is t , da nn ka n n ih r St ac k F r am e wi ed er v er w en d e t we r d e n § We n n ei n Ob j e k t e x e mp l a r ge s c h a f f e n wi r d , da nn br a uc he n wi r Sp e i c h e r p l a tz für al l e A t t r i b u t e ( Zu s t an d s v ar i ab l e n ) § Dazu br auc he n wi r zu s ä t z l i c h Pl a tz fü r Ja v a - in t e r n e Zw e c k e – Ov e r h e a d d e n wi r ni c h t ko n t r o l l i e r e n kö n n e n 156157 a num: 1 den: 2 Type: Rational Rational a = new Rational(1,2) Ve r w e i s e (R e f e r e nc e s) a uf Ob j ek t e § Fü r je d e s Ex e m p l a r hä l t da s J a v a S y s t e m di e Ad r e s s e de s Ex e m p l a r s f e s t § Di e s e Ad r e s s e ( gg f . mi t we i t e r e n In f o r m a t i o n e n ) wi r d in ei n er Va r i a b l e ge s p e i c h e r t ( ei n er «r e f e r e n c e v a r i a b l e » – di e V ar i abl e en t h ä l t de n Ve r w e i s , d. h. di e R e f e r e nc e , auf ei n Ob j e kt e x e m p l a r ). § Ne h m e n wi r an , ei n e Me t h o d e en t h ä l t di e De k l a r a t i o n Rational r1 = new Rational(1, 2); fü r di e Kl a sse Rational ( wi e vo r h e r ei n g e f ü h rt ) 158 Ve r w e i s e (R e f e r e nc e s) a uf Ob j ek t e § We n n di e De k l a r a t i o n Rational r1 = new Rational(1, 2); um g e s e t z t wi r d , br a uc he n wi r im He ap P l a tz für ei n ne ue s Rational Ex e m p l a r . § Ne h m e n wi r an wi r fi nde n di e s e n mi t de r Ad r e s s e 1000 § Di e V a r i a b l e r1 wi r d im St ac k F r am e ge s p e i c h e r t und er h ä l t de n W e r t 1000 – di e Ad r e s s e de s ne ue n Ex e m p l a r s 159 he ap 2 den 1 num 1008 1004 1000 st a c k 1000 r1 FFFC In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } he ap St ac k F r am e de r run Me t h o d e . In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } he ap In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 2 den 1 num he ap 1008 1004 1000 Al l e Ob j e k t e lie g e n im He a p . In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 3 den 1 num 2 den 1 num he ap 1014 1010 100C 1008 1004 1000 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 St ac k F r am e de r add Me t h o d e . In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 1 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 1 3 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 1 3 1 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 1 3 1 2 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 5 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 6 5 he ap 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1000 100C In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k Di e s e s Ob j e k t is t ei n Zw i s c h e n e r g e b n i s . public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 Di e s e s Ob j e k t is t ei n Zw i s c h e n e r g e b n i s . 181182 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1024 1018 St ac k F r am e de r add Me t h o d e . In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1024 1018 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 36 he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1024 1018 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num public Rational add(Rational r) { return new Rational( this.num * r.den + r.num * this.den , this.den * r.den ); } 36 36 he ap 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 1000 100C this r FFE 8 FFE 4 FFE 0 1024 1018 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 1030 Te s t R a t i o n a l st a c k public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num he ap 1038 1034 1030 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 In Ze i t l u p e a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 1030 Te s t R a t i o n a l st a c k 1/2 + 1/3 + 1/6 = 1 public void run() { Rational a = new Rational(1, 2); Rational b = new Rational(1, 3); Rational c = new Rational(1, 6); Rational sum = a.add(b).add(c ); println(a + \" + \" + b + \" + \" + c + \" = \" + sum); } 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num he ap 1038 1034 1030 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 Ex p l i z i t e Po i n t e r 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num he ap st a c k a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 1030 1038 1034 1030 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 § Di e Sk i z z e lin k s ze i g t de n Zu s t a n d de s Sp e i c h e r s am Ende de r Met h o d e run aus TestRational . § Das B i l d re c h t s ze i g t de n se l b e n Zu s t a n d mi t ei n em Pf e i l ( ma n c h ma l «P o i n t e r » ge n a n nt ) ans t e l l e de r Ad r e s s e (P o i n t er Mo d e l l ) 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num a b c sum he a p st a c k Adr e s s e n vs . P o i n t e r 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num he ap st a c k a b c sum FFFC FFF8 FFF4 FFF0 FFE C 1000 100C 1018 1030 1038 1034 1030 102C 1028 1024 1020 101C 1018 1014 1010 100C 1008 1004 1000 Be id e Sk i z z e n ( mi t Ad r e s s e n od e r Po i n t e r n ) ze i g e n de n se l b e n Zu s t a n d abe r be t o ne n un t e r s c hi e dl i c he As p e k t e . – Ad r e s s e n ve r d e u t lic h e n da s s Ve r w e i s e (R e f e r e n c e s) ei n e Za h l en t h a l t en . 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num a b c sum he ap st a c k – Da s P o i n t e r M o d e l l be t o n t di e Be z i e hung zw i s c h e n Re fe r e n z (v a r i a b l e ) und Ob j e k t (e x e m p l a r ). Ni c h t - er r ei c h b a r e Ob j ek t e Das P o i n t e r M o de l l ma c h t kl a r das e s ke i n e n Ve r w e i s auf das Rational Ex e m pl ar 5/6 gi b t . D i e s e r W e r t is t je t zt «G a r b a g e ». Das J a v a La u f z ei t s y s t em fü h r t vo n Z e i t zu Ze i t ei n e Sp e i c h e r b e r e i n i - gu n g dur c h (« gar bage c o l l e c t i o n ») – aut o m a t i s c h 1 den 1 num 6 den 5 num 6 den 1 num 3 den 1 num 2 den 1 num a b c sum he ap st a c k Ex e m p l a r d a s te m p o r ä r ge br auc ht wu r d e abe r je tz t une r r e i c hbar is t . Ba s i s t yp e n vs Ob j ek t e § Ei n Ba s i s t y p Pa r a m e t e r wi r d na c h de n Re g e l n de r Va l u e Sem an t i cs übe r g e be n . § Ei n Pa r a m e t e r für ei n e Re f e r e n z v a r i a b l e fo l g t de n Re g e l n de r Re f e r e n c e S e m a n t i c s . § Nu r au f d e n er s t en Bl i c k sc h e i n t es , da s s Ba s i s t y p en und Re f e r e n z t y p e n un t e r s c hi e dl i c h be ha nde l t we r d e n . 194 § We n n wi r ei n e Ba s i s t y p Va r i a b l e al s Pa r a m e t e r übe r g e be n , da nn ko p i e r e n wi r de n We r t de r V a r i a bl e § ( Zu r Er i nne r ung : Ba s is t y p Va r i a b l e n en t h a l t en de n W e r t ) § Ve r ä n d e r u n g e n in d e r auf g e r uf e ne n Met h o d e habe n dahe r ke i n e Wi r k u n g (d i e i n d er auf r uf e nde n Met h o d e si c h t b a r is t ) § We n n wi r ei n Re f e r e n z v a r i a b l e al s Pa r a m e t e r übe r g e be n , s o ko p i e r e n wi r di e Re f e r e n z ( mi t de r Ad r e s s e ) § Dahe r kö n n e n wi r das Ex e m pl ar , das wi r übe r di e Ad r e s s e err ei c h en , ve r ä n d e r n § En t w e de r übe r Ac c e s s or / M u t a t or Met h o d e n od e r dur c h di r e k t e n Zu g r i f f auf ei n At t r i b u t od e r Ar r a y E l e m e n t § Ab e r we n n wi r de r Re f e r e n z v a r i a b l e ei n en ne ue n We r t zu w e i s e n so ände r t si c h ni c h t s in d e r auf r uf e nde n Met h o d e 195 Ba s i s t yp e n vs Ob j ek t e § Ba s i s t y p Pa r a m e t e r : Ko p i e de s We r t e s wi r d übe r g e be n § Re f e r e n z v a r i a b l e Pa r a m e t e r : Ko p i e de r Re f e r e n z v a r i a b l e (d e s P oi n t e r s u n d / od e r Ad r e s s e ) wi r d übe r g e be n § Di e s e r W e r t ka n n ni c h t ve r ä n d e r t we r d e n § Ab e r w a s dur c h di e Re f e r e n z v a r i a b l e err ei c h t we r d e n ka n n (A rr a y El e m e n t , At t r i b u t ei n es Ex e m pl ar s , … ) ka n n ge ä n d e r t we r d e n . 197 Sp e i c h e r v e r w al t u n g § Ga r ba g e C o l l e c t i o n ha t v i e l e A s pe k t e § He r a u s f i n d e n w e l c h e r B e r e i c h n i c h t m e h r e r r e i c h t w e r d e n k a n n § Sp e i c h e r f ü r W i e d e r v e r w e n d u n g b e r e i t s t e l l t e n § Sp e i c h e r p l a t z f ü r n e u e E x e m p l a r e f i n d e n § Ei n i n t e r e ssa n t e s T h e m a 198 in G e b r a u c h in G e b r a u c hfr e i in G e b r a u c h fr e ifr e i in Sp e i c h e r v e r w al t u n g § Ga r ba g e C o l l e c t i o n ha t v i e l e A s pe k t e § He r a u s f i n d e n w e l c h e r B e r e i c h n i c h t m e h r e r r e i c h t w e r d e n k a n n § Sp e i c h e r f ü r W i e d e r v e r w e n d u n g b e r e i t s t e l l t e n § Sp e i c h e r p l a t z f ü r n e u e E x e m p l a r e f i n d e n § Ei n i n t e r e ssa n t e s T h e m a § Ab e r n i c h t f ü r d i e \" E i n f . i n d i e Pr og r a m m i e r u n g \" 199 in G e b r a u c h in G e b r a u c hfr e i in G e b r a u c h fr e i in Sp e i c h e r v e r w al t u n g Th e G a r b a g e C o l l e ct i o n H a n d b o o k : Th e Ar t o f Au t o m a t i c M e m o r y M a n a g e m e n t Ri c h ar d J o n e s , A n t o n y H o s k i n g , an d El i o t M o s s Ta y l o r & F r a n c i s L t d (2 0 1 1 ) 511 S e i t e n . 200 Sp e i c h e r v e r w al t u n g § 12 - by t e E x e m p l a r e ( w i e Rational ) s i n d n i e da s Pr o bl e m § Ma n c h e E x e m p l a r e b r a u c h e n v i e l P l a t z f ü r B u f f e r o . ä . § Di e s e n m ö c h t e di e K l as s e ( o f t ) s e l be r m anag e n § Scanner Ex e m pl ar e br auc he n B uf f e r und e s g i b t e i ne n P o o l v o n Bu f f e r n n u r f ü r d ie s e E x e m p la r e § Dam i t di e s e r S pe i c he r v e r w al t e t w e r de n k ann m us s das I / O S y s t e m wi s s e n , w a n n d i e B u f f e r ( f ü r Scanner myScanner ) f r ei s i n d § Es g e nüg t ni c h t , myScanner auf null zu s e t z e n § Met h o d e close() (a l s o myScanner.close() ) in f o r m ie r t I / O S y s t e m § Ec l i p s e w a r n t w e n n d i e s e M e t h o d e n i c h t v e r w e n d e t w i r d § Fe h l e n d e r A u f r u f k e i n P r o b l e m f ü r e i n f a c h e P r o g r a m m e 201 Sp e i c h e r v e r w al t u n g § 12 - by t e E x e m p l a r e ( w i e Rational ) s i n d s e l t e n d a s P r ob l e m § Ma n c h e E x e m p l a r e b r a u c h e n v i e l P l a t z f ü r B u f f e r o . ä . § Di e s e n m ö c h t e di e K l as s e ( o f t ) s e l be r m anag e n § Scanner Ex e m pl ar e br auc he n B uf f e r und e s g i b t e i ne n P o o l v o n Bu f f e r n n u r f ü r d ie s e E x e m p la r e § Dam i t di e s e r S pe i c he r v e r w al t e t w e r de n k ann m us s das I / O S y s t e m wi s s e n , w a n n d i e B u f f e r ( f ü r Scanner myScanner ) f r ei s i n d § Es g e nüg t ni c h t , myScanner auf null zu s e t z e n § Met h o d e close() (a l s o myScanner.close() ) in f o r m ie r t I / O S y s t e m § Ec l i p s e w a r n t w e n n d i e s e M e t h o d e n i c h t v e r w e n d e t w i r d § Fe h l e n d e r A u f r u f k e i n P r o b l e m f ü r e i n f a c h e P r o g r a m m e 202 (E x tr a ) N o c hm a l: E n twur f v o n M e tho de n 206 Ei n e Kla s s e fü r Kn o t e n ei n er Lis t e public class ListNode { int data ; ListNode next ; } § Je d e r Kn o t e n de r Li s t e sp e i c h e r t : § De n W e r t ei n er ga n z e n ( int ) Za h l § Ei ne n Ve r w e i s auf ei n en ande r e s ListNode Ex e m pl ar § « Re k u rs i v e r Da t e n t y p » § We r t e (d es Da t e n t y p s ) en t h a l t en Re f e r e n z e n auf Ex e m pl ar e (d i es es Ty p s ) da t a ne x t - 3 da t a ne x t 17 da t a ne x t 9 207 solve() : Ei n e r e k u r s i v e M e t h o d e ( M u s t e r ) We n n d a s P r o b l e m n i c h t w e i t e r z e r l e g t w e r d e n k a n n ( m i n i m a l i s t , B a s i s f a l l ) : lö s e P r o b le m d ir e k t ( o h n e R e k u r s io n ) u n d lie f e r e d ie L ö s u n g so n s t 1. Ze r l e g e P r o b l e m i n e i n o d e r m e h r äh n l i c h e , abe r kl e i n e r e Te i l - Pr ob l e m e TP 1 , T P 2 , … , T P n 2. Ru f e r e k u r s i v e solve() auf , um di e kl e i n e r e n Te i l - Pr ob l e m e zu l ös e n (d en n d i es e s i n d äh n l i c h ): solve (T P 1 ), solve (T P 2 ), … , solve (T P n ) 3. Fü g e d i e L ö s u n g e n d e r T e i l - Pr ob l e m e ( v on solve ( TP i ) g el i e f ert ) zu s a m m e n u m d a s u r s p r ü n g l i c h e Pr ob l e m zu l ös e n 4. Li e f er e d i e Lö s u n g z u m u r s p rü n g l i c h en P r o b l em (a n d en A u f ru f er) 209 n! § n! = n na t ür l i c he ni c h t - ne g a t i v e Z a hl § Bei s p i el e: 4 ! = 2 4 ; 5 ! = 1 2 0 ; 0 ! = 1 ; ( s o f es t g el eg t ! ! ) 210 ∏ j=1 j=n n! § n! = n na t ür l i c he ni c h t - ne g a t i v e Z a hl § Bei s p i el e: 4 ! = 2 4 ; 5 ! = 1 2 0 ; 0 ! = 1 ; ( s o f es t g el eg t ! ! ) § Re k u rs i v e D e f i n i t i o n 0! = 1 -- 0 i s t d i e k l e i n s t e Z a h l f ü r d i e ! d e f i n i e r t i s t n! = n * ( n - 1)! -- fü r n > 0 , ! i s t d e fi n i e r t d u r c h ! fü r k l e i n e r e Z a h l § Bei s p i el 5! = 5* 4! = 5* 4* 3! = 5* 4* 3* 2! = 5* 4* 3* 2* 1! = 5* 4* 3* 2* 1* 0! = 5* 4* 3* 2* 1* 1 211 ∏ j=1 j=n Me t h od e fakultaet public static int fakultaet ( int n) { if (n == 0) { return 1; } else { int tp1 = n - 1; //(1) Ein Teilproblem int solutionTP1 = fakultaet (tp1); //(2) Rekursion um TP zu lösen int solution = n * solutionTP1; //(3) Lösung des ursp . Problems return solution; //(4) Liefern der Lösung } } 212 Ve r e i n f a c h t e M e t h o d e fakultaet public static int fakultaet ( int n) { if (n == 0) { return 1; } else { return n * fakultaet (n - 1); } } 213 It e r a tiv e M e tho de fakultaet public static int fakultaet ( int n) { int resultat = 1; for ( int i =2; i <=n; i ++) { resultat *= i ; } return resultat ; } 214 Ve r g l e i c h Re k u r s i o n und It e r a tio n public static int fakultaet ( int n) { if (n == 0) { return 1; } else { return n * fakultaet (n - 1); } } 215 int resultat = 1; for ( int i =2; i <=n; i ++) { resultat *= i ; } return resultat ; It e r a t io n b r a u c h t 2 V a r ia b le ( resultat , i ) d i e i n j e d e m Sc h l e i f e n d u r c h l au f geän der t we r d e n a n – a h o c h n § n i s t e i ne na t ür l i c he , ni c h t - ne g a t i v e Z a hl § Re k u rs i v e D e f i n i t i o n a 0 = 1 -- gi l t a u ch f ü r a = = 0 a n = a * a n - 1 -- fü r a l l e n > 0 § Bei s p i el a 4 = a * a 3 = a * a * a 2 = a * a * a * a 1 = a * a * a * a * a 0 = a * a * a * a * 1 216 a n – a h o c h n § n i s t e i ne na t ür l i c he , ni c h t - ne g a t i v e Z a hl § Re k u rs i v e D e f i n i t i o n a 0 = 1 -- gi l t a u ch f ü r a = = 0 a n = a * a n - 1 -- fü r a l l e n > 0 § Bei s p i el a 4 = a * a 3 = a * a * a 2 = a * a * a * a 1 = a * a * a * a * a 0 = a * a * a * a * 1 § Ka n n M e t h o d e fakultaet di r e k t i n e i ne M e t ho de power übe r t r a g e n 217 Me t h od e power public static int power( int a, int n) { if (n == 0) { return 1; } else { return a * power(a, n - 1); } } 218 po w e r ( a , 3 ) = a * p o w e r ( a, 2 ) = a * a * p o w e r ( a, 1 ) = a * a * a * p o w e r ( a, 0 ) = a * a * a * 1 An z a h l M u l ti p l i k a ti on e n : n (h i e r: 3 ) It e r a tiv e M e tho de power public static int power( int a, int n) { int resultat = 1; for ( int i =1; i <=n; i ++) { resultat *= a; } return resultat ; } 219 Ve r g l e i c h R e k u r s i o n u n d I t e r a t i o n § Bei d e M e t h o d en b r a u c h en n Mu l t i p l i k a t i o n e n § Es g i b t a b e r e i n e n b e sse r e n W e g a n zu b e r e c h n e n : a 100 = a 50 * a 50 = ( a 50 ) 2 § a 0 = 1 § a n = 220 (a n/ 2 ) 2 fü r n g e r a d e a * a n - 1 fü r n u n g e r a d e { Va r i a n t e d e r M e t h o d e power 221 public static int power( int a, int n) { if (n == 0) { return 1; } else if (n%2 == 1) { // n ist ungerade return a * power(a, n - 1); } else { // n ist gerade return square(power(a, n/2)); } } public static int square(int y) { return y * y; } Di s k u s s i o n § Di e se V a r i a n t e f ü h r t w e n i g e r M u l t i p l i k a t i o n e n a u s § Be is p ie l: a 16 § It e r a t i o n : 1 6 M u l t i p l i k a t i o n e n § Re k u r s i o n ( V a r i a n t e ) : 5 M u l t i p l i k a t i o n e n a 16 = ( a 8 ) 2 = ( ( a 4 ) 2 ) 2 = ( ( ( a 2 ) 2 ) 2 ) 2 = ( ( ( ( a 1 ) 2 ) 2 ) 2 ) 2 = ( ( ( ( a * a 0 ) 2 ) 2 ) 2 ) 2 § Fr a g e n § Gi b t e s e i n e F or m e l f ü r d i e An z a h l M u l ti p l i k a ti on e n ( f ü r a n )? § Br a u c h t d ie s e V a r ia n t e d ie mi n i ma l e An z a h l M u l ti p l i k a ti on e n ? § An g e b ot e ( An tw or t e n ) p e r e M a i l a n d e n D o z e n t e n 222 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 6. 0 Ar b e i t e n mi t Ob j e k t e n und Kl a s s e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 2 0 , 2 0 2 1 Al l r i g h t s r e s e r v e d . 226 Üb e r s i c h t 6. 1 Sti l und Ko n v e n t i o n e n § Hi n w e i s e (u n d Re g e l n ) fü r ve r s t ä n d l i c h e Pr og r a m m e § Te i l 1 : Ni c h t vo l l s t ä n d i g – sp ä t e r er w ei t ert 6. 2 Da t e n s t r u k t u r e n mi t Ve r k n ü p f u n g e n 6. 3 En t w u r f vo n ( ab g e k ap se l t e n ) K l a s s e n 6. 4 Pr o gr a m m be i s pi e l und – au s f ü h r u n g 6. 5 ( Me h r ) Op t i o n e n für Si c h tb ar k e i t Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 7 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 227 Üb e r s i c h t § 6. 5. 1 Si c h tb ar k e i t (P a c k a g e s ) § 6. 5. 2 Ge s c ha c h t e l t e Kl as s e n § 6. 5. 3 Sp e z i e l l e Kl as s e : enum 228 6. 5. 1 P a c k a g e s : Me hr Op t i o n e n fü r S i c h t b a rk e i t 229 Op ti o n en fü r Ko n t r o l l e de r Si c h t b ark e i t § Pr o gr a m m i e r s pr a c he n st e l l e n ve r s c h i e d e n e Mi t t e l zu r Ve r f ü g u n g um de n Zu g r i f f au f A t tr i b u t e ( bz w . V a r ia b le od e r au c h Me t h o d e n ) zu ko n t r o l l i e r e n § Zi e l is t es , una bhä ngi g e En t w i c k l u n g (v on Pr o gr a m m t e i l e n ) zu un t e r s t üt z e n § Zi e l is t es , mö g l i c h s t vi e l e Fe h l e r dur c h de n C o m pi l e r fi nde n zu la s s e n § Ke i n e Ko s te n zu r La u f z ei t § Ve r h i n d e r n vo n Fe h l e r n zu r Au s f ü h r u n g s z e i t 230 Hi er a r c h i e d er Na m en sr ä u m e § Gr undr e g e l : k e i ne D o ppe l de k l a r a t i o n ( für Va r i a b l e / M e t h o d e n / . . . ) § Zi e l : L e s b a r e r , v e r s t ä n d l i c h e r C o d e § Mü s s e n d i e S i c h t b a r k e i t e i n s c h r ä n k e n § Vi e r E b e n e n ( m i t V e r e i n f a c h u n g e n ) 1. Met h o d e n 2. Kl a sse n 3. 4. 231232 method2(p) { q … … } method1(p) { q … … } SomeClient { } ? class Z { y } 233 method2(p) { q … … } method1(p) { q … … } SomeClient { Z ……; } class Z { y } public class Z { public y } 234 public method2(p) { q … … } public method1(p) { q … … } SomeClient { Z z; z.y z.method1(…) } Vi e l e K l a s s e n … § Je d e r w i l l e i n e Kl a sse List fü r Li s t en … § We i t e r e M ö g l i c h - ke i t e n z u r V e r - wa l t u n g d e s Na me s r a u me s public class Z { public y } 235 public method1(p) { q … … } import PA.*; SomeClient { Z z; z.y z.method1(…) } package PA; Zi e l i s t A b k ap se l u n g e i n e s N am e n sr au m e s § Ni c h t a l l e s a u s e i n e r P a c k a g e s o l l ( a u s s e n ) s i c h t b a r s e i n Pa c k a g e s § An w e i s u n g (a m An f a n g e i n e r D a t e i ) § package name ; § be s t i m m t da s s a l l e K l a s s e n di e s e r D a t e i z ur P a c k a g e na m e ge h ö r e n § Re g e l n f ü r na m e (b e t r e f f en F o l d er/ D i r ec t o r y ) – si e h e f o l g e n d e Sl i d e s § Pa c k a g e k a n n d a n n i m p o r i e r t w e r d e n § import name ; 236 W a r um ha t uns da s nie m a nd g e s a g t ? § We n n w i r k e i n e « P a c k a g e » A n w e i s u n g g e b e n , d a n n k o m m e n al l e Kl asse n i n e i n e ( an o n y m e ) P ac k ag e § Di e s habe n w i r bi s he r aus g e nut z t § … a u c h w e i t e r h i n 237 Ja v a P ac k ag e s § Kö n n e n de n Ra um de r P a c k a g e s we i t e r un t e r t e i l e n § De f i ni t i o n v o n Un t e r p a k e t e n (« su b - pac k age s ») § Sub - pac k age s kö n n e n ähnl i c he Na me n habe n si n d abe r ni c h t wi r k l i c h in ei n er Pa c k a g e en t h a l t en § java.awt en t h ä l t ni c h t java.awt.event § Ab e r « ge h ö r t » zu r Pa c k a g e java.awt § Pa k e t (« pack age ») : E i n e An s a m m l u n g vo n zu s a m m e n g e h ö r e n d e n Kl as s e n § Ei n e Da t e i ka n n nur in ei n er Pa c k a g e se i n § Kl as s e le g t fe s t i n we l c h e r Pa c k a g e si e is t Ja v a P ac k ag e s § Ge br a uc h vo n J a v a P a c k a g e s : § We g zu s a m m e n g e h ör e n d e Kl a sse n zu bünde l n § Sc h a f f t ei n en Ra u m fü r Na me n (« na m e s p a c e ») u m Na me s k o n f l i k t e zu ve r m e i d e n § Ko n t r o l l i e r t Zu g r i f f bz w . bi e t e t Sc h u tz vo r une r w üns c h t e n Zu g r i f f e n § Er l aub t Gl i e d e r u n g ei n es gr o s s e n So f t w a r e Pr oj e k t e s 239 Pa c k a g e s u n d Da t e i e n v e r z e i c h n i s s e § Pa c k a g e ß à Ve r z e i c h n i s (« d i r e c t or y » , « f ol d e r » ) § Kl as s e ß à Da t e i (« f i l e » ) § Kl as s e mi t Na m e n D in d e r P a c k a g e a.b.c ge h ö r t in Da t e i : a/b/c/ D.java § ( re l a t i v zu r «R o o t » Ih r e s Pr oj e k t e s ) § Da s H a u p t ( « R o o t » ) Ve r z e i c h n i s de r P a c k a g e Hi e r ar c h i e wi r d vo r g e b e n dur c h de n cl as s pat h od e r is t da s Ve r z e i c h n i s vo n de m au s java au f g e r u f e n wu r d e § Ei ns t e l l ung in E c lip s e Cl as s p a t h § cl a s s p a t h : D e r O rt ( D i r e ct o r y ) bz w . d ie Or t e in d e m / de ne n Ja v a « c l ass» F i l e s su c h t .§ .class Fi l e : übe r s e t z t e .java Fi l e § De r Cl a s s p a t h ka n n be i nha l t e n : § Ak tu e l l e s «w o r k i n g d i r e c t o r y » i n d e m ja v a c / j a v a auf g e r uf e n wi r d § Bz w . E c l i p s e d i e Üb e r s e t z u n g dur c h f ühr t § An d e r e Ve r z e i c h n i s s e § JA R A r c h i v e ( JA R : J a v a A r c h i v e ) § UR L s § ... Cl as s p a t h § Ko n f i g u r i e r t in E c lip s e § Ka n n ex p l i z i t ge s e t z t we r d e n we n n ma n J a v a v o n de r Sh e l l au s st a r t e t : § java - cp /home/ eprog /libs:/foo/bar/ jbl MyClass § Is t ab e r für uns ( zu m Gl üc k ) ke i n The m a 242 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 6. 0 Ar b e i t e n mi t Ob j e k t e n und Kl a s s e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 2 0 , 2 0 2 1 Al l r i g h t s r e s e r v e d . 1 Üb e r s i c h t § 6. 5. 1 Si c h tb ar k e i t (P a c k a g e s ) § 6. 5. 2 Ge s c ha c h t e l t e Kl as s e n § 6. 5. 3 Sp e z i e l l e Kl as s e : enum 2 6. 5. 1 P a c k a g e s : Me hr Op t i o n e n fü r S i c h t b a rk e i t 3 De k l a r a t i o n ei n er Pa c k a g e Sy n t a x : package pac k age N am e ; public class cl a s s N a m e { ... } § Kl a sse cl a s s N a m e is t je t zt in d e r P a c k a g e pac k age N am e § Mu s s am An f a n g de r Da t e i ( cl a s s N a m e . ja v a ) st e h e n § Bei s p i el : package pacman.model ; public class Ghost { ... } § Fi l e Ghost.java so l l t e im Fo l d e r pacman /model se i n . Im po r t ei n er Pa c k a g e import pa c k a g e N a m e .*; // all classes Bei s p i el : package pacman.gui ; import pacman.model .*; public class PacManGui { ... Ghost blinky = new Ghost(); } Im po r t ei n er Pa c k a g e § Fü r di e Kl as s e PacManGui mu s s d i e pacman.model Pa c k a g e im p o r t ie r t s e i n u m d i e Kl as s e Ghost ve r w e n d e n zu kö n n e n § PacManGui mu s s im Fo l d e r pacman.gui lie g e n § Im p o r t pacman.model .* im p o r t ie r t al l e Kl as s e n d e r Pa c k a g e § Ke i n Im p o r t v o n « S u b - Pa c k a g e s » ( z.B . pacman.model.util ) 6 Si c h t b ark e i t u n d P ac k ag e s § Zi e l i s t A b k ap se l u n g e i n e s N am e n sr au m e s § Si c h tb ar k e i t ü b e r al l : § In d e r P a c k a g e u n d a u s s e r h a l b ( n a c h Im p o r t ) § Ke y w o r d : public § Si c h tb ar k e i t n u r i n d e r P ac k ag e § Ni c h t a u s s e n s i c h t b a r – auc h w e nn P ac k ag e i m po r t i e r t w ur de § Ke y w o r d : ni c h t s (k ei n K e y w o r d ) – d. h. ! de r l e e r e S t r i ng … . 7 public class W { ! ! ! ! ! v } 8 public method1(p) { } import PA.*; SomeClient { W w; w.v w.method1(…) U u; u.t u.method1() } package PA; ✘ public class U { public t } ! ! ! ! ! method1(p) { } ✘ public class W { ! ! ! ! ! v } 9 public method1(p) { } import PA.*; SomeClient { W w; w.v w.method1(…) U u; u.t u.method1() } package PA; ✘ public class U { public t } ! ! ! ! ! method1(p) { } ✘ ! ! ! ! ! si e h t ma n n i c h t ! class W { v } 10 method1(p) { } import PA.*; SomeClient { W w; U u; u.method1() } package PA; Au c h K l a s s e n k ö n n e n nur i n de r P a c k a g e s ic h t b a r s e in ✘ public class U { } public method1(p) { W w; w.method1() w.v } Im po r t ei n er Kla s s e import pack ageN am e . cl as s N am e ; // one class § Bei s p i el : package pacman.gui ; import pacman.model.Ghost ; public class PacManGui { Ghost blinky = new Ghost(); } § Nu r Kl as s e Ghost is t je t zt be k a nn t Im p o r t v o n Kl a s s e n vs . Im p o r t ei n er Pa c k a g e § ( Kl as s e n ) N am e n s k o n f l i k t e we r d e n un t e r s c hi e dl i c h be ha nde l t : § Im p o r t ie r e n ei n er ei n z el n en Kl as s e gi b t de r Kl as s e ei n en ho he n St e l l e n w e r t : § Mi t import foo.* gi l t : ei n e Kl a sse mi t de m se l b e n Na me i n di e s e r Pa c k a g e ve r d e c k t di e im p o r t ie r t e Kl a sse § Mi t import foo . cl a s s N a m e gi l t : d i e Kl a sse mi t de m se l b e n Na me n ve r d e c k t ni c h t di e im p o r t ie r t e Kl a sse 12 Ar be it e n mi t Pa c k a g e s § Au c h oh n e import kö n n e n wi r uns au f ei n e Kl as s e mi t vo l l s t ä n d i g e n Na m e n be z i e he n . Sy n t a x : pac k age N am e . cl a s s N a m e st a t t cl a s s N a m e § Be is p ie l : java.util.Scanner console = new java.util.Scanner ( java.lang.System.in ); § Di e s is t ma n c h ma l pr a k t i s c h we n n es Na m e n s k on f l i k t e gi b t : § Be is p ie l : java.awt.List und java.util.List § Od e r ei n e Kl a sse im p o r t ie r e n (u n d dann fü r di e ande r e de n vo l l s t ä n d i g e n Na me n ve r w e n d e n ) Ar be it e n mi t Kla s s e n ei n er Pa c k a g e § Ei n e Kl as s e mi t Na m e n D in d e r P a c k a g e a.b.c so l l t e in di e s e r Da t e i ge s p e i c h e r t se i n : a/b/c/ D.java 17 Ar be it e n mi t Kla s s e n ei n er Pa c k a g e § Ei n e si c h t b ar e Kl as s e mi t Na m e n D in d e r P a c k a g e a.b.c mu s s in di e s e r Da t e i ge s p e i c h e r t se i n : a/b/c/ D.java § Di e se Re g e l ha be n wi r bi s je t zt im m e r be f o l g t § Si e g i l t ni c h t für Kl as s e n , d i e nur in n e r h a lb ei n er Pa c k a g e ve r w e n d e t we r d e n 18 Ar be it e n mi t Pa c k a g e s § Di e P a c k a g e An g a b e mu s s im m e r al s er s t es in ei n er .j a v a Da t e i er s c h ei n en § Vo r de r er s t en Kl a sse § Nu r ei n m a l pr o Da t e i § Wa s pa s s i e r t we n n wi r ( wi e bi s he r ) ke i n e Pa c k a g e de k l a r i e r e n ? 19 Di e d e f a u l t P a c k a g e § Da t e i e n ( d. h ., d ie K la s s e n in d e r Da t e i ), d i e ke i n e Pa c k a g e De k l a r a t i o n en t h a l t en , ge h ö r e n in ei n e na m e nl o s e de f a ul t Pa c k a g e . § Kl as s e n in de r de f a ul t P a c k a g e : § Kö n n e n ni c h t im p o r t ie r t we r d e n § Kö n n e n ni c h t vo n ande r e n Kl a sse n i n ande r e n Pa c k a g e s ve r w e n d e t we r d e n . § Ke i n Pr o bl e m für ei n f a c h e Pr o gr a m m e Di e d e f a u l t P a c k a g e § Wi r we r d e n we i t e r h i n nur mi t de r de f a ul t P a c k a g e ar b e i t e n 21 De r d e f a u l t I m p o r t § Di e P a c k a g e java.lang wi r d im p liz it ( au t o m a ti sc h ) v on al l e n Pa c k a g e s ( u n d da m i t Pr o gr a m m e n ) im p o r t ie r t . import java.lang .*; // redundant 22 Si c h t b ark e i t u n d P ac k ag e s § Zi e l i s t A b k ap se l u n g e i n e s N am e n sr au m e s § Si c h tb ar k e i t ü b e r al l : § In d e r P a c k a g e u n d a u s s e r h a l b ( n a c h Im p o r t ) § Ke y w o r d : public § Si c h tb ar k e i t n u r i n d e r P ac k ag e § Ni c h t a u s s e n s i c h t b a r – auc h w e nn P ac k ag e i m po r t i e r t w ur de § Ke y w o r d : ni c h t s (k ei n K e y w o r d ) – d. h. ! de r l e e r e S t r i ng … . § De f aul t – he i s s t auc h « P ac k ag e S i c h t bar k e i t » 23 Si c h t b ark e i t u n d P ac k ag e s § Zi e l i s t A b k ap se l u n g e i n e s N am e n sr au m e s § Si c h tb ar k e i t nur in di e s e r Kl as s e : § In d e r K l a s s e (u n d gg f . i n ei n g es c h l o s s en en Kl a sse n / Ty p e n – sp ä t e r me h r ) § Ke y w o r d : private 24 Pa c k a g e s u n d Si c h t b ark e i t § Da m i t ei n At t r i b u t / ei n e Me t h o d e di e de f a ul t Si c h tb ar k e i t ha t br a uc he n Si e ke i n e n Mo d i f i z i e r e r an z u g e b e n . package pacman.model ; public class Sprite { int points; // default: visible to pacman.model .* String name; // default: visible to pacman.model .* } public class Xray { int direction; // default: visible in default package String name; // default: visible in default package } 28 Pa c k a g e s u n d Si c h t b ark e i t § In ei n er Da t e i Pr o bl e m . j a v a public class Problem { public static void main(String[] args ) { … } } class SubProblem { } 29 Ka n n SubProblem Ex e m pl a r e e r s t e l l e n Abe r Su b P r o b l e m en t s c h ei d e t S i c h t b a r k ei t vo n A t t r i b u t e n e t c Pa c k a g e s u n d Si c h t b ark e i t § In ei n er Da t e i Pr o bl e m . j a v a public class Problem { public static void main(String[] args ) { … } } class SubProblem { } 30 Ka n n SubProblem Ex e m pl a r e e r s t e l l e n Abe r SubProblem en t s c h ei d e t S i c h t b a r k ei t vo n A t t r i b u t e n e t c Pa c k a g e s u n d Si c h t b ark e i t § In ei n er Da t e i Pr o bl e m . j a v a public class Problem { public static void main(String[] args ) { … } } class SubProblem { } 31 Ka n n Problem Ex e m pl a r e e r s t e l l e n Abe r Su b P r o b l e m en t s c h ei d e t S i c h t b a r k ei t vo n A t t r i b u t e n e t c At t r i b u t e u n d Me t h od en Si c h t b ark e i t 32 In ei n er Da t e i Pr ob l e m . j a v a public class Problem { public static void main( String[] args ) { SubProblem s = new SubProblem (); int a = s.x ; a = s.y ; } } Fo r t s e t z u n g Da t e i Pr o b l e m . j a v a class SubProblem { int x; public int y; } At t r i b u t e u n d Me t h od en Si c h t b ark e i t 33 In ei n er Da t e i Pr ob l e m . j a v a public class Problem { public static void main( String[] args ) { SubProblem s = new SubProblem (); int a = s.f (); a = s.g (); } } Fo r t s e t z u n g Da t e i Pr o b l e m . j a v a class SubProblem { int f() { … } public int g() { … } } At t r i b u t e u n d Me t h od en Si c h t b ark e i t 34 In ei n er Da t e i Pr ob l e m . j a v a public class Problem { public static void main( String[] args ) { SubProblem s = new SubProblem (); int a = s.v ; // prohibited } } Fo r t s e t z u n g Da t e i Pr o b l e m . j a v a class SubProblem { private int v; } At t r i b u t e u n d Me t h od en und Si c h t b ark e i t 35 In ei n er Da t e i Pr ob l e m . j a v a public class Problem { public static void main( String[] args ) { SubProblem s = new SubProblem (); int a = s.f (); //prohibited } } Fo r t s e t z u n g Da t e i Pr o b l e m . j a v a class SubProblem { private int f() { … } } At t r i b u t e , Me t h od en und (s t a t ic ) V a r ia ble 36 In ei n er Da t e i Pr ob l e m . j a v a public class Problem { static int a; public static void main( String[] args ) { SubProblem s = new SubProblem (); a = s.f (); a = s.g (); } } Fo r t s e t z u n g Da t e i Pr o b l e m . j a v a class SubProblem { int f() { … } public int g() { … } } Üb e r s i c h t § 6. 5. 1 Si c h tb ar k e i t (P a c k a g e s ) § 6. 5. 2 Ge s c ha c h t e l t e Kl as s e n § 6. 5. 3 Sp e z i e l l e Kl as s e : enum 42 6. 5. 2 Ge s c ha c h t e lt e Kla s s e n 43 [ Zu r Er i n n e r u n g ] E i n pa a r Fr ag e n § Di e A t t r i b u t e v o n ListNode si n d ni c h t private ? Is t da s gut e r od e r sc h l e c h t e r Sti l ? An t w or t : § Da s ka n n ma n ve r t r e t e n da LinkedIntList de r ei n z i g e Kl i e n t vo n ListNode is t § An d e r e Pr og r a m m e ma n i p u l i e r e n ni c h t di e ListNode Ob j e kt e so n d e r n ar be i t e n mi t Met h o d e n de r LinkedIntList Kl a sse . § Es gi b t in J a v a no c h be s s e r e Mö g l i c h k e i t e n , so l c h e Kl a s s e n zu or g a n i s i e r e n , ab e r di e le r n e n wi r er s t sp ä t e r ke n n e n . 44 je t zt Lis tN o de und Link edIn tLis t § Ei n e Lö s u n g : § LinkedIntList is t ei n e public Kl a sse in ei n er Pa c k a g e § Ka n n nac h Im p o r t ve r w e n d e t we r d e n § Pa c k a g e h a t Na me n § ListNode is t ei n e Kl a sse in d e r se l b e n Pa c k a g e , abe r ni c h t public § Ka n n vo n LinkedIntList ve r w e n d e t we r d e n , ni c h t vo n ande r e n Kl i e n t e n § Es gi b t no c h we i t e r e Lö s u n g e n 45 Nes t ed c l a sses § Ge s c ha c h t e l t e Kl as s e (« n e s t e d c l a s s » ): E i n e Kl as s e di e in n e r h a lb ei n er an d e r e n Kl as s e de fi ni e r t is t . § Kö n n e n al s static od e r no n - st a t i c ( d e f a u l t ) K l a s s e n de f i ni e r t we r d e n § no n - st a t i c n e st e d c l a s s e s he i s s e n in n e r c la sse s ( in n e r e Kl a sse ) § Wi r be t r a c h t e n hi e r zu e r s t di e no n - st a t i c K l a s s e n , d. h . d ie in n e r e n Kl as s e n ( « i n n e r c l as s » ) 46 Inne r c la sse s § Wa r u m : § In n e r e Kl a sse n si n d ni c h t si c h t b a r fü r ande r e Kl a sse n ( Ab k a p s e l u n g ) § In n e r e Ob j e kt e kö n n e n di e A t t r i but e de s äus s e r e n Ob j e kt s le s e n / mo d i f i z i e r e n § Ab e r : § Ex e m pl ar e de r in n e r e n Kl a sse ex i s t i e r e n nur in n e r h a lb ei n es Ex e m pl ar s de r si e um s c hl i e s s e nde n (« o u t er» ) Kl a sse Ex e m p l a r d e r in n e r e n Kl a s s e Ex e m p l a r d e r äu s s e r e n Kl a s s e 47 public class out er N a m e { class in n e r N a m e { } } class Inner { int i; } 50 void method1(p) { i = …; } package X; import Y.*; SomeClient { Outer o; Inner i; i = new Inner(); i.method1(…) } package Y; public class Outer { ✘ ✘ ✘ public class Inner { public int i; } 51 public void method1(p) { i = …; } package X; import Y.*; SomeClient { Outer o; o = new Outer(); int k; k = o.in.i; o.in.method1(…) } package Y; public class Outer { public in = new Inner(); private class Inner { int i; } 52 method1(p) { i = …; } // same package // as Outer SomeClient { Outer o; Inner i; i = new Inner(); i.method1(…) } public class Outer { ✘ ✘ ✘ method2 (p) { Inner i; i = new Inner(); } Inne r C la ss S y n t a x // outer (enclosing) class public class out e r N a m e { ... // inner class private class in n e r N a m e { ... } } 53 Inne r C la ss S y n t a x // outer (enclosing) class public class out e r N a m e { ... // inner class class in n e r N a m e { ... } } 54 Inne r C la ss S y n t a x // outer (enclosing) class public class out e r N a m e { ... // inner class public class in n e r N a m e { ... } } 55 Inne r e Kla s s e n § We n n private : N u r d er C o d e i n di e s e r Kl a s s e ka n n di e in n e r e Kl a s s e seh en od e r Ex e m p l a r e ko n s t r u i e r e n . § Oh n e private : P a ck a g e § Je d e s in n e r e Ob j e k t is t mi t de m äusser en Ob j e k t , we l c h e s e s ko n s t r u i e r t e , ve r b u n d e n § Ka n n d i e A t tr i b u t e / Me t h o d e n de s äu s s e r e n Ob j e k t e s le se n / mo d i f i z i e r e n / au f r u f e n § We n n nö t i g ka n n das äus s e r e Ob j e kt übe r di e Re f e r e n z v a r i a b l e Ou t e r C l a s s N a m e .this err ei c h t we r d e n § De nn this be z i e h t si c h auf das in n e r e Ob j e kt 56 Zu g r i f f a u f A t t r i b u t d er ä u s s er en K l a s s e class TestClass { int i = 3; // in outer class String foo () { InnerClass i = new InnerClass (7); return \"\" + i.bar (); } class InnerClass { } } public class InnerAndOuter { public static void main ( String [] args ) { System.out.println ( new TestClass ().foo()); } 57 class InnerClass { int i ; // in inner class InnerClass ( int i ) { this .i = i ; } String bar () { String s = \"Inner i =\" + i + \"..\" ; s = s + \"Outer i =\" + TestClass. this .i ; return s; } } // end InnerClass Ou t p u t : 58 Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; class ListNode { int data; ListNode next; ListNode () { } ListNode ( int v) { } ListNode ( int v, ListNode c){} public String toString () {} } // ListNode public String toString () {} //Adds value to end of List void add ( int value) { } int remove() { } } // LinkedIntList 59 Li n k e d I n t Li s t / Li s t N o d e Be i sp i e l // Beispiel Inner Class public class InnerExample { public static void main(String[] args ) { new ListExample ().run(); } } class ListExample { void run() { LinkedIntList list = new LinkedIntList (); list.add (1); System.out.println (list); } } O u t p u t : [ 1 ] 60 Inne r e und äu s s e r e Ob j ek t e § Ex e m p l a r e de r in n e r e n Kl as s e ex i s t i e re n nur in n e r h a lb ei n es Ex e m p l a r s d e r si e um s c hl i e s s e nde n (ou t e r ) Kl as s e § We n n es ke i n äu sse r e s Ob j e k t gi b t , da nn ka n n es au c h ke i n in n e r e s ge b e n § Ei n sc h r ä n k u n g für static Me t h o d e n (d e r ou t e r Kl as s e ) 61 Oh n e um s c hlie s s e nde s Ex e m p l a r 62 public class InnerExample2 { public static void main(String[] args ) { System.out.println (new InnerClass ().foo); } class InnerClass { int foo = 2; } } javac Inner2.java Inner2.java:3: error: non - static variable this cannot be referenced from a static context System.out.println (new InnerClass ().foo); ^ Nes t ed C l a sses al s Na m en sr a u m § Wi r wo l l e n di e Sc h ac h t e l u n g (i n Kl as s e Outer ) nur ve r w e n d e n um Na m e n s k on f l i k t e ( für Kl as s e Inner ) zu ve r m e i d e n § Da n n wo l l e n wi r ev t l . in ei n em Kl i e n t e n Ex e m p l a r e ei n er so l c h e n Kl as s e Inner ko n s t r u i e r e n § Oh n e Ex am pl ar e de r Kl a sse Outer zu ko n s t r u i e r e n 63 static ne s t e d c la s s e s § Da s K e y w o r d static wi r d be nut z t um zu ze i g e n da s s di e s e in n e r e Kl as s e « zu r äu sse r e n Kl as s e » ge h ö r t und wi r ke i n Ex e m p l a r v o n Outer br a uc he n Outer.Inner myHandle = new Outer.Inner (); § Fa s t wi e ei n e static Va r i a b l e – ex i s t i e r t in d e r Kl as s e , ni c h t für je d e s Ex e m p l a r § Br i n g t ni c h t meh r al s Pa c k a g e s 64 Mi t static, oh n e um sc hl i e sse nde s Ex e m p l a r 66 public class Outer { public static void main(String[] args ) { System.out.println ( new Inner().foo ); } static class Inner { int foo = 2; } } static in n e r c la s s oh n e ou t e r c l a s s E x e m p l a r 67 public class InnerAndOuter2 { public static void main(String[] args ) { System.out.println (new TestClass.InnerClass ().bar() ); } } class TestClass { static int i = 3; static class InnerClass { int i = 0; InnerClass () { this(1); } InnerClass (int i ) { this.i = i ; } String bar() { String s = \"Inner i =\" + i + \"..\"; s = s + \"Outer i =\" + TestClass.i ; return s; } } // InnerClass } TestClass // Alles in einer Datei /Package 68 Üb u n g : § Än d e r n Si e d i e LinkedIntList so da s s ei n e in n e r e Kl as s e ListNode ve r w e n d e t wi r d . 69 Hi er a r c h i e d er Na m en sr ä u m e § Gr undr e g e l : k e i ne D o ppe l de k l a r a t i o n ( für Va r i a b l e / M e t h o d e n / A t t r i b u t e . . . ) § Zi e l : L e s b a r e r , v e r s t ä n d l i c h e r C o d e § Mü s s e n d i e S i c h t b a r k e i t e i n s c h r ä n k e n § Vi e r E b e n e n ( m i t V e r e i n f a c h u n g e n ) 1. Met h o d e n 2. Kl a sse n 3. Ge s c h a c h t e l t e K l a s s e n ( i n n e r / ou t e r c l a s s ) 4. Pa c k a g e s 70 Zu s a m m e n f a s s u n g § Wi c h t i g is t da s s Ih r e Pr o gr a m m e ni c h t au f be l i e bi g e At t r i b u t e zu g r e i f e n § z.B . so l l LinkedIntList de r ei n z i g e Kl i e n t se i n § private sc h ü t z t vo r une r w üns c h t e n Zu g r i f f e n § At t r i b u t front so l l t e pr i v a t e s e i n § Wi r ar b e i t e n we i t e r h i n mi t de r de f a ul t P a c k a g e § De f aul t Si c h t b a r k e i t ( in n e r h a lb de r P ac k ag e ) § Vi e l l e i ch t Än d e r u n g in d e r ( fe r n e n ) Z u k u n f t 71 Üb e r s i c h t § 6. 5. 1 Si c h tb ar k e i t (P a c k a g e s ) § 6. 5. 2 Ge s c ha c h t e l t e Kl as s e n § 6. 5. 3 Sp e z i e l l e Kl as s e : enum 72 6. 5. 3 Sp e zi e l l e Kla s s e : enum § Ma n c h m a l s o l l e i n e V a r i a b l e / e i n A a r i b u t n u r e i n e n W e r t a u s ei n er en d l i c h en M en g e a n n eh men ??? day; // Montag, Dienstag, Mittwoch, Donnerstag, Freitag § Bei z w ei mö g l i c h en W er t en h a b en wi r u n s mi t boolean be ho l f e n 6 Ge s c h l e c h t (1 : m ä nnl i c h , 0 : we i b l i c h ) boolean § Wa s w e n n e s m e h r O p b o n e n g i b t ? § ??? geschlecht // männlich , weiblich , divers 73 enum : A u f z äh l u n g public enum Geschlecht { MÄNNLICH, WEIBLICH, DIVERS } § Ko n v e n t i o n : m ö g l i c h e W e r t e i n G R O S S B U C H S T A B E N § ... s i n d ja K o n s t a n t e n § Kl as s e f ü r Person Ex e m p l a r e : public class Person { String name; int id; geschlecht Geschlecht; // aus MÄNNLICH, WEIBLICH, DIVERS ... } 74 enum : A u f z äh l u n g public enum Day { MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG } § Und da nn i m Pr o gr a m m Day day; day = Day.MONTAG; if (day == Day.FREITAG) { party(); } 75 enum : A u f z äh l u n g public enum Day { MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG } § Und da nn i m Pr o gr a m m Day day; day = Day.MONTAG; § K e i n e A r i t h m et i k e r l a u b t ! day = Day.MONTAG + 1; day = day++; 76 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 7. 0 Ve r e r b u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 - 2021 Al l r i g h t s r e s e r v e d . Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 2 1 . Al l r i g h t s r e s e r v e d . 78 So Xw ar e En t w i c k l u n g § Pr o gr a m m i e r e n is t an sp r u c h s v o l l § Es is t le ic h t Fe h l e r zu ma c h e n § LinkedIntList Au f g a b e n § Wi r wü r d en ge r n e So f tw ar e wi ed er v er w en d en § Au f fr ü h e r e n Lö s u n g en auf baue n § Be s s e r e ( sc h n e l l e r e ) Im p l e m e n t a t i o n e n § Er w e i t e r t e Fu n k t i o n a l i t ä t § … 79 7. 1 Ei n l e i t u n g 80 LinkedIntList § Di e K l a sse LinkedIntList füg t ne ue n K no t e ns a m E nde de r L i s t e hi nz u void add(int v) { … } 81 fr o n t = da t a ne x t - 4 da t a ne x t 8 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 fr o n t = da t a ne x t - 4 da t a ne x t 38 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 12 el em en t 3 LinkedIntList § add mu s s L i s t e d u r c h l a u f en u m d a s E n d e z u er r ei c h en while ( current.next != null ) { current = current.next ; } § Fü r k u r z e L i s t e n (1 0 … 1 0 0 E l e m e n t e ) i s t d a s k e i n P r ob l e m . Fü r l a n g e L i s t e n (1 0 0 '0 0 0 '0 0 0 … E l e m e n t e ) a b e r s c h on 82 fr o n t = da t a ne x t - 4 da t a ne x t 38 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 12 el em en t 3 Fast LinkedIntList § Wi r b r a u c h e n e i n e V a r i a n t e v o n LinkedIntList di e e i ne n Ve r w e i s a u f d a s l e t z t e E l e m e n t e n t h ä l t class FastLinkedIntList { private ListNode front; private ListNode tail; … } 83 fr o n t ta i l Fa s t L i n k e d I n t L i s t da t a ne x t - 4 da t a ne x t 38 da t a ne x t 22 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 12 el em en t 3 LinkedIntList à Fast LinkedIntList § Wi e k ö n n e n w i r d i e K l a s s e Fast LinkedIntList de fi ni e r e n und da be i m ö gl i c hs t v i e l v o n LinkedIntList übe r ne hm e n? 84 LinkedIntList § Di e K l a sse LinkedIntList er l a u b t ( n u r ) S p ei c h er n ei n es int We r t s i n e i n e m K n o t e n void add( int v) { … } § Wa s w e n n w i r double We r t e s p e i c h e r n w o l l e n ? § L i s t e b e s t e h t a u s K et t e v o n ListNode Ob j e k t e n – di e s e mü s s en ( a u c h ) g eä n d er t w er d en fr o n t = da t a ne x t 222.3 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 61.3 da t a ne x t - 43.93 Linked Double List § Wi r b r a u c h e n e i n e V a r i a n t e v o n LinkedIntList di e da s Sp e i c h e r n e i n e s double We r t s e r l a u b t void add( double v) { … } § Kn o t e n m i t double We r t e n – s o n s t k e i n e Ä n d e r u n g class DoubleListNode { double data; DoubleListNode next; } fr o n t = da t a ne x t 222.3 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 61.3 da t a ne x t - 43.93 Li n k e dD o u bl e Li s t Do u b l e L i s t N o d e Do u b l e L i s t N o d e Do u b l e L i s t N o d e LinkedIntList à Linked Double List § Wi e k ö n n e n w i r e i n e K l a s s e Linked Double List de fi ni e r e n und da be i m ö gl i c hs t v i e l v o n LinkedIntList übe r ne hm e n? § Wi e k ö n n e n w i r e i n e K l a s s e xxxxxx ListNode de fi ni e r e n ( s o da s s Linked xxxxxx List mi t d i es en K n o t en a r b ei t en k a n n ) ? 87 So f t w ar e En t w i c k l u n g § Fü r ei n f a c h e Fä l l e ( wi e hi e r au f d e n Sl i d e s ge z e i g t …) sc h e i n t « Co p y & P a s t e » ni c h t so sc h l i m m § Di e K l as s e n si n d ni c h t se h r gr o s s , we n i g e Kl i e n t e n § Ri c h ti g e So f tw ar e Pr o j e k t e ha be n meh r / gr ö s s e r e Kl as s e n § Wi r wü r d en ge r n e So f tw ar e wi ed er v er w en d en § Au f fr ü h e r e n Lö s u n g en auf baue n § Vo n LinkedIntList zu Fast LinkedIntList § Vo n Linked Int List zu Linked Double List , ... 88 Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 2 1 . Al l r i g h t s r e s e r v e d . 89 7. 2 Ne u e K l a s s e n au s ex i s t i e r e n d e n Kla s s e n 90 Ei n Be i s p i e l – z ur Illus t r a t io n de r P r o ble m e § Ge g e be n: e i n S pi t a l § Pe r s o n e n i m S p i t a l § Mi t a r b e i t e r / i n n e n § Pa t i e n t / i n n e n § Ex t e r ne ( H andw e r k e r , T e c hni k e r , … ) § Ni c h t unbe di ng t s o f o r t z um M a na g e m e n t e i ne s he ut i g e n mo d e r n e n S p i t a l s g e e i g n e t . . . 91 Ei n Be i s p i e l – z ur Illus t r a t io n de r P r o ble m e § Ge g e be n: e i n S pi t a l § Pe r s o n e n i m S p i t a l § Mi t a r b e i t e n d e ( A n g e s t e l l t e ) § Pa t i e n t / i n n e n § Ex t e r ne ( H a ndw e r k e r , T e c hni k e r , … ) § Uns e r e Auf g a be : M a na g e m e n t ( E i ns a t z , B e z a hl ung , … ) de r Mi t a r b e i t e n d e n § Är z t e / i n n e n § Fa c h a n g e s t e l l t e ( Fa G e ) 92 § OP - Ra u m F a c h k r ä f t e § Ad m i n i s tr a t or e n / i n n e n Sp i t al Be i s p i e l § Ge m e i ns a m e Re g e l n für al l e An g e s t e l l t e n : Ar b e i t s z e i t , Ur l a ub , So z i al l e i s tu n g e n , Fo r t b i l d u n g , Pf l i c h t e n h e f t , … § Al l e An g e s t e l l t e n be s uc he n ei n e ge m e i n s a m e Or i e n t i e r u n g v e r a n s t a l - tu n g u m d i e fü r al l e gü l t i g e n Re g e l n de s Sp i t a l s zu erh a l t en § Ve r h a l t e n im No t f a l l , pr o f e s s i o ne l l e s Ve r h a l t e n , Lo h n f o rt z a h l u n g im Kr a n k h e i t s f a l l , … § Al l e An g e s t e l l t e n erh a l t en das 2 0 - se i t i g e Ha n d b u c h , d a s d ie Ar b e i ts v e r h ä l tn i s s e im Sp i t a l re g e l t § Ab e r … 93 § Ab e r je d e Ab t e i l u n g ha t no c h ih r e ei g en en Re g e l n § An g e s t e l l t e erh a l t en ei n we i t e r e s Ha n d b u c h ( mi t 1 - 5 S e i t e n ) fü r di e Re g e l n , d ie fü r ih r e Ab t e i l u n g ge l t e n 94 § Das Zu s a t z h a n d b u c h en t h ä l t we i t e r e Re g e l n und ände r t od e r er w ei t ert Re g e l n aus de m ( al l g e m e i ne n ) Sp i t a l r e g e l w e r k . An g es t el l t en Ha n d b u c h 20 Se i t e n Ar z t / Är z t i n Ha n d b u c h 25 S e i t e n Fa G e ( Pf l e g e ) Ha n d b u c h 22 Se i t e n Ad m i n s t r a t o r /i n Ha n d b u c h 21 Se i t e n OP - Fa c h k r a f t Ha n d b u c h 25 Se i t e n Or g a n i sa ti o n de r Re g e l n § Wa r u m wo l l e n wi r ni c h t je ei n Han d b u c h für Är z t e / in n e n (25 Se i t e n ) , ei n es für Fa G e (22 S e i t e n ), ei n es für Ad m i n i s t r a t or e n (21 S e i t e n ) u n d ei n es für OP - Fa c h k r ä f t e (25 S e i t e n ) er s t el l en ? § Vo r t e i l e we n n wi r di e Han d b ü c h e r au f t e i l e n : § An p a s s u n g e n : Nu r ei n e St e l l e mu s s ge ä n d e r t we r d e n , we n n si c h di e al l g e m e i ne n Re g e l n ände r n . § Lo k a l i t ä t s p ri n z i p : S ch n e l l e r Üb e r b l i c k übe r di e Re g e l n di e nur fü r Är z t e / in n e n ( od e r ande r e Gr u p p e n ) ge l t e n . 97 Wa s wir au s de m Be i s p i e l mi t n e h me n § Al l g e m e i n e Re g e l n si n d si n n v o l l (d a s 20 - se i t i g e al l g e m e i n e Han d b u c h ) § Ei n z e l n e Gr uppe n br a uc he n ev t l . Zu sa t z r e g e l n di e nur für di e s e Ab t e i l u n g ge l t e n § Gr uppe nr e g e l n ha be n Vo r r a n g vo r de n al l g e m e i n e n Re g e l n § Gr u p p e n r e g e l n kö n n e n ev tl . al l g e m e i ne Re g e l n aus s e r Kr a f t se t z e n . 98 Re g e l n fü r Ang e s t e llt e § Hi e r is t ei n Sa t z vo n Re g e l n di e fü r An g e s t e l l t e de s Kr a n k e n h a u s e s ge l t e n : § Di e Ar b e i t s z e i t be t r äg t 42 St unde n pr o Wo c h e § An g e s t e l l t e er h a l t en ei n en Ba s i s l o h n vo n 8 0 ’ 0 0 0 sF r / Jahr , bi s auf O P - Fa c h k r ä f t e di e 1 0 ’ 0 0 0 sF r / Jahr ex t r a er h a l t en , u n d Ad m i n i s t r a t o r e n / - in n e n , d i e 5’ 000 sF r / Jahr ex t r a er h a l t en . § An g e s t e l l t e habe n 4 Wo c h e n Ur l a u b pr o Jahr , bi s auf Är z t e / in n e n , d i e ei n e Wo c h e ex t r a ( a l s o in s g e s a m t 5 Wo c h e n ) be k o m m e n § Um ei n en Ur l a u b zu be an t r ag e n so l l t e n An g e s t e l l t e ei n gr ü n e s Fo r m u l a r ve r w e n d e n , bi s auf Är z t e / in n e n , d i e ei n ge l b e s Fo r m u l a r br auc he n . 99 Au f g a b e n und Fä h i g k e i t e n de r An g e s t e l l t e n § Je d e Ar t v on An g e s t e l l t e n sp i e l t im Sp i t a l b e t r i e b ei n e be s t i m m t e Ro l l e § Är z t e / in n e n be hande l n Pa t i e n t e n ( un t e r s uc he n und st e l l e n ei n e Di a g n o s e ) § Ad m i n i s t r a t o r e n ve r a r b e i t e n Re c h n u n g e n § Fa G e pf l e g e n Pa t i e n t e n auf ei n er St a t i o n ( mü s s e n al s o ei n er St a t i o n zu g e t e ilt se i n , fü r ei n en be s t i m m t e n Ze i t r a u m ) § OP - Fa c h k r ä f t e or g a n i s i e r e n und un t e r s t üt z e n Ak t i v i t ä t e n im OP - Saal § Wi r wo l l e n je t zt ei n Sy s t e m er s t el l en , d a s d ie Sp i t a l d i r e k t i o n be i de r Ei ns a t z pl anung , Re c h n u n g s s t e l l u n g et c un t e r s t üt z t § Für je d e /r An g e s t e l l t e /n gi b t es ei n Ex e m p l a r ei n er Kl a s s e mi t de r wi r pl ane n / ve r w a l t e n kö n n e n 100 Re g e l n fü r Ang e s t e llt e § Hi e r is t ei n Sa t z vo n Re g e l n di e fü r An g e s t e l l t e de s Kr a n k e n h a u s e s ge l t e n : § Di e Ar b e i t s z e i t be t r äg t 42 St unde n pr o Wo c h e § An g e s t e l l t e er h a l t en ei n en Ba s i s l o h n vo n 8 0 ’ 0 0 0 sF r / Jahr , bi s auf O P - Fa c h k r ä f t e di e 1 0 ’ 0 0 0 sF r / Jahr ex t r a er h a l t en , u n d Ad m i n i s t r a t o r e n / - in n e n , d i e 5’ 000 sF r / Jahr ex t r a er h a l t en . § An g e s t e l l t e habe n 4 Wo c h e n Ur l a u b pr o Jahr , bi s auf Är z t e / in n e n , d i e ei n e Wo c h e ex t r a ( a l s o in s g e s a m t 5 Wo c h e n ) be k o m m e n § Um ei n en Ur l a u b zu be an t r ag e n so l l t e n An g e s t e l l t e ei n gr ü n e s Fo r m u l a r ve r w e n d e n , bi s auf Är z t e / in n e n , d i e ei n ge l b e s Fo r m u l a r br auc he n . 101 Angestellte : Kla s s e fü r Ang e s t e llt e // A class to represent employees in general (20 - page manual). public class Angestellte { public int getHours () { return 42; // works 42 hours / week } public double getSalary () { return 80000.0; // sFr 80'000.00 / year } public int getVacationDays () { return 20; // 4 weeks paid vacation, not including weekends } public String getVacationForm () { return \" green\"; // use the green form } } 102 § Er s t e l l e n Si e ei n e Kl as s e für Fa G e § Al l e ge m e i n s a m e n Re g e l n ge l t e n oh n e Ei ns c hr änk ung § Fa c h a n g e s t e l l t e ( Fa G e ) ze i c h n e n si c h dadur c h aus , das s si e ( fü r ei n en Ta g ) a u f ei n er St a t i o n ar be i t e n 103 § Er s t e l l e n Si e ei n e Kl as s e für Fa G e § Al l e ge m e i n s a m e n Re g e l n ge l t e n oh n e Ei ns c hr änk ung § Fa c h a n g e s t e l l t e ( Fa G e ) ze i c h n e n si c h dadur c h aus , das s si e ( fü r ei n en Ta g ) a u f ei n er St a t i o n ar be i t e n § Sp e z i e l l e s Ve r h a l t e n vo n Fa G e § workAtStation ( int station ) // arbeitet auf Station 104 Re d u n d a n t e FaGe Kl a s s e // A redundant class to represent FaGe (nurses), 22 page manual public class FaGe { public int getHours () { return 42; // works 42 hours / week } public double getSalary () { return 80000.0; // sFr 80'000.00 / year } public int getVacationDays () { return 20; // 4 weeks paid vacation, not including weekends } public String getVacationForm () { return \"green\"; // use the green form } public void workAtStation(int station) { System.out.println ( \" Working at station: \" + station); } } 105 Vi e l ( re d u n d a n te r ) C o de § workAtStation is t da s ei n z i g e Ve r h a l t e n da s FaGe vo n an d e r e n An g e s t e l l t e n un t e r s c he i de t § Di e Str u k tu r de s Pr o gr a m m s so l l t e di e Ve r h ä l t n i s s e in d e r re a l e n We l t wi d er s p i eg el n § Wa s wi r wi r k l i c h ge r n e sag e n wo l l e n is t § Di e Kl a sse fü r FaGe is t wi e di e Kl a sse fü r al l e Angestellte n und en t h ä l t no c h ei n e we i t e r e Met h o d e (d a si e auf ei n er St a t i o n ar be i t e n ) 106 Be z i e h u n g e n und Ve r e r b u n g § Ve r e r b u n g (« in h e r it a n c e » ) er l a u b t uns , ei n e Kl as s e al s Er w e i t e r u n g ei n er an d e r e n Kl as s e au s z u d r ü c k e n § Gr undl a g e de r Ve r e r b u n g si n d di e Ve r h ä l t n i s s e de r ve r s c h i e d e n e n Ar t e n vo n An g e s t e l l t e n zu e i n a n d e r § Ei n/ e Ar z t / Är z ti n is t ei n /e An g e s t e l l t e /r § Je d e OP - Fa c h k r a f t is t ei n / e Fa G e § Di e is t - ei n (« is a » ) Be z i eh u n g hä l t fe s t : di e s e Gr uppe v o n An g e s t e l l t e n is t ei n Sp e z i al f al l ei n er an d e r e n Gr uppe 107 Be z i e h u n g e n und Ve r e r b u n g § Di e is t - ei n (« is a ») Be z i eh u n g hä l t fe s t , wa n n ei n e Gr uppe vo n An g e s t e l l t e n al s ei n Sp e z i al f al l ei n er an d e r e n Gr uppe gi l t § Hi e r ar c h i e § Ve r e r b u n g s h i e r a r c h i e (« In h e r it a n c e Hi e ra c h y ») : E i n e Me n g e vo n K l a s s e n – ve r b u n d e n dur c h ei n e is t - ei n Be z i eh u n g – di e ge m e i n s a m e n Co d e ve r w e n d e n kö n n e n . 108 Ve r e r b u n g s h i e r a r c h i e 111 An g e s t e l l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP - Fa c h k r a f t is t - ei n Be z i e h u n g ( e n ) § Es g i b t v i e l e S i t u a t i o n e n , i n d e n e n e i n e « i s t - ei n » Be z i eh u n g ex i s i t i e r t § Ei n Quadr a t i s t e i n R e c h t e c k § Ei n R e c h t e c k i s t e i n P ar al l e l o g r am m § Ei n P ar al l e l o g r am m i s t e i n V i e r e c k 112 « is t - ei n » à Ve r e r b u n g s h i e r a r c h i e 113 Vi e r e c k ko n v e x e s Vi e r e c k übe r s c hl a g e - ne s Vi e r e c k ko n k a v e s Vi e r e c k Ta n g e n t e n v i e r - ec k Tr a p e z Dr a c h e n v i e r - ec k Pa r a l l e l o - gr a m m Se h n e n vi e r e c k « is t - ei n » à Ve r e r b u n g s h i e r a r c h i e 114 Vi e r e c k übe r s c hl a g e - ne s Vi e r e c k Fi g u r e n au s Wi k i p e d i a Ve r e r b u n g § Ve r e r b u n g er l a u b t es ne ue Kl as s e n au s ex i s t i e re n d e n Kl as s e n zu bi l de n so da s s di e ne ue Kl as s e di e A t t r i but e bz w da s Ve r h a l t e n de r al t e n Kl as s e übe r ni m m t § Er l aub t es ve r w a n d t e Kl a sse n in Gr u p p e n anz uo r dne n § Er l aub t das s zw e i od e r me h r Kl a sse n C o d e te i l e n § Ei n e Kl as s e ka n n ei n e an d e r e er w ei t er n (« e xt en d» ) und Da t e n und Zu s t an d so w i e Ve r h a l t e n ab so r b i e r e n 115 Ve r e r b u n g s h i e r a r c h i e § Kl as s e er w ei t er t ei n e an d e r e Kl as s e § «s up e r c l a s s » (« Ob e r k l a s s e ») : Kl a sse di e er w ei t ert wi r d . § « su b c la ss » ( « Un t e r k l a s s e ») : Kl a sse di e di e Ob e r k l a s s e er w ei t ert und ih r e Ei g e ns c ha f t e n / ih r Ve r h a l t e n er b t . § Su b c l a ss erh ä l t Ko p i e je d e s At t r i b u t e s / je d e r Met h o d e de r Su p e r c l a ss 116 An g es t el l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r / in OP - Fa c h k r a f t Inhe r it a nc e S y n t a x public class na m e extends su p e r c la ss { § Be is p ie l : public class FaGe extends Angestellte { ... } Di e Er w e i t e r u n g vo n Angestellte be w i r k t für FaGe Ob j e k t e : § Met h o d e n getHours () , getSalary () , getVacationDays () , u n d getVacationForm () ex i s t i e r e n aut o m a t i s c h § Kö n n e n al s Angestellte Ob j e kt (e x em p l a r) v o n Kl i e n t e n be hande l t we r d e n (D e t a i l s sp ä t e r ) 119120 Angestellte : Kla s s e fü r Ang e s t e llt e // A class to represent employees in general (20 - page manual). public class Angestellte { public int getHours () { return 42; // works 42 hours / week } public double getSalary () { return 80000.0; // sFr 80'000.00 / year } public int getVacationDays () { return 20; // 4 weeks paid vacation, not including weekends } public String getVacationForm () { return \" green\"; // use the green form } } 121 Ve r b e s s e r t e FaGe Kla s s e // A class to represent FaGe . public class FaGe extends Angestellte { public void workAtStation ( int station) { System.out.println ( \" Working at station: \" + station); } } § Br a u c h en nur di e Te i l e di e sp e z i f i sc h für ei n e Gr uppe si n d zu sc h r e i b e n § FaGe er b t Met h o d e n getHours () , getSalary () , getVacationDays () , und getVacationForm () vo n Angestellte . § FaGe fü g t di e workAtStation () Met h o d e hi nz u . 122 Ei n e Kla s s e fü r Ar z t / Är z t in § Sa m m e ln wi r di e Re g e l n di e fü r Är z t e und Är z t i n n e n ge l te n : § Är z t e / in n e n erh a l t en ei n e Wo c h e me h r Ur l a u b ( in s g e s a m t 5) § Är z t e / in n e n ve r w e n d e n ei n ge l b e s Fo r m u l a r we n n si e Ur l a u b be a n t r a g e n § Är z t e / in n e n ha be n be s o nde r e Fä h i g k e i t e n : si e kö n n e n Pa t i e n t e n be ha nde l n § Pr ob l e m : Wi r wo l l e n d as s Är z t e / in n e n vo n Angestellte d as me i s t e Ve r h a l t e n erb en ab e r wi r wo l l e n Te i l e dur c h ne ue s Ve r h a l t e n er s e t z en (u n d ne ue s Ve r h a l t e n hi nz uf üg e n ) 123 Kla s s e Arzt § Di e se Kl as s e so l l au f d e r Kl as s e Angestellte au f b au e n § Er w e i t e r u n g al l e i n e is t ab e r ni c h t ge n u g § An d e r e s Fo r m u l a r fü r Ur l a u b , me h r Ur l a u b public class Arzt extends Angestellte { } 124 Üb e r s c h r e i b e n vo n Me t h od en § Üb e r s c hr e i b e n (« ov e r r id e » ): De f i n i e r e n ei n er ne ue n Ve r s i o n ei n er Me t h o d e in ei n er Su b c l ass d i e d i e V e r si o n di e s e r Me t h o d e au s de r S upe r c l a s s er s e t z t § Ke i n e be s o nde r e Sy n t a x erf o r d erl i c h . Ei n f ac h ei n e ne ue Ve r s i o n d e r Met h o d e sc h r e i b e n . public class Arzt extends Angestellte { // overrides getVacationForm method in Angestellte class public String getVacationForm () { return \"yellow\"; } ... } 125 An n ot a ti on e n – ni c h t no t w e ndi g abe r o f t nüt z l i c h @Override public int gethours() { //ein Fehler? Üb e r s c h r e i b e n vo n Me t h od en § Üb e r s c hr e i b e n (« ov e r r id e » ): De f i n i e r e n ei n er ne ue n Ve r s i o n ei n er Me t h o d e in ei n er Su b c l ass d i e d i e V e r si o n di e s e r Me t h o d e au s de r S upe r c l a s s er s e t z t . § Ke i n e be s o nde r e Sy n t a x erf o r d erl i c h . Ei n f ac h ei n e ne ue Ve r s i o n d e r Met h o d e sc h r e i b e n . A n n o t a t i o n @ O v e r r i d e dr üc k t Ab s i c h t aus . public class Arzt extends Angestellte { @Override // overrides method in Angestellte class public String getVacationForm () { return \"yellow\"; } ... } 126 Auf g a be : Ve r v o l l s t ä n d i g e n Si e Kla s s e Arzt § ( Bes o n d er e ) Ei g e n sc h a f t e n de s Ve r h a l t e n s für Arzt § 5 Wo c h e n Ur l a u b § Ge l b e s Fo r m b l a t t fü r Ur l a u bs a n t r a g § Be h a n d e lt Pa t i e n t e n ( Un t e r s u c h u n g , D ia gn o s e , Th e r a p i e ) § treatPatient () § So n s t si n d Är z t e / in n e n Angestellte 127 Arzt Kla s s e // A class to represent medical personel , 25 page manual public class Arzt extends Angestellte { // overrides getVacationForm from Angestellte class public String getVacationForm () { return \"yellow\"; } // overrides getVacationDays from Angestellte class public int getVacationDays () { return 25; // 5 weeks vacation } public void treatPatient () { System.out.println (\"I'll take care of you!\"); } } 128 § Su p e r c l ass: A n g e s t e l l t e § Su b c l ass: F aG e § Su p e r c l ass: A n g e s t e l l t e § Su b c l ass: A r z t § Fr a g e : W e r k a n n / h a t m e h r ? (m e h r M e t h od e n , m e h r A t t r i b u t e , m e h r s p e z i f i s c h e M et h o d e n ) ? § Su p e r c l a ss (O b e r k l a sse ) § Su b c l a ss (U n t e r k l a sse ) 130 Po l l 132 § Er s t e l l e n Si e ei n e Kl as s e für Ad m i n i s t r a t or e n § Al l e ge m e i n s a m e n Re g e l n ge l t e n oh n e Ei ns c hr änk ung bi s auf § Ad m i n i s tr a t or e n ve r d i e n e n sF r 5' 000 e x t r a / Ja h r § Ad m i n i s tr a t or e n ze i c h n e n si c h dadur c h aus , das s si e Re c h n u n g e n ve r a r b e i t e n ( Rg . sc h i c k e n , Za h l u n g s e i n g a n g ko n t r o l l i e r e n , … ) 134 § Wi r br auc he n al s o ei n e Met h o d e fü r di e s e s Ve r h a l t e n § Ne n n e n wi r si e processBill () Ei n e Kla s s e fü r Adm inis t r a t o r e n / - inne n // A class to represent administrators (21 - page manual). public class Administrator extends Angestellte { // overrides getSalary from Angestellte public double getSalary () { return 85000.0; // sFr 85'000.00 / year } public void processBill () { System.out.println (\"Pay now! \"); } } 135 Eb e n e n in de r Inhe r it a nc e Hi er a r c h i e § Di e I n h e r i t a n c e Hi e r ar c h i e er l a u b t ve r s c h i e d e n e Eb e n e n § Be is p ie l : Ei ne OP - Fa c h k r a f t is t ei n /e Fa G e abe r ve r d i e n t me h r (9 0 ' 0 0 0 sF r / Ja h r ) – und ka n n auc h ei n en OP Sa a l ma n a g e n . public class OPFachkraft extends FaGe { ... } § Üb u n g : Ve r v o l l s t ä n d i g e n Si e d i e OPFachkraft Kl a sse § manageOP () be s o nde r e s Ve r h a l t e n 136 OPFachkraft Kla s s e // A class to represent OPFachkraft , 25 page manual public class OPFachkraft extends FaGe { // overrides getSalary from Angestellte public double getSalary () { return 90000.0; // sFr 90'000.00 / year } public void manageOP () { System.out.println (\"I control the tools!\"); } } 139 Mot i v a t i on § Wi r wo l l e n we i t e r am Sp i t al m an ag e m e n t Sy s t e m ar b e i t e n . § St e l l e n wi r uns vo r da s s es Än d e r u n g e n gi b t , d i e al l e Sp i t al an g e s t e l l t e n be t r e ff e n . § Be is p ie l : Je d e /r erh ä l t ei n um sF r 10’ 000 hö he r e s Ge h a l t um di e We r t s c h ä t z u n g aus z udr üc k e n . D a s Ba s is g e h a lt is t nun sF r 90’ 000/ Ja h r . § OP - Fa c h k r ä f t e ve r d i e n e n nun sF r 100’ 000/ Ja h r . § Ad m i n i s tr a t or e n ve r d i e n e n nun sF r 95’ 000/ Ja h r . § Di e se Än d e r u n g e n er z wi n g en da s s wi r de n C o de übe r a r be i t e n 141 Ve r ä n d e r u n g e n de r S upe r c la s s // A class to represent employees in general (20 - page manual). public class Angestellte { public int getHours () { return 42; // works 42 hours / week } public double getSalary () { return 90000.0; // sFr 90'000.00 / year } ... } § Is t da s ge n u g (a n Än d e r u n g e n )? 142 § Di e S u b c l a sse s v o n Angestellte si n d no c h ni c h t ri ch t i g . § Di e s e Kl a sse n ha t t e n getSalary () übe r s c hr i e be n um ande r e We r t e zu r ü c k zu g e b e n 143 (K ) ei n e Lö sung public class OPFachkraft extends FaGe { public double getSalary () { return 100000.0; // sFr 100'000.00 / year } ... } public class Administrator extends Angestellte { public double getSalary () { return 95000.0; // sFr 95'000.00 / year } ... } § Pr ob l e m : d i e Lö h n e de r S ubc l as s e s bas i e r e n auf de m Lo h n fü r Angestellte abe r de r C o de i n getSalary () ma c h t das ni c h t kl a r . 144 Auf r uf vo n übe r s c hr ie be ne n Me t h od en § Su b c l asse s kö n n e n übe r s c hr i e be ne Me t h o d e n mi t t el s de r Re f e r e n z v a r i a b l e n super au f r u f e n . super. me th o d ( par am e t e r s ) § Be is p ie l : public class Administrator extends Angestellte { public double getSalary () { return super .getSalary () + 5000.0; } ... } 145 Üb u n g § Ve r ä n d e r n Si e d i e Kl asse n Arzt und OPFachkraft so da s s si e super ge b r a u c h e n . 146 Ve r b e s s e r t e Arzt Su b cl a s s public class Arzt extends Angestellte { public String getVacationForm () { return \"yellow\"; } public int getVacationDays () { return super .getVacationDays () + 5; } public void treatPatient () { System.out.println (\"I'll take care of you!\"); } } 147 Mi t Arzt Su b cl a s s ar be i t e n public class Arzt extends Angestellte { … public int getVacationDays () { return super .getVacationDays () + 5; } } // somewhere … void printInfo ( Arzt y) { System.out.println ( y.getVacationDays ()); } 148149 Ve r b e s s e r t e OPFachkraft Su b cl a s s public class OPFachkraft extends FaGe { public double getSalary () { return super.getSalary () + 10000.0; } public void manageOP () { System.out.println (\"I control the tools!\"); } } § super be z i e h t si c h hi e r auf FaGe – da di e s e Kl a sse abe r getSalary () ni c h t übe r s c hr e i b t wi r d di e Met h o d e aus de r Kl a sse Angestellte aus g e f ühr t . 151152 Ve r b e s s e r t e Administrator Su b cl a s s public class Administrator extends Angestellte { public double getSalary () { return super.getSalary () + 5000.0; } public void processBill () { System.out.println (\"Pay now! \"); } } 155 Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 2 1 . Al l r i g h t s r e s e r v e d . 156 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 157 Ve r e r b u n g und Ko n s t r u k t o r e n § Wi r wo l l e n An g e s t e l l t e n ( ni c h t ab e r Fa G e ) meh r Ur l a ub s t a g e ge b e n je lä n g e r si e in di e s e m Sp i t al ge a r b e i t e t ha be n § Fü r je d e s Ja h r gi b t es 2 zu s ä t z l i c h e Fe r i e n t a g e § We n n ei n Angestelle Ob j e kt ko n s t r u i e r t wi r d , dann übe r g e be n wi r di e An z a h l Ja h r e al s Pa r a m e t e r fü r de n Ko n s t r u k t o r § Wi r mü s s e n di e Angestellte Kl a sse ve r ä n d e r n und ne ue At t r i b u t e ( Zu s t a n d s v a r i a b l e n ) u n d ne ue s Ve r h a l t e n hi nz uf üg e n § Üb u n g : Ma c h e n S i e d i e nö t i g e n Än d e r u n g e n für Angestellte 165 Ve r ä n d e r t e Kla s s e Angestellte public class Angestellte { private int years; //Prevent client access public Angestellte ( int initialYears ) { years = initialYears ; } public int getVacationDays () { return 20 + 2 * years ; } public int getHours () { return 42; } public double getSalary () { return 90000.0; } public String getVacationForm () { return \"green\"; } } // Angestellte 166 Ei n P r o ble m mi t Ko n s t r u k t o r e n § Je tz t wi r d di e er w ei t er t e Kl as s e Arzt ni c h t vo m Co mp i l er ak z e p ti e r t . § Da e s ei n en Ko n s t r u k t o r in d e r Kl as s e für Angestellte gi b t wi r d di e S ubc l a s s ( Arzt ) ni c h t übe r s e t z t . Di e Fe h l e r m e l d u n g : Arzt.java:2: cannot find symbol symbol : constructor Angestellte () location: class Angestellte public class Arzt extends Angestellte { ^ 167 K o n s t r u kt o r e n – Zur E r i nne r ung § Fü r j e d e K l a s s e g i b t e s ( v o m S y s t e m ) d e n ( p a r a m e t e r l o s e n ) de f au l t co n s t r u c t o r class Foo() { int x; Foo y; } § We n n e i n e K l a s s e ( m i n d e s t e n s ) e i n e n K o n s t r u k t o r d e f i n i e r t s o g i b t e s ke i n e n de f aul t c o ns t r uc t o r class Foo() { … Foo(int a) { x = a; } § Ei n par am e t e r l o s e r K o ns t r uk t o r m us s dann e x pl i z i t e r s t e l l t w e r de n 169 Foo () { x = 0; y = null; } Foo () { x = 0; y = null; } Ei n P r o ble m mi t Ko n s t r u k t o r e n § Ei n e ku r z e Er k l ä r u n g : We n n wi r ei n en Ko n s t r u k t o r ( mi t Pa r a m e t e r n ) i n d e r Su p e r cl a s s de fi ni e r e n da nn mü s s en wi r au c h Ko n s t r u k t o r e n für di e Su b cl a s s ( e s ) lie f e r n . § D. h . d a es ei n en Ko n s t r u k t o r für Angestellte gi b t br a uc he n wi r au c h ei n en Ko n s t r u k t o r für Arzt § Ei n e la n g e Er k l ä r u n g : ( d i e nä c hs t e n Sl i d e s) 170 Ge na ue r e Er k l ä r u n g § Ko n s t r u k t o r e n we r d e n ni c h t ge e r b t . § Ei ne S ubc l as s erb t ni c h t de n Angestellte ( int ) Ko n s t r u k t o r . § Zw e i Fo l g e n : 1. Br a u c h e n wi r ei n en Ko n s t r u k t o r so m u ss d i e Su b c l a ss ih n en t h a l t en § So n s t gi b t es nur de n par am e t e r l o s e n De f aul t k o ns t r uk t o r 2. Su b c l a sse n er w ei t ern di e S upe r c l as s – we n n de r S upe r c l as s Ko n s t r u k t o r et w a s fü r Su p e r c l a ss Ex e m pl ar e fe s t l e g e n wi l l s o so l l t e das auc h fü r Su b c l a ss Ex e m pl ar e ge l t e n 171 Ge na ue r e Er k l ä r u n g § Ei n Ko n s t r u k t o r de r S ubc l a s s m us s ei n en Ko n s t r u k t o r de r Su p e r c l ass au f r u f e n kö n n e n § Di e S ubc l as s « we i s s » ni c h t wa s d e r S u p e r c l a s s Ko n s t r u k t o r wi l l § Wi r wo l l e n ( ev tl ) d i e Su p er c l a s s ände r n oh n e di e S ubc l as s ände r n zu mü s s e n § Bei s p i el : § Su p e r c l a ss fü g t At t r i b u t ei n und di e s m us s mi t ei n em We r t in it ia lis ie r t we r d e n § Al l e Su p e r c l a ss Ex e m pl ar e si n d be t r o f f e n , auc h Su b c l a ss Ex e m pl ar e § S u b c l as s Ko n s t r u k t o r mu s s S u p e r c l a s s Ko n s t r u k t o r in v o lvie r e n 172173174 Ge na ue r e Er k l ä r u n g § Ei n e n Ko n s t r u k t o r de r S upe r c l a s s kö n n e n wi r ( in ei n em Ko n s t r u k t o r de r Su b k l asse !) ex p l i z i t au f r u f e n : super ( par am e t er s ); § Bei s p i el public Subclass( int v) { // constructor in Subclass super (v); // calls Superclass constructor mit // Parameter v } 175 class SuperC { SuperC( int i) { ... } } class Subclass extends SuperC { Subclass(int v) { ... } } 176 Ge na ue r e Er k l ä r u n g § Fü r Su b c l asse s gi b t es nur ei n en de f a ul t Ko n s t r u k t o r de r de n pa r a m e t e r l o s e n Ko n s t r u k t o r de r S upe r c l a s s au f r u f t : public Arzt () { super (); // calls Angestellte () constructor } § super() ru f t de n pa r a m e t e r l o s e n Ko n s t r u k t o r de s di r e k t e n Vo r g ä n g e r s in d e r In h e r it a n c e Hi e r ar c h i e au f 179 § Ab e r d e r Ko n s t r u k t o r Angestellte (int) en t f er n t de n de f a ul t Angestellte () Ko n s t r u k t o r § Di e s e r is t je t zt ni c h t me h r ve r f ü g b a r § De r de f aul t c o ns t r uc t o r de r S ubc l as s ve r s u c h t je t zt de n ni c h t - ex i s t i e r e n d e n par am e t e r l o s e n (d e f a u l t ) Ko n s t r u k t o r fü r Angestellte auf z ur uf e n . § En t w e d e r än d e r n wi r di e S ubc l a s s ( und de fi ni e r e n Ko n s t r u k t o r e n ) od e r wi r so r g e n da für da s s ei n pa r a m e t e r l o s e r Ko n s t r u k t o r in d e r S u p e r c la s s de fi ni e r t is t . 181 Auf r uf e de r Ko n s t r u k t o r e n de r S upe r c la s s super ( par am e t er s ); § Bei s p i el : public class Arzt extends Angestellte { public Arzt ( int years) { super (years); // calls Angestellte constructor } ... } § Au f r u f vo n super() mu s s er s t e An w e i s u n g im Ko n s t r u k t o r se i n . 182 Auf g a be § Ma c h e n S i e en t s p r ec h en d e Än d e r u n g e n in d e r Kl as s e Administrator 183 Ve r ä n d e r t e Administrator Kl a s s e // A class to represent administrators. public class Administrator extends Angestellte { public Administrator ( int years) { super (years); } public void processBill () { System.out.println (\"Pay now! \"); } @ Override public double getSalary () { return super.getSalary () + 5000.0; } } 184 Auf g a be § V e r ä n d e rn Si e d i e FaGe Su b c l a s s § An g e s t e l l t e di e s e r Gr u p p e erh a l t en ke i n e zu s ä t z l i c h e n Fe r i e n t a g e bas i e r e nd auf de r Z e i t i n de r er / si e im Sp i t a l ar be i t e t e . § Di e J ahr e di e ei n /e Fa G e im Sp i t a l ge a r b e i t e t ha t sp i e l e n fü r di e Ur l a u bs b e r e c h n u n g ke i n e Ro l l e . 185 Ve r ä n d e r t e FaGe Kla s s e // A class to represent FaGe . public class FaGe extends Angestellte { public FaGe () { // Replaces default constructor super(0); } public void workAtStation ( int station) { System.out.println (\"Working at station: \" + station); } } § Da OPFachkraft ke i n e n Pa r a m e t e r fü r de n Ko n s t r u k t o r br auc h t wi r d OPFachkraft oh n e ( ex p l i z i t e n ) Ko n s t r u k t o r übe r s e t z t § De r de f aul t Ko n s t r u k t o r OPFachkraft () ru f t FaGe () auf . 187 public class OPFachkraft extends FaGe { ... } § De r d e f a u l t Ko n s t r u k t o r OPFachkraft () si e h t so au s : public OPFachkraft () { super (); // calls FaGe () constructor } § De r Ko n s t r u k t o r de s di r e k t e n Vo r g ä n g e r s in d e r In h e r it a n c e Hi e r ar c h i e wi r d dur c h super() au f g e r u f e n . 190 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 7. 0 Ve r e r b u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 - 2021 Al l r i g h t s r e s e r v e d . Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 2 1 . Al l r i g h t s r e s e r v e d . 2 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 3 Ve r e r b u n g und Ko n s t r u k t o r e n § Wi r wo l l e n An g e s t e l l t e n ( ni c h t ab e r Fa G e ) meh r Ur l a ub s t a g e ge b e n je lä n g e r si e in di e s e m Sp i t al ge a r b e i t e t ha be n § Fü r je d e s Ja h r gi b t es 2 zu s ä t z l i c h e Fe r i e n t a g e § We n n ei n Angestelle Ob j e kt ko n s t r u i e r t wi r d , dann übe r g e be n wi r di e An z a h l Ja h r e al s Pa r a m e t e r fü r de n Ko n s t r u k t o r § Wi r mü s s e n di e Angestellte Kl a sse ve r ä n d e r n und ne ue At t r i b u t e ( Zu s t a n d s v a r i a b l e n ) u n d ne ue s Ve r h a l t e n hi nz uf üg e n § Üb u n g : Ma c h e n S i e d i e nö t i g e n Än d e r u n g e n für Angestellte 4 Ve r ä n d e r t e Kla s s e Angestellte public class Angestellte { private int years; //Prevent client access public Angestellte ( int initialYears ) { years = initialYears ; } public int getVacationDays () { return 20 + 2 * years ; } public int getHours () { return 42; } public double getSalary () { return 90000.0; } public String getVacationForm () { return \"green\"; } } // Angestellte 5 Un e r w ü n s c h t e K o n s e q u e n z( e n ) § Da e s e i n e n K o n s t r u k t o r Angestellte(int) gi b t , ve r s c h w i n d e t d e r p a r a m e t e r l o s e d e f a u l t K o n s t r u k t o r § Su b c l asse s er b en ke i n e n Ko n s t r u k t o r , e s gi b t nur de n pa r a m e t e r l o s e n de f a ul t Ko n s t r u k t o r § ... ru f t de n par am e t e r l o s e n Ko n s t r u k t o r de r di r e k t e n Su p e r c l a ss a u f : public Arzt () { // default constructor super (); // calls Angestellte () constructor ... // sets attributes to Null } § En t w e d e r än d e r n wi r di e S ubc l a s s ( und de fi ni e r e n Ko n s t r u k t o r e n ) od e r wi r so r g e n da für da s s ei n pa r a m e t e r l o s e r Ko n s t r u k t o r in d e r S u p e r c la s s de fi ni e r t is t . 6 § Ko n s t r u k t o r de r Kl as s e Arzt ru f t Su p e r c l ass Ko n s t r u k t o r au f super ( par am e t e r s ); § Au f r u f vo n super() mu s s er s t e An w e i s u n g se i n . public class Arzt extends Angestellte { public Arzt ( int years) { super (years); // calls Angestellte constructor } ... } § Ke i n Arzt Ko n s t r u k t o r ru f t par am e t e r l o s e n Angestellte Ko n s t r u k t o r auf 7 Ve r ä n d e r t e Arzt Kl a s s eVe r ä n d e r t e Administrator Kl a s s e // A class to represent administrators. public class Administrator extends Angestellte { public Administrator ( int years) { super (years); } public void processBill () { System.out.println (\"Pay now! \"); } @ Override public double getSalary () { return super.getSalary () + 5000.0; } } 8 Auf g a be § V e r ä n d e rn Si e d i e FaGe Su b c l a s s § An g e s t e l l t e di e s e r Gr u p p e erh a l t en ke i n e zu s ä t z l i c h e n Fe r i e n t a g e bas i e r e nd auf de r Z e i t i n de r er / si e im Sp i t a l ar be i t e t e . § Di e J ahr e di e ei n /e Fa G e im Sp i t a l ge a r b e i t e t ha t sp i e l e n fü r di e Ur l a u bs b e r e c h n u n g ke i n e Ro l l e . 9 Ve r ä n d e r t e FaGe Kla s s e // A class to represent FaGe . public class FaGe extends Angestellte { public FaGe () { // Replaces default constructor super(0); } public void workAtStation ( int station) { System.out.println (\"Working at station: \" + station); } } § Da OPFachkraft ke i n e n Pa r a m e t e r fü r de n Ko n s t r u k t o r br auc h t wi r d OPFachkraft oh n e ( ex p l i z i t e n ) Ko n s t r u k t o r übe r s e t z t § De r de f aul t Ko n s t r u k t o r OPFachkraft () ru f t FaGe () auf . 1112 class Angstellte { Angestellte (int initY ) { years = initY ; } } class FaGe extends Angestellte { public FaGe() { //replaces default constructor super(0); } } class OPFachkraft extends FaGe { public OPFachKraft() { // default constructor super(); } } 13 7. 3. 1 S i c h t b a rk e i t v on private 16 Ve r e r b u n g und A t t r ibut e § Wi r wo l l e n de n Lo h n vo n Är z t e n / – in n e n er h ö h en -- um sF r 5’ 000 p r o Jah r da s im Sp i t al ge a r b e i t e t wu r d e : public class Arzt extends Angestellte { ... public double getSalary () { return super.getSalary () + 5000 * years; } ... } § Di e se Ko n s t r u k t i o n wi r d vo m Co mp i l er ni c h t ak z e p ti e r t 17 Ve r e r b u n g und A t t r ibut e § Wi r er h a l t en fo l g e n d e Fe h l e r m e l d u n g : Arzt.java:7: years has private access in Angestellte return super.getSalary () + 5000 * years; ^ § Au f private A t t r i b u t e ( V a r i a b l e , El e m e n t e ) ka n n in d e r Su b c l ass ni c h t di r e k t zu g e g r i f f e n we r d e n . § Ei n Gr u n d : s o ka n n ei n e Su b c l a ss ni c h t di e Ab k a p s e l u n g de r S upe r c l as s ze r s t ö r e n . § Wi e ka n n ma n mi t di e s e r Ei ns c hr änk ung ar be i t e n ? 18 Ve r b e s s e r t e Angestellte Kla s s e Wi r de fi ni e r e n ei n en Ac c e s s or für al l e A t t r i b u t e d i e d i e S u b c l a s s le s e n so l l . public class Angestellte { private int years; public Angestellte ( int initialYears ) { years = initialYears ; } public int getYears () { return years; } ... } 19 Ve r b e s s e r t e Arzt Kla s s e public class Arzt extends Angestellte { public Arzt ( int years) { super (years); } @ Override public double getSalary () { return super .getSalary () + 5000 * getYears () ; } ... } 20 7. 3. 2 Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); System.out.println ( peter.years ); 25 Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); // 90’000 System.out.println ( peter.years ); // Error (Compiler beschwert sich ) 26 An g e s t e l l t e pr i v a t e i n t y e a r s Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); System.out.println ( peter.years ); Arzt sue = new Arzt (7); sue.getSalary (); sue.treatPatient (); 27 Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); // 90’000 System.out.println ( peter.years ); // Error (Compiler beschwert sich ) Arzt sue = new Arzt (7); sue.getSalary (); // 125’000 (90 + 5 * 7)000 sue.treatPatient (); // \"I’ll take care of you!\" 28 Ar zt vo i d tr e a tP a ti e n t Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); System.out.println ( peter.years ); Arzt sue = new Arzt (7); sue.getSalary (); sue.treatPatient (); OPFachkraft roger = new OPFachkraft (); roger.getSalary (); roger.manageOP (); roger.treatPatient (); 29 Be i s p i e l e Angestellte peter = new Angestellte (); peter.getSalary (); // 90’000 System.out.println ( peter.years ); // Error (Compiler beschwert sich ) Arzt sue = new Arzt (7); sue.getSalary (); // 125’000 sue.treatPatient (); // \"I’ll take care of you!\" OPFachkraft roger = new OPFachkraft (); roger.getSalary (); // 100’000 roger.manageOP (); roger.treatPatient (); // Nicht moeglich (Compiler beschwert sich ) 30 OP F a c hK r a f t vo i d ma n a g e O P Be i s p i e l e OPFachkraft roger = new OPFachkraft (); roger.workAtStation (3); 31 Be i s p i e l e OPFachkraft roger = new OPFachkraft (); roger.workAtStation (3); // \"Working at station 3\" // OPFachkraft ist eine FaGe 32 Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 35 7. 4 Se l e k ti v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 36 § Bi s h er ( u n d w ei t er h i n ) F o k u s a u f M e t h o d en class Y extends Base { ... } § We n n K l a s s e Y di e K l a s s e Base er w ei t er t § Y erb t d i e M e t h o d en v o n Base § Y ka n n M e t h o d e n v o n Base übe r s c hr e i be n § Y e r b t d i e A t tr i b u t e v o n Base § Y e r b t ni c h t di e K o ns t r uk t o r e n v o n Ba s e 37 Ve r e r b u n g s h i e r a r c h i e 42 Angestellte private int years getVacationDays getHours getYears getSalary getVacationForm OPFachkraft int years getVacationDays getHours getYears getSalary getVacationForm manageOP workAtStation FaGe int years getVacationDays getHours getYears getSalary getVacationForm workAtStation Arzt int years getVacationDays getHours getYears getSalary getVacationForm treatPatient Administrator int years getVacationDays getHours getYears getSalary getVacationForm processBill Klasse Attribute (später mehr) geerbte Methode definierte Methode 43 Ve r e r b u n g s h i e r a r c h i e § Fü r a l l e Angestellte Ex e m p l a r e k ö n n e n w i r getHours , getYears , getVacationForm , getVacationDays au f r u f e n ( an w e n d e n ) § Fü r getHours und getYears wi r d f ü r a l l e E x e mp l a r e d e r s e l b e C o d e (a u s A n g es t el l t e) a u s g e f ü h rt § Kl i e n t e n v o n A n g e s t e l l t e k ö n n e n s i c h d ar au f v e r l as s e n d as s di e s e M e t ho de n e x i s t i e r e n § (Su b )Kl a s s e m u s s s i c h er s t el l en d a s s d i e M e t h o d en ri c h t i g s i n d § Su b k l a sse n k ö n n e n V e r h a l t e n ä n d e r n a b e r M e t h o d e n n i c h t ve r s c h w i n d e n l a s s e n 45 Arzt lin = new Arzt(12); FaGe bob = new FaGe(); Adminstrator tom = new Administrator(3); OPFachkraft an = new OPFachkraft(); 46 An g e s t e l l t e Ar z t Fa G e OP F a c h k r a f t Ad m i n i s t r a t o r lin.getHours() bob.getSalary() lin.getVacationForm() tom.getSalary an.getSalary() an.workAtStation() We l c h e M e t h o d e ? In w e l c h e r K l a s s e i s t d i e Me t h o d e d e f i n i e r t ? Arzt lin = new Arzt(12); FaGe bob = new FaGe(); Adminstrator tom = new Administrator(3); OPFachkraft an = new OPFachkraft(); 47 An g e s t e l l t e Ar z t Fa G e OP F a c h k r a f t Ad m i n i s t r a t o r lin.getHours() ✓ bob.getSalary() ✓ lin.getVacationForm() ✓ tom.getSalary ✓ an.getSalary() ✓ an.workAtStation() ✓ We n n e s m e h r e r e V e r s i o n e n ( @Override ) gi b t … § Fe s t l e g e n de r V e r s i o n, di e au f g e r u f e n wi r d , ne nn t ma n Bi n d u n g (« bi n di n g ») – wi r bi nde n ( ve r k n ü p f e n ) C od e mi t de m Na m e n de r Me t h o d e § Ja v a le g t fe s t , da s s di e Kl as s e de s Ob j e k t e x e mp l a r s ( für da s di e Me t h o d e au sg e f ü h r t wi r d ) be s t i m m t , we l c h e Ve r s i o n au sg e f ü h r t wi r d § Es fi nde t ei n e dyn am i s ch e Bi n d u n g (« dyn am i c bi n di n g» ) st a t t – di e Kl as s e st e h t ( ev t l .) e r s t zu r Au s f ü h r u n g s z e i t fe s t § Di e s e n As p e k t we r d e n wi r je t zt bz w . i n d e r näc hs t e n Vo r l e s u n g no c h me h r un t e r s uc he n 48 Zusam m e n f assung M e t ho de naufr uf § Ge g e b e n S u p e r k l a s s e X und S ubk l as s e A class X { void doit() { … } } } § Kl a sse A übe r s c hr e i b t al s o M e t ho de doit aus X § Wi r d f ü r e i n E x e mp l a r d e r K l a s s e A di e M e t ho de doit auf g e r uf e n, so w i r d d i e V e r si o n d e r Kl a sse A aus g e f ühr t new A().doit(); // doit aus A! new X().doit(); // doit aus X – was sonst?? 49 class A extends X { @Override void doit() { … } } Zusam m e n f assung M e t ho de naufr uf § Wi r d f ü r e i n E x e mp l a r d e r K l a s s e A di e M e t ho de doit auf g e r uf e n, so w i r d d i e V e r si o n d e r Kl a sse A aus g e f ühr t new A().doit(); // doit aus A! new X().doit(); // doit aus X – was sonst?? § Un a b h ä n g i g d a v o n w a s f ü r e i n e R e f e r e n z v a r i a b l e v e r w e n d e t w i r d A rA = new A(); rA.doit(); // doit aus A! X rX = new X(); rX.doit(); // doit aus X – was sonst?? X tX = new A(); tX.doit(); // doit aus A!! 50 X A 51 Zu r ü c k zu Angestellte und FaGe § Di e FaGe Kl as s e ha t im Au g e n b l i c k ve r s c h i e d e n e Pr o bl e m e . § Wi r se t z t e n di e J ahr e fü r al l e Fa c h a n g e s t e l l t e n auf 0 J ahr e da di e s e Gr u p p e ke i n e n Di e ns t al t e r s bo nus fü r de n Ur l a u b be k o m m t § Dam i t kö n n e n wi r das At t r i b u t years ni c h t fü r ande r e Be r e c h n u n g e n ve r w e n d e n § Wi r tr e n n e n di e 2 0 Ba s i s u r l a u b s t a g e vo n de ne n , d i e a u f Gr und de s Di e n s t a l t e r s ve r g e b e n we r d e n . 55 Ide e : D e t ai l s off en ha lt e n § Ve r h a l t e n dur c h Me t h o d e n au sg e d r ü c k t § Met h o d e 1 § Met h o d e 2 § Me t h o d e n ru f e n Me t h o d e n au f § Met h o d e 1 à Met h o d e 2 § In d e r S u p e r c la s s m u s s M e t h o d e 2 ni c h t ( en d g ü l t i g ) fe s t g e l e g t we r d e n – ei n e Su b c l ass ka n n Me t h o d e 2 übe r s c hr e i be n § «O v e r r i d e »: se l b e Si g n a t u r , ande r e s Ve r h a l t e n § Si g n a t u r : P a r a m e t e r , R e t u r n Ty p , Si c h t b a r k e i t 5657 public class Angestellte { private int years; public Angestellte ( int initialYears ) { years = initialYears ; } public int getVacationDays () { return 20 + getSeniorityBonus (); } // vacation days given for each year in the hospital public int getSeniorityBonus () { return 2 * years; } ... } 58 public class Angestellte { private int years; public Angestellte ( int initialYears ) { years = initialYears ; } public int getVacationDays () { return 20 + getSeniorityBonus (); } // vacation days given for each year in the hospital public int getSeniorityBonus () { return 2 * years; } ... } Wi e hi l ft uns di e s e s D e s i gn mi t de r Kl as s e FaGe ? Ve r b e s s e r t e FaGe Kla s s e § FaGe ka n n se l e k t i v di e Me t h o d e getSeniorityBonus übe r s c hr e i be n . § We n n getVacationDays au sg e f ü h r t we r d e n so l l , da nn wi r d di e ne ue ( übe r s c hr i e be ne ) V e r s i on au f g e r u f e n . § Fe s t l e g e n de r V e r s i o n, di e au f g e r u f e n wi r d , dur c h dyn am i s ch e Bi n d u n g (« dyn am i c bi n di n g ») . 59 public class FaGe extends Angestellte { public FaGe( int years) { super (years); // now records true number of years } // FaGe don't get extra vacation for their years of service. @Override public int getSeniorityBonus () { return 0; } public void workAtStation ( int station) { System.out.println (\"Working at station: \" + station); } } 6062 Angestellte public int getVacationDays () { … getSeniorityBonus () } public int getSeniorityBonus () { … } Administrator FaGe public int getSeniorityBonus () { … } mary = new Administrator(5); mary.getVacationDays (); peter = new FaGe (7); peter.getVacationDays (); 6464 Me t h o d e n A u f r u f f( ) à m( ) m( ) f( ) f( ) m( ) Kl a s s e Su b c l a s s A Su p e r c l a s s Su b c l a s s B m( ) Me t h o d e m ( ) i n S u b k l a s s e S u b c l a s s B übe r s c hr i e be n Su b c l a ssA er b t m( ) m( ) f( ) Su b c l a s s A Su p e r c l a s s Su b c l a s s B m( ) Me t h o d e m ( ) i n S u b k l a s s e S u b c l a s s B übe r s c hr i e be n Su b c l a ssA er b t m( ) m( ) f( ) m( ) 67 Su p e r c l a s s 67 Su b c l a s s A Su b c l a s s B m( ) m( ) / / A Fü r E x e m p l a r d e r Su b k l a sse Su b c l a ssA ... Met h o d e n A u f r u f f( ) à m( ) ... m( ) Me t h o d e m ( ) i n S u b k l a s s e S u b c l a s s B übe r s c hr i e be n Su b c l a ssA er b t m( ) f( ) f( ) 68 Su p e r c l a s s 68 Su b c l a s s A Su b c l a s s B m( ) m( ) / / B Fü r E x e m p l a r d e r Su b k l a sse Su b c l a ssB ... Met h o d e n A u f r u f f( ) à m( ) ... m( ) Me t h o d e m ( ) i n S u b k l a s s e S u b c l a s s B übe r s c hr i e be n Su b c l a ssA er b t m( ) f( ) f( ) 69 Su p e r c l a s s 69 Su b c l a s s A Su b c l a s s B m( ) Ab h ä n g i g v o n S u b k l a s s e od e r m( ) // A m( ) // B Me t h o d e m ( ) i n S u b k l a s s e S u b c l a s s B übe r s c hr i e be n Su b c l a ssA er b t m( ) m( ) f( ) f( ) 71 Angestellte public int getVacationDays () { … getSeniorityBonus () } public int getSeniorityBonus () { … } Administrator FaGe public int getSeniorityBonus () { … } mary = new Administrator (5); mary.getVacationDays (); peter = new FaGe (7); peter.getVacationDays (); 72 An g e s t e l l t e Ad m i n i s t r a t o r 72 Fa G e od e r ge t V a c a t i o n D a y s ge t V a c a t i o n D a y s ge t S e n i o r i t y B o n u s ge t S e n i o r i t y B o n u s ge t S e n i o r i t y B o n u s 73 mary = new Administrator (5); mary.getVacationDays (); 7474 ge t V a c a t i o n D a y s ge t S e n i o r i t y B o n u s mary = new Administrator (5); mary.getVacationDays (); An g e s t e l l t e Ad m i n i s t r a t o r ge t V a c a t i o n D a y s ge t S e n i o r i t y B o n u s 76 peter = new FaGe (7); peter.getVacationDays (); 7777 Fa G e ge t V a c a t i o n D a y s ge t S e n i o r i t y B o n u s ge t S e n i o r i t y B o n u s An g e s t e l l t e ge t V a c a t i o n D a y s ge t S e n i o r i t y B o n u s peter = new FaGe (7); peter.getVacationDays (); § Mi t d i e s e r O r g a n i s a t i o n v e r b l e i b t d i e L o g i k d e r Me t h o d e getVacationDays in d e r Kl as s e Angestellte § An p a s s u n g e n kö n n e n dur c h übe r s c hr e i be n de r Me t h o d e n , di e getVacationDays au f r u f t , im p le m e n t ie r t we r d e n § ( Na t ü r l i c h kö n n e n wi r au c h di e Me t h o d e se l b e r übe r s c hr e i be n ab e r da nn mü s s en wi r ev t l . meh r Co d e i n d en Su b c l asse s übe r ne hm e n ) 82 Si c h t b ark e i t (v o n At t r i b u t e n ), no c hm a l § Di e Me t h o d e getSalary lie f e r t da s Ge ha l t . § Di e Met h o d e lie f e r t fü r al l e Ex e m pl ar e je d e r Su b c l a ss d e n se l b e n We r t § Wa s we n n wi r in d iv id u e lle Ge hä l t e r für Arzt und FaGe wo l l e n ? § Wi e mü s s t e n di e K l as s e n ve r ä n d e r t we r d e n ? 83 Si c h t b ark e i t (v o n At t r i b u t e n ), no c hm a l § Di e Me t h o d e getSalary lie f e r t da s Ge ha l t . § Di e Met h o d e lie f e r t fü r al l e Ex e m pl ar e je d e r Su b c l a ss d e n se l b e n We r t § Wa s we n n wi r in d iv id u e lle Ge hä l t e r für Arzt und FaGe wo l l e n ? § Wi e mü s s t e n di e K l as s e n ve r ä n d e r t we r d e n ? § Wa s fü r ei n e Si c h t b a r k e i t so l l t e das ne ue At t r i b u t habe n ? 84 Ge s c hüt z t e At t r i b u t e public class Angestellte { private int years; private double salary; public Angestellte ( int y, double s) { years = y; salary = s ; } } public class Arzt extends Angestellte { … public void setSalary ( double s) { salary = s ; } 85 § Me t h o d e setSalary so l l ni c h t in Angestellte se i n § Z. B . we i l si e At t r i b u t e v o n FaGe od e r Arzt ve r w e n d e n so l l § Di e se s Pr o gr a m m ka n n ab e r ni c h t übe r s e t z t we r d e n : public class Arzt extends Angestellte { … public void setSalary ( double s) { salary = s; } Arzt.java:29: salary has private access in Angestellte salary = s; ^ § Ke y w o r d private ve r h i n d e r t Zu g r i f f in d e r S u b c la s s 86 protected At t r i b u t e 87 Ei n At t r i b u t au f d as nur in n e r h a lb de r Kl as s e und ih r e r Su bcl as s es zu g e g r i f f e n we r d e n ka n n § Sy n t a x : protected ty p e na m e ; § Bei s p i el e : protected int id; protected String name; protected At t r i b u t e public class Angestellte { private int years; protected double salary; public Angestellte ( int y, double s) { years = y; salary = s ; } } public class Arzt extends Angestellte { … public void setSalary ( double s) { salary = s ; } 88 public class Arzt extends Angestellte { … public void setSalary ( double s) { salary = s; // getSalary () no longer overridden } 90 Arzt Kl as s e Met h o d e getSalary() br auc h t k e i ne G r uppe n - sp e z i f i sc h e n A n p a ssu n g e n me h r v o r n e h me n u n d b r a u c h t d a h e r n u r i n d e r K l a s s e Angestelle se i n – es gi b t k e i n e n G r u n d d i e M e t h o d e i n d e r S u b cl a s s z u ü b e r s ch r e i b e n Ande r e s De s i gn § Es gi b t vi e l e an d e r e Kl as s e n En t w ü r f e § Ei n e ne ue Su b k l asse MedAng … § Do r t At t r i b u t salary und di e Met h o d e setSalary § Arzt und FaGe er w ei t ern MedAng § No c h ei n e Hi e r a r c h i e St u f e § protected er l a u b t al l e n Su b k l asse n Zu g r i f f § Hi e r auc h Administrator § Si n n v o l l we n n Su b k l a sse n Zu g r i f f br auc he n , ande r e Kl a sse n abe r ni c h t 94 Si c h t b ark e i t u n d P ac k ag e s § Zi e l i s t A b k ap se l u n g v o n N am e n sr äu m e n . Si c h t b ar k e i t § private : n u r i n d i e s e r K l a s s e § de f aul t ( ! ): n u r i n P a c k a g e § protected : § in di e s e r Kl a sse § in al l e n Er w e i t e r ung e n (Su b c l a s s es , Un t e r k l a s s e n ) d er Kl a sse § in al l e n ande r e n Kl a sse n d i e i n di e s e r Pa c k a g e de k l ar i e r t si n d § public : übe r al l ( nac h import ) § protected lä s s t vi e l zu ... S u b c la s s ev t l . in an der er Pa c k a g e 95 protected – Da s g a n z K l e i n g e d r u c k t e [S i c h t b a r ] n u r i n d er K l a s s e u n d i h r e n S u b c l a s s e n a u c h d a n n w en n di e Subc l as s i n e i ne r an de r e n Pa c k a g e i s t § Ex e m p l a r e d e r S u b c l a ss S er b en protected At t r i b u t p vo n T au c h w e n n S in e in e r a n d e r e n P a c k a g e is t § Ei n e S u b k l a sse M e t h o d e m (f ü r E x e m p l a r e v on S ) k a n n a u f da s g e e r b t e A t t r i but m ih r e s Ex e m p l a r s z u g r e i f e n § Au f g e e r b t e A t t r i b u t e an der er Ex e m p l a r e eT de r S upe r k l a s s e T ka n n m nur z ugr e i f e n w e nn eT ei n E x emp l a r d er K l a s s e S is t § Ob w o h l eT auc h das A t t r i but p be s i t z t 96 T pr o t e c t e d p S m( ) { … p … } 97 protected – Da s g a n z K l e i n g e d r u c k t e package package2; public class T { protected int i = 1; public T() { i = 1; } } package package2a; import package2.T; public class S extends T { public S() { super (); } public String v( T aT ) { return \">\" + aT.i + \"<\"; } } error: i has protected access in T return \">\" + aT.i + \"<\"; ^ 98 protected – Da s g a n z K l e i n g e d r u c k t e package package2; public class T { protected int i = 1; public T() { i = 1; } } package package2a; import package2.T; public class S extends T { public S() { super (); } public String v( S anS ) { return \">\" + anS.i + \"<\"; } } Er l aub t da i n v anS si c h e r a u f Ex e m pl ar de r K l as s e S v e r w e i s t § Da s K l e i n g e d r u c k t e w e r d e n S i e v i e l l e i c h t i n d e r P r a x i s er l eb en -- ni c h t i n di e s e r V o r l e s ung § Pr ob l e m v e r m e i d e n i n d e m S u p e r k l a s s e u n d S u b k l a s s e i n s e l b e r Pa c k a g e s i n d § Wi r e r w a r t e n a u c h n i c h t d a s V e r s t ä n d n i s d e r R e g e l n f ü r Pa c k a g e s – au sse r § Si e k e n n e n d i e D e f a u l t P a c k a g e (m i t d e r w i r a r b e i t e n ) § Si e w i sse n w a s d i e D e f a u l t Si c h t b a r k e i t i s t § Si e w i sse n d a s protected Zu g r i f f in a lle n Su b k l a sse n und in d e r se lb e n Pa c k a g e erl a u b t 99 protected – Da s g a n z K l e i n g e d r u c k t e Kl a s s e Angestellte public class Angestellte { private int years; protected double salary = 90000.0; public Angestellte () { this (0); } public Angestellte ( int y){ years = y; } public Angestellte ( int y, double s){ year = y; salary = s; } public int getVacationDays () { return 20 + getSeniorityBonus (); } public int getSeniorityBonus () { return 2 * years; } public int getHours () { return 42; } public int getYears () { return years; } public double getSalary () { return salary; } public String getVacationForm (){ return \"green\"; } } // Angestellte 100 v6 Arzt Kl a s s e public class Arzt extends Angestellte { public Arzt ( int years) { super (years); } @ Override public int getVacationDays () { return super. getVacationDays () + 5; } @ Override public String getVacationForm () {... } public void setSalary (double s) { salary = s; } public void treatPatient () { System.out.println (\"I'll take care of you!\"); } 101 v6 FaGe Kla s s e public class FaGe extends Angestellte { public FaGe () { super (0); } public FaGe ( int years) { super (years); } public void setSalary ( double s) { salary = s; } @ Override public int getSeniorityBonus () { return 0; } public void workAtStation ( int station) { … } } // FaGe 102 v6 Administrator und OPFachkraft Kl a s s e n public class Administrator extends Angestellte { public Administrator( int years) { super (years); salary = super.getSalary ()+5000.0; } public void processBill () { ... } } public class OPFachkraft extends FaGe { public OPFachkraft ( int years) { super (years); salary = super.getSalary () + 10000.0; } public void manageOP () {... } } 103 v6 v6 Ty p e n § Kl as s e n de fi ni e r e n ei n en ( ne ue n ) Ty p public class Angestellte {} public class Arzt extends Angestellte {} … § Ve r w e i s e au f Ex e m p l a r e § Re f e r e n z v a r i a b l e sp e i c h e r n Re f e r e n z e n auf Ex e m pl ar e ( ei n es Ty p s ) Arzt peter = new Arzt (0); Arzt vertreter = peter; // peter auch Referenz à Arzt Arzt mary = new Arzt(10); // 10 years of service vertreter = mary ; 104 Ty p e n § Kl as s e n de fi ni e r e n ei n en ( ne ue n ) Ty p public class Angestellte {} public class Arzt extends Angestellte {} … § Ve r w e i s e au f Ex e m p l a r e § Re f e r e n z v a r i a b l e sp e i c h e r n Re f e r e n z e n auf Ex e m pl ar e ( ei n es Ty p s ) Arzt peter = new Arzt (0); Arzt vertreter = peter; // peter auch Referenz à Arzt Arzt mary = new Arzt(10); // 10 years of service vertreter = mary ; 105 Kla s s e n und Re f e r e n z va r i a b l e § Wa s we n n wi r Ve r w e i s e au f al l e An g e s t e l l t e n sp e i c h e r n wo l l e n ? § z.B . i n ei n em Ar r a y staff § z.B . i n de r Re i h e n f o l g e de r An s t e l l u n g § Wi r wi s s en ab e r ni c h t ob wi r al s er s t e ( od e r nä c hs t e ) P e r s on § ei n e /n Ar z t / Är z ti n § ei n e /n Fa G e § ei n e/ n Ad m i n i s tr a t or / i n an s t e l l e n . U n s e r A r r a y staff mu s s Ve r w e i s e au f al l e Ar t e n vo n An g e s t e l l t e n au f n e h m e n kö n n e n ! 106 Is t - ei n § Di e is t - ei n Be z i eh u n g de fi ni e r t di e I nhe r i t a nc e H i e r a r c h y . § Ei n Arzt Ex e m p l a r is t au c h ei n Angestellte Ex e m p l a r 107 § Wi r kö n n e n ei n Arzt Ex e m p l a r übe r a l l ve r w e n d e n , w o wi r ei n Angestellte Ex e m p l a r ve r w e n d e n kö n n e n . 108 Is t - ei n § Ei n e Re f e r e n z v a r i a b l e für Angestellte ka n n Ve r w e i s e au f { Arzt , FaGe , OPFachkraft , Administrator } Ex e m p l a r e en t h a l t en . Angestellte jane; jane = new Arzt (); jane.getSalary (); jane = new OPFachkraft (); jane.getSalary (); § Di e Um k e hr ung gi l t ni c h t ! 111 Is t - ei n § Ei n e Re f e r e n z v a r i a b l e für Angestellte ka n n Ve r w e i s e au f { Arzt , FaGe , OPFachkraft , Administrator } Ex e m p l a r e en t h a l t en . § Di e Um k e hr ung gi l t ni c h t ! FaGe john; john = new Angestellte (); john.worksAtStation (); // nicht möglich ! 112 Is t - ei n § Ei n e Re f e r e n z v a r i a b l e für Angestellte ka n n Ve r w e i s e au f { Arzt , FaGe , OPFachkraft , Administrator } Ex e m p l a r e en t h a l t en . § Br a u c h e n ei n en Ar r a y v on Ve r w e i s e n auf Angestellte we n n wi r mi t Ex e m pl a r e n vo n { Arzt , …, Administrator } ar be i t e n wo l l e n Angestellte [] staff = new Angestellte [5]; staff[0] = new Administrator(); staff[1] = new OPFachkraft (); staff[2] = new Arzt (); staff[3] = new Angestellte (); staff[1] = new Arzt (); // auch möglich 113114 0 1 2 3 4 nul l 115 0 1 2 3 4 nul l staff[1] = new Arzt (); Is t - ei n § Wi r kö n n e n ei n Arzt Ex e m p l a r ve r w e n d e n wo ei n Angestellte Ex e m p l a r er w a r t e t wi r d ( Arzt is t - ei n Angestellte Ex e m pl ar ) aber ni c h t um g e k e hr t . § We n n ei n Arzt Ex e m pl ar ge b r a u c ht wi r d ge n ü g t ni c h t ei n Ex e m pl ar de r Kl a sse Angestellte § … kö n n t e ni c h t treatPatient () aus f ühr e n 117 § Wa s we n n wi r mi t Ex e m p l a r e n ir g e n d e in e r Kl as s e ar b e i t e n wo l l e n ? Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 2 1 . Al l r i g h t s r e s e r v e d . 118 7. 5 D i e Kla s s e Object 119 Ve r e r b u n g s h i e r a r c h i e § Es gi b t ei n e ( be s o nde r e ) Kl as s e Object di e Ur a hn al l e r Kl as s e n is t § Object ha t ke i n e Sup e r c l a s s § Al l e Kl a sse n si n d ( di r e k t e od e r in d ir e k t e ) Su b c l a s s es v o n Object § Je d e Kl a sse er w ei t ert Object § … od e r ei n e Su b c l a ss v o n Object § class X {} he i s s t class X extends Object {} 120 Ve r e r b u n g s h i e r a r c h i e 121 An g es t el l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t Sub e r b t vo n S u p e r Su p e r Su b Ve r e r b u n g s h i e r a r c h i e 122 An g es t el l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t Sub e r w e i t e r t Supe r Su p e r Su b Ve r e r b u n g s h i e r a r c h i e § Es gi b t ei n e ( be s o nde r e ) Kl as s e Object di e Ur a hn al l e r Kl as s e n is t § Object ha t ke i n e Sup e r c l a s s § Al l e Kl a sse n si n d ( di r e k t e od e r in d ir e k t e ) Su b c l a s s es v o n Object § Je d e Kl a sse er w ei t ert Object § … od e r ei n e Su b c l a ss v o n Object § class X {} he i s s t class X extends Object {} § Ei n e Re f e r e n z v a r i a b l e für Object Ex e m p l a r e ka n n au f Ex e m p l a r e je d e r Kl as s e ve r w e i s e n 124 Di e Kla s s e Object § Al l e Ty p e n , d i e dur c h ei n e Kl as s e de fi ni e r t si n d , ha be n ei n e Su p e r c l ass na m e ns Object . § Je d e Kl a sse er w ei t ert im p liz it Object 125 Ob j e c t Di e Kla s s e Object § Di e Object Kl as s e de fi ni e r t Me t h o d e n : § public String toString () Li e f ert ei n e Dar s t e l l ung al s Te x t s o das s das Ob j e kt aus g e g e be n we r d e n ka n n . § public boolean equals( Object other) Ve r g l e i c h e de n im p liz it e n Pa r a m e t e r mi t other und lie f e r e true we n n gl e i ch . § Al l e Ty p e n , d i e dur c h ei n e Kl as s e de fi ni e r t si n d , ha be n ei n e Su p e r c l ass na m e ns Object . § Je d e Kl a sse er w ei t ert im p liz it Object Ob j e c t e q u al s to S t r i n g ge t C l a s s ha s hC o de no t i f y wa i t 126 Er w e i t e r u n g e n vo n Object er b en § We n n ei n e Kl as s e Object er w ei t er t da nn er b t de r ne ue Ty p da s Ve r h a l t e n (d i e Me t h o d e n ) v on Object § Ni c h t im m e r ma c h en di e s e Me t h o d e n wa s wi r wo l l e n … § Sp ä t e r me h r daz u § … ab e r Na m e , Re t u r n t y p e , Si c h tb ar k e i t und Pa r a m e t e r l i s t e si n d ( vo r ) de fi ni e r t Ob j e c t e q u al s to S t r i n g ge t C l a s s ha s hC o de no t i f y wa i t Po i n t di s t a nc e ge t X ge t Y tr a n s la t e 127 Point Kla s s e public class Point { private int x; private int y; public Point() { … } public Point( int x) { … } public Point( int x, int y) { … } public double distance(Point o) { } public int getX () { … } public int getY () { … } … 128 … h a t a u c h M e th od e n equals toString getClass hashCode … u n d e i n i g e m e h r vo n Object Er w e i t e r u n g e n vo n Object er b en § We n n ei n e Kl as s e Object er w ei t er t da nn er b t de r ne ue Ty p da s Ve r h a l t e n (d i e Me t h o d e n ) v on Object § Ni c h t im m e r ma c h en di e s e Me t h o d e n wa s wi r wo l l e n … § Sp ä t e r me h r daz u § … ab e r Na m e , Re t u r n t y p e , Si c h tb ar k e i t und Pa r a m e t e r l i s t e si n d ( vo r ) de fi ni e r t Ob j e c t e q u al s to S t r i n g ge t C l a s s ha s hC o de no t i f y wa i t Po i n t di s t a nc e ge t X ge t Y tr a n s la t e 129 Er w e i t e r u n g e n vo n Object er b en § We n n ei n e Kl as s e Object er w ei t er t da nn er b t de r ne ue Ty p da s Ve r h a l t e n (d i e Me t h o d e n ) v on Object § Ni c h t im m e r ma c h en di e s e Me t h o d e n wa s wi r wo l l e n … § Sp ä t e r me h r daz u § … ab e r Na m e , Re t u r n t y p e , Si c h tb ar k e i t und Pa r a m e t e r l i s t e si n d ( vo r ) de fi ni e r t Ob j e c t e q u al s to S t r i n g ge t C l a s s ha s hC o de no t i f y wa i t An g e s t e l l t e ge t V a c at i o n D a y s ge t H o u r s ge t V a c at i o n F o r m ge t S a l a r y 130 Object Re f e r e n z va r i a b l e § In ei n er Re f e r e n z v a r i a b l e für Object ka n n ma n Ve r w e i s e au f Ex e m p l a r e je d e r Kl as s e sp e i c h e r n : Object o1 = new Point(5, - 3); Object o2 = \"hello there\"; Object o3 = new Scanner(System.in ); § Da s Ve r h a l t e n ei n es Object Ex e m p l a r s um f a s s t nur we n i g e Me t h o d e n . String s = o1.toString(); // ok int len = o2.length(); // error String line = o3.nextLine(); // error 131 Object Re f e r e n z va r i a b l e § Mi t ei n er Re f e r e n z va r i a b l e fü r Object ka n n ma n nur di e Met h o d e n aus f ühr en di e fü r Object de f i ni e r t si n d String s = o1.toString(); // ok int len = o2.length(); // error String line = o3.nextLine(); // error § Di e i n ei n er Su b c l a s s de f i ni e r t e n Met h o d e n und At t r i b u t e ex i s t i e r e n abe r di e Re f e r e n z va r i a b l e er l au b t ke i n e n Zu g r i f f 132 Object Re f e r e n z va r i a b l e § Me t h o d e n kö n n e n Pa r a m e t e r vo m Ty p Object ak z e p ti e r e n . public void checkForNull(Object o ) { if (o == null ) { System.out.println (\"Object is null!!!\"); } } 134 W ir er i n n er n uns : Ve r g l e i c h e n vo n Ob j ek t en De r == Op e r a t o r fu n k t i on i e r t ni c h t wi e ge w ü n s c h t mi t Ob j e k t e n . == ve r g l e i c h t Re f e r e n z e n au f Ob j e k t e , ni c h t de n Zu s t a n d . Das Er g e b n i s is t nur da nn true we n n ei n Ob j e k t mi t si ch se l b s t ve r g l i c h e n wi r d . Point p1 = new Point(5, 3); Point p2 = new Point(5, 3); if (p1 == p2) { // false System.out.println(\"equal \"); } ... x 5 y 3 p1 p2 ... x 5 y 3 135 § De r Ve r g l e i c h s o p e r a t o r == funk t i o ni e r t ni c h t wi e er w a r t e t für Ob j e k t e . Scanner console = new Scanner(System.in ); System.out.print (\"Wie heissen Sie? \"); String name = console.next (); if ( name == \" Hase \" ) { System.out.println (\"Wissen Sie mehr ? \"); ... } § Di e s e s Pr og r a m m wi r d übe r s e t z t abe r de r T e s t er g i b t ni e true . § == ve r g l e i c h t Ob j e kt v e r w e i s e (« re f e re n c e s » ) ( sp ä t e r ) u n d lie f e r t dahe r ev tl . false se l b s t we n n zw e i String s d i e gl e i ch e n Bu c h s t a b e n habe n . [ fr ühe r ] V e r gl e i c h e v o n String Ob j ek t en[ fr ühe r ] Ve r g l e i c h e vo n String Ob j ek t en § Um String Ob j e k t e z u v e r g l e i c h e n b e n u t z e n w i r equals if ( name.equals (\" Hase \")) { System.out.println (\"Wissen Sie mehr ? \"); } equals ve r g l e i c h t de n Zu s t a n d vo n Ob j e k t e n [j e t z t ] § Me t h o d e equals is t in d e r K la s s e Object de fi ni e r t § Wi e s o k a n n d i e s e Me t h o d e d e n Z u s t a n d d e r S t r i n g s ve r g l e i c h e n ? 138 Di e Me t h od e equals § Ve r s i o n v o n equals wi e in d e r Kl as s e Object de fi ni e r t ka n n ni c h t de n Zu s t an d vo n Ob j e k t e n ve r g l e i c h e n § We n n wi r ei n e Kl as s e er s t el l en , da nn ve r h ä l t si c h (d i e ge e r b t e Me t h o d e ) equals wi e == Point p1 = new Point(5,3); Point p2 = new Point(5,3); if (p1.equals(p2)) { // false : - ( System.out.println(\"equal \"); } 140 ... x 5 y 3 p1 p2 ... x 5 y 3 Ve r g l e i c h e n vo n Ob j ek t en § We n n wi r ei n e Kl as s e er s t el l en , da nn ve r h ä l t si c h (d i e ge e r b t e Me t h o d e ) equals wi e ==Point p1 = new Point(5,3); Point p2 = new Point(5,3); if (p1.equals(p2)) { // false : - ( System.out.println (\"equal\"); } § De n n di e s e Ve r s i o n h a t d i e Kl as s e vo n Object geer b t . § Ja v a ve r s t e h t ni c h t wi e Point Ex e m pl ar e ve r g l i c h e n we r d e n so l l e n . 141 == Ve r g l e i c h v o n R e f e r e n z e n Wa n n k ö n n t e e s S i n n m a c h e n , d i e R e f e r e n z e n ( A d r e s s e n ) z u ve r g l e i c h e n ? 142143 § Go o d N e w s : Wi r kö n n e n da s ge e r b t e Ve r h a l t e n än d e r n in d e m di e Kl as s e ei n e Me t h o d e equals de fi ni e r t . § Ne u e Met h o d e üb e r s c hr e i b t das v o n Object ge e r b t e Ve r h a l t e n . § Di e s e Met h o d e so l l t e de n Zu s t a n d de r zw e i Ob j e kt e ve r g l e i c h e n und true zu r ü c k g e b e n we n n si e di e se l b e n x/y Ko o r d i n a te n habe n . Ei n e fe h l e r h a f t e Lö s u n g : public boolean equals(Point other) { if ( x == other.x && y == other.y ) { return true; } else { return false; } } 147 In K la s s e Point Gut e r Ans a t z , ab e r wo l l e n an d e r e s equals § Go o d N e w s : Wi r kö n n e n da s ge e r b t e Ve r h a l t e n än d e r n in d e m di e Kl as s e ei n e Me t h o d e equals de fi ni e r t . § Ne u e Met h o d e üb e r s c hr e i b t das v o n Object ge e r b t e Ve r h a l t e n . § Di e s e Met h o d e so l l t e de n Zu s t a n d de r zw e i Ob j e kt e ve r g l e i c h e n und true zu r ü c k g e b e n we n n si e di e se l b e n x/y Ko o r d i n a te n habe n . Ei n e fe h l e r h a f t e Lö s u n g : public boolean equals(Point other) { if ( x == other.x && y == other.y ) { return true; } else { return false; } } 148 In K la s s e Point Gut e r Ans a t z , ab e r wo l l e n an d e r e s equals § Go o d N e w s : Wi r kö n n e n da s ge e r b t e Ve r h a l t e n än d e r n in d e m di e Kl as s e ei n e Me t h o d e equals de fi ni e r t . § Ne u e Met h o d e üb e r s c hr e i b t das v o n Object ge e r b t e Ve r h a l t e n . § Di e s e Met h o d e so l l t e de n Zu s t a n d de r zw e i Ob j e kt e ve r g l e i c h e n und true zu r ü c k g e b e n we n n si e di e se l b e n x/y Ko o r d i n a te n habe n . § Ei n e fe h l e r h a f t e Lö s u n g : public boolean equals(Point other) { if ( x == other.x && y == other.y ) { return true; } else { return false; } } 149 In K la s s e Point § Kö n n e n wi r di e s e Me t h o d e be s s e r sc h r e i b e n ? 150 § Kö n n e n wi r di e s e Me t h o d e be s s e r sc h r e i b e n ? public boolean equals(Point other) { return ( x == other.x && y == other.y ); } § El e g a n t e r -- ab e r im m e r no c h ni c h t ga n z ri ch t i g ! 151 In K l a s s e Point P r o ble m e mi t die s e r Me t h od e § Es m u ss l e g a l se i n ei n Point Ob j e k t mi t ir g e n d e in e m Ob j e k t zu ve r g l e i c h e n ( ni c h t nur mi t Ex e m p l a r e n vo n Point ): // this should be allowed Point p = new Point(7, 2); if ( p.equals(\"hello \")) { // false ... § equals so l l t e im m e r false zu r ü c k g e b e n we n n da s Ar g u m e n t ke i n Point is t . 153 equals mu s s be l i e bi g e Re f e r e n z e n ak z e p t i e r e n public boolean equals( ????????? ) { st at e m e n t ( s ) t h a t r e t u r n a bo o l e a n v a lu e ; } 155 equals und Object public boolean equals( Object na m e ) { st at e m e n t ( s ) t h a t r e t u r n a bo o l e a n v a lu e ; } De r Pa r a m e t e r zu equals mu s s vo m Ty p Object se i n Ge n a u e r : Re f e r e n z ( Ve r w e i s ) a u f Ob j e kt Nu r s o ka n n equals in Object übe r s c hr i e be n we r d e n Mi t ei n em Object Pa r a m e t e r ka n n je d e s Ob j e k t übe r g e be n we r d e n 156 equals und Object public boolean equals( Object na m e ) { st at e m e n t ( s ) t h a t r e t u r n a bo o l e a n v a lu e ; } De r Pa r a m e t e r zu equals mu s s vo m Ty p Object se i n Ge n a u e r : Re f e r e n z ( Ve r w e i s ) a u f Ob j e kt Nu r s o ka n n equals in Object übe r s c hr i e be n we r d e n Mi t ei n em Object Pa r a m e t e r ka n n je d e s Ob j e k t übe r g e be n we r d e n Ab e r : We n n wi r abe r de n ( ge n a u e n ) Ty p ni c h t ke n n e n , wi e kö n n e n wi r de n P ar am e t e r ve r g l e i c h e n ? 157 Ei n e we i t e r e Lö sung mi t P r o ble m e n § Hi e r is t ei n e we i t e r e Im p le m e n t a t io n v o n equals : public boolean equals(Object obj) { return x == obj.x && y == obj.y ; } § De r C o m p i l e r be s c h w e r t si c h : Point.java:36: cannot find symbol symbol : variable x location: class java.lang.Object return x == obj.x && y == obj.y ; ^ ^ 158 Ei n e we i t e r e Lö sung mi t P r o ble m e n § Hi e r is t ei n e we i t e r e Im p le m e n t a t io n v o n equals : public boolean equals(Object obj) { return x == obj.x && y == obj.y ; } § De r C o m p i l e r be s c h w e r t si c h : Point.java:36: cannot find symbol symbol : variable x location: class java.lang.Object return x == obj.x && y == obj.y ; ^ ^ D. h . : « obj kö n n t e ir g e n d e in Ob j e kt se i n . Ni c h t je d e s Ob j e kt ha t ei n x At t r i b u t .» 159 «Cas t s » ( Um w an d l u n g e n ) fü r Ob j ek t e § Lö s u n g : Um w a ndl ung (« ca s t ») d e r Re f e r e n z au f ei n Object in ei n e Re f e r e n z au f ei n en Point public boolean equals(Object obj) { Point other = (Point) obj; return x == other.x && y == other.y ; } § Da s Pr o gr a m m ve r w a nd e l t zu r La u f z e i t di e Re f e r e n z in obj ( ka n n ei n e Re f e r e n z au f ir g e n d e in Object Ex e m p l a r se i n ) i n ei n e Re f e r e n z au f ei n Point Ex e m p l a r . 161 «Cas t s » ( Um w an d l u n g e n ) fü r Ob j ek t e § Ge na ue r : ei n e Um w a ndl ung ei n es Re f e r e n z t y p e s ( Ty p 1 ) Re f e r e n z V a r i a b l e V o m T y p 2 Be is p ie l : (Point) obj § Wi r d of t in ei n er Re f e r e n z v a r i a b l e ( fü r Ty p 1 ) ge s p e i c h e r t Be is p ie l : Point p = (Point) obj; § Zu r Un t e r s c he i dung vo n Um w a ndl ung e n de r Ba s i s t y p en (« ca s t ») sp r e c h e n wi r [ ma n c h ma l ] v o n ei n er Ty p u m w a n d l u n g (« ty p e ca s t ») 162 «Cas t s » ( Um w an d l u n g e n ) fü r Ob j ek t e Point other = (Point) obj; § Fü r other si n d di e A t t r i but e ei n es Point de fi ni e r t § other.x wi r d vo m Co m p i l e r ak z e p t i e r t § Um w a ndl ung e n (« t y p e c a s t s » ) für Ob j e k t e un t e r s c he i de n si c h vo n Um w a ndl ung e n ei n es Ba s i s t y p s § Wi r ände r n ei n e Object Re f e r e n z in ei n e Point Re f e r e n z . § Di e s ände r t ni c h t das Ob j e kt . § Ei g e n t l i c h sa g e n wi r nur de m C o m pi l e r das e r an n e h m e n ka n n das s obj auf ei n Point Ob j e kt ve r w e i s t . 164 Cas t mi t de r Lupe § Cl i en t c o d e: Point p1 = new Point(5, 3); Point p2 = new Point(5, 3); if (p1.equals(p2)) { System.out.println(\"equal \"); } x 5 y 3 p1 p2 ... x 5 y 3 165 Cas t mi t de r Lupe § Cl i en t c o d e: Point p1 = new Point(5, 3); Point p2 = new Point(5, 3); if (p1.equals(p2)) { System.out.println(\"equal \"); } public boolean equals( Object obj) { Point other = (Point) obj; return x == other.x && y == other.y ; } x 5 y 3 p1 p2 ... x 5 y 3 166 obj Cas t mi t de r Lupe § Cl i en t c o d e: Point p1 = new Point(5, 3); Point p2 = new Point(5, 3); if (p1.equals(p2)) { System.out.println(\"equal \"); } public boolean equals( Object obj) { Point other = (Point) obj; return x == other.x && y == other.y ; } x 5 y 3 p1 p2 ... x 5 y 3 obj other Nu r di e A t t r i but e / Me t h o d e n vo n Object si n d be k ann t 170 Cas t mi t de r Lupe § Cl i en t c o d e: Point p1 = new Point(5, 3); Point p2 = new Point(5, 3); if (p1.equals(p2)) { System.out.println(\"equal \"); } public boolean equals( Object obj) { Point other = (Point) obj; return x == other.x && y == other.y ; } x 5 y 3 p1 p2 ... x 5 y 3 other Au c h di e A t t r i but e / Me t h o d e n vo n Point si n d be k ann t 171 obj Ha b en wi r a l l es b ed a c h t? § Di e se V e r si o n üb e r s c hr e i b t Object.equals(Object) : @Override public boolean equals(Object obj) { Point other = (Point) obj; return x == other.x && y == other.y ; } § Wa s p a s s i e r t w e n n obj au f i r g e n d e i n E x e m p l ar ( n i c h t Point Ex e m p l a r ) v e r w e i s t ? § Re t u r n s o l l t e false se i n ( i s t si c h e r n i c h t g l e i c h ) 173 Un t e r s c h i e d l i c h e Ty p e n ve r g l e i c h e n Point p = new Point(7, 2); if ( p.equals(\"hello \")) { // should be false ... } § Oh n e we i t e r e Än d e r u n g e n gi b t es ei n e Ex c e p t i o n zu r La u f z e i t : Exception in thread \"main\" java.lang.ClassCastException : java.lang.String at Point.equals(Point.java:25) at PointMain.main(PointMain.java:25) § Da s P r o b l e m is t di e C a s t An w e i s u n g public boolean equals(Object obj) { Point other = (Point) obj; 174 Cas t s – es ge h t nic h t al l e s § We n n ei n Pr o gr a m m ei n e Um w a ndl ung ei n es Re f e r e n z t y p s en t h ä l t , da nn pr üft da s La u f z e i t Sy s t e m o b d a s Ob j e k t (a u f da s ve r w i e s e n wi r d ) wi r k l i c h di e s e n Ty p ha t Point p = new Point(); Object o = p ; String s = \"hello\"; Point q = (Point) o ; Point r = (Point) s; // not allowed -- Exception § Wi r mü s s en si c h e r s e i n ( od e r pr üf e n ) da s s ei n e Um w a ndl ung pr o bl e m l o s mö g l i c h is t . 175 De r instanceof Op er a t o r if ( na m e instanceof ty p e ) { st a t e m e n t ( s ) ; } expression result s instanceof Point false s instanceof String true p instanceof Point true p instanceof String false p instanceof Object true s instanceof Object true null instanceof String false null instanceof Object false • Pr üft ob ei n e Va r i a b l e a u f ei n Ob j e c t di e s e s Ty p s ve r w e i s t . § Er g i b t boolean Re s u l t a t . String s = \"hello\"; Point p = new Point(); 179 Ve r b e s s e r t e equals Me t h od e ( en d l i c h ) // Returns whether obj refers to a Point object with // the same ( x , y ) coordinates as this Point. public boolean equals( Object obj) { if (obj instanceof Point) { // obj is a Point; cast and compare it Point other = (Point) obj; return (x == other.x ) && (y == other.y ); } else { // obj is not a Point; cannot be equal return false; } } 180 Be m e r k u n g : toString () § Je tz t ve r s t e h e n wi r wa r u m wi r ei n e Me t h o d e toString () de fi ni e r e n ko n n t e n § … u n d mu s s t e n we n n wi r In f o r m a t i o n e n übe r ei n Person Ob j e kt dr uc k e n wo l l t e n § toString () is t in Ob j e k t de fi ni e r t § De f aul t Rü c k g a b e is t Ad r e s s e + Ty p § Kö n n e n ei g en e Ve r s i o n dur c h Üb e r s c h r e i b e n er s c h a f f en 181 Be m e r k u n g : toString () § Je tz t ve r s t e h e n wi r wa r u m wi r ei n e Me t h o d e toString () de fi ni e r e n ko n n t e n § … u n d mu s s t e n we n n wi r In f o r m a t i o n e n übe r ei n Person Ob j e kt dr uc k e n wo l l t e n § toString () is t in Ob j e k t de fi ni e r t § De f aul t Rü c k g a b e is t Ad r e s s e + Ty p § Kö n n e n ei g en e Ve r s i o n dur c h Üb e r s c h r e i b e n er s c h a f f en § Mu s s Met h o d e aus Object übe r s c hr e i be n und Si c h t b a r k e i t public habe n 182 Be m e r k u n g : toString () public class Person { @Override public String toString () { return name + \" (#\"+id+\") ist \" + Arrays.toString (hours) + \" \" + Arrays.toString (overtime); } ... § An n n ot a t i on @Override hi e r si n n v o l l § Ve r h i n d e r t Fe h l e r we g e n ei n es Sc h r e i b f e h l e r s public class Person { public String tostring () { return name + ... } 183 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § Pr o gr a m m a us führ ung k a nn z u ung e p l a n t e m E r e i g ni s führ e n § Üb e r r a s c h u n g ( su r p r ise ) § Ja v a S y s t e m e n t d e c k t E r e i g n i s u n d g e n e r i e r t e i n e Ex c e p t i o n § \"E x c e p t i o n w i r d g e w o r f e n\" – und i r g e ndw o be hande l t § Ur s a c he i s t ( m i nde s t e ns ) e i n F e hl e r i m Pr o gr a m m § Bei s p i el e § ArrayIndexOutOfBoundsException be i ve r s u c h t e m Zu g r i f f auf ni c h t ex i s t i e r e n d e s Ar r a y E l e m e n t § ArithmeticException , NullPointerException 184 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § Es g i b t e i n e V e r e r b u n g s - hi e r a r c hi e für E x c e p t i o ns § RuntimeException is t di e S upe r c l a s s für vi e l e Ex c e p t i o n s 185 NullPointer Exception Arithmetic Exception Runtime Exception 186 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § Es g i b t e i n e V e r e r b u n g s - hi e r a r c hi e für E x c e p t i o ns § RuntimeException is t di e S upe r c l a s s für vi e l e Ex c e p t i o n s § Ebe ne n fü r we i t e r e Sp e z i a l i si e r u n g e n 187 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § RuntimeException is t Su b c l ass vo n Exceptions § Mi t vi e l e n an d e r e n Su b c l asse s 188 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Ve r e r b u n g s h i e r a r c h i e Au s \"J a v a i n a N u t s h e l l \" 7t h E d i t i o n B E v a n s , D Fl an ag an De c 2 0 1 8 O' R e i l l y M e d i a, In c . 189 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § RuntimeException is t Su b c l ass vo n Exceptions § Mi t vi e l e n an d e r e n Su b c l asse s § Ex c e p t i o n s la s s e n ( ma n c h ma l ) Ko r r e k t u r e n zu 190 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § We n n da s J a v a S y s t e m Pr o bl e m e ha t , da nn is t da s ei n Fe h l e r ( Er r o r ) § St a t u s fe s t h a l t e n § Ge or d n e t e r Sh u t d o w n 191 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § Kl as s e Error mi t Su b k l asse n 192 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Error IOError VirtualMachine Error StackOverflow Error OutOfMemory Error Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z § Error und Exception ha be n di r e k t e Su p e r c l ass: Throwable 193 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Error IOError VirtualMachine Error StackOverflow Error OutOfMemory Error Throwable Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z 194 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Error IOError VirtualMachine Error StackOverflow Error OutOfMemory Error Throwable Object Error s u n d Exception s § Ma n c h e u n e r w ü n s c h t e n E r e i g n i s s e m u s s t e n d e m C o m p i l e r an g e k ü n d i g t w e r d e n § Be is p ie l: … throws FileNotFoundException fü r M e t h o d e § «U n ch e ck e d E x ce p t i o n s » – im m e r e r w a r t e t u n d d a h e r n ic h t vo m C o m p i l e r r e g i s t r i e r t § RuntimeException – und al l e S ubc l as s e s § Error – und al l e S ubc l as s e s § «C h e ck e d E x ce p t i o n s » – mu s s (d em C o m p i l er) an g e k ü n d i g t w e r d e n § Throwable – und al l e S ubc l as s e s bi s auf Error § Exception – und al l e S ubc l as s e s bi s auf RuntimeException 195 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z 196 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Error IOError VirtualMachine Error StackOverflow Error OutOfMemory Error Throwable Object Un c h e c k e d Ch e c k e d 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 7. 0 Ve r e r b u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 - 2021 Al l r i g h t s r e s e r v e d . 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 7. 0 Ve r e r b u n g Ke i n e \" E P r o g \" V o r l e s u n g am 2 2 . N ov . St a t t d e s s e n \"A l g o ri thm e n und Da t e n s t r u k t u r e n \" ML D 2 8 / E 1 2 / L i v e S t r e a m (Nä c h s t e F ol i e n K op i e a u s f r ü h e r e r V or l e s u n g , h i e r n u r d a m i t Si e l o k al n ac h sc h l ag e n k ö n n e n ) 3 Kl a s s e Angestellte public class Angestellte { private int years; protected double salary = 90000.0; public Angestellte () { this (0); } public Angestellte ( int y){ years = y; } public Angestellte ( int y, double s){ year = y; salary = s; } public int getVacationDays () { return 20 + getSeniorityBonus (); } public int getSeniorityBonus () { return 2 * years; } public int getHours () { return 42; } public int getYears () { return years; } public double getSalary () { return salary; } public String getVacationForm (){ return \"green\"; } } // Angestellte 4 v6 Arzt Kl a s s e public class Arzt extends Angestellte { public Arzt ( int years) { super (years); } @ Override public int getVacationDays () { return super. getVacationDays () + 5; } @ Override public String getVacationForm () {... } public void setSalary (double s) { salary = s; } public void treatPatient () { System.out.println (\"I'll take care of you!\"); } 5 v6 FaGe Kla s s e public class FaGe extends Angestellte { public FaGe () { super (0); } public FaGe ( int years) { super (years); } public void setSalary ( double s) { salary = s; } @ Override public int getSeniorityBonus () { return 0; } public void workAtStation ( int station) { … } } // FaGe 6 v6 Administrator und OPFachkraft Kl a s s e n public class Administrator extends Angestellte { public Administrator( int years) { super (years); salary = super.getSalary ()+5000.0; } public void processBill () { ... } } public class OPFachkraft extends FaGe { public OPFachkraft ( int years) { super (years); salary = super.getSalary () + 10000.0; } public void manageOP () {... } } 7 v6 v6 Ve r e r b u n g s h i e r a r c h i e 8 An g es t el l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t Üb e r s i c h t 7. 1 Ei n l e i t u n g 7. 2 N e u e K l a s s e n aus ex i s t i e r e n d e n Kl a s s e n 7. 3 Ve r e r b u n g und Ko n s t r u k t o r e n 7. 4 Se l e k t i v Ve r h a l t e n (v o n Ob j e k t e n ) fe s t l e g e n 7. 5 Kl a s s e Object 7. 6 Po l y m o r p h i s m u s Co p y r i g h t ( c ) P e a r s o n 2 0 1 3 a n d T h o m a s G r o s s 2 0 1 6 , 2 0 1 9 . Al l r i g h t s r e s e r v e d . 9 Po l y m o r p h i s m u s § Po l y – vi e l e § Mo r p h e – Ge s t a l t , F o r m , Au s s e h e n [ Du d e n ] § gr i e ch i s ch mo r p h ḗ = G e s t a l t , F o r m 10 Po l y m o r p h i s m u s (g r i e c h i s c h fü r Vi e l g e s t a l t i g k e i t ) Be d e u t u n g : da s Vi e l g e s t a l t i g s e i n Ih r e Su c h e im Wö r t e r b u c h na c h Vi e l g e s t a l t i g s e i n er g a b fo l g e n d e Tr e f f e r : Po l y m o r p h i s m u s § Po l y m o r p h i s m u s : Ei n Pr o gr a m m is t so en t wi c k el t da s s es für un t e r s c hi e dl i c he Ob j e k t t y p e n ve r w e n d e t we r d e n ka n n und se i n Ve r h a l t e n an di e s e Ty p e n an p ass t . § System.out.println ka n n Ob j e kt e je d e n Ty p s aus g e be n . § Je d e r Ty p wi r d auf s e i ne A r t auf de r Ko n s o l e aus g e g e be n . § Scanner() erl a u b t uns ei n en Sc a n n e r fü r Fi l e s , Ko n s o l e (u n d ande r e Qu e l l e n ) zu ko n s t r u i e r e n . 11 Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Zw e i A s p e k t e : § Si c h t b a r k e i t – we l c h e A t t r i b u t e u n d M e t h o d e n s i n d « s i c h t b a r » ? § D. h . k ö n n e n g e l e s e n u n d m o d i f i z i e r t w e r d e n § Bin d u n g – we n n e s m e h r a l s e i n A t t r i b u t / e i n e M e t h o d e m i t d i e s e m Na me n g i b t , w e l c h e / s i s t i n v o l v i e r t ? § Ni c h t s i c h t b a r : B i n d u n g k e i n T h e ma § Ei n sc h r ä n k u n g e n : § Ke i n V e r s t e c k e n ( S h a d o w i n g ) v o n A t t r i b u t e n (f ü r s e r s t e ) § D. h . e v t l . g i b t e s m e h r e r e V e r s i o n e n e i n e r M e t h o d e a b e r i m m e r nur e i n A t t r i but 14 Ko n t e x t § Um übe r S i c h t ba r k e i t und B i ndung r e de n z u k ö nne n br a uc he n w i r § Ei ne R e f e r e nz v ar i abl e ( e i ne s T y p s ) § Ei ne ( M e t ho de n - lo k a le ) V a r ia b le § Ei n P ar am e t e r § Ei n A t t r i but § Ei n O bj e k t ( e x am pl ar ) e i ne r K l as s e ( e i ne s T y p s ) § Re f e r e n z v a r i a b l e b e z i e h t s i c h / v e r w e i s t a u f O b j e k t ( e x e m p l a r ) § Ke i n e n u l l - Re f e r e n z 17 Ko n t e x t § Di e R e g e l n f ü r S i c h t b a r k e i t u n d B i n d u n g so l l e n e s e r l a u b e n , abgek ap s el t e (« en c ap s u l at ed ») Kl a sse n zu e n t w i c k e l n § Kl i e n t e n k ö n n e n d e n Z u s t a n d n u r k o n t r o l l i e r t v e r ä n d e r n /l e se n § Kl a sse n k ö n n e n se p a r a t (w e i t e r ) e n t w i c k e l t w e r d e n § Kl as s e n e r f ü l l e n e i n e n V e r tr ag ( « co n t r a c t ») m i t I n v a ri a n t e n und S e r v i c e s § Da f ür dür f e n s i e auc h Er w ar t ung e n f e s t l e g e n § Kl i e n t e n m ü sse n E r w a r t u n g e n e r f ü l l e n , k ö n n e n m i t V e r t r a g se r f ü l l u n g re c h n e n § Di e s e R e g e l n g e l t e n auc h f ür S ubk l as s e n 18 Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T : 19 T Re f e r e n z a u f … . …. T y p d e s E x e m p l a r s au f d as v er w i es en we r d e n k a n n Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de r Kl a sse T en t h a l t en od e r ei n er Su b c l a ss v o n T en t h a l t en Angestellte leiterin = new Angestellte (); 20 T T Kl a s s e T – st e h t f ü r e in E x e m p la r a u f d a s ve r w i e s e n w i rd Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de r Kl a sse T en t h a l t en od e r ei n er Su b c l a ss v o n T en t h a l t en Angestellte leiterin = new Angestellte (); § Dam i t ka n n ma n a u f d i e A t t r i b u t e v o n T zu g r e i f e n und di e Met h o d e n in T auf r uf e n ( so w e i t erl a u b t , d. h. si c h t b a r ): leiterin.getYears (); // public method leiterin.getSalary (); // public method … = this.years ; // private attribute, only in A method … = years; // private attribute, only in A method … = salary; // protected attribute, in A and subclasses of A 21 T T 23 Ko n t r o l l e d e r S i c h t b a r k e i t d u rc h d i e K l a s s e § Vi e r O p t i o n e n f ü r d i e S i c h t b a r k e i t v o n A t t r i b u t e n u n d Me t h o d e n § übe r al l – Ke y w o r d public § in d e r K la s s e , in ih r e n S u b c la s s e n , in d e r P a c k a g e – Ke y w o r d protected § au c h d an n w e n n d i e S u b c l asse i n e i n e r an de r e n Pa c k a g e i s t § in d e r K la s s e , in d e r P a c k a g e – das i s t de r De f a u l t , ke i n K e y w o r d § nur i n de r K l as s e – Ke y w o r d private § Wa s n i c h t s i c h t b a r i s t k a n n n i c h t a u f g e r u f e n , g e l e s e n , o d e r mo d i f i z i er t w er d en 26 Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de r Kl a sse T od e r ei n er Sub c l a s s S v on T en t h a l t en Angestellte leiterin = new Arzt (1); § Nu r Met h o d e n de r Kl a sse Angestellte kö n n e n fü r das BL A N K Ob j e kt , a u f d a s leiterin ve r w e i s t , auf g e r uf e n we r d e n . leiterin.getVacationForm (); leiterin.getVacationDays (); leiterin.treatPatients (); // not in Angestellte 34 T S T Pr o g r a m m i e r e n mi t und für Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de r Kl a sse T od e r ei n er Sub c l a s s S v on T en t h a l t en Angestellte leiterin = new Arzt (1); § Nu r Met h o d e n de r Kl a sse Angestellte kö n n e n fü r das BL A N K Ob j e kt , a u f d a s leiterin ve r w e i s t , auf g e r uf e n we r d e n . § We n n ei n e Met h o d e fü r leiterin auf g e r uf e n wi r d dann wi r d di e Va r i a n t e de r Kl a sse Arzt aus g e f ühr t – dy n am i s c h e Bin d u n g ! leiterin.getVacationForm (); // yellow leiterin.getVacationDays (); // 27 35 T S T Bi n d u n g § De r T y p d e s O b j e k t e s für da s ei n e Me t h o d e au f g e r u f e n wi r d be s t i m m t di e V e r s i o n de r Me t h o d e – dyn am i s ch e Bi n d u n g ! 36 Ve r e r b u n g s h i e r a r c h i e 37 Angestellte leiterin = new Arzt (1); System.out.println ( leiterin.getVacationDays () ); An g es t el l t e Ar z t / Aer z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t Ar z t ye a r s : 1 sa l a r y : 9 5 0 0 0 . 0 0 Ve r e r b u n g s h i e r a r c h i e 38 Angestellte leiterin = new Arzt (1); System.out.println ( leiterin.getVacationDays () ); An g es t el l t e Ar z t / Aer z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t public int getVacationDays () { return super.getVacationDays ()+5; } public int getVacationDays () { return 20 + getSeniorityBonus (); } 2 * 1 public int getSeniorityBonus() { return 2 * years; } 2 22 27 22 Ar z t ye a r s : 1 sa l a r y : 9 5 0 0 0 . 0 0 Ve r e r b u n g s h i e r a r c h i e 39 Angestellte springer = new FaGe (7); System.out.println ( springer.getVacationDays () ); An g es t el l t e Ar z t / Aer z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ob j e c t Fa G e ye a r s : 7 sa l a r y : 9 0 0 0 0 . 0 0 public int getVacationDays () { return 20 + getSeniorityBonus (); } public int getSeniorityBonus() { return 0; } 0 20 20 Bi n d u n g § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . 40 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } void p() {…} } class R extends S { void p() {…} } T aT = new T(); aT.s0(); aT = new S(); aT.s1(); aT.s2(); aT = new R(); aT.s1(); aT.s2(); void s1(){} void s2(){} B y r e que s t : m it @ O v e r r ide 41 class T { void s0(){ m(); } void m(){…} } class R extends S { @Override void p() {…} } void s1(){} void s2(){} class S extends T { @Override void s1() { m(); } @Override void s2() { p(); } void p() {…} } Si c h t b ark e i t u n d B i n d u n g 42 class T { void s0(){ m(); } private void m(){…} } class S extends T { void s1() { m(); //Error } void s2() { p(); } void p() {…} } class R extends S { void p() {…} } void s1(){} void s2(){} error: cannot find symbol m(); ^ symbol: method m() location: class S class S extends T { void s1() { m(); } void s2() { p(); } void p() {…} } Met h o d e m() is t ni c h t de f i ni e r t ( fü r S ) we n n m() in T Si c h t b a r k e i t private ha t . Si c h t b ark e i t B i n d u n g 43 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } void p() {…} } class R extends S { private void p() {…} } void s1(){} void s2(){} error: p() in R cannot override p() in S private void p() {} ^ attempting to assign weaker access privileges; was package We n n Met h o d e m() in d e r S u b c la s s X Met h o d e m() aus de r S upe r c l as s B as e übe r s c hr e i b t , dann dar f di e Si c h t b a r k e i t vo n m() in X ni c h t re s t ri k t i ve r se i n al s di e Si c h t b a r k e i t vo n m() in Ba s e Je d e s Ex e m p l a r v o n X is t au c h Ex e m p l a r v o n B a s e , a l s o müs s e n di e Me t h o d e n au s Ba s e ve r f ü g b a r se i n . al l g e me i n e F o r m ulie r ung Si c h t b ark e i t B i n d u n g 44 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } void p() {…} } class R extends S { private void p() {…} } void s1(){} void s2(){} error: p() in R cannot override p() in S private void p() {} ^ attempting to assign weaker access privileges; was package Hi e r : We n n Met h o d e p() in d e r S u b c la s s R Met h o d e p() aus de r S upe r c l as s S übe r s c hr e i b t , dann dar f di e Si c h t b a r k e i t vo n p() in R ni c h t re s t ri k t i ve r se i n al s di e Si c h t b a r k e i t vo n p() in S . Je d e s Ex e m p l a r v o n R is t au c h Ex e m p l a r v o n S , a l s o müs s e n di e Me t h o d e n au s S ve r f ü g b a r se i n . Bi n d u n g 45 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } private void p() {…} } class R extends S { private void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Bi n d u n g 46 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } protected void p() {…} } class R extends S { void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Ni c h t e r l a ub t – p( ) i n R e r f ül l t ni c h t B e di ng ung Bi n d u n g 47 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } protected void p() {…} } class R extends S { public void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Bi n d u n g 48 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } private void p() {…} } class R extends S { protected void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Ex t r a : a u f W u n s c h Bi n d u n g 49 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } protected void p() {…} } class R extends S { protected void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Ex t r a : a u f W u n s c h Bi n d u n g 50 class T { void s0(){ m(); } void m(){…} } class S extends T { void s1() { m(); } void s2() { p(); } /*default*/ void p() {…} } class R extends S { protected void p() {…} } void s1(){} void s2(){} aT.s0(); aT = new S(); aT.s1(); aT.s2(); T aT = new R(); aT.s1(); aT.s2(); § De r T y p de s O bj e k t e s fü r das ei n e Met h o d e auf g e r uf e n wi r d be s t i m m t di e V e r s i o n de r Met h o d e – dy n am i s c h e Bin d u n g ! § Ab e r d i e Me t h o d e mus s si c h t b ar se i n § Es sp i e l t ke i n e Ro l l e ob di e Met h o d e in ei n er Su p e r c l a ss de f i ni e r t is t (« u p c a l l » ) od e r ei n er Su b c l a ss (« do w nc al l ») . Po l y m o r p h i s m u s Su b t yp (« su b ty p e ») : Ty p ei n er Su b c l ass. § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf ei n Ob j e kt de s Ty p s T od e r ei n es Sub t y p s vo n T en t h a l t en § Kl a sse T be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § De r Ty p de r Re f e r e n z v a r i a b l e is t st a t i s c h be k ann t (u n d dam i t de m Co m p i l e r be k ann t ) u n d be s t i m m t di e Me n g e de r Met h o d e n § De r ak t ue l l e (Su b ) Ty p de s Ex e m pl ar s , auf das di e Re f e r e n z v a r i a b l e ve r w e i s t , be s t i m m t di e V e r s i o n de r auf g e r uf e ne n Met h o d e § Di e s e r Ty p is t er s t zu r La u f z ei t be k ann t , d ie auf g e r uf e ne Met h o d e wi r d dy n am i s c h be s t i m m t . 53 T S R Q T Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p S ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de s Ty p s S od e r ei n es Sub t y p s vo n S en t h a l t en § Kl a sse S be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § Dahe r ka n n ei n er Re f e r e n z v a r i a b l e aT fü r de n Ty p T d e r W e r t ei n er Re f e r e n z v a r i a b l e aS fü r de n Ty p S zu g e w i e s e n we r d e n § Ab e r ni c h t um g e k e hr t . 57 T S R Q T S T S S aS aT = aS; T S S aS T aT Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p S ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de s Ty p s S od e r ei n es Sub t y p s vo n S en t h a l t en § Kl a sse S be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § Dahe r ka n n ei n er Re f e r e n z v a r i a b l e aT fü r de n Ty p T d e r W e r t ei n er Re f e r e n z v a r i a b l e aS fü r de n Ty p S zu g e w i e s e n we r d e n § Ab e r ni c h t um g e k e hr t . 58 T S R Q T S T S aS = aT; ✘ T aT T S S aS T aT Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p S ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de s Ty p s S od e r ei n es Sub t y p s vo n S en t h a l t en § Kl a sse S be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § Dahe r ka n n ei n er Re f e r e n z v a r i a b l e aT fü r de n Ty p T d e r W e r t ei n er Re f e r e n z v a r i a b l e aS fü r de n Ty p S zu g e w i e s e n we r d e n § Ab e r ni c h t um g e k e hr t . 59 T S R Q T S T S aS = aT; ✘ T aT Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p S ka n n ei n e Re f e r e n z auf BL A N K ei n Ob j e kt de s Ty p s S od e r ei n es Sub t y p s vo n S en t h a l t en § Kl a sse S be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § Dahe r ka n n ei n er Re f e r e n z v a r i a b l e aT fü r de n Ty p T d e r W e r t ei n er Re f e r e n z v a r i a b l e aS fü r de n Ty p S zu g e w i e s e n we r d e n § Um g e k e h r t nur mi t Ca s t 61 T S R Q T S T S aS = (S) aT; T aT T S S aS T aT Pa r a m e t e r § Di e se l b e n R e g e l n g e l t e n f ü r d i e B e z i e h u n g z w i sc h e n ak tu e l l e n P ar am e t e r n ( A r g u m e n t e n ) u n d f o r m al e n Pa r a m e t e r n § Üb e r g a b e e i n e s P a r a m e t e r s w i e Z u w e i s u n g fo r m a l e r _ P a r a m e t e r = a k t u e l l e r _ P a r a m e t e r ( a n S t e l l e d e s A u f r u f s ) 62 Po l y m o r p h i s m u s und P a r a m e t e r § We n n ei n e Me t h o d e al s Pa r a m e t e r ei n e Re f e r e n z v a r i a b l e für de n Ty p T er w a r t e t , da nn ka n n au c h ei n e Re f e r e n z v a r i a b l e ei n es Su b ty p vo n T übe r g e be n we r d e n . public static void printInfo ( Angestellte ang) { // works with any argument that is of type // Angestellte or a subtype of Angestellte } § Da m i t kö n n e n wi r ei n e Me t h o d e so sc h r e i b e n da s s si e Re f e r e n z e n au f T u n d al l e Su b t ypen vo n T al s Pa r a m e t e r zu l ä s s t . 63 Angestellte temp; temp = new Angestellte(); temp = new Arzt(); temp = new FaGe(); temp = new OPFachkraft(); temp = new Administrator(); printInfo(temp); printInfo(Angestellte ang) { ... } 64 P o l y m o rp h i s m u s und P a r a m e t e r public class AngestellteMain { public static void main( String [] args ) { Arzt lisa = new Arzt (4); FaGe steve = new FaGe (7); printInfo ( lisa ); printInfo ( steve ); } public static void printInfo ( Angestellte ang ) { System.out.println (\"salary: \" + ang.getSalary ()); System.out.println (\" v.days : \" + ang.getVacationDays ()); System.out.println (\" v.form : \" + ang.getVacationForm ()); System.out.println (); } } Ou t p u t : salary: 100000.0 salary: 90000.0 v.days : 28 v.days : 20 v.form : yellow v.form : green 67 Po l y m o r p h i s m u s und Ar r a y s Ar r a y s für di e S upe r c l a s s kö n n e n Re f e r e n z e n au f Su b c l ass Ex e m p l a r e al s El e m e n t en t h a l t en public class AngestellteMain { public static void main( String [] args ) { Angestellte [] staff = { new Arzt (4), new FaGe (7), new OPFachkraft (12), new Adminstrator (2) }; for ( int i = 0; i < staff.length ; i ++) { printInfo (staff[ i ]); } } } 69 Po l y m o r p h i s m u s und Ar r a y s Ou t p u t : salary: 110000.0 v.days : 28 v.form : yellow salary: 90000.0 v.days : 20 v.form : green salary: 100000.0 v.days : 20 v.form : green salary: 95000.0 v.days : 24 v.form : green 71 Po l y m o r p h i s m u s Su b t yp (« su b ty p e ») : Ty p ei n er Su b c l ass. § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf ei n Ob j e kt de s Ty p s T od e r ei n es Sub t y p s vo n T en t h a l t en § Kl a sse T be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § De r Ty p de r Re f e r e n z v a r i a b l e is t st a t i s c h be k ann t (u n d dam i t de m Co m p i l e r be k ann t ) u n d be s t i m m t di e Me n g e de r Met h o d e n § De r ak t ue l l e (Su b ) Ty p de s Ex e m pl ar s , auf das di e Re f e r e n z v a r i a b l e ve r w e i s t , be s t i m m t di e V e r s i o n de r auf g e r uf e ne n Met h o d e § Di e s e r Ty p is t er s t zu r La u f z ei t be k ann t , d ie auf g e r uf e ne Met h o d e wi r d dy n am i s c h be s t i m m t . 72 T S R Q T Po l y m o r p h i s m u s Üb u n g § 4 - 5 Kl as s e s in Ve r e r b u n g s h i e r a r c h i e § Ei n Kl i e n t en t h ä l t Re f e r e n z v a r i a b l e und ru f t Me t h o d e n au f , für Ex e m p l a r e de r K l a s s e n § Met h o d e n ge b e n St r i n g s aus § Si e mü s s en da s Pr o gr a m m le s e n und he r a us fi nde n we l c h e Me t h o d e n au f g e r u f e n we r d e n . 73 Ne h m e n wi r an di e se 4 Kl as s en wu r d e n d e f i n i e rt : public class Foo { public void method1() { System.out.println(\"foo 1\"); } public void method2() { System.out.println(\"foo 2\"); } public String toString () { return \" foo \"; } } public class Bar extends Foo { public void method2() { System.out.println(\"bar 2\"); } } 74 Be i p i e l , T e i l 2 public class Baz extends Foo { public void method1() { System.out.println(\"baz 1\"); } public String toString () { return \" baz \"; } } public class Mumble extends Baz { public void method2() { System.out.println(\"mumble 2\"); } } 75 Be i s p i e l , Te i l 3 § Wa s wä r e de r O ut put für di e s e s Kl i e n t e n Pr o gr a m m ? Foo [] pity = { new Baz (), new Bar(), new Mumble(), new Foo ()}; for ( int i = 0; i < pity.length ; i ++) { System.out.println(pity[i ]); pity[i].method1(); pity[i].method2(); System.out.println (); } 76 Be i p i e l auf ei n er Se i t e public class Foo { public void method1() { System.out.println (\"foo 1\"); } public void method2() { System.out.println (\"foo 2\"); } public String toString () { return \"foo\"; } } public class Bar extends Foo { public void method2() { System.out.println (\"bar 2\"); } } public class Baz extends Foo { public void method1() { System.out.println (\" baz 1\"); } public String toString () { return \" baz \"; } } public class Mumble extends Baz { public void method2() { System.out.println (\"mumble 2\"); } } 77 § Or g a n i s i e r e n Si e di e Kl as s e n vo n ob e n ( Su p e r c l ass ) na c h un t e n (S u b c l a s s ). Kl as s e B er w ei t er t Kl as s e A ( Kl as s e B er b t vo n Kl as s e A) § Bea c h t en Si e di e ge e r b t e n Me t h o d e n § Kur s i v / ( Kur s i v ) / Un t e r s t r e i c h e n § Not i e r e n Si e ( we n n mö g l i c h ) O u t p u t od e r Ber ec h n u n g de r Me t h o d e n Ze i c h n e n wir die Abhä ngigk e it e n A B 78 Ze i c h n e n wir die Abhä ngigk e it e n 79 Üb e r s i c h t dur c h ei n e Ta b e l l e me t h o d Fo o Ba r Ba z Mu m b l e method1 method2 toString me t h o d Fo o Ba r Ba z Mu m b l e method1 foo 1 baz 1 method2 foo 2 bar 2 mumble 2 toString foo baz me t h o d Fo o Ba r Ba z Mu m b l e method1 foo 1 foo 1 baz 1 baz 1 method2 foo 2 bar 2 foo 2 mumble 2 toString foo foo baz baz 81 Be i s p i e l , Te i l 3 § Wa s wä r e de r O ut put für di e s e s Kl i e n t e n Pr o gr a m m ? Foo [] pity = { new Baz (), new Bar(), new Mumble(), new Foo ()}; for ( int i = 0; i < pity.length ; i ++) { System.out.println(pity[i ]); pity[i].method1(); pity[i].method2(); System.out.println (); } 82 Be i s p i e l An t w o r t Foo[] pity = { new Baz(), new Bar(), new Mumble(), new Foo()}; for ( int i = 0; i < pity.length ; i ++) { System.out.println(pity[i ]); pity[i].method1(); pity[i].method2(); System.out.println (); } § Ou t p u t : baz baz 1 foo 2 foo foo 1 bar 2 baz baz 1 mumble 2 foo foo 1 foo 2 83 Ei n we i t e r e s Be i s p i e l § Di e Re i h e n f o l g e de r K l as s e n is t zu f ä l l i g § Met h o d e n ru f en ma n c h ma l ande r e Met h o d e n auf . Ac h tu n g ! public class Lamb extends Ham { public void b() { System.out.print (\"Lamb b \"); } } 84 public class Ham { public void a() { System.out.print (\"Ham a \"); b(); } public void b() { System.out.print (\"Ham b \"); } public String toString () { return \"Ham\"; } } F o r t s e t z ung (2 ) public class Spam extends Yam { public void b() { System.out.print (\"Spam b \"); } } public class Yam extends Lamb { public void a() { System.out.print (\"Yam a \"); super .a (); } public String toString () { return \"Yam\"; } } 86 Al l e s au f ein er Se i t e public class Spam extends Yam { public void b() { System.out.print (\"Spam b \"); } } public class Yam extends Lamb { public void a() { System.out.print (\"Yam a \"); super .a (); } public String toString () { return \"Yam\"; } } 87 public class Ham { public void a() { System.out.print (\"Ham a \"); b(); } public void b() { System.out.print (\"Ham b \"); } public String toString () { return \"Ham\"; } } public class Lamb extends Ham { public void b() { System.out.print (\"Lamb b \"); } } F o r t s e t z ung (3 ) § Wa s wä r e de r O ut put für di e s e s Kl i e n t e n Pr o gr a m m ? Ham[] food = { new Lamb(), new Ham(), new Spam(), new Yam()}; for ( int i = 0; i < food.length ; i ++) { System.out.println (food[ i ]); food[ i ].a(); System.out.println (); // to end the line of output food[ i ].b(); System.out.println (); // to end the line of output System.out.println (); } 88 Kla s s e n Dia gr a m 89 Po l y m o r p h i s m i n a c t i o n § Lamb er b t Me t h o d e a vo n Ham . a ru f t b au f . A b e r Lamb übe r s c hr e i b t b ... public class Ham { public void a() { System.out.print (\"Ham a \"); b(); } public void b() { System.out.print (\"Ham b \"); } public String toString () { .. } } public class Lamb extends Ham { public void b() { System.out.print (\"Lamb b \"); } } 90 Ou t p u t v o n a für Lamb : Ham a Lamb b Ta b e l l e me t h o d Ha m La m b Ya m Sp a m a b toString me t h o d Ha m La m b Ya m Sp a m a toString 91 F o r t s e t z ung (3 ) § Wa s wä r e de r O ut put für di e s e s Kl i e n t e n Pr o gr a m m ? Ham[] food = { new Lamb(), new Ham(), new Spam(), new Yam()}; for ( int i = 0; i < food.length ; i ++) { System.out.println (food[ i ]); food[ i ].a(); System.out.println (); // to end the line of output food[ i ].b(); System.out.println (); // to end the line of output System.out.println (); } 92 Po l l Er g e b n i s Ham[] food = { new Lamb(), new Ham(), new Spam(), new Yam()}; for ( int i = 0; i < food.length ; i ++) { System.out.println (food[ i ]); food[ i ].a(); food[ i ].b(); System.out.println (); } § Ou t p u t : Ham Ham a Lamb b Lamb b Ham Ham a Ham b Ham b Yam Yam a Ham a Spam b Spam b Yam Yam a Ham a Lamb b Lamb b 93 Po l l Ta b e l l e me t h o d Ha m La m b Ya m Sp a m a b toString me t h o d Ha m La m b Ya m Sp a m a Ham a b() Yam a Ham a b() b Ham b Lamb b Spam b toString Ham Yam me t h o d Ha m La m b Ya m Sp a m a Ham a b() Ham a b() Yam a Ham a b() Yam a Ham a b() b Ham b Lamb b Lamb b Spam b toString Ham Ham Yam Yam 94 Po l l Ke i n Be i p i e l class SchwanzLurche extends Lurche { void info() { System.out.print (\" Salamander&Molche \"); } void zuerst () { // Larven entwickeln ... System.out.println (\" Arme zuerst \"); } } class FroschLurche extends Lurche { public String toString () { return \" FroschLurche \" + super .toString (); } void zuerst () { // Larven entwickeln ... System.out.println (\" Beine zuerst \"); } } 95 Al l e Me t h o d e n public abe r aus Pl a t z g r ü n d e n tl w . we g g e l a s s e n (e h ni c h t wi c h t i g da i n de r se l b e n Pa c k a g e ) Ke i n Be i p i e l , Te i l 2 class Lurche extends Amphibien { class Amphibien { void info() { void info() { super .info (); System.out.print (\" Amphibien \"); System.out.print (\" Amphibien \"); } } void status() { void zuerst () { System.out.print (\" bedroht \"); } } public String toString () { public String toString () { return \" Lurche \"; return \" Amphibien \"; } } } } class Feuersalamander extends SchwanzLurche { void zuerst () { System.out.println (\" Lebend geboren \"); } void status () { System.out.print (\"Fast ausgestorben \"); } } 96 Ze i c h n e n wir die Abhä ngigk e it e n 98 Am p h i b i e n Fe u e r s a l a m a n d e r Lu r c h e in f o zu e r s t (s t a t u s ) to S t r i n g (i n f o ) zu e r s t st a t u s ( to S t r i n g ) in f o st a t u s to S t r i n g Sc h w a n z L u r c h e in f o zu e r s t (s t a t u s ) ( to S t r i n g ) Fr o s c h L u r c h e (i n f o ) zu e r s t (s t a t u s ) to S t r i n g Üb e r s i c h t dur c h ei n e Ta b e l l e me t h o d Am p h i b i e n Lu r c h e Sc h w a n z L . Fr o s c h L . Fe u e r s a l a m a n d e r info zuerst status toString 99 Üb e r s i c h t dur c h ei n e Ta b e l l e me t h o d Am p h i b i e n Lu r c h e Sc h w a n z L . Fr o s c h L . Fe u e r s a l a m a n d e r info \" Amph …\" \" Amph …\"+ \" Amph …\" \"Sa…&Mo…\" zuerst {} \" Arme …\" \" Beine …\" \" Lebend …\" status \" bedroht \" \" F ast ausgestorben \" toString \" Amph …\" \" Lurche \" \" Fro … Lurche \" 100 No c h oh n e ge e r b t e Me t h o d e n Üb e r s i c h t dur c h ei n e Ta b e l l e me t h o d Am p h i b i e n Lu r c h e Sc h w a n z L . Fr o s c h L . Fe u e r s a l a m a n d e r info \" Amph …\" \" Amph …\"+ \" Amph …\" \"Sa…&Mo…\" \" Amph …\"+ \" Amph …\" \"Sa…&Mo…\" zuerst {} \" Arme …\" \" Beine …\" \" Lebend …\" status \" bedroht \" \" bedr … \" \" bedroht \" \" bedroht \" \" F ast ausgestorben \" toString \" Amph …\" \" Lurche \" \" Lurche \" \" Fro … Lurche \" \" Lurche \" 101 Ge e r b t e Me t h o d e n ku r s i v Klie n t ( Te i l 1) § Wa s wä r e de r O ut put für di e s e s Kl i e n t e n Pr o gr a m m ? Amphibien [] meinTerrarium = { new Amphibien (), new Lurche (), new Feuersalamander () }; for ( int i = 0; i < meinTerrarium.length ; i ++) { System.out.println ( meinTerrarium [ i ]); meinTerrarium [ i ].info(); System.out.println (); meinTerrarium [ i ].status(); System.out.println (); } 102 Klie n t ( Te i l 2) § Fo r t s e t z u n g Lurche [] ihrTerrarium = { new SchwanzLurche (), new FroschLurche (), new Feuersalamander () }; for ( int i = 0; i < ihrTerrarium.length ; i ++) { System.out.println ( ihrTerrarium [ i ]); ihrTerrarium [ i ].info(); System.out.println (); ihrTerrarium [ i ]. zuerst (); } 103 Be i s p i e l An t w o r t // 1. Teil // i == 0 Amphibien Amphibien bedroht // i == 1 Lurche Amphibien Amphibien bedroht // i == 2 Lurche Salamander&Molche Fast ausgestorben 104 // 2. Teil // i == 0 Lurche Salamander&Molche Arme zuerst // i == 1 FroschLurche Lurche Amphibien Amphibien Beine zuerst // i == 2 Lurche Salamander&Molche Lebend geboren Zu s a m m e n f a s s u n g (1. V er s u c h ) § Si c h tb ar k e i t § Vi e r O p t i o n e n § Bi n d u n g § Dy nam i s c he B i ndung be i M e t ho de nauf r uf § Si c h tb ar k e i t R e g e l n g e l t e n au c h f ü r A t tr i b u t e § Es g i b t f ü r A t t r i b u t e k e i n Ü b e r sc h r e i b e n § Wo h l a b e r V e r s t e c k e n – dar übe r r e de n w i r s pä t e r 105 Po l y m o r p h i s m u s § Ei ne Re f e r e n z v a r i a b l e fü r de n Ty p T ka n n ei n e Re f e r e n z auf ei n BL A N K Ob j e kt de s Ty p s T od e r ei n es Sub t y p s vo n T en t h a l t en § Kl a sse T be s t i m m t di e Met h o d e n di e auf g e r uf e n we r d e n kö n n e n § Kl a sse T be s t i m m t At t r i b u t e a u f d i e zu g e g r i f f e n we r d e n ka n n § Vo r a u s s e t z u n g : Si c h t b a r k e i t erl a u b t Zu g r i f f § Es gi b t zw e i Mö g l i c h k e i t e n , ei n e Re f e r e n z v a r i a b l e für de n Ty p T zu er h a l t en § De k l ar a t i o n ( z.B . T aReferenceToT ) od e r § C a s t ( z. B . T aReferenceToT = (T) aReferenceToU ) 106 U T S R T Cas t s u n d Re f e r e n z e n § Mi t ei n er ( Re f e r e n z )V a ri a b l e kö n n e n wi r nur di e Met h o d e n auf r uf e n , d ie d e r Ty p de r Re f e r e n z v a r i a b l e zu l ä s s t . § Un d ni c h t Me t h o d e n di e für ei n en Su b t y p de fi ni e r t si n d Angestellte mary = new Arzt (); int hours = mary.getHours (); // ok; it's in Angestellte mary.treatPatient (); // compiler error § Co m p i l e r Lo g i k : mary ka n n Re f e r e n z e n auf al l e Ar t e n vo n An g e s t e l l t e n en t h a l t en , u n d ni c h t al l e wi s s e n wi e ma n Pa t i e n t e n be hande l t . § De r C o m p i l e r we i s s ( i. A .) ni c h t au f w as mary ve r w e is t – ka n n ir g e n d e in Angestellte Ob j e k t se i n . 107 Cas t s u n d Re f e r e n z e n § We n n wi r Met h o d e n de s Ty p s Arzt ve r w e n d e n wo l l e n , dann mü s s e n wi r ei n en Ty p c a s t ma c h e n . Angestellte mary = new Arzt (); Arzt doctorMary = ( Arzt ) mary ; doctorMary.treatPatient (); // ok od e r ku r z : (( Arzt ) mary ) . treatPatient (); Di e Kl a m m e r n si n d wi c h t i g ! 108 An n on y m e ( n a m e n l os e ) Re f e r e n z v a r i a b l e Meh r übe r Cas t s § Di e Au s f ü h r u n g ge n e r i e r t ei n en ( La u f z e i t ) fe h l e r we n n wi r ve r s u c h e n , ei n en ni c h t - le g a le n Ty p zu ve r w e n d e n . § z.B . C a s t zu ei n em Ty p zu we i t un t e n in d e r I n h e r it a n c e Hi e r a r c h i e Angestellte eric = new FaGe (); (( FaGe ) eric).workAtStation(777); // ok OPFachkraft leiter = ( OPFachkraft ) eric; // Exception zur Laufzeit ! // eric refers to an instance of FaGe , can't be cast to // OPFachkraft 110 An g es t el l t e Fa G e ( Pf l e g e ) OP F ac h k r a f t Ty p d e r R e f e r e n z : An ge s t e l l t e Ty p d e s Ob j e k t s : F a G e Meh r übe r Cas t s § Di e Au s f ü h r u n g ge n e r i e r t ei n en ( La u f z e i t ) fe h l e r we n n wi r ve r s u c h e n , ei n en ni c h t - le g a le n Ty p zu ve r w e n d e n . § Wi r kö n n e n ei n e Re f e r e n z auf Ty p S i n ei n e Re f e r e n z auf ei n en Su p e r t y p T v on S um w ande l n Angestellte sue = new OPFachkraft (); (( FaGe ) sue). workAtStation (333); // O.k. as FaGe is supertyp 111 An g es t el l t e Fa G e ( Pf l e g e ) OP F ac h k r a f t Ty p d e r R e f e r e n z : An ge s t e l l t e Ty p d e s Ob j e k t s : OP F a c h k r a f t Meh r übe r Cas t s § Di e Au s f ü h r u n g ge n e r i e r t ei n en ( La u f z e i t ) fe h l e r we n n wi r ve r s u c h e n , ei n en ni c h t - le g a le n Ty p zu ve r w e n d e n . § Wi r kö n n e n ei n e Re f e r e n z auf Ty p S i n ei n e Re f e r e n z auf ei n en Su p e r t y p T v on S um w ande l n § A be r nur di e Met h o d e n vo n T si n d ve r f ü g b a r Angestellte sue = new OPFachkraft (); (( FaGe ) sue). manageOP (); // illegal – compiler error // (( FaGe ) sue) refers to an instance of OPFachkraft but only FaGe attributes and methods are known 112 An g es t el l t e Fa G e ( Pf l e g e ) OP F ac h k r a f t Ty p d e r R e f e r e n z : An ge s t e l l t e Ty p d e s Ob j e k t s : OP F a c h k r a f t Meh r übe r Cas t s § Wi r kö n n e n in d e r I n h e r it a n c e Hi e r a r c h i e nur nac h un t e n (u n d ob e n ) um w ande l n , abe r ni c h t se i t l i c h . Arzt linda = new Arzt (); (( FaGe ) linda).workAtStation(0); // exception OPFachkraft leiter = ( OPFachkraft ) linda ; // exception // Arzt object cannot be cast to FaGe or OPFachkraft § Ca s t i n g ände r t ni c h t di e Dar s t e l l ung od e r das Ve r h a l t e n ei n es Ob j e kt e s . Es ände r t nur di e Me n g e de r Met h o d e n , d ie auf g e r uf e n we r d e n kö n n e n . (( Angestellte ) linda ). getVacationForm (); // yellow ( Arzt ) 114 An g es t el l t e Ar z t / Aer z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP F ac h k r a f t Ty p i s c h e F e h l e r § Ve r w e n d e n e i n e r M e t h o d e d i e n u r f ü r S u b c l a s s d e f i n i e r t i s t § Co m p i l e r s t e l l t F e h l e r f e s t à Pr og r a m m k a n n n i c h t a u s g e f ü h r t w e r d e n § Angestellte mary = new Arzt (); § mary.treatPatient (); // Compiler Error § Ve r s u c h R e f e r e n z a u f S u p e r c l a s s E x e m p l a r i n R e f e r e n z a u f Su b c l ass u m z u w an d e l n § Wi r d z u r L a u fz e i t e n t d e c k t – Ex c e p t i o n f ühr t zu A bbr uc h de r Au s f ü h r u n g § Angestellte eric = new FaGe (); § OPFachkraft leiter = ( OPFachkraft ) eric; // Runtime ( Laufzeit ) Exception 117 At t r i b u t e § Bi s h er : M e t h o d en § Nu n : A t t r i b u t e 1. Se l b e R e g e l n f ü r Si c h tb ar k e i t 2. Es g i b t k e i n Ü b e r sc h r e i b e n § Wo h l a b e r V e r s t e c k e n – dar übe r r e de n w i r j e t z t 120 Wo s i c h A t t r i b u t e u n d M e t h o d e n u n t e r s c h e i d e n § Uns e r Z i e l i s t e s , di e ( W e i t e r ) E n t w i c k l ung v o n a bg e k a p s e l t e n Kl as s e n z u u n t e r s tü tz e n 121 Ev o l u t i o n ( v o n K l a s s e n ) § Ge g e be n s e i K l a s s e T m i t S ubk l a s s e S § Ei ne M e t ho de s0() vo n T r u f t m() auf § Ir g e n d w a n n m u s s d a s V e r h a lt e n v o n m() für E x e m pl a r e v o n S a ng e pa s s t we r d e n § S ü b e r sc h r e i b t m() aus T § Met h o d e s0() in T r u f t f ü r E x e m p la r e vo n S d i e ü b e r s c h r i e b e n e V e r s i o n a u f § An n a h m e : m() in S is t t r e f f e n d e r 124 T aT; aT = new S(); aT.s0(); class T { void s0(){ m(); } void m(){…} } class S extends T { @Override void m(){ … … } } Ev o l u t i o n ( v o n K l a s s e n ) § Ge g e be n s e i K l a s s e T m i t S ubk l a s s e S § Ei ne M e t ho de s0() vo n T r u f t m() auf § Ir g e n d w a n n m u s s d a s V e r h a lt e n v o n m() für E x e m pl a r e v o n S a ng e pa s s t we r d e n § S ü b e r sc h r e i b t m() aus T § Met h o d e s0() in T r u f t f ü r E x e m p la r e vo n S d i e ü b e r s c h r i e b e n e V e r s i o n a u f § An n a h m e : m() in S is t t r e f f e n d e r 125 T aT; aT = new S(); aT.s0(); class T { void s0(){ m(); } void m(){…} } class S extends T { @Override void m(){ … … } } Ev o l u t i o n ( v o n K l a s s e n ) § Ir g e n d w a n n f ü g t S e in A t t r ib u t x hi nz u § (N eu es ) A t t ri b u t i n S: int x; § Es g i b t n o c h k e i n A t t r i b u t x in T § So n s t w ü r d e n w i r e i n e n b e sse r e n Na me n f i n d e n … . - ) 126 class T { void s0(){ m(); } void m(){…} } class S extends T { int x; @Override void m(){ … = x; } } Ev o l u t i o n ( v o n K l a s s e n ) § Ir g e n d w a n n f ü g t T e in A t t r ib u t x hi nz u § (N eu es ) A t t ri b u t i n T : long x; § T k e n n t n i c h t a l l e S u b k l a s s e n u n d i h r e At t r i b u t e § Me t h o d e s 1 i n T l i e s t x § We l c h e s x so l l s1 le s e n ? ? § Au s K l a s s e T? § Au s K l a s s e S ? 128 class T { long x; void s1(){ … = x; } } class S extends T { int x; @Override void m(){…} } T aT; aT = new S(); aT.s1(); Ev o l u t i o n ( v o n K l a s s e n ) § We l c h e s x so l l s1 le s e n ? ? § Au s K l a s s e T? § Au s K l a s s e S ? § Ja v a l i e s t A t tr i b u t x au s T ( i n s1 ) § s1 ka n n e f f i z i e n t ü b e r s e t z t w e r d e n § T k a n n u n a b h ä n g i g v on S v e r ä n d e r t we r d e n § We n n e s k e i n x gi b t k a n n s i ch d e r Co m p i l e r b e sch w e r e n 129 § An d e r e Pr og r a m m i e r s p r a c h e n : a n d e r e R e g e l n class T { long x; void s1(){ … = x; } } class S extends T { int x; @Override void m(){…} } T aT; aT = new S(); aT.s1(); Ve r d e c k e n vo n Va r i a b l e n (« sha do wing » ) § sh a d o w i n g : Zw e i Va r i a b l e mi t de m se l b e n Na m e n di e be i de si c h t b ar si n d . § No r ma l e r w e i s e in J a v a ille g a l – Au s n a h m e we n n ei n e de r Va r i a b l e n ei n At t r i b u t ei n er Kl a sse is t . § Ge g e b e n : A t t r i b u t e x und y § We n n ei n e Met h o d e x und y al s Pa r a m e t e r h a t , dann be z i e he n si c h x und y auf di e P ar am e t e r § We n n ei n e Met h o d e x und y al s Va r i a b l e de k l ar i e r t dann be z i e he n si c h x und y auf di e V ar i abl e Fr ü h e r : Ve r d e c k e n vo n Va r i a b l e n (« sha do wing » ) § sh a d o w i n g : Zw e i Va r i a b l e mi t de m se l b e n Na m e n di e be i de si c h t b ar si n d . § No r ma l e r w e i s e in J a v a ille g a l – Au s n a h m e we n n ei n e de r Va r i a b l e n ei n At t r i b u t ei n er Kl a s s e is t . § «E i n e d e r Va r i a b l e n …» – es kö n n e n auc h be i de se i n § At t r i b u t de r Su b k l asse ka n n At t r i b u t de r Su p e r k l asse ve r d e c k e n § So l l t e ma n ve r h i n d e r n § Ni c h t im m e r mö g l i c h – si e h e le t z t e s Be is p ie l Mög l i c h ab e r nic h t no t w e ndig § Ei n e Su b k l asse ka n n ei n At t r i b u t ne u de fi ni e r e n class A { int x; int y; } class B extends A { double x; } § Si e so l l t e n da s ni c h t ma c h en . A b e r es is t mö g l i c h 133 Mög l i c h ab e r nic h t no t w e ndig class A { int x; int y; } class B extends A { double x; } § Da s At t r i b u t x in B « ve r d e c k t » ( sh a d o w s , hi d e s ) d a s At t r i b u t x in A . § Ab e r d a s x ( aus A ) ex i s t i e r t fü r je d e s Ex e m pl ar v o n B 134 Mög l i c h ab e r nic h t no t w e ndig class A { int x; int y; } class B extends A { double x; } A aref = new A(); B bref = new B(); 135 Mög l i c h ab e r nic h t no t w e ndig class A { int x; int y; } class B extends A { double x; } A aref = new A(); B bref = new B(); 136 int x : 0 int y : 0 P a r a m e t e rl o s e r d e f a u l t K o n s t ru k t o r f ü r B : B() { super(); x = 0.0; //alles auf Null } Mög l i c h ab e r nic h t no t w e ndig class A { int x; int y; } class B extends A { double x; } A aref = new A(); B bref = new B(); 137 int x : 0 int y : 0 A( ) K o n s t r u k t o r B( ) K o n s t r u k t o r int x : 0 int y : 0 do ubl e x : 0 . 0 Mög l i c h ab e r nic h t no t w e ndig class A { int x; int y; } class B extends A { double x; } B bref = new B(); bref.x // 0.0 138 int x : 0 int y : 0 do ubl e x : 0 . 0 Cas t s z ur Su p e rkl as s e § B er b t da s ( int ) At t r i b u t x vo n A , ab e r da s ( double ) At t r i b u t x in B ve r d e c k t di e s e s ge e r b t e At t r i b u t § Es gi b t ke i n « Üb e r s c h r e i b e n » fü r At t r i b u t e § Ka n n ma n a u f x au s A zu g r e i f e n ? § Wi r er i n n er n uns , da s s im m e r au f d as At t r i b u t zu g e g r i f f e n wi r d , d a s i n d e r Kl as s e de fi ni e r t wu r d e § Gi l t auc h we n n Su b k l a sse n es ve r d e c k e n 139 Cas t s z ur Su p e rkl as s e § B er b t da s ( int ) At t r i b u t x vo n A , ab e r da s ( double ) At t r i b u t x in B ve r d e c k t di e s e s ge e r b t e At t r i b u t § Es gi b t ke i n « Üb e r s c h r e i b e n » fü r At t r i b u t e § Ka n n ma n a u f x au s A zu g r e i f e n ? § Wi r er i n n er n uns , da s s im m e r au f d as At t r i b u t zu g e g r i f f e n wi r d , d a s i n d e r Kl as s e de fi ni e r t wu r d e § Gi l t auc h we n n Su b k l a sse n es ve r d e c k e n § Und wi r er i n n er n uns , da s s de r Ty p de r Re f e r e n z v a r i a b l e be s t i m m t , a u f we l c h e At t r i b u t e zu g e g r i f f e n we r d e n ka n n 140 Cas t s z ur Su p e rkl as s e § Ei n e Re f e r e n z v a r i a b l e für de n Ty p B ka n n mi t t el s Ca s t i n ei n e Re f e r e n z v a r i a b l e für de n Ty p A um g e w a nde l t we r d e n § De nn B is t ei n e Su b Kl a sse vo n A § Da m i t is t Zu g r i f f au f d i e A t tr i b u t e d e r Kl as s e A er l a u b t § Au c h we n n di e s e At t r i b u t e i n B ve r d e c k t si n d 141 class S extends T { int x; void q(){ … = x; } } Zugr i ff auf v e r s t e c k t e A t t r i but e § We l c h e s x s o l l g e l e s e n w e r d e n ? § Au s K l a s s e T? § Au s K l a s s e S ? § Ja v a l i e s t A t tr i b u t x au s T ( i n s1 ) § Un d m i t R e f e r e n z v a r i a b l e f ü r T § Ja v a l i e s t A t tr i b u t x au s S ( i n q ) § Un d m i t R e f e r e n z v a r i a b l e f ü r S 142 class T { long x; void s1(){ … = x; } } // Klient T aT = new T(); aT.x // x aus T aT = new S(); aT.x // x aus T S aS = (S) aT; aS.x // x aus S Mög l i c h ab e r sol l t e nic h t no t w e ndig sei n class A { int x; int y; } class B extends A { double x; } B bref = new B(); ((A) bref ).x = 1; ((A) bref ).x // 1 bref.x // 0.0 143 int x : 0 int y : 0 do ubl e x : 0 . 0 § Bei Zu g r i f f au f ei n At t r i b u t be s t i m m t de r Ty p de r Re f e r e n z v a r i a b l e da s At t r i b u t 144 § At t r i b u t de r Su p e r k l a sse od e r At t r i b u t de r Su b k l a sse § Fü r Me t h o d e n a u f r u f en t s c h ei d e t de r ak tu e l l e Ty p de s Ob j e k t e x e mp l a r s we l c h e Ve r s i o n au sg e f ü h r t wi r d § Im m e r di e V er s i o n der ak t u el l en Kl a sse § Si e so l l t e n in ei n er Su b k l asse di e A t t r i but e de r S upe r - kl a s s e ni c h t ve r d e c k e n -- da nn is t da s Pr o gr a m m be s s e r le s b a r . ( L a s s e n S ie si c h ei n en ne ue n Na m e n ei n f a l l en !) Un t e r s c h i e d e A t t ri b u t v s . M e t h o d e class X { String s = \"in X\"; String myS () { return s; } } class Y extends X { String s = \"in Y\"; @Override String myS () { return s; } } 145 ( Wa r n e n d e s ) Be i s p i e l jshell > class X { } | created class X jshell > class Y extends X { } | created class Y jshell > Y yref = new Y(); yref ==> Y@604ed9f0 jshell > yref.s $4 ==> \"in Y\" jshell > yref.myS () $5 ==> \"in Y\" jshell > ((X) yref ). myS () $6 ==> \"in Y\" jshell > ((X) yref ).s $7 ==> \"in X\" 146 class X { String s = \"in X\"; String myS () { return s;} } class Y extends X { String s = \"in Y\"; @Override String myS () { return s;} } jshell > class X { } | created class X jshell > class Y extends X { } | created class Y jshell > Y yref = new Y(); yref ==> Y@604ed9f0 jshell > yref.s $4 ==> \"in Y\" jshell > yref.myS () $5 ==> \"in Y\" jshell > ((X) yref ). myS () $6 ==> \"in Y\" jshell > ((X) yref ).s $7 ==> \"in X\" 147 class X { String s = \"in X\"; String myS () { return s;} } class Y extends X { String s = \"in Y\"; @Override String myS () { return s;} } V e r w i r r e n d ? N i c ht we n n S i e d i e R e g e l n ke n n e n jshell > class X { } | created class X jshell > class Y extends X { } | created class Y jshell > Y yref = new Y(); yref ==> Y@604ed9f0 jshell > yref.s $4 ==> \"in Y\" jshell > yref.myS () $5 ==> \"in Y\" jshell > ((X) yref ). myS () $6 ==> \"in Y\" jshell > ((X) yref ).s $7 ==> \"in X\" 148 class X { String s = \"in X\"; String myS () { return s;} } class Y extends X { String s = \"in Y\"; @Override String myS () { return s;} } V e r w i r r e n d ? N i c ht we n n S i e « V e r d e c k e n » ve r m e i d e n 149 § On e ma j o r p u r p o s e [o f t h e se ru l e s] is t o c o n f u s e p e o p le . It ' s ba d pr a c t i c e a nd s ho ul d be a v o i de d. § If y o u c a n a v o id it [sh a d o w i n g ] th o u g h , y o u s h o u l d s i n c e i t ma y c a u s e c o n f u s i o n . 150 Abe r ha lt : N o c h m e hr z u be a c h t e n § Fü r static Me t h o d e n b r a u c h e n w i r k e i n E x e m p l a r § Da h e r m a c h t e s k e i n e n S i n n v o m « a k t u e l l e n T y p » z u sp r e c h e n § … u n d d a h e r e n ts c h e i d e t d e r T y p d e r R e f e r e n z § static Me t h o d e n k ö n n e n n u r v o n static Me t h o d e n übe r s c hr i e be n w e r de n § Me i n R a t : v e r m e i d e n 151 Ei n ande r e s Be i s p i e l ( für ca s t s , oh n e hi di ng) § Di e fo l g e n d e n Kl as s e n wu r d en de k l a r i e r t : public class Snow { public void method2() { System.out.println (\"Snow 2\"); } public void method3() { System.out.println (\"Snow 3\"); } } public class Rain extends Snow { public void method1() { System.out.println (\"Rain 1\"); } public void method2() { System.out.println (\"Rain 2\"); } } 152 public class Sleet extends Snow { public void method2() { System.out.println (\"Sleet 2\"); super.method2(); method3(); } public void method3() { System.out.println (\"Sleet 3\"); } } public class Fog extends Sleet { public void method1() { System.out.println (\"Fog 1\"); } public void method3() { System.out.println (\"Fog 3\"); } } 153 Wa s pa s s i e r t we n n di e s e ( Kl i e n t e n ) Pr o gr a m m e au sg e f ü h r t we r d e n ? • Be is p ie l 1: Snow var1 = new Sleet(); var1.method2(); • Be is p ie l 2: Snow var2 = new Rain(); var2.method1(); • Be is p ie l 3: Snow var3 = new Rain(); ((Fog) var3).method1(); 154 Ei n ande r e s Be i s p i e l public class Snow { public void method2() { System.out.println (\"Snow 2\"); } public void method3() { System.out.println (\"Snow 3\"); } } public class Rain extends Snow { public void method1() { System.out.println (\"Rain 1\"); } public void method2() { System.out.println (\"Rain 2\"); } } public class Sleet extends Snow { public void method2() { System.out.println (\"Sleet 2\"); super.method2(); method3(); } public void method3() { System.out.println (\"Sleet 3\"); } } public class Fog extends Sleet { public void method1() { System.out.println (\"Fog 1\"); } public void method3() { System.out.println (\"Fog 3\"); } } 155 Ans a t z 1: Abhä ngigk e it e n ze i c h n e n § Wi r ze i c h n e n di e Kl as s e n vo n ob e n ( Su p e r c l ass ) na c h un t e n . 156 Ans a t z 1: Abhä ngigk e it e n ze i c h n e n § Wi r ze i c h n e n di e Kl as s e n vo n ob e n ( Su p e r c l ass ) na c h un t e n . Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t 157 Ans a t z 2: Ta b e l l e me t h o d Sn o w Ra i n Sl e e t Fo g method1 method2 method3 It a l i c - ge e r bt e s Ve r h a l t e n Fe t t - dy n am i s c h e r Auf r uf ei n er Me t h o de de r S u bc l as s me t h o d Sn o w Ra i n Sl e e t Fo g method1 method2 method3 158 Ans a t z 2: Ta b e l l e me t h o d Sn o w Ra i n Sl e e t Fo g method1 method2 method3 me t h o d Sn o w Ra i n Sl e e t Fo g method1 method2 Snow 2 method3 Snow 3 159 It a l i c - ge e r bt e s Ve r h a l t e n Fe t t - dy n am i s c h e r Auf r uf ei n er Me t h o de de r S u bc l as s Ans a t z 2: Ta b e l l e me t h o d Sn o w Ra i n Sl e e t Fo g method1 method2 method3 me t h o d Sn o w Ra i n Sl e e t Fo g method1 Rain 1 Fog 1 method2 Snow 2 Rain 2 Sleet 2 Snow 2 method3() Sleet 2 Snow 2 method3() method3 Snow 3 Snow 3 Sleet 3 Fog 3 160 It a l i c - ge e r bt e s Ve r h a l t e n Fe t t - dy n am i s c h e r Auf r uf ei n er Me t h o de de r S u bc l as s Wa s pa s s i e r t we n n di e s e ( Kl i e n t e n ) Pr o gr a m m e au sg e f ü h r t we r d e n ? • Be is p ie l 1: Snow var1 = new Sleet(); var1.method2(); • Be is p ie l 2: Snow var2 = new Rain(); var2.method1(); • Be is p ie l 3: Snow var3 = new Rain(); ((Fog) var3).method1(); 161 Be i s p i e l 1 § Kl i e n t : Snow var1 = new Sleet (); var1.method2(); § Ou t p u t : Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 162 Be i s p i e l 1 § Kl i e n t : Snow var1 = new Sleet (); var1.method2(); § Ou t p u t : Sleet 2 Snow 2 Sleet 3 Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 163 Be i s p i e l 1 -- Va r i a t i o n § Kl i e n t : Snow var1 = new Fog (); var1.method2(); § Ou t p u t : Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 164 Be i s p i e l 1 -- Va r i a t i o n § Kl i e n t : Snow var1 = new Fog (); var1.method2(); § Ou t p u t : Sleet 2 Snow 2 Fog 3 Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 165 Be i s p i e l 2 § Kl i e n t : Snow var2 = new Rain (); var2.method1(); § Ou t p u t : Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t va r i a b l e ob j e c t 166 Be i s p i e l 2 § Kl i e n t : Snow var2 = new Rain (); var2.method1(); § Ou t p u t : Ke i n Ou t p u t ! Com p i l e r en t d ec k t Fe h l e r da Snow ke i n e method1 e n t h ä lt . Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t va r i a b l e ob j e c t 167 Be i s p i e l 3 § Kl i e n t : Snow var3 = new Rain (); (( Fog ) var3).method1(); § Ou t p u t : 168 Be i s p i e l 3 § Kl i e n t : Snow var3 = new Rain (); (( Fog ) var3).method1(); § Ou t p u t : Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 169 Be i s p i e l 3 § Kl i e n t : Snow var3 = new Rain (); (( Fog ) var3).method1(); § Ou t p u t : Ke i n Ou t p u t ! La uf z e i t f e hl e r da e in Rain Ob j e k t ni c h t e in Fog Ob j e k t is t . Sn o w me t h o d 2 me t h o d 3 me t h o d 1 me t h o d 2 (m e t h o d 3 ) Ra i n me t h o d 1 (m e t h o d 2 ) me t h o d 3 Fo g me t h o d 2 me t h o d 3 Sl e e t ob j e c t va r i a b l e 170 The m e n he ut e : S ic h t ba r k e it & B indung § Uns e r Z i e l i s t e s , di e ( W e i t e r ) E n t w i c k l ung v o n a bg e k a p s e l t e n Kl as s e n z u u n t e r s tü tz e n 171 Po l y m o r p h i s m u s – Zusam m e n f assung (2 . V e r s u c h ) § Zi e l is t Pr og r a m m e zu er s t el l en , d ie mi t Ex e m pl ar e n ve rs c h i e d e n e r Kl a sse n ar be i t e n § Kl a s s e n müs s e n in ei n er Ve r e r b u n g h i e r a r c h i e an g e o r d n e t se i n § De r Ty p de r Re f e r e n z v a r i a b l e be s t i m m t di e Met h o de n di e fü r Ob j e kt e auf g e r uf e n we r d e n kö n n e n . § De r akt u e l l e (Su b ) Ty p de s Ex e m pl ar s ( auf das di e Re f e r e n z v a r i a b l e ve r w e i s t ) be s t i m m t di e Ve r s i o n de r auf g e r uf e ne n Met h o d e § Ca s t s ve r w a n d e l n ei n e Re f e r e n z auf Ob j e kt e de s Ty p s T in ei n e Re f e r e n z de s Ty p s S . § Um w a n d l u n g nur na c h un t e n (u n d ob e n ) i n d e r I n h e r i t a n c e Hi e r a r ch i e , ni c h t se i t l i c h . § Na c h un t e n : dy n ami s c h e r Che c k , zu r Lau f z e i t . § Ca s t i n g ände r t ni c h t di e Dar s t e l l ung od e r das Ve r h a l t e n ei n es Ob j e kt e s so n d e r n nur di e Me n g e de r Met h o d e n , d ie auf g e r uf e n we r d e n kö n n e n . 177 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 8. 0 In t e r f a c e s Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 - 2022 Al l r i g h t s r e s e r v e d . Fe e d b a c k § Fr a g e n v i a E d u Ap p B a c k c h a n n e l § Au c h m ög l i c h w e n n S i e i m M L D 28 s i n d § Da n k e a n a n o n y m e u n d w e i t e r e H e l f e r § Ka n n ( l e i d e r ) n i c h t r i c h t i g e A n t w o r t m a r k i e r e n (N u r U p V o t e ) § Bit t e w e it e r m a c h e n § An d e r e Fr a g e n : w e n n n i ch t i n 24 h r b e a n t w o rt e t : b i t t e m a i l sc h i c k e n § Mi r f e h l e n D et a i l s , i c h d e n k e d i e F r a g e is t be an t w o r t e t … 4 Üb e r s i c h t § 8. 1 Ei n l e i t u n g § 8. 2 I n t e r f a ce s i n J a v a 5 En t w u r f v o n S y s t e m e n § Po l y m o r p h i s m u s e r l a u b t u n s P r o g r a m m e z u e n t w i c k l e n , d i e f ü r meh r er e K l a s s en z u g eb r a u c h en s i n d § Ve r e r b u n g : e r l a u b t e s K l a s s e n i n e i n e r H i e r a r c h i e a n z u o r d n e n § Gr u n d l a g e i s t ( b z w . s ol l t e s e i n ) d i e is t - ei n Be z ie h u n g d e r ( m o d e llie r t e n ) Ob j e kt e / K o n z e p t e § Fi n d e n e i n e r s i n n v ol l e n u n d b r a u c h b a r e n V e r e r b u n g s h i e r a r c h i e ni c h t e i n f a c h § Üb u n g u n d ( i n d e r P r a x i s ) Üb e r a r b e i t e n § Dazu k o m m e n w e i t e r e Ü be r l e g ung e n und Ei ns c hr änk ug e n 6 Be i s p i e l : U n i v e r s i t ä t s v e r w a l t u n g § We n i g e r D e t a i l a l s S p i t a l B e i s p i e l … § Uni v e r s i t ä t ha t Ang e s t e l l t e § Mi t a r b e i t e n d e § 41 S t d / W oc h e § 25 T a g e / J a h r U r l a u b § Do z i e r e nde § Ke i n e ﬁ x e A r b e i t s z e i t § Ke i n f e s t e r U r l a u b § «r e g e l n A r b e i t s z e i t se l b s t s t ä n d i g » 7 An g e s t e l l t e Ei n t r i t t Au s t r i t t Mi t a r b e i t e n d e Url a u b s t a g e Ar b e i t s z e i t Do z i e r e n d e Sa b b a t i c a l Be i s p i e l : U n i v e r s i t ä t s v e r w a l t u n g § We n i g e r D e t a i l a l s S p i t a l B e i s p i e l … § Uni v e r s i t ä t ha t Ang e s t e l l t e § Ve r h a l t e n : § Datum getEintritt() § Datum getAustritt() § double getLohn() 8 An g e s t e l l t e Ei n t r i O Au s t r i O Mi t a r b e i t e n d e Url a u b s t a g e Ar b e i t s z e i t Do z i e r e n d e Sa b b a t i c a l § Uni v e r s i t ä t ha t Ang e s t e l l t e § Mi t a r b e i t e n d e § Vo l l z e i t § Te i l z e i t ( S t u n d e n l o h n ) § Do z i e r e nde § Pr of e s s or e n / - in n e n § Fe s t a n g e s t e l l t e § Ze i t v e r t r a g § «T e n u r e T r a c k » ( k a n n z u fe s t a n g e s t e l l t b e f ö r d e r t w e r d e n ) § Te m p o r ä r e F i n a n z i e r u n g § So n s t i g e 10 An g e s t e l l t e Ei n t r i t t Au s t r i t t Mi t a r b e i t e n d e Url a u b s t a g e Ar b e i t s z e i t Do z i e r e n d e Sa b b a t i c a l Vo l l z e i t Te i l z e i t Lo h n / S t d So n s t i g e Pr o f e s s o r e n Ze i t v e r t r a g Le h r e : 4 S W S Pe r m a n e n t Le h r e : 8 S W S § Uni v e r s i t ä t ha t S t udi e r e nde § B. S . P r o g r a m m § In P r o g r a m m ( D e p t . ü b e r g r e i f e n d ) § Po s t - Gr a d u a t e Pr og r a m m § Me n t o r § In D e p a r t e m e n t § M. S . § Do k t o r a t § Ga s ts tu d e n t St u d i e r e n d e Ei n t r i t t Au s t r i t t Po s t - Gr a d u a t e Me n t or De p a rt m e n t Ba ch e l o r Url a u b s s e m e s t e r Do k t o r a t Ma s t e r Ga s t s t u d e n t He i m a t uni v e r s i t ä t § Uni v e r s i t ä t ha t S t udi e r e nde § Ve r h a l t e n S t u d i e r e n d e Datum getEintritt() Datum getAustritt() String getReglement() St u d i e r e n d e Ei n t r i t t Au s t r i t t Po s t - Gr a d u a t e Me n t or De p a rt m e n t Ba ch e l o r Url a u b s s e m e s t e r Do k t o r a t Ma s t e r Ga s t s t u d e n t He i m a t uni v e r s i t ä t class Angestellte { private Datum eintritt; Datum getEintritt() {..} private Datum austritt; Datum getAustritt() {..} } class Mitarbeitende extends Angestellte { private double arbeitszeit; private double urlaubstage; } class Teilzeit extends Mitarbeitende { private double stundenlohn; } class Studierende { private Datum eintritt; Datum getEintritt() {..} private Datum austritt; Datum getAustritt() {..} private String Reglement; } class Bachelor extends Studierende { private int urlaubsemester; } 1415 § Uni v e r s i t ä t bi e t e t L e hr v e r a ns t a l t ung e n a n § Nr / T i t e l § St u d i e n p r o g r a m m (e) § Vo r l e s u n g e n § Sp r a c h e § Ze i t § Üb u n g e n § Ve r b u n d e n m i t V o r l e s u n g Leh r v er a n s t a l t u n g Nr Stu d i e n p r o g r a m m ( e ) Vo r l e s u n g Sp r a c h e Ze i t Ra um Ue b u n g Vo r l e s u n g As s i s t i e r e n d e _ 1 As s i s t i e r e n d e _ 2 Im V e r w a ltung s - Pr o g r am m § Wa s h e i s s t § Üb u n g e n § Ve r b u n d e n m i t V o r l e s u n g § Je d e s E x e m p l ar d e r Kl asse Uebung en t h ä l t R e f er en z a u f Ex e m p l a r d e r K l a sse Vorlesung 16 Vorlesung 252 - 0027 B.S. Inform., Interd. NW. Deutsch Di 10 - 12, Fr 8 - 10 ML D28 Uebung 252 - 0027 B.S. Inform., Interd. NW. vorlesung Assistierende_1 Assistierende_2 class Uebung extends Lehrveranstaltung { Vorlesung vorlesung; } class Vorlesung extends Lehrveranstaltung {…} 17 § Uni v e r s i t ä t bi e t e t L e hr v e r a ns t a l t ung e n a n § Nr / T i t e l § St u d i e n p r o g r a m m (e) § Vo r l e s u n g e n § Sp r a c h e § Ze i t § Üb u n g e n § Ve r b u n d e n m i t V o r l e s u n g § Ve r b u n d e n m i t A s s i s t i e r e n d e § We l c h e A r t v o n O b j e k t ? Mi t ar be i t e r o de r S t u di e r e n de r ? § Ve r h a l t e n ????[] getAssistierende() //Array von ???? Leh r v er a n s t a l t u n g Nr St u d i e n p r o g r a m m ( e ) Vo r l e s u n g Sp r a c h e Ze i t Ra um Ue b u n g Vo r l e s u n g As s i s t i e r e n d e Im V e r w a ltung s - Pr o g r am m § Kl as s e Uebung en t h ä l t R e f er en z a u f K l a s s e Vorlesung § Übung e n g e l e i t e t v o n As s i s t i e r e nde n § Ve r b u n d e n m i t P e r s o n ( e n ) § Je d e s E x e m p l ar d e r Kl asse Uebung en t h ä l t R e f er en z ( en ) a u f ? 18 Vorlesung 252 - 0027 B.S. Inform., Interd. NW. Deutsch Di 10 - 12, Fr 8 - 10 ML D28 Uebung 252 - 0027 B.S. Inform., Interd. NW. vorlesung Assistierende[0] Assistierende[1] Teilzeit 15. 9. 2020 31. 12. 2020 0 (im Stundenlohn enthalten) 10 Std/Woche 30.00 sFr/Stunde Bachelor kein Urlaubssemester ? Ve r e r b u n g i n J a v a : E i n s c h r ä n k u n g e n § As s i s t i e r e n d e k ön n e n s o w oh l (B a c h e l or ) S t u d i e r e n d e a l s a u c h Te i l z e i t ( A n g e s t e l l t e ) s e i n § Ei ne K l as s e f ür A s s i s t i e r e nde s o l l t e s o w o hl Teilzeit al s auc h Bachelor er w ei t ern § Ab e r w i r k ön n e n k e i n e K l a s s e d e f i n i e r e n d i e s o w oh l v on Bachelor al s au c h Teilzeit er b t – Ja v a k e n n t n u r ei n f ach e Ve r e r b u n g ( class FooBar extends Foo , Bar {…} ) § Ei ne K l as s e k ann nur v o n ei n er Su p e r k l a sse e r b e n § An d e r e Pr og r a m m i e r s p r a c h e n : a n d e r e R e g e l n ( und ande r e P r o bl e m e ) 21 ni c h t i n J a v a In t e r f a c e s § Es gi b t ab e r ei n en an d e r e n We g in J a v a ei n e is t - ei n Be z i eh u n g au s z u d r ü c k e n : Interface § Ei n Interface lä s s t ke i n e n ge m e i n s a m e n Co d e zu § Da s W o r t « I n t e r f a c e » be de ut e t Sc h n i t ts t e l l e § D. h . di e zw e i Ko m p o n e n te n ge m e i n s a m e Gr e n z e § In J a v a sp e z i e l l e Be d e u t u n g § In J a v a ei n We g ei n e Me n g e vo n Me t h o d e n vo r z u s c h r e i b e n , di e v o n ei n er Kl as s e im p le m e n t ie r t we r d e n mü sse n 22 Ja v a interface § Ei n interface le g t gem ei n s am es Ve r h a l t e n fe s t : Me n g e vo n Me t h o d e n public interface Personal { Datum getEintritt (); Datum getAustritt (); } § Nu r d i e Si g n a tu r de r Me t h o d e n wi r d an g e g e b e n ( Rüc k g a be w e r t , N a m e , Pa r a m e t e r l i s t e ) 23 Ja v a I n t e rf ac e De k l a r a Fo n Sy n t a x : public interface na m e { public ty p e na m e ( ty p e na m e , ..., ty p e na m e ); public ty p e na m e ( ty p e na m e , ..., ty p e na m e ); ... } Bei s p i el : public interface Vehicle { public void start(); public void move(); public void stop(); } 24 In t e r f a c e § Ei n e I n t e r f a c e De k l a r a t i o n en t h ä l t ab s t r ak t e Me t h o d e n : Me t h o d e n He ad e r oh n e Im p le m e n t a t io n § Si c h t b a r k e i t is t public – ka n n ang e g e be n we r d e n mu s s abe r ni c h t § Ke i n Co d e fü r de n Ru m p f de r Met h o d e [F o o t n o t e ] § Ab s t r a k t e Me t h o d e n en t h a l t en ke i n e n Co d e. K l a s s en mü s s en di e s e s Ve r h a l t e n ( Me t h o d e ) im p le m e n t ie r e n [F o o t n o t e ] Ja v a ( se i t Ja v a 8 ) erl a u b t auc h de f aul t Met h o d e n mi t Co d e im In t e r f a c e – ke i n Th e m a fü r uns 25 Ja v a interface § Ei n interface le g t gem ei n s am es Ve r h a l t e n fe s t § Da s I n t e r f a c e ka n n vo n K l a s s e n im p le m e n t ie r t we r d e n : da nn st e l l t je d e Kl as s e di e Me t h o d e n de s I n t e r f a c e s zu r Ve r f ü g u n g § Di e K l as s e n habe n di e Met h o d e n de s I n t e r f ac e s ge m e i n s a m § Ei n e Kl as s e dek l ar i er t da s s si e ei n In t e r f a c e im p le m e n t ie r t 26 Ge br a uc h ei n es In t e r f a c e s § Ei n e Kl as s e de k l a r i e r t da s s si e ei n In t e r f a c e im p le m e n t ie r t § Kl a sse mu s s Co d e fü r al l e Met h o d e n de s I n t e r f ac e s en t h a l t en . ( So n s t ka n n di e Kl a sse ni c h t übe r s e t z t we r d e n .) § Sy n t a x : class na m e implements in t e r f a c e { ... } § Da m i t er k l ä r t di e Kl as s e da s s di e is t - ei n Be z i eh u n g gi l t § Ei n Ex e m pl ar de r Kl a sse is t - ei n …. ( w a s d a s I n t e r f a c e be s t i m m t ) § Ex e m pl ar is t - ei n Ob j e kt das Met h o d e n de s I n t e r f ac e s zu r Ve r f ü g u n g st e l l t 27 class Angestellte implements Personal { private Datum eintritt; Datum getEintritt() {..} private Datum austritt; Datum getAustritt() {..} } class Mitarbeitende extends Angestellte {.. } class Teilzeit extends Mitarbeitende { private double stundenlohn; } class Studierende implements Personal { private Datum eintritt; Datum getEintritt() {..} private Datum austritt; Datum getAustritt() {..} private String Reglement; } class Bachelor extends Studierende {..} 28 public interface Personal { Datum getEintritt (); Datum getAustritt (); } Ja v a Interface § interface : E i n e G ru p p e v o n Me t h o d e n di e ei n e Kl as s e im p le m e n a e r e n ka n n ... ni c h t nur im p le m e n a e r e n ka n n so n d e r n im p le m e n a e r e n mu ss public interface Personal { Datum getEintritt (); Datum getAustritt (); } § Ke i n e Au s s a g e n übe r Ab r i b u t e ( ei n t r i b , lo h n , au s tr i b … ) 29 In t e r f a c e s § Ei n e Kl as s e di e ei n In t e r f a c e im p le m e n t ie r t mu s s für al l e Me t h o d e n Co d e en t h a l t en § Me t h o d e is t ab s t r ak t im In t e r f a c e § Me t h o d e is t ko n k r e t in d e r Kl as s e 30 In t e r f a c e s § In t e r f a c e s ge b e n uns ei n e is t - ei n Be z ie h u n g ohne ge m e i n s a m e n Co d e u n d Zu s t a n d abe r mi t ge m e i n s a m e m Ve r h a l t e n ( Met h o d e n ) § Das I n t e r f ac e Personal sc h r e i b t Ve r h a l t e n vo r § Ei n Studierende Ob j e kt ka n n al s Personal be hande l t we r d e n . § Ei n Angestellte Ob j e kt ka n n al s Personal be hande l t we r d e n . § Angestellte und Studierende si n d ni c h t Te i l ei n er In h e r i t a n c e Hi e r a r c h y § Ve r e r b u n g gi b t uns is t - ei n Be z ie h u n g e n und di e Mö g l i c h k e i t , C o d e wi e d e r z u v e r w e n d e n . § Ei n Arzt Ob j e kt ka n n al s ei n Angestellte Ob j e kt be hande l t we r d e n und Arzt erb t Co d e ( Ve r h a l t e n ) und At t r i b u t e ( Zus t a nd ) v o n Angestellte . 31 In t e r f a c e s: E ine A r t Z e r F ﬁ z ie r ung § Im B e r u f s le b e n g ibt e s ( g e s c h ü t z t e ) Z e r t if iz ie r u n g e n § z.B . « S t e u e r e xp e r t e / S t e u e r e xp e r t i n » § Ka n n St e u e r n be r e c hne n , Ve r a n l a g u n g e n pr üf e n , e t c . § Zu sä t z l i c h z u an d e r e n Q u al i f i k a t i o n e n 32 In t e r f a c e s : Ei n e Ar t Ze r t i f i z i e r u n g § « I c h b in e in Wi r t s c h a f t s a nw a l t und bi n al s ei d g . d i p l . St e u e r e x p e r t e ze r t i f i z i e r t . D. h . i c h ka n n St e u e r n be r e c hne n , Ve r a n l a g u n g e n pr üf e n , e t c . » § « I c h b in Be t r i e b sw i r t und bi n al s ei d g . d i p l . St e u e r e x p e r t e ze r t i f i z i e r t . D. h . ic h ka n n St e u e r n be r e c hne n , Ve r a n l a g u n g e n pr üf e n , e t c . » § « I c h b in St e u e r k o m m i ssä r i n und bi n al s ei d g . d i p l . St e u e r e x p e r t i n ze r t i f i z i e r t . D. h . i c h ka n n St e u e r n be r e c hne n , Ve r a n l a g u n g e n pr üf e n , e t c . » § Ei n interface be s c hr e i b t Ei g e n sc h a f t e n ( Ve r h a l t e n ) una bhä ngi g vo n d e r Ve r e r b u n g s h i e r a r c h i e 3334 Ju r i s t An w a l t Wi r t s c h a f t s a n w a l t Ju s t i t i a r Be t r i e bs w i r t Co n t r o l l e r Re v i s o r An g e s t e l l t e Ka n z l e i A n g e s t e l l t e Bu c h h a l t e r St e u e r k o m m i s s ä r 35 Ju r i s t An w a l t Wi r t s c h a f t s a n w a l t Ju s t i t i a r Be t r i e bs w i r t Co n t r o l l e r Re v i s o r An g e s t e l l t e Ka n z l e i A n g e s t e l l t e Bu c h h a l t e r St e u e r k o m m i s s ä r <<i n t er f a c e>> St e u e r E x p e r t e vera n l a g en 36 Ju r i s t An w a l t Wi r t s c h a f t s a n w a l t Ju s t i t i a r Be t r i e bs w i r t Co n t r o l l e r Re v i s o r An g e s t e l l t e K an z l e i A n g e s t e l l t e Bu c h h a l t e r St e u e r k o m m i s s ä r <<i n t er f a c e>> St e u e r E x p e r t e vera n l a g en In t e r f a c e s : Ei n e Ar t Ze r t i f i z i e r u n g § Ei n i n t e r f a c e be s c hr e i b t Ei g e n sc h a f t e n ( Ve r h a l t e n ) una bhä ngi g vo n d e r Ve r e r b u n g s h i e r a r c h i e § Ve r e r b u n g s h i e r a r c h i e de r K l as s e n dr üc k t wi c h t i g s t e is t - ei n Be z ie h u n g aus ( Studierende à Bachelor od e r Angestellte à Mitarbeiter ) § interface name häl t ande r e is t - ei n Be z ie h u n g fe s t § Ma n c h e K l a s s e n si n d ze r t i f i z i e r t das s is t - ei n name Be z ie h u n g gi l t § «I c h b i n al s Personal ze r t i f i z i e r t . D. h . ka n n ei n Ei n t r i t t s da t um (u n d gg f . Au s tr i t ts d a tu m ) lie f e r n » 37 Si c h t b ark e i t u n d I n t e rf ac e s § Di e S i c h t b a r k e i t d e r i m I n t e r f a c e d e k l a r i e r t e n M e t h o d e n i s t im m e r public § Au c h w e n n w i r e s n i c h t h i n s c h r e i b e n ( a n d e r e S i c h tb a r k e i t v e r b ot e n ) § Da s I n t e r f a c e se l b s t k a n n d e f a u l t ( P a c k a g e ) o d e r a n d e r e ( z . B . public ) Si c h tb ar k e i t h ab e n § In d e r P r a x i s ﬁ n d e n S i e o g public public interface Personal { Datum getEintritt (); Datum getAustritt (); } 39 Si c h t b ark e i t u n d I n t e rf ac e s § Di e S i c h t b a r k e i t d e r i m I n t e r f a c e d e k l a r i e r t e n M e t h o d e n i s t im m e r public § Au c h w e n n w i r e s n i c h t h i n s c h r e i b e n ( a n d e r e S i c h tb a r k e i t v e r b ot e n ) § Da s I n t e r f a c e se l b s t k a n n d e f a u l t ( P a c k a g e ) o d e r a n d e r e ( z . B . public ) Si c h tb ar k e i t h ab e n § In d e r P r a x i s fi n d e n S i e o ft public public interface Personal { public Datum getEintritt (); public Datum getAustritt (); } 40 Ve r w a n d t e T y p e n § Wi r so l l e n ei n e Gr uppe vo n Kl as s e n im p le m e n t ie r e n um mi t ge o m e t r i s c h e n Fo r m e n zu ar b e i t e n : § Kre i s (C i r c l e), Re c h t e c k (R ec t a n g l e), u n d Dr e i e c k (T ri a n g l e). § Al l e Fo r m e n ha be n ei n i g e Op e r a t i o n e n ge m e i n s a m : § be r e c hne U m f ang - Lä n g e de r Be g r e n z u n g s lin ie n § be r e c hne F l äc he - 2D Ra u m de r dur c h di e Fi g u r ei n g en o m m en wi r d § Di e se Op e r a t i o n e n si n d al l e n ge m e i n s a m au c h we n n si e un t e r s c hi e dl i c h de fi ni e r t si n d . 41 Fl äc h e und Um f an g § Re c h t e c k (« r ec t a n g l e» ) ( de f i ni e r t dur c h Lä n g e l und Höh e h ): Fl ä c he = lh Um f a n g = 2 l + 2 h § Kre i s ( « c i r c l e » ) ( de f i ni e r t dur c h Ra d i u s r ): Fl ä c he = p r 2 Um f a n g = 2 p r § Dr e i e c k (« t ri a n g l e» ) ( de f i ni e r t dur c h Se i t e n a , b und c ) Fl ä c he = √ ( s ( s - a )( s - b )( s - c )) mi t s = ½( a + b + c ) Um f a n g = a + b + c 42 Ge m e ins a m e Me t h od en § Wi r sc h r e i b e n al so Kl asse n mi t de n Me t h o d e n perimeter ( be r e c hne Um f a ng ) u n d area ( be r e c hne F l ä c he ) § Je d e Kl a sse en t h ä l t Co d e fü r di e Be r e c h n u n g e n – nac h de n ge z e i g t e n Re g e l n § Wi r wo l l e n z. B . i n d e r La g e s e i n , d i e Fl ä c h e zw e i e r ( be l i e bi g e r ) ge o m e t r i s c h e n Fo r m e n ve r g l e i c h e n zu kö n n e n § So l a n g e e s si c h um ei n en Kre i s , Re c h t e c k od e r Dr e i e c k hande l t § Od e r ei n e Me t h o d e so l l je d e Fo r m ze i c h n e n kö n n e n 43 Ja v a Interface § Mi t ei n em interface kö n n e n wi r gem ei n s am es Ve r h a l t e n fe s t l e g e n § Me n g e vo n Met h o d e n ( mi t Si g n a t u r e n : P a r a m e t e r u n d Rü c k g a b e w e r t ) public interface Shape { double area(); double perimeter(); } § Al l e K l a s s e n d i e d a s I n t e r f a c e Shape im p le m e n t ie r e n st e l l e n di e Me t h o d e n area() und perimeter() zu r Ve r f ü g u n g 44 Ei n s a t z de s In t e r f a c e s Circle st e l l t area() und perimeter() zu r Ve r f ü g u n g : public class Circle implements Shape { private double radius; // others omitted public double area() { return Math.PI * radius * radius; } public double perimeter() { return 2 * Math.PI * radius; } } Fl ä c he = p r 2 Um f a n g = 2 p r 46 Ja v a I n t e rf ac e u n d Si c h t b ark e i t § Si c h tb ar k e i t d e r i m I n t e r f ac e d e k l ar i e r t e n M e th o d e n i s t im m e r public § Kl as s e mu s s di e s e Me n g e vo n Me t h o d e n im p le m e n t ie r e n we n n si e da s I n t e r f a c e « im p le m e n t ie r t » § Mi t Si c h b a r k e i t public ! public interface Shape { double area(); double perimeter(); } 48 class Circle implements Shape { public double area() {…} public double perimeter() {…} ... // and more … } Ja v a I n t e rf ac e u n d Si c h t b ark e i t § Si c h tb ar k e i t d e r i m I n t e r f ac e d e k l ar i e r t e n M e th o d e n i s t im m e r public § Kl as s e mu s s di e s e Me n g e vo n Me t h o d e n im p le m e n t ie r e n we n n si e da s I n t e r f a c e « im p le m e n t ie r t » § Mi t Si c h b a r k e i t public ! public interface Shape { double area(); double perimeter(); } 49 class Circle implements Shape { private double area() {…} private double perimeter() {…} ... // and more … } Ja v a I n t e rf ac e u n d Si c h t b ark e i t § Si c h tb ar k e i t d e r i m I n t e r f ac e d e k l ar i e r t e n M e th o d e n i s t im m e r public § Kl as s e mu s s di e s e Me n g e vo n Me t h o d e n im p le m e n t ie r e n we n n si e da s I n t e r f a c e « im p le m e n t ie r t » § Mi t Si c h b a r k e i t public ! public interface Shape { double area(); double perimeter(); } 50 class Circle implements Shape { double area() {…} double perimeter() {…} ... // and more … } Ge br a uc h ei n es In t e r f a c e s § Ei n e Kl as s e ka n n de k l a r i e r e n da s s si e ei n In t e r f a c e im p le m e n t ie r t -- au c h we n n si e vo n ei n er an d e r e Kl as s e er b t public class na m e extends par e n t implements in t e r f a c e { ... } § Ei n e Kl as s e S d i e ei n e Kl as s e T ( di e ei n In t e r f a c e im p le m e n t - ti e r t ) er w ei t er t er b t al l e i n T de fi ni e r t e n Me t h o d e n ( au c h di e au s de m I n t e r f a c e ) § Od e r übe r s c hr e i b t si e § Üb e r s c h r i e b e n e Met h o d e mu s s ( auc h ) Si c h t b a r k e i t public habe n 51 Meh r er e In t e r f a c e s § Ei n e Kl as s e ka n n meh r al s ei n In t e r f a c e im p le m e n t ie r t e n public class na m e implements in t e r f a c e 1 , in t e r f a c e 2 { ... } § Mu s s da nn al l e Me t h o d e n au s in t e r f a c e 1 und in t e r f a c e 2 im p le m e n t ie r e n 5253 < < i n t e r f ac e > > Ca r s t a r t () s t o p () c r u i s e () set D i r e c t i o n () public interface Car { public void start(); public void stop(); public double cruise(); public void setDirection (); } Bei d es ( z. B . Au t o d e r Ma r k e Wa t e r C a r )? Mu s s da nn al l e Me t h o d e n au s in t e r f a c e 1 und in t e r f a c e 2 im p le m e n t ie r e n class WaterCar implements Car, Boat { public void start() { ... } public void stop() { ... } public double cruise() { ...} public void setDirection () { ... } public double swim() { ...} } < < i n t e r f ac e > > Bo a t s t a r t () s t o p () s w i m () public interface Boat { public void start(); public void stop(); public void swim(); } Met h o d e start() in b e id e n I n t e r f a c e s Ab e r n u r e i n e Im p l e m e n t a t i o n Er w e i t e r u n g vo n I n t e r f a c e s § Ei n I n t e r f a c e ka n n wi e ei n e Kl as s e er w ei t er t we r d e n § Dur c h ei n ande r e s In t e r f a c e public interface na m e extends bas e I n t e r f ac e { public ty p e na m e ( ty p e na m e , ..., ty p e na m e ); public ty p e na m e ( ty p e na m e , ..., ty p e na m e ); ... } § Kl as s e di e na m e im p le m e n a e r t mu s s d i e Me t h o d e n au s de m In t e r f a c e na m e und di e Me t h o d e n au s na m e B a s e de ﬁ ni e r e n 5455 << in t e r f a c e > > Ve h i c l e st a r t ( ) mo v e () sto p ( ) < < i n t e r f ac e > > Ca r c r u i s e () set D i r e c t i o n () public interface Vehicle { public void start(); public void move(); public void stop(); } public interface Car extends Vehicle { public double cruise(); public void setDirection (); } In t e r f a c e Er w e i t e r u n g § E i n I n t e rf a c e ka n n me h r e r e I n t e rf a c e s e r w e i t e rn . public interface na m e extends na m e 1 , na m e 2 { public ty p e na m e ( ty p e na m e , ..., ty p e na m e ); } § Bei s p i el : public interface Boat extends Vehicle { public void swim(); } public interface Property { public double tax(); public interface Amphibian extends Car, Boat, Property { } 5657 << in t e r f a c e > > Ve h i c l e st a r t ( ) mo v e () sto p ( ) < < i n t e r f ac e > > Ca r c r u i s e () set D i r e c t i o n () < < i n t e r f ac e > > Pr o p e r t y ta x ( ) < < i n t e r f ac e > > Bo a t sw i m ( ) < < i n t e r f ac e > > Am p h i b i a n Ty p e n – In t e r f a c e s und K la sse n § In t e r f a c e s d e f in ie r e n a u c h e in e n T y p ( V e r h a lt e n ) § We r t e n u r w e n n K o n s t a n t e n ( K e y w o r d final – si e h e B e i sp i e l ) § Re f e r e n z v a r i a b l e k ö n n e n a u f E x e m p l a r e v e r w e i s e n , d i e e i n In t e r f a c e im p le m e n t ie r e n § De f i ni t i o n w i e R e f e r e nz v ar i abl e f ür O bj e k t e x e m pl ar e § Ka n n a l s V a r i a b l e o d e r a l s P a r a m e t e r v e r w e n d e t w e r d e n – wi e Re f e r e n z v a r i a b l e f ü r O b j e k t e x e m p l a r e § Er l aub t De f i ni t i o n v o n M e t ho de n di e al s P ar am e t e r Ex e m pl ar e al l e r Kl a sse n , d i e e i n I n t e r f a c e i m p l e m e n t i e r e n , a k z e p t i e r e n § Po l y m o r p h i s m u s f ü r K l a s s e n d i e e i n I n t e r fa c e i m p l e m e n t i e r e n 58 Re f e r e n z v a r i a b l e : T y p d u r c h I n t e r f a c e b e s G m m t § Ge g e be n s e i public interface Shape { public static final double PI_APPROX = 3.14159 ; public double area(); public double perimeter(); } § D a n n k ö n n e n w i r R e f e r e n z v a ri a b l e u n d P a r a m e t e r vo m T y p Shape d e k l a ri e r e n Shape s; Shape s = new Circle(); // siehe naechste Seite void process(Shape myS ) { … } 59 Ty p e n – In t e r f a c e s und K la sse n § Mi t de m I n t e r f a c e Shape ka n n je t zt ei n e Me t h o d e de fi ni e r t we r d e n di e Shape Ob j e k t e ak z e p ti e r t § Ex e m pl ar e al l e r Kl a sse n d i e d a s I n t e r f a c e Shape im p le m e n t ie r e n public static void printInfo (Shape s) { System.out.println (\"The shape: \" + s); System.out.println (\"area : \" + s.area ()); System.out.println (\" perim : \" + s.perimeter ()); } § Je d e s Ob j e k t , d a s d a s I n t e r f a c e im p le m e n t ie r t , ka n n al s Pa r a m e t e r übe r g e be n we r d e n 61 Ty p e n – In t e r f a c e s und K la sse n Circle circ = new Circle(12.0); Rectangle rect = new Rectangle(4, 7); printInfo(circ ); printInfo ( rect ); § Au c h Ar r a y s v on R e f e r e n z e n s i n d m ög l i c h Shape[] shapes = {circ, rect }; printInfo (shapes[0]); printInfo (shapes[1]); 62 En t w u r f v o n S y s t e m e n § Zi e l : P o l y m o r p h i sm u s e r l au b t u n s P r o g r am m e z u e n t w i c k l e n , di e für v i e l e O bj e k t e z u g e br a uc he n s i nd § En t w e de r dur c h I n t e r f ac e s o de r V e r e r bung i n e i ne r is t - ei n Be z ie h u n g § Ve r e r b u n g : K l a s s e n i n e i n e r H i e r a r c h i e ü b e r n e h m e n C o d e § Ab e r J a v a e r l a u b t n u r ei n f a c h e V er er b u n g § Ei ne K l as s e k ann nur ei n e Su p e r k l a sse e r w e i t e r e n – und ni c h t m e hr e r e § In t e r f a c e s : b e s c h r e ib e n ( e r z w in g e n ) V e r h a lt e n § Kl a sse n d i e e i n I n t e r f a c e im p le m e n t ie r e n mü s s e n M e t h o d e n d e s In t e r f a c e s z u r V e r fü g u n g s t e l l e n § Ei n I n t e r f ac e k ann m e hr e r e I n t e r f ac e s e r w e i t e r e n § Ei ne K l as s e k ann m e hr e r e I n t e r f ac e s i m pl e m e n t i e r e n 63 In t e r f a c e s + Po l y m o r p h i s m u s § In t e r f a c e s nüt z e n ni c h t de r Kl as s e so n d e r n de n Kl i e n t e n ! § Di e dur c h ei n In t e r f a c e aus g e dr üc k t e is t - ei n Be z ie h u n g erl a u b t de m Kl i e n t e n Po l y m o r p h i s m u s § De r Kl i e n t ka n n «s o al l g e m e i n wi e mö g l i c h » ge s c h r i e b e n we r d e n – ar be i t e t fü r al l e K l as s e n di e das I n t e r f ac e im p le m e n t ie r e n § Si e h e public static void printInfo (Shape s) { … } § Je d e s Ob j e k t , d a s d a s I n t e r f a c e im p le m e n t ie r t , ka n n al s Pa r a m e t e r übe r g e be n we r d e n § Ab e r nur di e Met h o d e n di e s e s In t e r f a c e s kö n n e n auf g e r uf e n we r d e n 64 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 9. 0 Ex c e p t i o n s Th o m a s R . G r o s s De par t m e n t In f o r m a i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 , 2 0 2 1 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 9. 1 E i n f ü h r u n g § 9. 2 H a n d l e r ( try - catch ) § 9. 3 «W e r f e n » v o n E x ce p t i o n O b j e k t e n § 9. 4 W e i t e r e B e i s p i e l e 66 9. 1 E i n f ü h ru n g 67 Aus na hm e n (« E x c e p tio ns» ) § Au s n a h m e (« E x c e p aon » ): Au l r e t e n ei n es au sse r g e w ö h n - lic h e n Er e i g n i sse s ( wä h r e n d de r Au s f ü h r u n g ) § Fo l g e : Än d e r u n g de r Au s f ü h r u n g s r e i h e n f ol g e (« c on t r ol ﬂow » ) § No r ma l e r w e i s e wi r d ei n e An w e i s u n g nac h de r ande r e n abg e ar be i t e t § Ka n n Me t h o d e n a u f r u f se i n … e s wi r d im m e r «d i e näc hs t e » An w e i s u n g aus g e f ühr t 68 Ex c e p t i o n - Be i s p i e l 69 void main() { // ... foo(); // ... } void foo() { bar(); // ... } void bar() { int x = 2; int y = 10/x; // ... } Aus na hm e n (« E x c e p tio ns» ) § Au s n a h m e (« E x c e p aon » ): Au l r e t e n ei n es au sse r g e w ö h n - lic h e n Er e i g n i sse s § Fo l g e : Än d e r u n g de r Au s f ü h r u n g s r e i h e n f ol g e (« c on t r ol ﬂow » ) § No r ma l e r w e i s e wi r d ei n e An w e i s u n g nac h de r ande r e n abg e ar be i t e t § Na c h Er k e nne n de r Ex c e p i o n wi r d ei n e an de r e An w e i s u n g aus g e f ühr t 70 Ex c e p t i o n - Be i s p i e l 71 void main() { // ... foo(); // ... } void foo() { bar(); // ... } void bar() { int x = 0 ; int y = 10/x ; // ... } Fe h l e r ! Wo h i n ? Ja v a Aus na hm e n Mod el l § Be t r i f f t al l e Ar t e n vo n Au s n a h m e n § Fe h l e r vo m La u f z ei t s y s t em en t d ec k t ( /0 , x[ - 1] , null.toString () …) § Fe h l e r de s La u f z ei t s y s t em s (St a c k O v erf l o w , … ) § Fe h l e r vo n d e r H a r d w a r e en t d ec k t ( de f e k t e Sp e i c h e r b a u s t e i n e , … ) § Vo m Be n u t z e r p r o g r a m m de f i ni e r t e Fe h l e r / So n d e r f ä l l e § Se h r pr ak t i s c h um Pr og r a m m e st a b i l zu ma c h e n § Ei n h e i t l i c h e Beh a n d l u n g al l e r Au s n a h m e n § Ko m p r o m i s s zw i s c h e n Pr o gr a m m i e r - und La u f z e i t a u f w a n d 73 Ja v a A u s n ah m e n M o d e l l § Fü r j e d e n B l oc k B ( vo n A n w e i s u n g e n , k a n n a u c h n u r e i n e s e i n ) k ön n e n wi r b es t i mmen wi e ei n e A u s n a h me b eh a n d el t w er d en s o l l § Di e F o l g e v o n A n w e i su n g e n , d i e e i n e a u f g e t r e t e n e Au s n a h m e b e a r b e i t e n , h e i s s t « H a n d l e r » § Ha n d l e r or i e n ti e r t s i c h a n d e r B l oc k - St r u k t u r e i n e s Ja v a P r o g r a m m s D. h . H a n d l e r v e r b u n d e n m i t B l o c k B , n i c h t i r g e n d w o i m P r o g r a m m § Je d e A r t v o n A u sn ah m e n k an n i h r e n e i g e n e n Han d l e r h ab e n § Ar t: T y p – si e h e H i e r a r c h i e d e r E x c e p t i o n s 74 9. 2 H a n d l e r 75 Ha n d l er u n d ge s c h ü t z t e r Be r e i c h § De r H a n d l e r sc h ü tz t ei n en Bl o c k : so l l t e es im Bl o c k zu ei n er Au s n a h m e (d e s Ty p s SomeException ) ko m m e n , s o wi r d de r Han d l e r au sg e f ü h r t § Sy n t a x : try { tr y - Bl o c k } catch ( Som e E x c e p t i on na m e ) { ca t c h - Bl o c k } § De r c a t c h - Bl o c k ( H a n d l er ) ko m m t nur zu r Au s f ü h r u n g we n n es ei n e So m eE x c ep t i o n Au s n a h m e im tr y - Bl o c k gi b t . 76 ge s c h ü t z t e r Be r e i c h Ha n d l e r Ty p d e r A u s - nam e di e Ha n d l e r k e n n t Ha n d l er u n d ge s c h ü t z t e r Be r e i c h § Fa l l s im tr y - Bl o c k ei n e Au s n a h m e vo m Ty p SomeException au f tr i t t : § Be e n d e tr y - Blo c k ( d. h. br e c he Au s f ü h r u n g ab) § Fü h r e Ha n d l e r ( c a t c h - Blo c k ) aus , na m e ve r w e i s t auf ei n Ob j e kt , d a s me h r In f o r m a t i o n e n übe r di e Au s n a h m e lie f e r n ka n n § Ha n d l e r is t wi e ei n Met h o d e n a u f r u f an de r S t e l l e de r Au s n a h m e § We n n de r H andl e r fe r t i g is t wi r d di e nac h f o l g e nde An w e i s u n g aus g e f ühr t (d i e try - catch fo l g t ) § Fa l l s im tr y - Bl o c k ke i n e Au s n a h m e au f tr i t t wi r d di e na c h f o l g e nde An w e i s u n g au sg e f ü h r t § ca t c h - Blo c k oh n e Wi r k u n g 77 try - catch § try - catch ve r k n ü p f t B l o c k m i t H a n d l e r f ü r e i n e n T y p vo n Au s n a h m e n § De t ai l s b z g l . de r T y pe n f o l g e n § Bel i eb i g e A n w ei s u n g en i m t ry - Bl o c k , b el i eb i g e A n w ei s u n g en im H a n d le r § Han d l e r § catch (SomeException name) { … } § wi e ei n e ( n a men l o s e) M e t h o d e d i e n a c h A u f t r e t en ei n er Ex c e p t i o n ( i m t r y - Bl o c k ) a u s g e f ü h r t wi r d 78 Pf a d e in Pr o g r am m e n try catch Pf a d e in Pr o g r am m e n try catch Pf a d e in Pr o g r am m e n try catch Pf a d e in Pr o g r am m e n try catch Pf a d e in Pr o g r am m e n try catch Beis p iel try - catch import java.util .*; public class ExceptionExample { public static void main (String[] args ) { Scanner console = new Scanner( System.in ); System.out.println (\" Zwei Zahlen a und b (b ungleich 0): \"); boolean done = false; while (!done) { try { int a = console.nextInt (); int b = console.nextInt (); System.out.println (a + \"/\" + b + \" = \" + a/b); done = true; } catch ( Exception e) { System.out.println (\"Bitte b ungleich 0!!!\"); } } } } 85 Ja v a A u s n ah m e n M o d e l l § Fü r j e d e n B l oc k B ( vo n A n w e i s u n g e n , k a n n a u c h n u r e i n e s e i n ) kö n n e n wi r b es t i mmen wi e ei n e A u s n a h me b eh a n d el t w er d en s o l l § Fü r j e d e Ar t v on E x c e p t i on g i b t e s e i n e n H a n d l e r § En t w e de r ( i m pl i z i t ) be r e i t s v o m J a v a S y s t e m e i ng e r i c h t e t § … od e r e x p l i z i t i m Pr og r a m m a n g e g e b e n 87 mü s s en Aus na hm e n Kla s s if ik a t io n 1. Au s n a h m e n di e ei n Pr o gr a m m ni c h t be ha nde l n ka n n und/ od e r fa s t übe r a l l au f tr e t e n kö n n e n § OutOfMemoryError § NullPointerException 2. Au s n a h m e n di e ( im Pr i nz i p ) vo m Pr o gr a m m be ha nde l t we r d e n kö n n e n ( od e r kö n n t e n ) § i. A . wo h l d e f i n i e r t e An w e i s u n g / Met h o d e di e BL A N K BL A N K BL A N K fü r Au s n a h m e ve r a n t w o r t l i c h is t § Be is p ie l : FileNotFoundException 88 Ha n d l e r e x i s i ti e r t be r e i t s ( abe r k ö nne n ei g en en ei n ri c h t en ) Aus na hm e n Kl a s s i ﬁ k a F o n 1. Au s n a h m e n di e ei n Pr o gr a m m ni c h t be ha nde l n ka n n und/ od e r fa s t übe r a l l au f tr e t e n kö n n e n § OutOfMemoryError § NullPointerException 2. Au s n a h m e n di e ( im Pr i nz i p ) vo m Pr o gr a m m be ha nde l t we r d e n kö n n e n ( od e r kö n n t e n ) § i. A . wo h l d e f i n i e r t e An w e i s u n g / Met h o d e di e BL A N K BL A N K BL A N K fü r Au s n a h m e ve r a n t w o r t l i c h is t 89 Ha n d l e r e x i s i ti e r t be r e i t s ( abe r k ö nne n ei g en en ei n ri c h t en ) Ha n d l e r m u s s e i n g e r i c h t e t w e r d e n od e r An k ü n d i g u n g d a s s Ha n d l e r g e b r a u c h t w i r d Aus na hm e n Mod el l § Au s n a h m e n di e vo m Pr o gr a m m be ha nde l t we r d e n kö n n e n ( od e r kö n n t e n ) mü s s en au c h vo m Pr o gr a m m be ha nde l t we r d e n § En t w e de r Ha n d l e r ei n ri c h t en mi t try - catch § Od e r : An k ü n d i g u n g ( das s Ha n d l e r ge b r a u c ht wi r d da Au s n a h m e in Met h o d e auf t r e t e n ka n n ) mi t throws § Be is p ie l : throws FileNotFoundException in Met h o d e n d e k l a r a t i o n § Co mp i l er pr üft da s s Han d l e r od e r An kü n d i g u n g ex i s i t i e r t {«ch e ck e d e x ce p t i o n ») 90 Be i s p i e l Ank ündigung : throws public static void main ( String [] args ) throws FileNotFoundException { Scanner console = new Scanner( System.in ); Scanner rd = openFileReader (console); int i = rd.nextInt (); System.out.println (\"here \" + i ); } public static Scanner openFileReader (Scanner input) throws FileNotFoundException { String name = input.next (); return new Scanner(new FileReader (name) ); } 91 Je t zt al t e rn a t i v mi t try - catch public static Scanner openFileReader (Scanner input) { Scanner rd = null ; while (rd == null ) { try { String name = input.next(); rd = new Scanner( new FileReader(name) ); } catch ( FileNotFoundException ex) { System.out.println(\"Can't open file\" + ex.getMessage()); } } return rd; } 92 § Da n n b r a u c h t d i e main Me t h o d e a u c h n i c h t m e h r an k ü n d i g e n , d ass si e e i n e E x c e p ti o n g e n e r i e r e n k an n public static void main ( String [] args ) { Scanner console = new Scanner( System.in ); Scanner rd = openFileReader (console); int i = rd.nextInt (); System.out.println (\"here \" + i ); } § So l l t e di e F i l e ni c h t ge f u n d e n we r d e n so wi r d di e s e s Pr o bl e m in Me t h o d e openFileReader be ha nde l t 93 Ha n d l er m u ss nic h t lo k a l sei n § De r H andl e r ka n n auc h in ei n em Au f r u f e r se i n public static Scanner openFileReader (Scanner input) { Scanner rd = null ; while (rd == null ) { try { String name = input.next(); rd = getScanner(name) ; } catch ( FileNotFoundException ex) { System.out.println(\"Can't open file\"); } } return rd; } 94 Ha n d l er m u ss nic h t lo k a l sei n public static Scanner getScanner ( String n) throws FileNotFoundException { Scanner sc = delegateWork (n); return sc ; } public static Scanner delegateWork (String n) throws FileNotFoundException { return new Scanner( new FileReader (n) ); } 95 openFileReader getScanner delegateWork (w i l l ) catch(..) (m a y ) throw (m a y ) throw fa l l s E x c e p t i o n a u f t r i t tfa l l s E x c e p t i o n a u f t r i t t Ni c h t - lo k a le r Ha n d l er § Tr i t t ei n e Ex c e p t i o n i n d e n au f g e r u f e n e n Me t h o d e n ( getScanner , delegateWork ) a u f , s o wi r d de r H a ndl e r ( c a t c h - Bl o c k d es try - catch Ko n s t r u k t s ) im Au f r u f e r ak ti vi e r t § Di e auf g e r uf e ne n Met h o d e n mü s s e n ank ündi g e n , das s si e ei n e Ex c e p t i o n ge n e r i e r e n (u n d ni c h t se l b e r be hande l n ) kö n n e n § Di e Met h o d e openFileReader br auc h t ni c h t me h r mi t t e l s throws ank ündi g e n , das s si e ei n e Ex c e p t i o n ge n e r i e r e n ka n n § De nn ca t c h - bl o c k fä n g t mö g l i c h e FileNotFoundException auf § Es wi r d de r c a t c h - Bl o c k au sg e f ü h r t , d e r d a s Au f t r e t e n am en g s t en um s c hl i e s s t . 96 9. 3 « W e rf e n » v on E x c e p t i on O b j e k t e n 97 «W e rf e n » v o n E x c e p t i o n E x e mp l ar e n § We n n e i n e E x c e p t i o n a u f t r i t t d a n n g e n e r i e r t d a s J a v a S y s t e m ei n E x c ep t i o n E x emp l a r § Ge n a u e r : E x e m p l a r d e r K l a s s e Throwable (… o d er ei n er Su b c l a s s ) 9899 Ve r e r b u n g s h i e r a r c h i e im Ei n s a t z 100 NullPointer Exception Arithmetic Exception Runtime Exception IndexOutOfBounds Exception ArrayIndexOutOf BoundsException Exception IOException FileN Error IOError VirtualMachine Error StackOverflow Error OutOfMemory Error Throwable Object «W e rf e n » v o n E x c e p t i o n E x e mp l ar e n § We n n e i n e E x c e p t i o n a u f t r i t t d a n n g e n e r i e r t d a s J a v a S y s t e m ei n E x c ep t i o n E x emp l a r § Ge n a u e r : E x e m p l a r d e r K l a s s e Throwable (… o d er ei n er Su b c l a s s ) § Di e s e s O bj e k t w i r d dann zum pas s e nde n H andl e r w e i t e r g e r e i c h t (« t h r o w n » ) § Au t om a ti s c h § Ei n P r o g r a m m k a n n a u c h e x p l i z i t e i n A u sn a h m e Ex e m p l a r ge n e r i e r e n ( new Throwable() ) und di e s e s da nn z um Han d l e r w e i t e r r e i c h e n l as s e n § … m i t d e r throw An w e i s u n g 101 th r o w - An w e is ung § Ei n Pr o gr a m m ka n n s e l bs t ei n e Ex c e p t i o n ge n e r i e r e n § Ge n a u s o be hande l t al s we n n das La u f z ei t Sy s t e m d a s Au f tr e t e n fe s t s t e l l t § Sy n t a x : throw exc e p t i o n ; § exc e p t i o n mu s s ei n e Re f e r e n z au f ei n Ex e m p l a r vo m Ty p Throwable se i n § z.B . : throw new ArithmeticException (); 102 Beis p iel throw import java.util .*; public class ExceptionExample { public static void main (String[] args ) { Scanner console = new Scanner( System.in ); boolean done = false; while (!done) { try { System.out.println ( computeFraction (console)); done = true; } catch ( ArithmeticException e) { System.out.println ( e.getMessage ()); System.out.println (\"Bitte b ungleich 0!!!\"); } } } } 103 static String computeFraction (Scanner in) { System.out.println (\" Zwei Zahlen a und b (b ungleich 0): \"); int a = in.nextInt (); int b = in.nextInt (); if (b==0) { throw new ArithmeticException (\"Input 0 nicht erlaubt \"); } return \"\" + a + \"/\" + b + \" = \" + a/b; } Be m e r k u n g e n § So w o h l try - catch al s au c h throw s i n d f ü r d i e s e s P r o b l e m (I n p u t r i s ki e r t D i v i s i o n d u r c h 0 ) O v e r k i l l § if - St a t e m e n t o d e r n u l l - Re t u r n w ä r e n v i e l l e i c h t b e s s e r § En t s c he i dung A bhäng i g v o n H äuf i g k e i t und A b s t and z w i s c he n P unk t an de m F e hl e r be ho be n w e r de n k ann z u P unk t an de m F e hl e r auf t r i t t § Sp ä t e r e Sl i d e s z e i g e n an d e r e s B e i sp i e l § Me i n T i p : Z u r ü c k h a l t u n g b e i V e r w e n d u n g v o n try - catch und throw 104 We l c h e Ex c e p t i o n Ob j e k t e we r d e n ge f a n ge n ? § Wi r sag e n «E x ce p t i o n E x e m p l a r» ( od e r E. Ob j e k t ) ob w oh l es ge n a u ge n o m m e n ei n Ex e m p l a r v o n Throwable is t § Exception is t Su b k l a sse vo n Throwable § An d e r e is t Error – is t fü r uns we n i g e r wi c h t i g § Han d l e r fä n g t ei n e Ex c e p t i o n we n n de r Ty p de s E x c e p t i o n Ob j e k t s mi t de m Ty p im ca t c h - Ko n s t r u k t ko m p a t i b e l is t . § catch ( So m eE x c ep t i o n na m e ) § Zu w e i su n g § SomeException name = Re f E x c e p t i o n O b j e k t § mu s s er l a u b t se i n 106 Wa s wir d ge f a n ge n ? § catch ( E na m e ) § Se i T de r T yp de s E x c e p t i o n O bj e k t e s 107 Arithmetic Exception Exception IOException Throwable T Throwable Exception IOException Arithmetic Exception Throwable Exception IOException Arithmetic Exception E ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Meh r er e Ha n d l er mö g l i c h § Fü r ei n en tr y - Bl o c k ka n n es meh r er e Han d l e r ge b e n try { tr y - Bl o c k } catch ( Exception1 na m e ) { ca t c h - Bl o c k } catch ( Exception2 na m e ) { ca t c h - Bl o c k } // oder mehr Handler … § We n n ei n e Ex c e p t i o n im tr y - Bl o c k au f tr i t t wi r d de r pa s s e nde Han d l e r ge f u n d e n . 108 Ha n d l e r f ü r E x c e p t i o n 1 Ha n d l e r f ü r E x c e p t i o n 2 § Zu r La u f z e i t ( we n n ei n e Au s n a h m e fe s t g e s t e l l t od e r ge n e r i e r t wu r d e ) we r d e n di e c a t c h - Bl ö c k e de r Re i h e na c h an g e se h e n catch (FirstException ex) { ... } catch (SecondException ex) { ... } catch (ThirdException ex) { ... } // nachfolgende Anweisung (N u r) d er er s t e Blo c k de s s e n Pa r a m e t e r pas s t ( d. h ., Re f e r e n z e n auf ei n en Su p e r t y p de s Ex c e p t i o n - Ob j e kt e s zu l ä s s t ) wi r d aus g e f ühr t § Di e ak t ue l l e Au s n a h m e wi r d dur c h ei n Ob j e kt be s c hr i e be n – \" is t - ei n \" Ex e m pl ar de r er w a rt e t en Au s n a h m e n § We n n ke i n Bl o c k pa s s t ge h t es mi t de m um s c hl i e s s e nde n Ko n s t r u k t we i t e r ( try - catch od e r throws ) 109 Be m e r k u n g § Na t ü r l i c h k ön n e n w i r n e u e K l a s s e n d e f i n i e r e n , d i e Throwable (od e r Exception ) e r w e i t e r n § class MyException extends Exception { § String info; § MyException(String s) { § info = s; § } } § MyException Ex e m p l a r m i t throw we i t e r r e i c h b a r … § Vi e l e M ö g l i c h k e i t e n ( s i e h e f o l g e n d e s B e i s p i e l ) 110 9. 4 W e i t e r e B e i s p i e l e 111 Be i s p i e l § Wi r wo l l e n ni c h t zu l a s s e n , da s s gr o s s e Fi l e s ge ö ﬀ n e t we r d e n § Di e Lä n g e (l en g t h ) ei n er Da t e i kö n n e n wi r er s t erf a h r en nac hde m di e Da t e i ge ö ﬀ n e t wu r d e . § Is t di e F i l e zu gr o s s , gi b t es ei n e Ex c e p i o n § Ge n a u s o al s we n n si e ni c h t ex i s i e r t § Si n n d e s Bei s p i el s is t de n Ei n sa t z ei n er ei g en en Ex c e p a o n zu ze i g e n , ni c h t de r D i a l o g mi t de m Fi l e s y s t e m 112 public static Scanner openFileReader(Scanner input) { Scanner rd = null ; while (rd == null ) { try { String name = input.next(); rd = getScanner(name); } catch (MyException ex) { System.out.println(\"Don't want to open this file\"); } // warning – Not yet complete // // } return rd; } Noc h n i c h t g a n z v ol l s t ä ndi g . . . . 113 ⚠ Un v o l l s t ä n d i g Co d e f ü r g e t S c a n n e r ( je t zt m i t C h e ck f ü r G r ö s s e ) u n d M y E x c e p t i o n public static Scanner getScanner( String n) throws FileNotFoundException, MyException { File f = new File(n); if (f.exists() && f.length() > 1000) { throw new MyException(); } return new Scanner(f); } // getScanner public class MyException extends Exception { // could have [more] attributes but not needed } 114 Kl i en t en P r o g r am m public class ExceptionExample { public static void main ( String [] args ) { Scanner console = new Scanner( System.in ); Scanner rd = openFileReader (console); int i = rd.nextInt (); System.out.println (\"here \" + i ); } } // end ExceptionExample 115 Di s k u s s i o n § Di e se Va r i a n t e de r Me t h o d e getScanner we i g e r t si c h , ei n e gr o s s e Da t e i zu öf f n e n§ catch (MyException ex){ } f ä ng t di e g e w o r f e ne Ex c e p t i o n auf und g i b t e i ne F e hl e r m e l dung aus . § Al l e r d i n g s gi b t es no c h ei n Pr o bl e m § Di e Da t e i ex i s i t i e r t vi e l l e i c h t ga r ni c h t § Di e Met h o d e getScanner ka n n im m e r no c h ei n e FileNotFoundException we r f e n 116 Di s k u s s i o n § Di e se Ex c e p t i o n ( FileNotFoundException ) m u s s au c h vo n ei n em ca t c h - Bl o c k ge f a n ge n we r d e n § Od e r mi t t e l s throws ang e k ündi g t we r d e n 117 public static Scanner openFileReader(Scanner input) { Scanner rd = null ; while (rd == null) { try { String name = input.next(); rd = getScanner(name); } catch (MyException ex) { System.out.println(\" Don't want to open this file\" ); } catch (IOException ex) { System.out.println(\"Can't open file\"); } } return rd; } 118 IOException is t S u p e r K la s s e v o n FileNotFoundException Di s k u s s i o n § Di e se Ex c e p t i o n ( FileNotFoundException ) m u s s au c h vo n ei n em ca t c h - Bl o c k ge f a n ge n we r d e n § Od e r mi t t e l s throws ang e k ündi g t we r d e n § catch (IOException ex) {...} fä n g t ei n e gg f . au f tr e t e n d e FileNotFoundException au f § IOException is t ei n Su p e r t y p ( ei n e Su p e r k l a sse ) v o n FileNotFoundException 121 We i t e r mi t Be i s p i e l § Wi r wo l l e n zw i s c h e n gr o s s e n Da t e i e n (> 1000 B y t e s ) u n d gi g a n t i s c he n Da t e i e n (> 2000 B y t e s ) un t e r s c he i de n . § Wi r wo l l e n au c h Fe e d b a c k ge b e n we n n di e Da t e i zu gr o s s is t . § En t w e de r di e Da t e i is t gr o s s ( > 1 0 0 0 B y t e s , < = 2 0 0 0 B y t e s ) od e r si e is t gi g a n t i s ch (> 2 0 0 0 B y t es ) § So l l t e di e Da t e i ni c h t ex i s t i e r e n so fr a g e n wi r nur nac h ei n em ande r e n Na me n . 122 public class Exception2 { public static void main ( String [] args ) { Scanner console = new Scanner( System.in ); Scanner rd = null ; while ( rd == null ) { try { try { System.out.println (\"Please enter a file name:\"); String name = console.next (); rd = getScanner (name); } catch ( MyBigException ex) { System.out.println (\"This file is HUGE!\"); } catch ( MyException ex) { System.out.println (\"This file is large!\"); } if ( rd == null ) { System.out.println (\"Please enter name of a small file\"); } // Ende outer try - block -- large file } // weiter mit catch fuer outer try - block 123 Fo r t s e t z u n g 1 // Ende outer try - block on previous slide // } catch ( IOException ex) { // catch -- no such file System.out.println (\"File does not exist\"); } // end while loop } // use rd to read from small file … int i = rd.nextInt (); System.out.println (\"Found: \" + i ); } // end main 124 Fo r t s e t z u n g 2 public static Scanner getScanner (String n) throws FileNotFoundException , MyException { File f = new File(n); if ( f.exists () && f.length () > 1000) { if ( f.length () > 2000) { throw new MyBigException (); } else { throw new MyException (); } } return new Scanner(f); } } // Exception2 public class MyException extends Exception { } public class MyBigException extends MyException { } 125 MyException is t S u p e r K la s s e vo n MyBigException public class Exception2 { public static void main ( String [] args ) { Scanner console = new Scanner( System.in ); Scanner rd = null ; while ( rd == null ) { try { try { System.out.println (\"Please enter a file name:\"); String name = console.next (); rd = getScanner (name); } catch ( MyBigException ex) { System.out.println (\"This file is HUGE!\"); } catch ( MyException ex) { System.out.println (\"This file is large!\"); } if ( rd == null ) { System.out.println (\"Please enter name of a small file\"); } // Ende outer try - block -- large file } catch ( IOException ex) { // catch fuer outer try - block // catch -- no such file System.out.println (\"File does not exist\"); } // end while loop } // use rd to read from small file … int i = rd.nextInt (); System.out.println (\"Found: \" + i ); } // end main 126 public static Scanner getScanner (String n) throws FileNotFoundException , MyException { File f = new File(n); if ( f.exists () && f.length () > 1000) { if ( f.length () > 2000) { throw new MyBigException (); } else { throw new MyException (); } } return new Scanner(f); } } // Exception2 public class MyException extends Exception { } public class MyBigException extends MyException { } Ou t p u t § Di e Da t e i e n ls - alt *txt 8 - rw ------- . 1 trg inf 6 Nov 24 2019 data.txt 8 - rw ------- . 1 trg inf 2804 Oct 24 2019 hoehe.txt 8 - rw ------- . 1 trg inf 1067 Oct 21 2019 hs.txt § Au s f ü h r u n g Please enter a file name: no - such - file.txt File does not exist Please enter a file name: hs.txt This file is large! Please enter name of a small file Please enter a file name: hoehe.txt This file is HUGE! Please enter name of a small file Please enter a file name: data.txt Found: 33333 127 da t a . t x t : 33333 Fr ag e Wa s pa s s i e r t we n n wi r di e Re i h e n f o l g e vo n } catch ( MyBigException ex) { System.out.println (\"This file is HUGE!\"); } catch ( MyException ex) { System.out.println (\"This file is large!\"); } in } catch ( MyException ex) { System.out.println (\"This file is large!\"); } catch ( MyBigException ex) { System.out.println (\"This file is HUGE!\"); } än d e r n ? 128 Ex c e p t i o n M o d e l l Zu s a m m e n f a s s u n g § Me t h o d e n kö n n e n mi t throws an k ü n d i g e n , we n n si e Ex c e p a o n s ge n e r i e r e n od e r ni c h t se l b s t be ha nde l n § Zw i n g e n d be i ch e ck e d Ex c e p i o ns – mü s s e n be hande l t od e r ang e k ündi g t we r d e n § Se l b s t be ha nde l n he i s s t : An w e i s u n g e n , d i e E x c e p a o n s ge n e r i e r e n kö n n e n , we r d e n in ei n em «t r y - Bl o c k » au sg e f ü h r t , und de r « c a t c h - Bl o c k » fä n g t gg f . au lr e t e n d e Ex c e p a o n s § Me h r e r e ca t c h - Blö c k e si n d mö g l i c h § Di e Re i h e n fo l g e de r c a t c h - Blö c k e is t wi c h i g 130 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 10. 0 Gen er i s c h e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 — 2021 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 10. 1 Ei n l e i t u n g § 10. 1. 1 W r a p p e r K l a s s e n § 10. 1. 2 Ty p p a r a m e t e r § 10. 2 Ar r a y L i s t <T > § 10. 3 Ve r g l e i c h e n vo n Ob j e k t e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 6 It e r a t o r e n § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 2 10. 1 Ei n l e i t u n g 3 So f t w ar e En t w i c k l u n g § Pr o gr a m m i e r e n is t an sp r u c h s v o l l § Es is t le ic h t Fe h l e r zu ma c h e n § Zw e i An s ä t z e di e s e Au f g a b e zu lö s e n § Ab s tr a k ti on § Wi e d e r v e r w e n d u n g vo n fr ü h e r e n Lö s u n g en 5 lö s e n ve r e i n f a c h e n Auf fr ü h er en Lö sung en au f b au e n § Sc h n e l l e r e Im p le m e n t a t io n e n § De s i g n und C o de vo r g e g e b e n § We n i g e r Te s t a u f w a n d § Bi s h er : zw e i An s ä t z e § Ve r e r b u n g : ge m e i n s a m e r Co d e § Wi e d e r v e r w e n d u n g fü r Su b c l a sse s § In t e r f a c e s : C o d e d e r Ex e m pl ar e vi e l e r Kl a sse n ak z e p t i e r t 6 So f t w ar e W ie de r v e r w e ndung § Ve r e r b u n g (i n h e r i t a n c e ): K l a s s e n übe r ne hm e n Co d e d er Su p e r k l asse § Ha t ei n fo r m a l e r Pa r a m e t e r d e n Ty p « Re f e r e n z auf Su p e r k l a sse » s o ka n n de r ak t ue l l e Pa r a m e t e r vo m Ty p « Re f e r e n z auf Su b k l a sse » s e i n . § In t e r f a c e s er l a u b en we i t e r e Ty p h i e r a r c h i e § Ha t ei n fo r m a l e r Pa r a m e t e r d e n Ty p « Re f e r e n z auf I n t e r f ac e » s o ka n n de r ak t ue l l e Pa r a m e t e r auf ei n Ex e m pl ar ir g e n d e in e r Kl a sse ve r w e i s e n , di e das I n t e r f ac e im p le m e n t ie r t . 7 An g es t el l t e Ar z t / Är z t i n Fa G e ( Pf l e g e ) Ad m i n s t r a t o r /i n OP - Fa c h k r a ft P r o ble m : Linked Double List § Wi r b r a u c h e n e i n e V a r i a n t e v o n LinkedIntList di e da s Sp e i c h e r n e i n e s double We r t s e r l a u b t void add( double v) { … } § Kn o t e n m i t double We r t e n – s o n s t k e i n e Ä n d e r u n g class DoubleListNode { double data; DoubleListNode next; } fr o n t = da t a ne x t 222.3 el em en t 0 el em en t 1 el em en t 2 da t a ne x t 61.3 da t a ne x t - 43.93 Li n k e dD o u bl e Li s t Do u b l e L i s t N o d e Do u b l e L i s t N o d e Do u b l e L i s t N o d e LinkedIntList à Linked Double List § Wi e k ö n n e n w i r e i n e L i s t e ( e v e n t u e l l m i t H i l f s k l a s s e n w i e ListNode ) s o d e f i n i e r e n , d a s s d i e K l a s s e f ü r a l l e T y p e n ve r w e n d e t w e r d e n k a n n ? § LinkedIntList sp e i c h e r t int We r t e § LinkedDoubleList sp e i c h e r t double We r t e § LinkedPointList sp e i c h e r t V e r w e i se a u f Point Ex e m pl ar e § LinkedShapeList sp e i c h e r t V e r w e i se a u f E x e m p l a r e , d i e d a s In t e r f a c e Shape im p le m e n t ie r e n § …. 9 Hi l f t e i n e V e r e r b u n g s h i e r a r c h i e ? § Wi r k ö n n t e n v e r s u c h e n d i e K l a s s e ListNode zu e r w e i t e r n class ListNode { ???????? data; ListNode next; ListNode () { data = ????; next = null; } // ggf andere Konstruktoren } 10 class DoubleListNode extends ListNode { } public class LinkedDoubleList { private ListNode front; // Beispiel Methode public void removefirst () { if (front == null) { System.exit ( - 1); } front = front.next ; } } § Kö n n t e n d a m i t L i s t e u n d Op e r a t i o n e n d e r L i s t e de fi ni e r e n 12 W a s f ür e in T y p f ür da s data At t r i b u t ? § (M i n d e s t e n s ) d r e i P r ob l e m e : § Ty p e n ( d e r D a t e n i n d e r L i s t e ) m ü s s e n i n e i n e r V e r e r b u n g s h i e r a r c h i e se i n w e n n data auf Ex e m pl ar e v e r s c hi e de ne r T y pe n v e r w e i s e n w i l l § Ve r e r b u n g n u r f ü r K l a s s e n d e f i n i e r t , n i c h t f ü r B a s i s t y p e n § Wa s s o l l t e d e r T y p d e r R ü c k g a b e v o n get() , remove() , . . . s e in ? § Wa s f ü r e i n e n T y p s o l l t e K o n s t r u k t o r a k z e p t i e r e n ? § Mü s s e n i m m e r n o c h e x p l i z i t XXXListNode er s t el l en u n d C o d e f ü r LinkedXXXList ko p i e r e n 13 W a s f ür e in T y p f ür da s data At t r i b u t ? § Re f e r e n z e n a u f Object Ex e m p l a r e k ö n n e n a u f Ex e m p l a r e be l i e bi g e r K l a s s e n v e r w e i s e n § Zu r E r i n n e r u n g : i n Point : equal(Object other) { ... } § ... a b e r B a s is t y p e n s in d n ic h t E x e m p la r e e in e r K la s s e § Fü r je d e n Ba s i s t y p gi b t es ei n e be s o nde r e Kl as s e (d i e Wr a p p e r Kl as s e (« wr a p p e r » cl a s s , Ve r s c h a l u n g s k l a s s e [d t ]) ) de r e n Ex e m p l a r e We r t e de s Ba s i s t y p s sp e i c h e r n kö n n e n § Fü r int is t das Integer § Fü r double is t das Double 14 10. 1. 1 W r a p p e r K l a s s e n 15 10. 1. 1 W r a p p e r K l a s s e n § Ei n « w r a p p e r » ( Um s c hl a g , Ve r s c h a l u n g ) is t ei n Ob j e k t de s s e n ei n z i g er Zw e c k es is t , ei n en We r t ei n es Ba s i s t y p s zu sp e i c h e r n . § Ex e m p l a r e di e s e r Kl as s e n si n d Ob j e k t e Pr i m i t i v e T y p e Wr a p p er T y p e int Integer double Double char Character boolean Boolean 161718 und v i e l e m e hr . . . . 19 Integer ke n n e n w i r ( v i e l l e i c h t ) s c h o n § We n n w i r d e n g r ö s s t e n ( k l e i n s t e n ) We r t b r a u c h e n , d e n w i r i n ei n er int Va r i a b l e s p e i c h e r n k ö n n e n , d a n n h e l f e n u n s Integer.MAX_VALUE Integer.MIN_VALUE § De n n Integer Ex e m p l a r e k ö n n e n j e d e n int We r t s p e i c h e r n (a u c h u m g e k e h r t ) 2021 Wa s fe h l t ? § Wa s si n d di e A t t r i but e ? § Wa s wü r d en wi r er w a r t en ? § At t r i b u t (« f i el d » ) u m d en W ert zu sp e i c h e r n … . § An o b je c t o f t y p e In t e g e r co n t a i n s a s i n g l e f i e l d wh o s e t y p e i s in t . ( st e ht in d e r Be s c h r e ib u n g fü r Class Integer ) 22 In t e g e r § Es gi b t ke i n At t r i b u t we l c h e s d e n W e r t sp e i c h e r t ... u n d si c h t b ar is t § Da h e r ka n n de r W e r t au c h ni c h t ve r ä n d e r t we r d e n § Ke i n e de r Met h o d e n lä s s t das zu . § Integer Ex am pl ar e si n d im m u t a b le ( un v e r ände r bar ) 23 Ar be it e n mi t Wr a p p e r Ex e m p l a r e n 1. Au t om a t i s c h e Um w a ndl ung : Da s Um w a nde l n ei n es Ba s i s - ty p s in d e n en t s p r ec h en d en Wr a p p e r Ty p he i s s t « bo x i n g » Integer myI = 5; int j = 7; myI = j; System.out.println (\" myI = \" + myI ); // toString ! 24 5 5 Bo x in g ! j 7 Bo x in g ! 5 7 myI Ar be it e n mi t Wr a p p e r Ex e m p l a r e n We n n ma n ei n e Re f e r e n z au f ei n Integer Ex e m p l a r br a uc h t (u n d e s ka n n ei n e Re f e r e n z au f ir g e n d e in Ex e m p l a r mi t di e s e m We r t s e i n – Integer is t im m u t a b le ) 2. Me t h o d e valueOf de r Kl as s e Integer lie f e r t Re f e r e n z au f Integer Ex e m p l a r mi t ( int ) W e r t value Integer myI = Integer .valueOf (5); System.out.println (\" myI = \" + myI ); // toString ! 2731 Wr a p p e r K l a s s e n § Wa s w i r ni c h t ve r w e n d e n s o l l t e n : new Op e r a t o r § Ge h t no c h, w i r d a be r i r g e ndw a nn ni c h t m e hr e r l a ub t s e i n § St a t t d e sse n : 32 In t e g e r P a r a m e t e r § Wa s gi b t di e s e An w e i s u n g (i n ei n em Pr o gr a m ) au s ? Integer myI = Integer .valueOf(777); test(myI); System.out.println(myI); public static void test( Integer bigI) { System.out.println(bigI); Integer someI; someI = 333; System.out.println(someI); bigI = Integer .valueOf(666); System.out.println(bigI); } 34 Po l l § Wa s gi b t di e s e An w e i s u n g (i n ei n em Pr o gr a m ) au s ? Integer myI = Integer .valueOf(777); test(myI); System.out.println(myI); public static void test( Integer xI) { System.out.println(xI); Integer someI; someI = 333; System.out.println(someI); xI = Integer .valueOf(666); System.out.println(xI); } 35 Po l l § Wa s gi b t di e s e An w e i s u n g (i n ei n em Pr o gr a m ) au s ? Integer myI = Integer .valueOf(777); test(myI); System.out.println(myI); public static void test( Integer xI) { System.out.println(xI); Integer someI; someI = 333; System.out.println(someI); xI = Integer .valueOf(666); System.out.println(xI); } 36 Out put : 777 333 666 777 Po l l 777 333 666 37 data At t r i b u t : ( R e f e r e n z a u f ) Object § Wi r k ö n n t e n v e r s u c h e n R e f e r e n z e n a u f Object zu v e r w e n d e n class ListNode { Object data; ListNode next; ListNode () { data = null; next = null; } ListNode (Object value) { data = value; next = null; } ListNode (Object value, ListNode connect) { data = value; next = connect; } } 43 public class LinkedDoubleList { private ListNode front; // Beispiel Methode public void removefirst () { if (front == null) { System.exit ( - 1); } front = front.next ; } } [F oot n ot e ] K ön n t e n Kl as s e s t a t t Linked Double List au c h ei n f ac h LinkedList ne nne n da data Ve r w e i s e a u f a l l e A rt e n v o n E x e m p l a r e n z u l ä s s t . § (M i n d e s t e n s ) d r e i P r ob l e m e : § Ty p e n ( d e r D a t e n i n d e r L i s t e ) m ü s s e n i n e i n e r V e r e r b u n g s h i e r a r c h i e se i n w e n n data auf Ex e m pl ar e v e r s c hi e de ne r T y pe n v e r w e i s e n w i l l Ve r e r b u n g n u r f ü r K l a s s e n d e f i n i e r t , n i c h t f ü r B a s i s t y p e n § Wa s s o l l t e d e r T y p d e r R ü c k g a b e v o n get() , remove() , . . . s e in ? § We n n data auf e i n O bj e c t Ex e m pl ar v e r w e i s t , dann k ann nur ei n e Object Re f e r e n z z u r ü c k g e g e b e n w e r d e n public Object remove() { ..} public Object get(int index) { .. } 44 Je tz t « v e r g i s s t» d i e L i s t e d e n T y p ! § Di e se s P r o g r a m m k a n n n i c h t ü b e r se t z t w e r d e n LinkedDoubleList list = new LinkedDoubleList (); Double d = Double . valueOf (30.0); list.add (d); System.out.println (list); double f = d / 2; System.out.println (\"Result = \" + f); System.out.println (\" Erstes Element = \" + list.get (0)); f = list.get (0) / 2; § De n n get() lie f e r t e in e R e f e r e n z a u f e in Object Ex e m p l a r und unbo x i ng g e h t nur für Double Ex e m p l a r e 45 Test.java:64: error: bad operand types for binary operator '/' f = list.get (0) / 2; ^ first type: Object second type: int W a s wir wir k lic h w o lle n § We n n w i r e i n e LinkedList er s t el l en d a n n s o l l d er T y p d er El e m e n t e e i n P a r a m e t e r se i n § Da n n k ö n n t e n w i r sa g e n : § Li s t e v o n Double Ex e m pl ar e n § Li s t e v o n Point Ex e m pl ar e n § Li s t e v o n Integer Ex e m pl ar e n § Li s t e v o n . . . E x em p l a r en . . . : i r g en d ei n e K l a s s e 46 10. 1. 2 T y p p a r a m e t e r 47 Ty p p a r a m e t e r § Ty p p a r a m e t e r (« t y p e p a r a m e t e r » ) i n d e r D e f i n i t i on ei n er Kl as s e dur c h < > ge k e n n z e i c h n e t < Ty p P a r a m e t e r > Ve r w e n d e de n Ty p Ty p P a r a m e t e r in d e r D e f in it io n d e r Kl a sse § Bei s p i el class MyType< T > { } od e r class MyType< TypeParameter > { } 48 Ty p p a r a m e t e r E i n s a t z § Mi t d e r K l a s s e Point : MyType <Point> mine; // Referenzvariable mine = new MyType <Point>(); // Erstellen eines Exemplars § Mi t d e r K l a s s e Integer : MyType <Integer> mine; // Referenzvariable mine = new MyType <Integer>(); // Erstellen eines Exemplars 49 Ty p p a r a m e t e r Be i s p i e l § Di e Kl as s e MyType <T> kö n n t e so au sse h e n : class MyType< T > { T intern; String s; public MyType() {} // default constructor public MyType( T i) { // another constructor, one T param, sets fields intern = i; s = i.toString(); } public String toString() { return s; } } 5051 Ty p p a r a m e t e r B e i s p i e l , F o r t s e t z u n g § Mi t d e r K l a s s e Point : MyType <Point> mine; // Referenzvariable Point p = new Point(7, 3); mine = new MyType <Point>(p); // Erstellen eines Exemplars § Mi t d e r K l a s s e Integer : MyType <Integer> mine; // Referenzvariable Integer bI = Integer.valueOf (5); mine = new MyType <Integer>( bI ); // Erstellen eines Exemplars 54 \"( 7 , 3 ) \" Ty p p a r a m e t e r E i n s a t z § Ty p p a r a m e t e r e r l a u b t E n t w i c k l u n g e i n e r g e n e r i s c h e n K l a s s e ListNode<T> class ListNode <T> { T data; ListNode next; ListNode () { data = null; next = null; } ListNode (T value) {...} // ggf andere Konstruktoren } 55 class DoubleListNode extends ListNode { } public class LinkedList <T> { private ListNode <T> front; // Beispiel Methoden public void add(T value) {...} public void add(T value, int index){..} public T get(int index) {...} public void removefirst () {...} } § Kö n n t e n s o g e n e r i s c h e L i s t e für a l l e T ype n de fi ni e r e n Ni c h t me h r n ö t i g Ty p p a r a m e t e r § Wi r we r d e n uns zu e r s t mi t de m Ge br a uc h ei n er ge n e r i s c h e n Kl as s e (« g e n e r i c c l a s s » ) be s c hä ft i g e n § En t w i c k l ung ge n e r i s c h e r Kl a sse n m u ss wa r t e n § Wa s für Li s t e n wo l l e n wi r ? 56 Lis t en v o n ... § Ty p p a r a m e t e r er l a u b t Fl e xi b i l i t ä t für El e m e n t e § Kö n n e n Kl a sse mi t Ty p p a r a m e t e r wi e d e r v e r w e n d e n § Gi b t es we i t e r e Di m e n si o n für Fl e xi b i l i t ä t ? § Wi e we r d e n Li s t en ve r w e n d e t ? 57 Lis t en v o n Integer Ob j ek t en § Ve r s c h i e d e n e int We r t e ( ga n z e Za h le n ) – Re f e r e n z e n vo n Integer Ob j e k t e n § Me n g e ( Ma t h e m a t i k ): Re i h e n f o l g e un w i c h t i g , ke i n e Dupl i k a t e § Me n g e ( Um g a n g s s p r a c h e ): Dupl i k a t e erl a u b t § De r Gr ö s s e na c h so r t i e r t e int We r t e § Gr ös s e be s t i m m t dur c h Integer Ob j e kt ... § int We r t e in d e r Re i h e n f o l g e de s Ei n f ü g e n s 61 Lis t en v o n Point Ob j ek t en § Me n g e vo n Point Re f e r e n z e n (2D Punk t e ) § So r ti e r t e Point Re f e r e n z e n § So r t i e r t nac h Ei g e ns c ha f t e n de r Ob j e kt e ... § So r t i e r t en t l a n g de r X - Ac h s e ( od e r Y - Ac h s e , od e r Ab s t a n d vo n ( 0 , 0 ) ) § So r t i e r t in d e r Re i h e n f o l g e in d e r si e ge z e i c h n e t we r d e n so l l e n § Point Re f e r e n z e n in d e r Re i h e n f o l g e de s Ei n f ü g e n s 62 Ge m e ins a m is t die s e n (und a nde r e n) Lis t en? § Unbe gr e nz t e Anz a hl E l e m e n t e § Op e r a t i o n e n u m E l e me n t h i n z u z u f ü g e n , z u e n t f e r n e n , p r ü f e n ob v or h a n d e n , . . . 63 (M ö g lic he ) U n t e r sc hie de § Ty p d e r E l e m e n t e § De f i n i t i o n d e r O r d n u n g /R e i h e n f o l g e , Z u g r i f f sm u s t e r (H ä u f i g k e i t , Ar t , . . . ) § Du p l i k a t e e r l a u b t /v e r b o t e n § L i s t e n u n d äh n l i c h e Da t e n s t r u k t u r e n we r d e n hä ufi g ge b r a u c h t § Ja v a st e l l t Kl as s e n u n d I n t e r f ac e s zu r Ve r f ü g u n g § Ty p de r El e m e n t e : Ty p p a r a m e t e r § De t ai l s de r Op e r a t i o n e n : Po l y m o r p h i s m u s (O v erri d i n g ) 6464 Ge m e i n s a m : Ar b e i t e n mi t An s a m m l u n g (« C ol l e c t i on » ) vo n Re f e r e n z e n au f El e m e n t e § L i s t e n u n d äh n l i c h e Da t e n s t r u k t u r e n we r d e n hä ufi g ge b r a u c h t § Ja v a st e l l t Kl as s e n u n d I n t e r f ac e s zu r Ve r f ü g u n g § Ty p de r El e m e n t e : Ty p p a r a m e t e r § De t ai l s de r Op e r a t i o n e n : Po l y m o r p h i s m u s (O v erri d i n g ) 6565 Ge m e i n s a m : Ar b e i t e n mi t An s a m m l u n g (« C ol l e c t i on » ) vo n Re f e r e n z e n au f El e m e n t e § Ja v a Collection In t e r f a c e Co l l e c t i o n § «c o l l e ct i o n » ( Sam m l u n g , An s a m m l u n g ): ei n Ob j e k t da s ( ei n e Sam m l u n g vo n ) Da t e n sp e i c h e r t ; ei n e « Da t e n s t r u k t u r » § Di e Ob j e kt e di e ge s p e i c h e r t we r d e n he i s s e n El e m e n t e § Ei ni g e Co l l e ct i o n s si n d ge o rd n e t ; ei n i g e erl a u b en Dupl i k a t e § Ty p i s c h e Op e r a t i o n e n : add , re m o ve , cl e a r , co n t a i n s (s ea r c h ), siz e § D. h . hi nz uf üg e n , en t f ern en , zu r ü c k s e t z e n , en t h ä l t ?, Gr ös s e § Beg r i f f für ei n e Vi e l z a h l vo n Da t e n s t r u k t u r e n § Ab e r fü r uns st e h e n di e Op e r a t i o n e n im Vo r d e r g r u n d , ni c h t di e Im p l e m e n t a t i o n 66 Collection Ja v a I n t e rf ac e public interface Collection < T > { public void add ( T element); public void clear(); public boolean contains( T element); public T remove(int index); public int size(); … } T is t Ty p p a r a m e t e r 68 Ja v a Co l l e c t i o n s I n t e r f ac e 69 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t <<I n t er f a c e> So r t e d Se t Co l l e c t i o n Be i s p i e l e § Collection In t e r f a c e B a s is für di v e r s e S ub - In t e r f a c e s § «C o l l e ct i o n K l a s s e n » im p le m e n t ie r e n (S u b ) - In t e r f a c e ( s ) § ( daz u gl e i ch me h r ) § Be is p ie le aus de n J a v a Bib lio t h e k e n : LinkedList , ArrayList , HashMap , TreeSet , PriorityQueue § Collection In t e r f a c e ( u n d Su b i n t e r f ac e s ) p l u s « C ol l e c t i on Kl as s e n » bi l de n da s ( J a v a ) Co l l ec t i o n s F r a me w o r k § Co l l e c t i o n s F r a m e w o r k is t in java.util – K l a s s e n u n d I nt e r f a c e s mü s s e n al s o im p o r t ie r t we r d e n , z. B . import java.util.PriorityQueue ; 71 Ja v a C o l l e c t i o n s Fr am e w o rk § Fl e xi b i l i t ä t (u n d C od e W i e d e r v e r w e n d u n g ) i n z w e i Di m e n si o n e n : § Ar t ( T y p ) d e r E l e m e n t e § De f i ni t i o n de r O pe r a t i o ne n f ür di e A ns am m l ung ( « C o l l e c t i o n» ) § Di v e r se K l a sse n f ü r h ä u f i g e Da t e n s t r u k t u r e n § Er l aube n A npas s ung i n De f i ni t i o n ( z . B . , w i e w i r d s o r t i e r t ?) und in Ef f i z i e n z ( z.B . , Zu g r i f f O( 1 ) v s . O( n ) ) d e r Op e r a t i o n e n 72 Lis t en – da s M inim um § Li s t e : ei n e An s a m m l u n g vo n Ob j e k t e n di e al s ge o r d n e t e Fo l g e vo n El e m e n t e n ge s p e i c h e r t wi r d § Je d e s El e m e n t ka n n übe r ei n en 0 - bas i e r t e n I nde x err ei c h t we r d e n § Ei ne Li s t e ha t ei n e Gr ös s e ( An z a h l El e m e n t e in d e r Li s t e ) § El e m e n t e kö n n e n am An f a n g , a m Ende , od e r ir g e n d w o hi nz ug e f üg t we r d e n . 75 Lis t eno bj ek t e ( wi e Li n k ed I n t Li s t ...) § Ei n e Li s t e ha t meh r Zu s t an d al s nur di e El e m e n t e § Mü s s e n auc h fe s t h a l t e n , w a s d a s 1 . E le m e n t is t (u n d si n n v o l l is t es auc h , d a s le t z t e El e m e n t zu ke n n e n ) § Ei n e Li s t e be s t e h t da he r au s meh r al s nur de n El e m e n t e n § Wi r er s t el l en da he r ei n Ob j e k t , d a s d i e « Li s t e » d e r ( ve r k n ü p f t e n ) El e m e n t e re p re s e n t i e r t § Am An f a n g ei n e le e r e Li s t e [] 77 Lis t eno bj ek t e § Zu ei n er so l c h e n Li s t e kö n n e n El e m e n t e hi nz ug e füg t we r d e n . § de f aul t Ve r h a l t e n : El e m e n t e am Ende de r Li s t e hi nz uf üg e n . § Be is p ie l : Li s t e vo n String Ex e m pl ar e n [hello, ABC, goodbye] à [hello, ABC, goodbye, okay] § Da s Li s t e n o b je k t hä l t fe s t , we l c h e El e m e n t e hi nz ug e füg t wu r d en , d e n I n d e x , d i e An z a h l de r El e m e n t e , d i e Re i h e n f o l g e . 78 add(\"okay\") Lis t en – da s M inim um § Is t de r Ei n sa t z ei n es ( in t e r n e n ) « Kn o t e n s » ( wi e ListNode ) vo r g e s c h r i e b e n ? § St e l l e n wi r uns vo r na c h Er s t e l l e n de r Li s t e le s e n wi r of t d i e El e m e n t e ab e r füg e n ke i n e ne ue n El e m e n t e hi nz u § Wi e kö n n e n wi r di e Im p l e m e n t a t i o n ve r b e s s e r n ? ( ef f i z i e n t e r ma c h e n ) 79 Lis t en – da s M inim um § Is t de r Ei n sa t z ei n es ( in t e r n e n ) « Kn o t e n s » ( wi e ListNode ) vo r g e s c h r i e b e n ? § Wi r kö n n t e n ei n en Ar r a y ve r w e n d e n um di e El e m e n t e zu sp e i c h e r n § Dann is t de r Zu g r i f f get(index) in ko n s t a n t e r Ze i t mö g l i c h § Mü s s e n abe r ( une r w ar t e t e ) O p er a t i o n wi e add() erl a u b en 80 in d e x 0 1 2 3 4 5 6 7 get(3) ArrayList <T> § Ja v a st e l l t di e Kl as s e ArrayList für so l c h e Li s t e n o b je k t e zu r Ve r f ü g u n g § «A r r a y » eri n n ert dar an , das s di e El e m e n t e ef f i z i e n t übe r ei n en In d e x err ei c h t we r d e n kö n n e n § «L i s t » sa g t das s di e An z a h l de r El e m e n t e unb e g r e nz t is t ( im Pr i n z i p ) § Ei ne ArrayList is t wi e ei n dy nam i s c he r Ar r a y ( d e r d i e Gr ös s e an di e An z a h l El e m e n t e anpas s t ) § Di e I m p l e m e n t a t i o n ba s i e r t au f ei n em Ar r a y u n d ei n em At t r i b u t für di e ak tu e l l e Gr ö s s e ( An z a h l El e m e n t e ) 81 Spä t e r s e he n w i r w i e s o e i ne K l as s e im p le m e n t ie r t w e r d e n k a n n 10. 2 Ar r a y L is t <T > 83 ArrayList <T> § Ja v a st e l l t di e Kl as s e ArrayList für so l c h e Li s t e n o b je k t e zu r Ve r f ü g u n g § Ge ne r i s c he Kl as s e § Di e se Li s t e n o b je k t e kö n n e n ( Ve r w e i s e au f ) Ob j e k t e ei n es dek l ar i er t en Ty p s T sp e i c h e r n § T: Kl as s e od e r In t e r f a c e 84 ArrayList Me t h od en add( va l u e ) a p p e n d s v a l u e a t e n d of l i s t add( in d e x , va l u e ) i n s e r t s g i v e n v a l u e j u s t b e f or e t h e g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e r i g h t clear() r e m o v e s a l l e l e m e n t s of t h e l i s t indexOf ( va l u e ) r e t u r n s f i r s t i n d e x w h e r e g i v e n v a l u e i s f ou n d in l is t ( - 1 i f n ot f ou n d ) get( in d e x ) re t u r n s t h e v a l u e a t g i v e n i n d e x remove( in d e x ) re m ov e s / re t u r n s v a l u e a t g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e l e f t set( in d e x , va l u e ) re p l a c e s v a l u e a t g i v e n i n d e x w i t h g i v e n v a l u e size() r e t u r n s t h e n u m b e r of e l e m e n t s i n l i s t toString () r e t u r n s a s t r i n g r e p r e s e n t a t i on of t h e l i s t su c h a s \"[3, 42, - 7, 15]\" 85 ArrayList Me t h od en addAll ( lis t ) addAll ( in d e x , lis t ) ad d s al l e l e m e n t s f r om t h e g i v e n l i s t t o t h i s l i s t (at t h e e n d of t h e l i s t , or i n s e r t s t h e m at t h e g i v e n i n d e x ) contains( val ue ) re t u r n s t r u e i f g i v e n v a l u e i s f o u n d s o m e w h e re i n t h i s l i s t containsAll ( lis t ) re t u r n s t r u e i f t h i s l i s t c o n t a i n s e v e r y e l e m e n t f ro m g i v e n l i s t equals( lis t ) re t u r n s t r u e i f g i v e n o t h e r l i s t c o n t a i n s t h e s a m e e l e m e n t s iterator() listIterator () re t u r n s a n o b j e c t u s e d t o e x a m i n e t h e c o n t e n t s o f t h e l i s t ( s e e n la t e r ) lastIndexOf ( val ue ) re t u r n s l a s t i n d e x v a l u e i s f o u n d i n l i s t ( - 1 i f n o t f o u n d ) remove( val ue ) fin d s a n d r e m o v e s t h e g iv e n v a lu e f r o m t h is l is t removeAll ( lis t ) re m o v e s a n y e l e m e n t s f o u n d i n t h e g i v e n l i s t f ro m t h i s l i s t retainAll ( lis t ) re m o v e s a n y e l e m e n t s no t fo und i n g i v e n l i s t f r o m t hi s l i s t subList ( f ro m , to ) re t u r n s t h e s u b - po r t i o n o f t h e l i s t bet w een in d e x e s fr o m (i n c l u s i v e ) an d to (e x c l u s i v e ) toArray () re t u r n s t h e e l e m e n t s i n t h i s l i s t a s a n a r r a y 86 Er s t e l l e n ei n es ArrayList Ex e m p l a r s § Wi e bi s he r ... ArrayList < Ty p e > na m e = new ArrayList < Ty p e > (); § We n n wi r ei n ArrayList Ob j e k t ko n s t r u i e r e n ( od e r ei n e Re f e r e n z v a r i a b l e de k l a r i e r e n ) da nn mü s s en wi r de n Ty p de r El e m e n t e de r Li s t e an g e b e n § De r Ty p de r El e m e n t e mu s s zwi s c h e n < und > ang e g e be n we r d e n . § Be is p ie l ei n er ge n e r i s c h e n Kl a sse (« ge n e r i c » cl a s s ) 8788 ArrayList < Ty p e > na m e = new ArrayList < Ty p e >(); § Mi t ei n em Ty p p a r a m e t e r ka n n di e ArrayList Kl a sse ve r w e n d e t we r d e n , u m L is t e n fü r ve r s c h i e d e n e Ty p e n zu ve r w a l t e n § new ArrayList < Ty p e > () er s t el l t ne ue ArrayList fü r Ty p e § Ty p e mu s s ei n Re f e r e n z t y p se i n § Dazu sp ä t e r me h r § Be is p ie le : ArrayList < String > names = new ArrayList < String >(); names.add (\"ETH Zurich\"); names.add (\"Imperial College\"); 8990 names empty .size() à 0 names.add (\"ETH Zurich\"); ArrayList < String > names = new ArrayList < String >(); 91 names empty .size() à 1 \"E T H Z u r i c h \" ArrayList < String > names = new ArrayList < String >(); names.add (\"Imperial College\"); 92 names empty .size() à 2 \"ETH Zurich\" \"Imperial College\" ArrayList < String > names = new ArrayList < String >(); names.get (0); //\"ETH Zurich\" ArrayList < Ty p e > na m e = new ArrayList < Ty p e >(); § Be is p ie le : ArrayList < Point > figureA = new ArrayList < Point >(); Point p = new Point(1,3); figureA.add (new Point()); figureA.add (p); System.out.println ( figureA.size ()); ArrayList < Shape > figureB = new ArrayList < Shape >(); Shape s = new Circle(); figureB.add (s); figureB.add (new Rectangle()); 94 Ja v a C o l l e c t i o n s Fr am e w o rk 95 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t Li n k e d Li s tAr r a y L i s t Tr e e S e t <<I n t er f a c e> So r t e d Se t Ha s h S e t In t e r f a c e s : Collection , List , Set , … Kl a s s e n : ArrayList , LinkedList , HashSet , … Se r vi c e Kl a s s e : Collection s ( äh n l i c h wi e Array s ) Wo ka n n ic h me h r er f a h r en ? § Di e Ja v a® P l a tf o r m V e r si o n 1 7 A P I Sp e c i f i c a ti o n ( nur Fr a m e w o r k ) en t h ä l t In f o r m a t io n e n übe r di e J a v a Um g e bung § «C o r e J a v a » – Sp r a c h e + java.* + jdk .* § Se h r pr ak t i s c h – we r ka n n si c h sc h o n al l e Met h o d e n me r k e n § Ko n v e n t i o n für Ty p p a r a m e t e r § E – El e m e n t ( häuf i g im Ja v a Co l l e c t i o n s F r a m e w o r k ) § K – Ke y ( sp ä t e r me h r ) § N – Nu mb e r § T – Ty p e ( ir g e n d w o ) 9799 ht t p s : / / d o c s . o r a c le . c o m / e n / j a v a / j a v a s e / 1 7 / d oc s / a p i / j a v a . b a s e / j a v a / u t i l / A r r a y Li s t . h t m l Sp ä t e r me h r 100 Su p e r t y p : C o l l e c t i o n 101102103104105106 Sp ä t e r me h r Wa s is t de r ri ch t i g e We g ei n e Ar r a y L i s t lis t zu er s t el l en , d i e ga n z e Za h le n sp e i c h e r t ? ( D. h . in t i = lis t . g e t (k ) u n d lis t . a d d ( i ) so l l e n mö g l i c h se i n ( k < si z e ) ) 107 Po l l Wa s is t de r ri ch t i g e We g ei n e Ar r a y L i s t lis t zu er s t el l en , d i e ga n z e Za h le n sp e i c h e r t ? ( D. h . in t i = lis t . g e t (k ) u n d lis t . a d d ( i ) so l l e n mö g l i c h se i n ( k < si z e ) ) § Nu r di e s e Op t i o n is t ri c h t i g ArrayList <Integer> list = new ArrayList <Integer>(); § Es ge ht auc h ArrayList <Integer> list = new ArrayList <>(); 111 Po l l ArrayList – Me t h o d e n § Hi n z u f ü g e n ei n es El e m e n t s // [\"A\", \"B\", \"C\"] list.add (\"X\"); // [\"A\", \"B\", \"C\", \"X\"] § Ei n f ü g e n ei n es El e m e n t s list.add (2, \"Y\"); // [\"A\", \"B\", \"Y\", \"C\", \"X\"] § Zu g r i f f au f ei n El e m e n t String s = list.get (3); // \"C\" § En t f e r n e n ei n es El e m e n t s list.remove (2); // [\"A\", \"B\", \"C\", \"X\"] § En t f e r n e n ei n es El e m e n t s list.remove (\"B\"); // [\"A\", \"C\", \"X\"] 113 0 1 2 0 1 2 3 0 1 2 3 4 0 1 2 3 Be i s p i e l import java.util.ArrayList; public class ListTest { public static void main ( String [] args) { ArrayList < String > schools = new ArrayList < String >(); schools.add(\"ETH Zurich\"); schools.add(\"Imperial College\"); schools.add(\"ETH Lausanne\"); for ( int i = 0; i < schools.size(); i++) { if (schools.get(i).startsWith(\"ETH\")) { System.out.println(schools.get(i)); } } } } 115 Ou t p u t : 116 Leg a le und ille g a le Indiz e § Ge g e be n se i ArrayList < String > names = new ArrayList < String >(); § In d e x für Zu g r i f f au f ei n El e m e n t d e r Li s t e ( z. B . names.get ( i ) ) mu s s zw i s c h e n 0 u n d ( Gr ö s s e de r Li s t e – 1) lie g e n ( ei n s c h l i es s l i c h ) § 0 ≤ index ≤ names.size () - 1 § 0 ≤ index < names.size () § Ei n Zu g r i f f auf ei n El e m e n t aus s e r hal b di e s e s Be r e ic h s ha t ei n e IndexOutOfBoundsException zu r Fo l g e . 117 ArrayList < String > names = new ArrayList < String >(); names.add (\"Bob\"); names.add (\"Pete\"); names.add (\"Vicki\"); names.add (\"Sue\"); System.out.println(names.get(0)); // okay: Bob System.out.println(names.get(3)); // okay: Sue System.out.println(names.get( - 1)); // exception names.add (9, \"Aimee\"); // exception 118 in d e x 0 1 2 3 va l u e B ob Pe t e Vi c k i Su e names.size(): 4 names Leg a le und ille g a le Indiz e § Ge g e be n se i ArrayList < String > names = new ArrayList < String >(); § Bei m Ei n f ü g e n ei n es El e m e n t s m u ss d e r ( an g e g e b e n e ) I n d e x für da s ne ue El e m e n t l e g a l se i n names.size (): 3 names.add (3, \"Sue\"); 0 ≤ index ≤ names.size () § In d e x aus s e r hal b di e s e s Be r e ic h s : IndexOutOfBoundsException names.add (9, \"Aimee\"); // exception 119 in d e x 0 1 2 va l u e B ob Pe t e Vi c k i in d e x 0 1 2 3 va l u e B ob Pe t e Vi c k i Su e Ar r a y L is t « Rä t s e l » ArrayList < Integer > list = new ArrayList <Integer>(); for ( int i = 1; i <= 10; i ++) { list.add(10 * i ); // [10, 20, 30, 40, ..., 100] } § Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 0; i < list.size (); i ++) { list.remove(i ); } System.out.println(list ); 122124 Ar r a y L is t « Rä t s e l » ArrayList < Integer > list = new ArrayList < Integer >(); for ( int i = 1; i <= 10; i ++) { list.add(10 * i ); // [10, 20, 30, 40, ..., 100] } § Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 0; i < list.size (); i ++) { list.remove(i ); } System.out.println (list); § An t w or t : [20, 40, 60, 80, 100] 126128 [2, 4, 6, 8, 10] Loop c t r i si z e lis t . s iz e () Ar r a y L is t « Rä t s e l » 2 ArrayList < Integer > list = new ArrayList < Integer >(); for ( int i = 1; i <= 5; i ++) { list.add(2 * i ); // [2, 4, 6, 8, 10] } § Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? int size = list.size (); for ( int i = 0; i < size; i ++) { list.add(i , 42); // add 42 at index i } System.out.println (list); § An t w or t : [42, 42, 42, 42, 42, 2, 4, 6, 8, 10] 130 Ar r a y L is t « Rä t s e l » 3 ArrayList < Integer > list = new ArrayList <Integer>(); for ( int i = 1; i <= 5; i ++) { list.add(2 * i ); // [2, 4, 6, 8, 10] } § Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 0; i < list.size (); i ++) { list.add(i , 777); // add 777 at index i } System.out.println(list ); 131 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 10. 0 Gen er i s c h e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 — 2021 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 10. 1 Ei n l e i t u n g § 10. 2 Ar r a y L i s t <T > § 10. 3 Ve r g l e i c h e n vo n Ob j e k t e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 6 It e r a t o r e n und Co mp a r a t o r en § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 2 Ar r a y L is t « Rä t s e l » 3 ArrayList < Integer > list = new ArrayList <Integer>(); for ( int i = 1; i <= 5; i ++) { list.add(2 * i ); // [2, 4, 6, 8, 10] } § Wa s gi b t di e s e s Pr o gr a m m s e gm e n t au s ? for ( int i = 0; i < list.size (); i ++) { list.add(i , 777); // add 777 at index i } System.out.println(list ); 45 ArrayList < T > is t ei n ne ue r Ty p § Ge ne r i s c he r Ty p ei n er Li s t e vo n T El e m e n t e n § Ba s ie r t auf A r r a y unbe g r e nz t e r Gr ös s e , daz u Li s t en Op e r a t i o n e n § Ka n n in d e r D e f in it io n ande r e r Kl a sse n ve r w e n d e t we r d e n § Ka n n al s Pa r a m e t e r ve r w e n d e t we r d e n § Ka n n al s Rü c k g a b e w e r t ve r w e n d e t we r d e n … § Beq u em § Ef f i z i e n t e r Zu g r i f f / Ei n f üg e n / En t f e r ne n bas i e r e nd auf I nde x § Ei n f üg e n / En t f e r ne n « ve r s c h i e b t » El e m e n t e mi t hö he r e m In d e x – Vo r s i c h t 7 ArrayList im Ve r g l e i c h mi t Ar r a y § Ko n s t r u k t i o n String [] names = new String [5]; ArrayList < String > list = new ArrayList < String >(); § Sp e i c h e r n ei n es We r t e s names[0] = \"Jessica\"; list.add (\"Jessica\"); § Zu g r i f f au f ei n El e m e n t String s = names[0]; String s = list.get(0); 8 ArrayList im Ve r g l e i c h mi t Ar r a y § Zu g r i f f au f al l e El e m e n t e di e mi t «B » an f an g e n : for ( int i = 0; i < names.length ; i ++) { if (names[ i ]. startsWith (\"B\")) { ... } } for ( int i = 0; i < list.size (); i ++) { if ( list.get ( i ). startsWith (\"B\")) { ... } } 9 ArrayList im Ve r g l e i c h mi t Ar r a y § Pr üf e n ob de r S t r i ng \" B e n\" da be i is t : for ( int i = 0; i < names.length ; i ++) { if (names[ i ].equals(\"Ben\")) { ... } } if ( list.contains (\"Ben\")) { ... } 10 ArrayList al s At t r i b u t vo n Ob j ek t en § Ei n Ob j e k t ka n n ( z. B . ) ei n e Ar r a y L i s t al s At t r i b u t ha be n public class Course { private String [] locations; private ArrayList < String > studentNames ; public Course() { locations = new String [5]; studentNames = new ArrayList < String >(); ... } § Je d e s Ex e m p l a r en t h ä l t je t zt ( Re f e r e n z e n au f ) § ei n en Ar r a y v on String Re f e r e n z e n § ei n Co l l e ct i o n Ob j e kt ( Ar r a y L i s t mi t Re f e r e n z e n auf String ) 13 ArrayList al s Pa r a m e t e r public void na m e ( ArrayList < Ty p e > na m e ) { … } Bei s p i el : Sc h r e i b e n Si e ei n e Met h o d e , d ie a lle El e m e n t e ei n er Ar r a y L i s t be ar be i t e t // Works with all elements of the parameter list public void removeNouns ( ArrayList <String> list) { ... } 14 ArrayList al s Rü c kg ab e w e rt § Ei n e Li s t e ka n n au c h al s Er g e b n i s zu r ü c k g e g e b e n we r d e n : ArrayList < Ty p e > me th o d Na me ( par am e t e r ) § Od e r au c h public ArrayList < Ty p e > me th o d Na me ( par am e t e r ) static ArrayList < Ty p e > me th o d Na me ( par am e t e r ) public static ArrayList < Ty p e > me th o d Na me ( par am e t e r ) § u. s . w . 15 Üb u n g § Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i ( numbe r s . t x t ) mi t ga n z e n Za h le n ( An z a h l is t unbe s t i m m t ) lie s t § und dann di e Za h l e n dr uc k t § und dann al l e ge r a d e n Za h l e n ( Za h l e n di e dur c h 2 oh n e Re s t te i l b a r si n d ) fi l t e r t ( d. h. en t f ern t ) 16 Lö sung ( Aus z ug ) ArrayList <Integer> numbers = new ArrayList <Integer>() ; Scanner input = new Scanner(new File(\"numbers.txt \")); while ( input.hasNextInt ()) { int n = input.nextInt (); numbers.add(n ); } System.out.println (numbers); 21 Zu r E r i n n e r u n g § Re f e r e n z v a r i a b l e f ü r S u p e r t y p k a n n Re f e r e n z e n a u f S u b t y p s p e i c h e r n § Su p e r t y p : I n t e r f a c e o d e r Su p e r Kl a sse § Bei s p i el Boat b = new WaterCar(); Car c = new WaterCar(); WaterCar w = new WaterCar(); Angestelle chefin = new Arzt(); 22 < < i n t e r f ac e > > Ca r s t a r t () s t o p () c r u i s e () set D i r e c t i o n () < < i n t e r f ac e > > Bo a t s t a r t () s t o p () s w i m () Wa t e r C a r st a r t ( ) { . . } st o p ( ) { . . } sw i m ( ) { . . } cr u i s e ( ) { . . } se t D ir e c t io n ( ) { . . } (G e ne r isc he ) S upe r - und S ub t y pe n § Re f e r e n z v a r i a b l e f ü r S u p e r t y p < E > k a n n Re f e r e n z e n a u f S u b t y p < E > s p e i c h e r n § ArrayList<E> im p le m e n t ie r t List<E> § List<E> er w ei t ert Collection<E> § Fü r das s e l be E! § Bei s p i el Collection<String> = new ArrayList<String>; List<Integer> = new ArrayList<Integer>; 23 <<I n t er f a c e> Co l l e c t i o n < E > <<I n t er f a c e> Li s t < E > Ar r a y L i s t <E> Ande r e Lö sung ( Aus z ug ) List<Integer> numbers = new ArrayList <Integer>() ; Scanner input = new Scanner(new File(\"numbers.txt \")); while ( input.hasNextInt ()) { int n = input.nextInt (); numbers.add(n ); } System.out.println (numbers); 24 Vo r s i c h t § new Op e r a t o r n u r f ü r K l a s s e n , n i c h t I n t e r f a c e s § We n n K l a s s e X di e K l a s s e B er w ei t er t , d a n n i s t B ei n S u p er t y p f ü r X B b = new X(); aber ArrayList<B> is t ke i n Su p e r ty p f ü r ArrayList<X> § ArrayList<B> ka n n a l s E l e m e n t ( e ) E x e m p l a re d e r K l a s s e X en t h a l t en 25 B X Üb u n g § Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i mi t ga n z e n Za h le n ( An z a h l is t unbe s t i m m t ) lie s t § und dann di e Za h l e n dr uc k t § und dann al l e ge r a d e n Za h l e n ( Za h l e n di e dur c h 2 oh n e Re s t te i l b a r si n d fi l t e r t ( d. h. en t f ern t ) 26 Lö sung ( Aus z ug ) List<Integer> numbers = new ArrayList <Integer>(); Scanner input = new Scanner(new File(\"numbers.txt \")); while ( input.hasNextInt ()) { int n = input.nextInt (); numbers.add(n ); } System.out.println(numbers ); filterEven (numbers); System.out.println (numbers); 27 Lö sung ( Aus z ug ) // Removes all elements w / even values from the list. public static void filterEven (List<Integer> list) { for ( int i = list.size () - 1; i >= 0; i -- ) { int n = list.get(i ); if ( n % 2 == 0) { list.remove(i ); } } } 2930 Üb u n g § Sc h r e i b e n Si e ei n e Me t h o d e addStars di e ei n e Ar r a y L i s t vo n S t r i n g s al s Pa r a m e t e r h a t u n d ei n en * ( ge n a u e r \" * \") na c h je d e m El e m e n t ei n f ü g t . § Be is p ie l : We n n di e Ar r a y L i s t list am An f a n g en t h ä l t : [die, schnelle , graue , Schlange ] § Dann is t de r Ef f e k t de s Au f r u f s addStars (list) di e s e Li s t e : [die, *, schnelle , *, graue , *, Schlange , *] 32 Lö sung en public static void addStars(ArrayList <String> list) { for ( int i = 0; i < list.size (); i += 2) { list.add(i+1, \"*\"); } } 33 Lö sung en public static void addStars(ArrayList <String> list) { for ( int i = 0; i < list.size (); i += 2) { list.add(i+1, \"*\"); } } 34 § Sc h r e i b e n Si e ei n e Me t h o d e removeStars di e ei n e Ar r a y L i s t vo n S t r i n g s al s Pa r a m e t e r h a t i n d e r je d e s zw e i t e El e m e n t d e r S t r i n g \" * \" is t , u n d en t f er n en Si e di e s e St e r n e ( ma c h en al so d e n Ef f e k t de r Me t h o d e addStars rü ck g ä n g i g ). 35 Lö sung en public static void removeStars ( ArrayList <String> list) { for ( int i = 0; i < list.size (); i += 2) { list.add(i+1, \"*\"); } } 36 Lö sung en public static void addStars(ArrayList <String> list) { for ( int i = 0; i < list.size (); i += 2) { list.add(i+1, \"*\"); } } public static void removeStars(ArrayList <String> list) { for ( int i = 1; i < list.size (); i ++) { list.remove(i ); } } 37 Üb u n g § Sc h r e i b e n Si e ei n e Me t h o d e intersect di e zw e i Ar r a y L i s t e n mi t ga n z e n Za h le n al s Pa r a m e t e r ak z e p ti e r t und ei n e ne ue Ar r a y L i s t zu r ü c k g i b t , d i e nur di e El e m e n t e en t h ä l t , d i e i n be i de n Li s t e n vo r h a n d e n si n d . § Be is p ie l : list1 und list2 en t h a l t en : [1, 4, 8, 9, 11, 15, 17, 28, 41, 59] [4, 7, 11, 17, 19, 20, 23, 28, 37, 59, 81] § Dann er g i b t de r Au f r u f vo n intersect(list1, list2) di e Li s t e : [4, 11, 17, 28, 59] 39 Lö sung ( Te i l 1) ArrayList <Integer> list1 = new ArrayList <Integer>(); Scanner input = new Scanner(new File(\"list1.txt\")); while ( input.hasNext ()) { int i = input.nextInt (); list1.add( i ); } ArrayList <Integer> list2 = new ArrayList <Integer>(); input = new Scanner(new File(\"list2.txt\")); while ( input.hasNext ()) { int i = input.nextInt (); list2.add( i ); } 40424344 Lö sung ( Te i l 2) ArrayList <Integer> intersect( ArrayList <Integer> list1, ArrayList <Integer> list2) { ArrayList <Integer> list3 = new ArrayList <Integer>(); list3.addAll(list1); list3.retainAll(list2); return list3; } 45 Ande r e Üb u n g e n § Sc h r e i b e n Si e ei n e Me t h o d e reverse di e di e Re i h e n f o l g e de r El e m e n t e ei n er ArrayList für Str i n g s um k e hr t . § Sc h r e i b e n Si e ei n e Me t h o d e capitalizeAdverbs di e al s Pa r a m e t e r ei n e ArrayList vo n S t r i n g Ob j e k t e n en t g eg en ni m m t und je d e s Wo r t ei n es en g l i s c h en Te x t e s , d a s mi t « ly » en d e t , mi t Gr o s s buc hs t a be n sc h r e i b t . 46 Ei n e an d e r e Auf g a be Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i Wo r t für Wo r t ei n l i es t und di e Wö r t e r de r Da t e i al s Li s t e sp e i c h e r t . 1. Zu e r s t so l l e n Si e al l e ei n g el es en en Wö r t e r aus g e be n . 2. Dann so l l e n Si e al l e Wö r t e r in d e r um g e k e hr t e n Re i h e n f o l g e aus g e be n . 3. Dann ge b e n Si e al l e Su b s t a n t i v e ( fa n g e n mi t Gr os s b u c h s t a b e n an) i n Gr os s b u c h s t a b e n aus . § Al s o Ha u s à HA U S 4. Dann ge b e n Si e a l l e Wö r t e r ohne di e S ub s t an t i v e aus 47 Lö sung ( Ger ü s t ) import java.util .*; import java.io .* ; public class Example1 { public static void main( String [] args ) throws FileNotFoundException { ArrayList <String> allWords = new ArrayList <String>(); Scanner input = new Scanner(new File(\" words.txt \")); while ( input.hasNext ()) { String word = input.next (); allWords.add(word ); } System.out.println( allWords ); } } 49 Lö sung ( Ger ü s t ) import java.util .*; import java.io .* ; public class Example1 { public static void main( String [] args ) throws FileNotFoundException { ArrayList < String > allWords = new ArrayList < String >(); Scanner input = new Scanner(new File(\" words.txt \")); while ( input.hasNext ()) { String word = input.next (); allWords.add(word ); } System.out.println(allWords ); } } 50 Te i l 2 Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i Wo r t für Wo r t ei n l i es t und di e Wö r t e r de r Da t e i al s Li s t e sp e i c h e r t . 1. Zu e r s t so l l e n Si e al l e ei n g el es en en Wö r t e r aus g e be n . ✅ 2. Dann so l l e n Si e al l e Wö r t e r in d e r um g e k e hr t e n Re i h e n f o l g e aus g e be n . 3. Dann ge b e n Si e al l e Su b s t a n t i v e ( fa n g e n mi t Gr os s b u c h s t a b e n an) i n Gr os s b u c h s t a b e n aus . § Al s o Ha u s à HA U S 4. Dann ge b e n Si e a l l e Wö r t e r ohne di e S ub s t an t i v e aus 51 Lö sung ( Au s s c h n i t t ) public static void main( String [] args ) throws FileNotFoundException { ArrayList < String > allWords = new ArrayList <String>(); Scanner input = new Scanner(new File(\" words.txt \")); ... for ( int i = allWords.size () - 1; i >= 0; i -- ) { System.out.println ( allWords.get ( i )); } } 52 Te i l 3 Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i Wo r t für Wo r t ei n l i es t und di e Wö r t e r de r Da t e i al s Li s t e sp e i c h e r t . 1. Zu e r s t so l l e n Si e al l e ei n g el es en en Wö r t e r aus g e be n . ✅ 2. Dann so l l e n Si e al l e Wö r t e r in d e r um g e k e hr t e n Re i h e n f o l g e aus g e be n . ✅ 3. Dann ge b e n Si e a l l e Su b s t a n t i v e ( fa n g e n mi t Gr os s b u c h s t a b e n an) i n Gr os s b u c h s t a b e n aus . § Al s o Ha u s à HA U S 4. Dann ge b e n Si e a l l e Wö r t e r ohne di e S ub s t an t i v e aus 53 ➡ 5455 Lö sung ( Au s s c h n i t t ) public static void main( String [] args ) throws FileNotFoundException { ArrayList < String > allWords = new ArrayList < String >(); Scanner input = new Scanner( new File(\" words.txt \")); ... for ( int i =0; i < allWords.size (); i ++ ) { String s = allWords.get ( i ); if ( Character.isUpperCase ( s.charAt (0))) { System.out.println ( s.toUpperCase ()); } } } 56 Te i l 4 § Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i Wo r t für Wo r t ei n l i es t und di e Wö r t e r de r Da t e i al s Li s t e sp e i c h e r t . 1. Zu e r s t so l l e n Si e al l e ei n g el es en en Wö r t e r aus g e be n . ✅ 2. Dann so l l e n Si e al l e Wö r t e r in d e r um g e k e hr t e n Re i h e n f o l g e aus g e be n . ✅ 3. Dann ge b e n Si e a l l e Su b s t a n t i v e ( fa n g e n mi t Gr os s b u c h s t a b e n an) i n Gr os s b u c h s t a b e n aus . ✅ § Al s o Ha u s à HA U S 4. Dann ge b e n Si e a l l e Wö r t e r ohne di e S ub s t an t i v e aus 57 Lö sung ( Au s s c h n i t t ) public static void main( String [] args ) throws FileNotFoundException { ArrayList < String > allWords = new ArrayList < String >(); Scanner input = new Scanner( new File(\" words.txt \")); ... for ( int i =0; i < allWords.size (); i ++ ) { String s = allWords.get ( i ); if (! Character.isUpperCase ( s.charAt (0))) { System.out.println (s); } } } 58 Ei n e ( le ic h t ) ve r ä n d e r t e Auf g a be Sc h r e i b e n Si e ei n Pr o gr a m m da s ei n e Da t e i Wo r t für Wo r t ei n l i es t und di e Wö r t e r de r Da t e i al s Li s t e sp e i c h e r t . 1. Zu e r s t so l l e n Si e al l e ei n g el es en en Wö r t e r aus g e be n . 2. Dann so l l e n Si e al l e Wö r t e r in d e r um g e k e hr t e n Re i h e n f o l g e aus g e be n . 3. Dann ge b e n Si e al l e Su b s t a n t i v e ( fa n g e n mi t Gr os s b u c h s t a b e n an) i n Gr os s b u c h s t a b e n aus . § Al s o Ha u s à HA U S 4. En t f e r ne n Si e a l l e Su b s t a n t i v e u n d ge b e n Si e d i e übr i g g e bl i e be ne n Wö r t e r aus 59 ArrayList al s Pa r a m e t e r // Removes all nouns from the given list public static void removeNouns( ArrayList <String> list ) { for (int i = 0; i < list.size (); i ++ ) { String s = list.get(i ); if (Character.isUpperCase(s.charAt(0))) { list.remove(i ); i -- ; } } } 6062 \" e in \" \"d i e \" \"A a r \" \"Hu t \" \"d e r \" \" Ei \" \"d a s \" si z e ( ) co u n t e r i 7 0 0 1 2 3 4 5 6 7 1 0 1 2 3 4 5 6 7 2 T 0 1 2 3 4 5 6 \" e in \" \"d i e \" \"Hu t \" \"d e r \" \" Ei \" \"d a s \" 6 3 0 1 2 3 4 5 6 4 T 0 1 2 3 4 5 \" e in \" \"d i e \" \"Hu t \" \"d e r \" \"d a s \" 5 5 0 1 2 3 4 // Removes all nouns from the given list public static void removeNouns( ArrayList <String> list ) { for (int i = 0; i < list.size (); i ++ ) { String s = list.get(i ); if (Character.isUpperCase(s.charAt(0))) { list.remove(i ); i -- ; // don't overlook shifted element! } } } § Wa r u m mü s s e n wi r i in d e r Sc h l e i f e de k r e m e n t i e r e n ? § Än d e r t si c h list.size () wä h r e n d de r Au s f ü h r u n g de r Sc h l e i f e ? 6364 \" e in \" \"d i e \" \"A a r \" \"Hu t \" \"d e r \" \" Ei \" \"d a s \" si z e ( ) co u n t e r i 0 1 2 3 4 5 6 65 \" e in \" \"d i e \" \"A a r \" \"Hu t \" \"d e r \" \" Ei \" \"d a s \" si z e ( ) co u n t er i 7 0 0 1 2 3 4 5 6 7 1 0 1 2 3 4 5 6 7 2 T 0 1 2 3 4 5 6 \" e in \" \"d i e \" \"Hu t \" \"d e r \" \" Ei \" \"d a s \" 6 2 0 1 2 3 4 5 6 2 T 0 1 2 3 4 5 \" e in \" \"d i e \" \"d e r \" \" Ei \" \"d a s \" 5 2 0 1 2 3 4 i -- ; à i == 1 i+ + ; à i ==2 … // remove all nouns public static void removeNouns ( ArrayList <String> list ) { for (int i = 0; i < allWords.size (); i ++ ) { String s = allWords.get(i ); if (Character.isUpperCase(s.charAt(0))) { allWords.remove(i ); i -- ; // don't overlook shifted element! } } § Vo r s i c h t be i Ve r ä n d e r u n g e n de r Li s t e 66 static void mix( ArrayList <String> list) { for (int i = list.size () - 1; i >= 0; i -- ) { if ( i % 2 == 0 ) { list.add ( list.get ( i )); } else { list.add (0, list.get ( i )); } } System.out.println (list); } 71 Po l l § Wa s i s t d i e A u s g a b e v o n mix mi t P a r a me t er [ \"t\", \"o\", \"r\"] (e i n e ArrayList<String> ) ? 72 static void mix( ArrayList <String> list) { for (int i = list.size () - 1; i >= 0; i -- ) { if ( i % 2 == 0 ) { list.add ( list.get ( i )); } else { list.add (0, list.get ( i )); } } System.out.println (list); } Po l l § Wa s i s t d i e A u s g a b e v o n mix mi t P a r a me t er [ \"t\", \"o\", \"r\"] (e i n e ArrayList<String> ) ? § An t w or t [o, t, o, r, r, o] 74 static void mix( ArrayList <String> list) { for (int i = list.size () - 1; i >= 0; i -- ) { if ( i % 2 == 0 ) { list.add ( list.get ( i )); } else { list.add (0, list.get ( i )); } } System.out.println (list); } Po l l 75 Antwort Prozent otorro 72 63.16% otorrt 11 9.65% ootorr 6 5.26% totorr 5 4.39% rot 3 2.63% other 17 14.91% An d e r e … 0torr0 torrttt or, rto , … OOTORRT 76 \"t \" \"o \" \"r \" si z e ( ) co u n t e r i 0 1 2 3 4 5 Po l l 3 2 i%2==0 In s e r t Po s i t i o n : St ri n g T En d e : r \"t \" \"o \" \"r \" \"r \" 4 1 F 0: o \"o \" \"t \" \"o \" \"r \" \"r \" 5 0 T En d e : o \"o \" \"t \" \"o \" \"r \" \"r \" \"o \" 10. 3 Ve r g l e i c h e n vo n Ob j ek t en 82 Di e compareTo Me t h od e § Um da s Ve r g l e i c h e n vo n Ex e m p l a r e n zu er mö g l i c h en so l l t e ei n e Ja v a Kl as s e ei n e Me t h o d e compareTo de fi ni e r e n , d i e au f d e r Me n g e de r Ex e m p l a r e ei n e ( to ta l e ) Or d n u n g s - re l a t i o n ≤ de fi ni e r t § Di e s e erl a u b t es dann zw e i Ex e m pl ar e zu ve r g l e i c h e n . § A ≤ B od e r B ≤ A § A ≤ B u n d B ≤ A: A = B § Bei s p i el : i n de r String Kl as s e gi b t es di e Me t h o d e public int compareTo(String other) 83 compareTo fü r String § Bei s p i el : i n de r String Kl as s e gi b t es di e Me t h o d e public int compareTo(String other) § Ei n Au f r u f so m e S .compareTo ( ot h e r S ) lie f e r t : ei n en We r t < 0 we n n so m e S « vo r » oth e r S in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n so m e S « nac h » oth e r S in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n so m e S und oth e r S in d e r Or d n u n g s r e l a t i o n « gl e i ch » si n d 84 Ge br a uc h vo n compareTo § compareTo ka n n im Te s t ei n er if An w e i s u n g ge b r a u c h t we r d e n . String a = \" alice \"; String b = \"bob\"; if ( a.compareTo(b ) < 0 ) { // true ... } 8687 Ge br a uc h vo n compareTo Pr i m i t i v e T y p e Ob j e c t s if (a < b) { ... if ( a.compareTo (b) < 0) { ... if (a <= b) { ... if ( a.compareTo (b) <= 0) { ... if (a == b) { ... if ( a.compareTo (b) == 0) { ... if (a != b) { ... if ( a.compareTo(b ) != 0) { ... if (a >= b) { ... if ( a.compareTo (b) >= 0) { ... if (a > b) { ... if ( a.compareTo(b ) > 0) { ... compareTo und C o lle c t io ns § Di e Me t h o d e für bi nä r e Su c h e ( binarySearch ) funk t i o ni e r t für di e Kl as s e Arrays da di e s e Me t h o d e (i n t e r n ) d i e compareTo Me t h o d e au f r u f t . String[] a = {\"al\", \"bob\", \" cari \", \" dan \", \"mike\"}; int index = Arrays.binarySearch (a, \" dan \"); // 3 § Au c h so r t i e r e n is t de s w e g e n mö g l i c h String [] s = {\"my\", \"dog\", \"has\", \"fleas\"}; Arrays.sort(s); System.out.println(Arrays.toString(s)); § Ou t p u t : [dog, fleas, has, my] 8889 Th i s s o r t i s gu ar an t e e d t o b e st a b l e : e q u a l e le m e n t s w ill n o t b e r e o r d e r e d a s a r e s u lt o f t h e s o r t . Im p l e m e n t a t i o n n o t e : T h i s i m p l e m e n t a t i o n i s a s t a b l e , a d a p t i v e , i t e r a t i v e me r g e s o rt th a t r e q u i r e s f a r fe w e r t h a n n lg (n ) c o m p a r i s o n s w h e n th e i n p u t a r r a y i s p a r ti a l l y s o r t e d , w h i l e o f f e r i n g th e p e r f o r m a n c e o f a t r ad i t i o n al me r g e s o rt wh e n t h e i n p u t a r r a y i s r a n d o m l y o r d e r e d . I f t h e i n p u t a r r a y i s n e a r l y s o r t e d , t h e im p le m e n t a t io n r e q u ir e s a p p r o x im a t e ly n c o m p a r is o n s . T e m p o r a r y s t o r a g e r e q u ir e m e n t s v a r y f r o m a sm a l l c o ns t a n t f o r ne a r l y so r t e d i nput a r r a y s t o n/ 2 o bj e c t r e f e r e nc e s f o r r a ndo m l y o r de r e d i nput a r r a y s. § Arrays hi l ft be i Ar r a y s mi t be l i e bi g e n Ob j e k t e n . A b e r wi e kö n n e n wi r mi t ei n er ArrayList ar b e i t e n ? § Wi e di e Kl as s e Arrays gi b t es au c h ei n e Kl as s e Collections di e nüt z l i c he Me t h o d e n für Co l l ec t i o n s en t h ä l t 9091 ⚠ Un v o l l s t ä n d i g § Wi e d i e Kl as s e Arrays gi b t es au c h ei n e Kl as s e Collections di e nüt z l i c he Me t h o d e n für Co l l ec t i o n s en t h ä l t § z.B . sort § Br a u c h t compareTo um di e El e m e n t e de r ArrayList zu ve r g l e i c h e n § Wo l l e n ArrayList <A> mi t El e m e n t e n de r Kl as s e A so r t i e r e n § Wi r mü s s en 2 Fä l l e un t e r s c he i de n : § Kl a sse A ( de r El e m e n t e de r ArrayList ) en t h ä l t compareTo § En t w e de r vo n En t w i c k l e r de f i ni e r t od e r ge e r b t § Kl a sse A en t h ä l t compareTo ni c h t aut o m a t i s c h 92 § Fa l l 1 : D i e El e m e n t e de r Ar r a y L i s t st e l l e n compareTo au t o m a ti sc h zu r Ve r f ü g u n g String [] s = {\"my\", \"dog\", \"has\", \"fleas\"}; ArrayList <String> list = new ArrayList <String>(); for (int i = 0; i < s.length ; i ++) { list.add (new String(s[ i ])); } Collections.sort (list); System.out.println (list); § Ou t p u t : [dog, fleas, has, my] 93 § Fa l l 1 : D i e El e m e n t e de r Ar r a y L i s t st e l l e n compareTo au t o m a ti sc h zu r Ve r f ü g u n g String [] s = {\"my\", \"dog\", \"has\", \"fleas\"}; ArrayList <String> list = new ArrayList <String>( Arrays.asList (s)); for (int i = 0; i < s.length ; i ++) { list.add (new String(s[ i ])); } Collections.sort (list); System.out.println (list); § Ou t p u t : [dog, fleas, has, my] 94 § Wi e kö n n e n wi r mi t ei n er Ar r a y L i s t mi t Ex e m p l a r e n ei n er bel i ebi gen Kl as s e ar b e i t e n ? § Fa l l 2 : Se l b s t d e f i n i e r t e Kl as s e n – di e s e st e l l e n compareTo ni c h t au t o m at i s ch zu r Ve r f ü g u n g Be is p ie l : Wi r hal t e n zu je d e m Wo r t d i e P o s i t i o n d e s er s t en Au f tr e t e n s in ei n em Te x t f e s t public class Word { String item; int position; int count; ... } 95 Be is p ie l : Wi r hal t e n zu je d e m Wo r t d i e P o s i t i o n d e s er s t en Au f tr e t e n s in ei n em Te x t f e s t public class Word { String item; int position; int count; Word(String s) { item = s; } Word(String s, int p) { item = s; position = p; } } 97 ArrayList <Word> list0; list0 = new ArrayList <Word>(); list0.add(new Word(\"bob\", 17)); list0.add(new Word(\" alice \", 35)); § Wi e kö n n e n wi r mi t ei n er Ar r a y L i s t mi t Ex e m p l a r e n ei n er bel i ebi gen Kl as s e ar b e i t e n ?§ Fa l l 2 : Se l b s t d e f i n i e r t e Kl a sse n String [] s = {\"my\", \"dog\", \"has\", \"fleas\"}; ArrayList <Word> list1 = new ArrayList <Word>(); for ( int i =0; i < s.length ; i ++) { list1.add(new Word(s[ i ], i )); } Collections.sort (list1); 101 Si e h t gu t au s , ab e r wir d nic h t übe r s e t z t // javac Example7aa.java Example7aa.java:15: cannot find symbol symbol : method sort( java.util.ArrayList <Word>) location: class java.util.Collections Collections.sort (list1); ^ 1 error 102 Se l b s t d e f i n i e rt e Ty p e n or d n en § Wi r kö n n e n ei n e be l i e bi g e ArrayList ni c h t so r t i e r e n da Ja v a ni c h t we i s s , wi e di e El e m e n t e zu or d n e n si n d . § Uns e r e Kl as s e ( Word ) m u s s kl a r ma c h en , wi e di e El e m e n t e ge o r d n e t si n d § Da f ür gi b t es ei n In t e r f a c e d a s compareTo en t h ä l t 103 Comparable<E> public interface Comparable< E > { public int compareTo ( E other); } § Ei n e Kl as s e ka n n da s I n t e r f a c e Comparable im p le m e n t ie r e n und s o ei n e na t ür l i c he Ord n u n g für ih r e Ex e m p l a r e de fi ni e r e n . § Na t ü r l i c h e Or d n u n g : es gi b t nur ei n e Or d n u n g s r e l a t i o n § We n n wi r me h r e r e Re l a t i o n e n zu l a s s e n wo l l e n dann wi r d es ko m p l i z i e r t e r 104 Comparable § Ei n Au f r u f so m e E .compareTo ( ot h e r E ) lie f e r t : ei n en We r t < 0 we n n so m e E « vo r » oth e r E in d e r Or d n u n g s r e l a Q o n is t , ei n en We r t > 0 we n n so m e E « nac h » oth e r E in d e r Or d n u n g s r e l a Q o n is t , ei n en We r t > 0 we n n so m e E und oth e r E in d e r Or d n u n g s r e l a Q o n « gl e i ch » si n d 106 Comparable Mu s t er public class na m e C implements Comparable< na m e C > { ... public int compareTo ( na m e C other) { ... } } 107 Comparable Be i s p i e l class Word implements Comparable<Word> { String item; int position; int count; … //constructor(s) public int compareTo (Word otherword ) { String compareItem = otherword.item ; return ( item.compareTo ( compareItem )); } } 110 list1.get(0).compareTo(list1.get(1)) 123 // > 0 Comparable Be i s p i e l – an d e r e Or d n u n g class Word implements Comparable<Word> { String item; int position; int count; … //constructor(s) public int compareTo (Word otherword ) { int comparePosition = otherword.position ; return (position - comparePosition ); } } 111 list1.get(0).compareTo(list1.get(1)) - 456 // < 0 Comparable Beis p iel class Word implements Comparable<Word> { String item; int position; int count; Word(String s) { item = s; } Word(String s, int p) { item = s; position = p; } public int compareTo (Word ow) { int cp = ow.position ; return (position - cp); } } 112 import java.util.ArrayList ; public class Example2 { public static void main(String[] args ) { ArrayList <Word> list1; list1 = new ArrayList <Word>(); list1.add(new Word(\"bob\", 17)); list1.add(new Word(\" alice \", 35)); Word w1 = list1.get(0); Word w2 = list1.get(1); if (w1.compareTo(w2) > 0) { System.out.println (\" Groesser :\"); } else { System.out.println (\"Kleiner:\"); } } } Comparable Be i s p i e l § Wa s we n n wi r je t zt di e Ex e m p l a r e so w o h l na c h de r P o s i t i o n od e r de r Häu f i g k e i t or d n e n wo l l e n ? § Dann hä t t e n wi r dr e i mö g l i c h e Or d n u n g s r e l a t i o n e n 1. Le x i k o g r a p h i s c h auf Gr u n d de s Na me n s 2. Na c h Hä u f i g k e i t (f a l l s count di e s e fe s t h ä l t ) 3. Na c h de r P o s i t i o n de s 1 . Au f tr e t e n s § Ge h t auc h abe r daz u mü s s e n wi r ei n be s o nde r e s Ob j e kt ko n s t r u i e r e n , ei n en Comparator<T> § Sp ä t e r 114 Auf g a be § Si e er i n n er n si c h an d i e Kl as s e Po i n t 115 Kla s s e Point public class Point { private int x; private int y; // Constructs a Point at the given x/y location. public Point(int initialX , int initialY ) { x = initialX ; y = initialY ; } // Methods ... } 116 Auf g a be § Si e er i n n er n si c h an d i e Kl as s e Point § Wi r wo l l e n di e Point Ex e m p l a r e so r t i e r e n kö n n e n § Das X At t r i b u t en t s c h ei d e t , ob ei n Point vo r ei n em ande r e n is t , u n d we n n di e X A t t r i but e gl e i ch si n d , dann en t s c h ei d e t das Y At t r i b u t 117 Auf g a be § Si e er i n n er n si c h an d i e Kl as s e Point § Wi r wo l l e n di e P o i n t Ex e m p l a r e so r t i e r e n § po i n t 1 « vo r » p o i n t 2 we n n § po i n t 1 . x < po i n t 2 . x od e r § po i n t 1 . x = = po i n t 2 . x und po i n t 1 . y < po i n t 2 . y § po i n t 1 « nac h » p o i n t 2 we n n § po i n t 1 . x > po i n t 2 . x od e r § po i n t 1 . x = = po i n t 2 . x und po i n t 1 . y > po i n t 2 . y § so n s t po i n t 1 « gl e i ch » p o i n t 2 119 compareTo fü r Point § Ei n Au f r u f A .compareTo( B ) lie f e r t : ei n en We r t < 0 we n n A « vo r » B in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n A « nac h » B in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n A und B in d e r Or d n u n g s r e l a t i o n « gl e i ch » si n d 120 Comparable Be i s p i e l public class Point implements Comparable< Point > { private int x; private int y; // unchanged // must implement compareTo (Point other) } 122 Comparable für Point // sort by x and break ties by y public int compareTo (Point other) { if (x < other.x ) { return - 1; } else if (x > other.x ) { return 1; } else if (y < other.y ) { return - 1; // same x, smaller y } else if (y > other.y ) { return 1; // same x, larger y } else { return 0; // same x and same y } } 123 compareTo Di s k u s s i o n § Su b t r ak t i o n – Ma n c h m a l ka n n ma n dur c h Su b tr ak ti o n en t s p r ec h en d er We r t e de n für compareTo ge w ü n s c h t e n Rüc k g a be w e r t er h a l t en : // sort by x and break ties by y public int compareTo (Point other) { if (x != other.x ) { return x - other.x ; // different x } else { return y - other.y ; // same x; compare y } } § Mü s s e n si c h e r se i n da s s es ke i n e n Ov e r f l o w / U n d e r f l o w gi b t 124 compareTo Di s k u s s i o n § Su b t r ak t i o n – Ma n c h m a l ka n n ma n dur c h Su b tr ak ti o n en t s p r ec h en d er We r t e de n für compareTo ge w ü n s c h t e n Rüc k g a be w e r t er h a l t en : § Di e Id e e : § if x > other.x , th e n x - other.x > 0 § if x < other.x , th e n x - other.x < 0 § if x == other.x , th e n x - other.x == 0 § Ac h tu n g : Di e s e r We g fu n k t i o n i e r t ni c h t fü r re e l l e Za h l e n ( double s) abe r si e h e Math.signum (double) 125 compareTo Di s k u s s i o n § St a l e i n e r Su b r ak m o n k an n m an au c h Integer .compare(int1, int2) § ve r w e n d e n ( f u n k m o n i e r t a u c h b e i g r o s s e n int We r t e n ) // sort by x and break ties by y public int compareTo (Point other) { if (x != other.x ) { return Integer.compare (x, other.x ); // different x } else { return Integer.compare (y, other.y ); // same x; compare y } } 126 compareTo Di s k u s s i o n § compareTo für ei n e Kl as s e K is t ko n s i s t e n t mi t equals we n n ∀ Ex e m p l a r e e1 und e2 vo n K g i l t e1.compareTo(e2)==0 er g i b t de n se l b e n ( bo o l e s c he n ) We r t wi e e1.equals(e2) § Em p f e h l u n g : compareTo so l l t e mi t equals ko n s i s t e n t se i n § Ke i n e Be d in g u n g – abe r ei n e gu t e Em p f e hl ung de r J a v a En t w i c k l e r § Ac h tu n g : Be d in g u n g fü r ∀ e1 , e2 de r Kl a sse K abe r null is t ni c h t Ex e m pl ar vo n K , dahe r ka n n e1 . compareTo(null) ei n e NullPointerException we r f e n , hi ng e g e n e1.equals(null) er g i b t false 127 Fi ne P o i n t compareTo Di s k u s s i o n § toString - We n n di e toString Dar s t e l l ung de r Ex e m pl ar e de r Or d n u n g s r e l a t i o n en t s p ri c h t , dann kö n n e n wi r so ve r g l e i c h e n : // sort by date, e.g. \"09/19\" > \"04/01\" public int compareTo (Date other) { return toString (). compareTo ( other.toString ()); } § De l e g a t i o n – We n n di e Ex e m pl ar e At t r i b u t e habe n , d ie ve r g l i c h e n we r d e n kö n n e n ( z.B . String s) dann ka n n ma n de r e n compareTo Met h o d e ve r w e n d e n : // sort by employee name, e.g. \"Jim\" < \"Susan\" public int compareTo (Employee other) { return name.compareTo ( other.getName ()); } 128 compareTo und C o lle c t io ns F r a m e w o r k § Di e M e t h o d e compareTo (i m I n t e r f a c e Comparable<E> ) i s t zw e c k m ä s s i g f ü r d i e K l a s s e n , d e r e n E x e m p l a r e w i r i n e i n e r ArrayList<E> s p e i c h e r n u n d v e r g l e i c h e n w o l l e n § z.B . u m d i e E l e m e n t e z u s o r t i e r e n § … i n e i n e r L i s t s p e i c h e r n w o l l e n § d. h. e i ne r K l as s e , di e das List<E> In t e r f a c e i m p l e m e n t i e r t § Bis h e r k e n n e n w ir n u r ArrayList<E> § … i n e i n e m A r r a y s p e i c h e r n w o l l e n 129130 d. h. V e r g l e i c h m i t t e l s c o m pa r e T o d. h. s o r t i e r t e i ne L i s t e ( di e da s L i s t I n t e r f a c e im p le m e nt ie r t ) f ü r E le m e nt e e in e s T y p s d e r co m p a r e T o e n t w e d e r d e f i n i e r t o d e r e r b t Integer b1 = 12; Integer b2 = 7; Wa s er g i b t b1.compareTo(b2) ? An s w e r 1 : 0 ( i n t W e r t ) An s w e r 2 : i n t W e r t > 0 An s w e r 3 : i n t W e r t < 0 An s w e r 4 : t r u e An s w e r 5 : f a l s e An s w e r 6 : 0 ( In t e g e r ) An s w e r 7 : In t e g e r mi t We r t > 0 An s w e r 8 : In t e g e r mi t We r t < 0 An s w e r 9 : Et w a s an d er es 133 String s1 = b1.toString(); String s2 = b2.toString(); Wa s er g i b t s1.compareTo(s2) ? An s w e r 1 : 0 ( i n t W e r t ) An s w e r 2 : i n t W e r t > 0 An s w e r 3 : i n t W e r t < 0 An s w e r 4 : t r u e An s w e r 5 : f a l s e An s w e r 6 : 0 ( In t e g e r ) An s w e r 7 : In t e g e r mi t We r t > 0 An s w e r 8 : In t e g e r mi t We r t < 0 An s w e r 9 : Et w a s an d er es Po l l Integer b1 = 12; Integer b2 = 7; Wa s er g i b t b1.compareTo(b2) ? An s w e r 1 : 0 ( i n t W e r t ) An s w e r 2: i n t W e r t > 0 An s w e r 3 : i n t W e r t < 0 An s w e r 4 : t r u e An s w e r 5 : f a l s e An s w e r 6 : 0 ( In t e g e r ) An s w e r 7 : In t e g e r mi t We r t > 0 An s w e r 8 : In t e g e r mi t We r t < 0 An s w e r 9 : Et w a s an d er es 134 Po l l String s1 = b1.toString(); String s2 = b2.toString(); Wa s er g i b t s1.compareTo(s2) ? An s w e r 1 : 0 ( i n t W e r t ) An s w e r 2 : i n t W e r t > 0 An s w e r 3: i n t W e r t < 0 An s w e r 4 : t r u e An s w e r 5 : f a l s e An s w e r 6 : 0 ( In t e g e r ) An s w e r 7 : In t e g e r mi t We r t > 0 An s w e r 8 : In t e g e r mi t We r t < 0 An s w e r 9 : Et w a s an d er es 135 Po l l 138 53 % 5 % 9 % 15 % 7 % 58 % in M L D 2 8 42 % Li v e St r e a m 149 t o t a l ArrayList < T > is t ei n ne ue r Ty p § Ge ne r i s c he r Ty p ei n er Li s t e vo n T El e m e n t e n § Ba s ie r t auf A r r a y unbe g r e nz t e r Gr ös s e , daz u Li s t en Op e r a t i o n e n § Ka n n in d e r D e f in it io n ande r e r Kl a sse n ve r w e n d e t we r d e n § Ka n n al s Pa r a m e t e r ve r w e n d e t we r d e n § Ka n n al s Rü c k g a b e w e r t ve r w e n d e t we r d e n … § Beq u em § Ef f i z i e n t e r Zu g r i f f / Ei n f üg e n / En t f e r ne n bas i e r e nd auf I nde x § Ei n f üg e n / En t f e r ne n « ve r s c h i e b t » El e m e n t e mi t hö he r e m In d e x – Vo r s i c h t 139 Comparable< T > wic h tig e s In t e r f a c e § Er f o r d e r t Im p le m e n t a t io n v o n compareTo (E other) § Er l a u b t Ve r g l e i c h e n vo n Ex e m p l a r e n de r Kl as s e T § Er m ö g l i c h t da dur c h di v e r s e S e r v i c e Op e r a t i o n e n de r Kl as s e Collections § So r t i e r e n : sort(List<T> list) § Zä h l e n : frequency(Collection<?> c, Object o) 140 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 10. 0 Gen er i s c h e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 — 2021 Al l r i g h t s r e s e r v e d . Er g e b n i s s e Bo n u s a u f g a b e n 6 Bo n u s U0 4 U0 5 U0 6 U0 7 U0 8 St u d i e r e n d e ( I D s) 598 599 602 602 602 > 0 . 0 0 P u n k t e 448 358 440 439 379 > 4 . 0 0 P u n k t e 297 244 376 417 308 Du r c h s c h n i t t 3. 12 2. 48 3. 42 4. 69 2. 77 Du r c h s c h n i t t (w enn > 0) 4. 16 4. 15 4. 67 4. 69 4. 40 Üb e r s i c h t § 10. 1 Ei n l e i t u n g § 10. 2 Ar r a y L i s t <T y p e> § 10. 3 Ve r g l e i c h e n vo n Ob j e k t e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 6 It e r a t o r e n und Co mp a r a t o r en § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 7 Men g en § Me n g e (« se t ») : E i n e Sam m l u n g ei n d eu t i g er und ei n z i g a r t i g er El e m e n t e ( d. h. , wi r kö n n e n fü r zw e i be l i e bi g e El e m e n t e fe s t s t e l l e n , ob si e gl e i ch od e r ung l e i c h si n d und e s gi b t ke i n e Dupl i k a t e ) für di e fo l g e n d e Op e r a t i o n e n au sg e f ü h r t we r d e n kö n n e n : § Hi n z u f ü g e n (« a d d » ), En t f e r ne n (« r em o v e» ), Su c h e (« c o n t a i n s » ) § Be i ei n er Me n g e er w a rt en wi r ke i n e n Zu g r i f f übe r ei n en In d e x u n d ei n e Re i h e n f o l g e sp i e l t ke i n e Ro l l e 8 Men g en § Me n g e (« se t ») : E i n e Sam m l u n g ei n d eu t i g er und ei n z i g a r t i g er El e m e n t e ( d. h. , wi r kö n n e n fü r zw e i be l i e bi g e El e m e n t e fe s t s t e l l e n , o b si e gl e i ch od e r ung l e i c h si n d und e s gi b t ke i n e Dupl i k a t e ) für di e fo l g e n d e Op e r a t i o n e n au sg e f ü h r t we r d e n kö n n e n : § Hi n z u f ü g e n (« a d d » ), En t f e r ne n (« r em o v e» ), Su c h e (« c o n t a i n s » ) § Be i ei n er Me n g e er w a rt en wi r ke i n e n Zu g r i f f übe r ei n en In d e x u n d ei n e Re i h e n f o l g e sp i e l t ke i n e Ro l l e 910 set.contains (\"to\") true set.contains (\"be\") false Me n g e (s e t ) \"the\" \"of\" \"from\" \"to\" \"she\" \"you\" \"him\" \"why\" \"in\" \"by\" \"down\" \"if\" § El e m e n t e e i n e r M e n g e : R e f e r e n z t y p ! § Ke i n e B a s i s t y p e n ( int , double , … ) § Ty p e n t s c h e i d e t w i e E x e m p l a r e e r s t e l l t w e r d e n § In t e g e r : Integer a = Integer.valueOf(5); § Integer b = Integer.valueOf(5); § // oft [nicht immer] selbes Exemplar wie a § St r i n g : String s = \"Hello\"; § String t = \"Hello\"; § // oft [nicht immer] selbes Exemplar wie s § Ab e r s.equals(t) und a.equals(b) im m e r true – dahe r i s t \"hallo\" bz w . 5 nur e i nm al i m S e t 11 Men g e( n ) § K e i n Z u g r i f f v i a I n d e x ( w i e f ü r ArrayList ) § Um a u f e i n E l e m e n t z u z u g r e i f e n m ü s s e n w i r e s z u e r s t f i n d e n ( d . h . su c h e n i s t w i c h t i g ) § K e i n e D u p l i k a t e § Au c h h i n zu f ü g e n e r f or d e r t e i n e S u c h e ( d e n n w i r m ü s s e n f e s ts t e l l e n ob d a s E l e m e n t s c h on i n d e r M e n g e i s t) § Au c h f ü r ArrayList is t s u c h e n m ö g lic h – mu s s t en d a n n a l l e El e m e n t e i n sp i z i e r e n ( d . h . O( N) ) – ge h t e s f ü r Me n g e n be s s e r ?? 13 In t e r f a c e Set § En t h ä l t d i e f ü r M e n g e n w i c h t i g e n O p e r a t i o n e n § Ab s tr a k t e M e th od e n § Ke i n e n k o n k r e t e n M e t h o d e n § Fr a g e : « f ü r ArrayList O( N) – ge h t e s f ü r Me n g e n be s s e r ??» ka n n n u r v o n I m p l e m e n t a t i o n e n ( d e s I n t e r f a c e s ) be a n t w o r t e t w e r de n 14 Set Im ple m e n tie r ung e n § Set wi r d ( un t e r an d e r e m ) dur c h di e K l a s s e n HashSet und TreeSet im p le m e n t ie r t § Di e Un t e r s c h i e d e di s k ut i e r e n wi r gl e i ch § Po l y m o r p h e Me t h o d e n ak z e p ti e r e n ( mö g l i c h s t ) vi e l e Kl as s e n § Kl a sse n ei n er Ve r e r b u n g s h i e r a r c h i e od e r Kl a sse n mi t In t e r f a c e § In J a v a kö n n e n Me n g e n dur c h Kl a sse n , d i e d a s Set In t e r f a c e ( aus java.util ) im p le m e n t ie r e n , re a l i s i e r t we r d e n § Dahe r ( w o si n n v o l l ) d a s I n t erf a c e ( Set ) al s Pa r a m e t e r t y p ve r w e n d e n § Met h o d e fü r al l e Ar t e n vo n M e n g e n 15 Set Im ple m e n tie r ung e n § Ve r w e n d e n an d e r e Da t e n s t r u k t u r e n ( ni c h t Ar r a y s od e r ve r k n ü p f t e Li s t e n e l e m e n t e ) § So n s t wi e d e r O( N ) ! § TreeSet : Im p le m e n t ie r u n g ba s i e r t au f ei n em « bi nä r e n Ba u m» § Zu g r i f f is t zi e m l i c h sc h n e l l : O( l o g N ) fü r al l e Op e r a t i o n e n § El e m e n t e si n d so r t i e r t ge s p e i c h e r t 16 TreeSet <E> br a uc h t Or d n u n g sr el a ti o n § Ja v a' s TreeSet br a uc h t in t e r n compareTo um ei n e Or d n u n g zu de fi ni e r e n String[] a = {\"dan\", \"al\", \"mike\", \" cari \", \"bob\"}; Set<String> set = new TreeSet <String>(); for (int i = 0; i < a.length ; i ++) { set.add (a[ i ]); } System.out.println (set); //natural order //Output: [al, bob, cari , dan, mike] 17 Set Im ple m e n tie r ung e n § Ve r w e n d e n an d e r e Da t e n s t r u k t u r e n ( ni c h t Ar r a y s od e r ve r k n ü p f t e Li s t e n e l e m e n t e ) § TreeSet : Im p le m e n t ie r u n g ba s i e r t au f ei n em « bi nä r e n Ba u m» § HashSet : Im p le m e n t ie r u n g ba s i e r t au f ei n em «h a s h t a b l e » mi t ei n em Ar r a y d e r sc h n e l l e Zu g r i f f e er l a u b t : O( 1 ) für al l e Op e r a t i o n e n ( mi t be s t i m m t e n An n a h m e n ) § El e m e n t e we r d e n in ir g e n d e in e r ( ni c h t be k ann t e n ) Re i h e n f o l g e ge s p e i c h e r t § Ke i n compareTo () nö t i g ( abe r erl a u b t …) 18 HashSet<E> oh n e Or d n u n g sr el a ti o n § Ja v a' s HashSet sp e i c h e r t We r t e in ei n er bel i ebi gen Re i h e n f o l g e String[] a = {\"dan\", \"al\", \"mike\", \" cari \", \"bob\"}; Set<String> set = new HashSet<String>(); for (int i = 0; i < a.length ; i ++) { set.add (a[ i ]); } System.out.println (set); //some order //Output: [dan, bob, mike, al, cari ] 19 Ha sh t a b l e (n u r d i e Id ee …) § HashTree< E > un t e r hä l t e i ne n A r r a y H A de r L ä ng e K § Di e A r r a y El e m e n t e ne nne n w i r Bu c k e t s (« E i m er» ) – im U n t e r s c h ie d zu d e n El e m e n t e n d e s H a s h t a b l e s § Je d e r B u c k e t v e r w e i s t a u f e i n e L i s t e v o n E l e m e n t e n ( v o m T y p E ) § We n n e i n E l e m e n t S i m H a s h T r e e g e s p e i c h e r t w e r d e n s o l l , s o be r e c hne n w i r für S e i ne n W e r t z w i s c he n 0 . . ( K - 1) § In d e x i n d e n A r r a y H A – ge n a n nt d e r « ha s h » v o n S § Ne h me n w i r a l s B e i s p i e l HashTree<String> , K = 256 § hash(\"John Smith\") à 152, hash(\"Lisa Smith\") à 1, … 20 Ha sh T a b l e ( nur die Ide e …) 21 x Fr o m : h t t p s : / / en . w i k i p ed i a . o r g /w i k i / Ha s h _ t a b l e Ha sh t a b l e (n u r d i e Id ee …) § So l an g e d i e Hash f u n k ti o n f ü r j e d e n Str i n g e i n e n an d e r e n In d e x lie f e r t is t d e r Z u g r if f e in f a c h § Vo r a u s g e s e t z t d i e H a s h f u n k t i o n b r a u c h t n i c h t z u l a n g e … § O( 1 ) S c h r i t t e § So l l t e d i e Hash f u n k ti o n ab e r f ü r S1 u n d S2 d e n se l b e n I n d e x lie f e r n , s o h a b e n w ir e in e Ko l l i s i o n § hash(\"John Smith\") à 152, hash(\"Sandra Dee\") à 152 § De sh a l b v e r w e i s t j e d e r B u c k e t a u f e i n e L i s t e – und S 1 und S 2 s i n d i n d e r L i s t e g e s p e i c h e r t § In d e r L i s t e O ( n ) – abe r di e L i s t e ha t v i e l l e i c h t nur 2 . . 4 El e m e n t e 22 Ha sh T a b l e ( nur die Ide e …) 23 Fr o m : h t t p s : / / en . w i k i p ed i a . o r g /w i k i / Ha s h _ t a b l e Set Im ple m e n tie r ung e n § Ma n c h m a l br a uc h t ma n ab e r sc h n e l l e n Zu g r i f f und di e Re i h e n f o l g e , i n d e r El e m e n t e zu r Me n g e hi nz ug e füg t wu r d en § LinkedHashSet : Zu g r i f f sc h n e l l O( 1 ) , sp e i c h e r t El e m e n t e in d e r Re i h e n f o l g e in d e r si e zu r Me n g e hi nz ug e füg t wu r d en . 25 Ja v a C o l l e c t i o n s Fr am e w o rk 26 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t Li n k e d Li s tAr r a y L i s t Tr e e S e t <<I n t er f a c e> So r t e d Se t Ha s h S e t Li n k e d Ha s h S e t Set Ob j ek t e § Wi e für ArrayList <E> kö n n e n wi r Ex e m p l a r e de r K l a s s e n TreeSet <E> und HashSet<E> er s t el l en § E mu s s ei n Re f e r e n z t y p se i n § Br a u c h en (of t ) au c h pa s s e nde Re f e r e n z v a r i a b l e Set<Integer> set1 = new TreeSet <Integer>(); // empty Set<String> set2 = new HashSet<String>(); // empty § Re f e r e n z v a r i a b l e vo m Ty p Set<String> ka n n auf Ex e m pl ar e de r Kl a sse n TreeSet <String> und HashSet<String> ve r w e i s e n 27 Set Ob j ek t e § De f a u l t k o n s t r u k t o r lie f e r t di e le e r e Me n g e ; an d e r e er s t el l en di e Me n g e ba s i e r e nd au f ei n er an d e r e n Co l l ec t i o n . Set<Integer> set1 = new TreeSet <Integer>(); // empty Set<String> set2 = new HashSet<String>( list ); // init § Mu s s List<String> list = new ArrayList <String>() ge b e n § Au c h ge ht TreeSet <Integer> set1 = new TreeSet <Integer>(); HashSet<String> set2 = new HashSet<String>(list); 28 Set Ob j ek t e § De f a u l t k o n s t r u k t o r lie f e r t di e le e r e Me n g e , an d e r e er s t el l en di e Me n g e ba s i e r e nd au f ei n er an d e r e n Co l l ec t i o n . Set<Integer> set1 = new TreeSet <Integer>(); // empty Set<String> set2 = new HashSet<String>(list); // init § Mu s s List<String> list = new ArrayList <String>() ge b e n § Ni c h t ge ht Set< Integer > set1 = new TreeSet < String >(); Set< String > set2 = new HashSet< Integer >(list); 29 Set Me t h od en 30 add( va l u e ) a d d s t h e g i v e n v a l u e t o t h e s e t contains( va l u e ) re t u r n s true i f t h e g i v e n v a l u e i s f ou n d i n t h i s s e t remove( va l u e ) r e m o v e s t h e g i v e n v a l u e f r om t h e s e t clear() r e m o v e s a l l e l e m e n t s of t h e s e t isEmpty () re t u r n s true if t h e s e t ' s s i z e i s 0 toString () re t u r n s a s t r i n g s u c h a s \"[3, 42, - 7, 15]\" Be i s p i e l Set<String> names = new TreeSet <String>(); names.add (\"MIT\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.add (\"Imperial College\"); System.out.println (names); 31 [EPFL, ETH Zuerich , Imperial College, MIT] 32 Be i s p i e l Set<String> names = new TreeSet <String>(); System.out.println ( names.add (\"MIT\")); System.out.println ( names.add (\"ETH Zuerich \")); System.out.println ( names.add (\"Imperial College\")); System.out.println ( names.add (\"EPFL\")); System.out.println ( names.add (\"Imperial College\")); 33 Op e r a t i o n e n mi t Me ng e n addAll ( co l l ect i o n ) ad d s al l e l e m e n t s f r om t h e g i v e n c ol l e c t i on t o t h i s s e t containsAll ( co l l ) re t u r n s true if t h i s s e t c o n t a i n s e v e r y e l e m e n t f r o m g i v e n s e t equals( se t ) re t u r n s true if g i v e n o t h e r s e t c o n t a i n s t h e s a m e e l e m e n t s iterator () re t u r n s a n o b j e c t u s e d t o e x a m i n e s e t ' s c o n t e n t s ( sp ä t er me h r ) removeAll ( co l l ) re m o v e s a l l e l e m e n t s i n t h e g i v e n c o l l e c t i o n f ro m t h i s s e t retainAll( co l l ) re m o v e s e l e m e n t s no t fo und i n g i v e n c o l l e c t i o n f r o m t hi s s e t toArray () re t u r n s a n a r r a y o f t h e e l e m e n t s i n t h i s s e t addAll retainAll removeAll 34 Men g en u n d Or d n u n g sr el a ti o n en § HashSet : El e m e n t e si n d in ir g e n d e in e r Re i h e n f o l g e ge s p e i c h e r t Set<String> names = new HashSet <String>(); names.add (\"Jake\"); names.add (\"Robert\"); names.add (\"Marisa\"); names.add (\"Kasey\"); System.out.println(names ); // [Kasey, Robert, Jake, Marisa] 35 Men g en u n d Or d n u n g sr el a ti o n en § TreeSet : El e m e n t e ge m ä s s compareTo Or d n u n g ge s p e i c h e r t Set<String> names = new TreeSet <String>(); names.add (\"Jake\"); names.add (\"Robert\"); names.add (\"Marisa\"); names.add (\"Kasey\"); System.out.println(names ); // [Jake, Kasey, Marisa, Robert] § LinkedHashSet : i n d e r Re i h e n f o l g e de s Hi n z u f ü g e n s ge s p e i c h e r t Set<String> names = new LinkedHashSet <String>(); ... // [Jake, Robert, Marisa, Kasey] 36 ∀ El e m e n t e de r Men g e § Da d i e Or d n u n g de r El e m e n t e in d e r Me n g e ni c h t be k a nn t is t mü s s en wi r ei n en ( st a b i l e n ) We g fi nde n , Op e r a t i o n e n mi t al l e n El e m e n t e ei n er Me n g e au s z u f ü h r e n . § Di e O pe r a t i o n ka n n ei n en Te s t ei n s c h l i es s en de r dann – je nac h Er g e bni s – di e Op e r a t i o n e n ge n a u e r de f i ni e r t § We n n element.hasProperty () dann element.moreOps () § Id e e : Sc h l e i f e übe r al l e El e m e n t e ei n er (An ) Sam m l u n g § Me n g e Sp e z i a l f a l l § Zw i n g e n d da e s ke i n e n «I n d e x » fü r Me n g e n gi b t § Fü r je d e s (« f o r ea c h » ) E l em en t … . 37 Di e « fo r - ea c h » Sc h l e i f e Sy n t a x : for ( ty p e na m e : co l l e c t i o n ) { st a t e m e nt s ; } ty p e : Ty p de r El e m e n t e de r An s a m m l u n g co l l e c t i o n na m e : V a r i a b l e ( nur in n e r h a lb de s L o o p s de f i ni e r t ) d i es es Ty p s co l l e c t i o n : An s a m m l u n g vo n El e m e n t e n de s Ty p s ty p e § De f i n i e r t ei n en Lo o p übe r al l e El e m e n t e ei n er An s a m m l u n g ( z. B . , Set , ArrayList ) d i e d a s I n t e r f a c e Collection im p le m e n t ie r t / er w ei t er t od e r al l e El e m e n t e ei n es Ar r a y s 3839 Be i s p i e l Set<String> names = new HashSet<String>(); names.add (\"MIT\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.add (\"Imperial College\"); for (String n : names) { System.out.println (\"Another university is \" + n); } Ou t p u t : Another university is ETH Zuerich Another university is EPFL Another university is MIT Another university is Imperial College 40 Be i s p i e l Set<String> names = new Linked HashSet <String>(); names.add (\"MIT\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.add (\"Imperial College\"); System.out.println (names); Ou t p u t : [M I T , E T H Zu e r i c h , I m p e r ia l C o lle g e , E P F L ] 41 Be i s p i e l Set<Double> scores = new HashSet <Double>(); scores.add (21.0); scores.add (20.0); scores.add (24.0); scores.add (0.0); //Double ist ein Wrapper Typ ! for (Double score : scores) { System.out.println (\"The score is \" + score); } Ou t p u t : The score is 0.0 The score is 20.0 The score is 21.0 The score is 24.0 42 Be i s p i e l Set<Double> scores = new HashSet <Double>(); scores.add (21.0); scores.add (20.0); scores.add (24.0); scores.add (0.0); //double geht wegen unboxing! for ( d ouble score : scores) { System.out.println (\"The score is \" + score); } Ou t p u t : The score is 0.0 The score is 20.0 The score is 21.0 The score is 24.0 43 Be i s p i e l Set<Double> scores = new Linked HashSet <Double>(); scores.add (21.0); scores.add (20.0); scores.add (24.0); scores.add (0.0); System.out.println (scores); Ou t p u t : [2 1 . 0 , 2 0 . 0 , 2 4 . 0 , 0 . 0 ] Re i h e n fo l g e de r ( im pliz it e n ) It e r a tio n Wi r d ei n Collection Ob j e k t au sg e g e b e n , da nn we r d e n di e El e m e n t e in di e s e r Re i h e n f o l g e au sg e g e b e n : § HashSet – ni c h t de fi ni e r t . § LinkedHashSet – wi e ei n g e f ü g t . § ArrayList – wi e im Ar r a y ge s p e i c h e r t , en t s p r ec h en d de m I nde x § LinkedList – wi e in d e r Li s t e ge s p e i c h e r t . § TreeSet – au f s t e i g e n d na c h na t ür l i c he r Or d n u n g ( de fi ni e r t dur c h compareTo ). 4445 Be i s p i e l 1 Set<String> names = new Linked HashSet <String>(); names.add (\"MIT\"); names.remove (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.remove (\"Imperial College\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); System.out.println (names); 46 Be i s p i e l 1 Set<String> names = new Linked HashSet <String>(); names.add (\"MIT\"); names.remove (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.remove (\"Imperial College\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); System.out.println (names); Wa s is t de r O ut put ? Po l l 47 Be i s p i e l 2 String[] a = { \"two\", \"three\", \"101\", \"2\", \"1010\"}; Set<String> s2; s2 = new TreeSet <String>( Arrays.asList (a)); System.out.println (s2); Wa s is t de r O ut put ? Po l l 48 Be i s p i e l Set<String> names = new Linked HashSet <String>(); names.add (\"MIT\"); names.remove (\"ETH Zuerich \"); names.add (\"Imperial College\"); names.add (\"EPFL\"); names.remove (\"Imperial College\"); names.add (\"ETH Zuerich \"); names.add (\"Imperial College\"); System.out.println (names); Ou t p u t [MIT, EPFL, ETH Zuerich , Imperial College] Po l l 49 Be i s p i e l 2 String[] a = { \"two\", \"three\", \"101\", \"2\", \"1010\"}; Set<String> s2; s2 = new TreeSet <String>( Arrays.asList (a)); System.out.println (s2); Ou t p u t [101, 1010, 2, three, two] Po l l De t a i l s \"two\". compareTo (\"three\"); // 15 \"two\". compareTo (\"1010\"); // 67 \"101\".compareTo(\"1010\"); // - 1 \"1010\".compareTo(\"two\"); // - 67 \"101\".compareTo(\"two\"); // - 67 \"1101\".compareTo(\"two\"); // - 67 50 Ou t p u t [101, 1010, 2, three, two] Po l l Üb e r s i c h t § 10. 1 Ei nl e i t ung § 10. 2 Ar r a y L i s t <T y p e > § 10. 3 Ve r g l e i c h e n vo n Ob j e kt e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 5. 1 Ar b e i t e n mi t Ab b i l d u n g e n § 10. 5. 2 Um k e h r a b b i l d u n g § 10. 6 It e r a t o r e n und Co mp a r a t o r en § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 52 Men g en ( S e t s) § Ei n e Me n g e is t ei n e Ab b i l d u n g (« ma p ») d e r El e m e n t e au f bo o l ’ s c he We r t e . § Se t : Is t \"E T H \" i n d e r Me n ge ? ( t ru e / f a l s e ) § Of t si n d wi r ni c h t nur an ei n er Ja/ Ne i n An t w or t in t e r e s s ie r t § Wa s is t di e Po s t l e i t z a h l de r E T H ? § Wo sit z t di e Ha u p tv e r w a l tu n g de r E T H ? § Wa s is t di e Ha u p ts t a d t de r S c h w e i z ? Se t \"ETH\" true false 55 true Set<String>: Me n g e vo n String Ex e m p l a r e n Men g en ( S e t s) u n d Abbildung e n (M a p s) § Ei n e Me n g e is t ei n e Ab b i l d u n g (« ma p ») d e r El e m e n t e au f bo o l ’ s c he We r t e . § Se t : Is t \"E T H \" i n d e r Me n ge ? ( t ru e / f a l s e ) § Map: W as is t di e Po s t l e i t z a h l de r \" E T H \" ? Se t \"ETH\" true false 56 Ma p \"ETH\" 8092 true Set<String>: Me n g e vo n String Ex e m p l a r e n Ab b i l d u n g ( M a p ) v o n String auf P o s t l e i t z ahl Br a u c h e n ei n en String Abbildung e n (« Map ») § Ab b i l d u n g : en t h ä l t ei n e Me n g e Sc h l ü sse l (« ke y s ») u n d ei n e (An ) Sam m l u n g vo n We r t e n (« va l ue s ») , wo b e i je d e r Sc h l ü sse l mi t ei n em We r t asso z i i e r t is t . § Au c h al s «d i c t i o n a r y », «a s s o c i a t i v e ju n k ju n k ju n k ju n k jn u k n u n k ar r a y » , « has h» be k ann t . Wi l l i a m S h a k e s p e a r e : « Ro m e o a n d J u l i e t » myMap.get (\"Juliet\") re t u r n s \"Capulet\" 58 Ab b i l d u n g v o n V o r n a m e a u f F a m i l i e Ei n s a t z vo n Abbildung e n § Ei n e Ab b i l d u n g st e l l t ei n e As s o z i a t i on zw i s c h e n Sc h l ü sse l (« ke y » ) u n d We r t e n he r . § Sp e i c h e r t ei n en We r t fü r je d e n Ke y ( Sc h l ü sse l ). § Sp ä t e r br auc he n wi r nur ei n en Sc h l ü sse l ang e be n und erh a l t en de n en t s p r ec h en d en We r t zu r ü c k : Dann kö n n e n wi r fr a g e n : Wa s is t di e E T H Te l e f o n n u m m e r ? Ma p get(\"ETH\") \"044 - 632 - 1111\" Ma p // key value put(\"ETH\", \"044 - 632 - 1111\") 60 Ab b i l d u n g ( Ma p ) v o n String au f String Abbildung e n § Wi c h t i g s t e Op e r a t i o n e n : § put ( ke y , va l u e ): Hi n z u f ü g e n ei n es Sc h l ü sse l s mi t ei n em We r t § ge t ( ke y ): Les en de s We r t e s de r mi t de m Sc h l ü sse l as s o z i i e r t is t . § re m o v e ( ke y ): En t f e r ne n de s Sc h l ü sse l s (u n d d es mi t ih m as s o z i i e r t e n We r t e s ) 61 Map Im ple m e n t a tio n § In J a v a we r d e n Ab b i l d u n g e n (« ma p s ») dur c h da s Map In t e r f a c e in java.util un t e r s t üt z t§ Mu s s im p o r t ie r t we r d e n § Ve r s c h i e d e n e Im p l e m e n t a t i o n e n dur c h Kl a sse n § Wi e be i Me n g e n gi b t es ke i n e n In d e x § Hi n z u f ü g e n , Les en , En t f e r ne n – mü s s e n « su c h e n » § Kl a sse n un t e r s c he i de n si c h wi e ge s u c ht wi r d § Wi c h t i g e Kl as s e n d i e Map im p le m e n t ie r e n si n d HashMap, LinkedHashMap und TreeMap 62 Ja v a C o l l e c t i o n s Fr am e w o rk 63 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t Li n k e d Li s tAr r a y L i s t Tr e e S e t <<I n t er f a c e> So r t e d Se t Ha s h S e t <<I n t er f a c e> Ma p Tr e e M a p <<I n t er f a c e> So r t e d M ap Ha s h M a p Li n k e d Ha s h S e t Li n k e d Ha s h M a p Map Im ple m e n t a tio ne n § HashMap : Sc h l ü sse l si n d in ei n em Ar r a y , d e m « h a s h t a b l e » , in ir g e n d e in e r Re i h e n f o l g e ge s p e i c h e r t § Äh n l i c h wi e HashSet § Zu g r i f f se h r ef f i z i e n t : O( 1 ) § LinkedHashMap : Zu g r i f f sc h n e l l O( 1 ) , sp e i c h e r t El e m e n t e in Re i h e n f o l g e de s Hi n z u f ü g e n s in d ie Ab b i l d u n g § TreeMap : Sc h l ü sse l in ei n em bi nä r e m Ba u m ge s p e i c h e r t § Sc h l ü sse l si n d so r t i e r t ge s p e i c h e r t § Zu g r i f f zi e m l i c h ef f i z i e n t : O( l o g N ) 64 LinkedHashMap LinkedHashMap s c h ü t z t K l i e n t e n v o r D et a i l s d e r HashMap (R e i h e n f ol g e – Or d n u n g – ni c h t de fi ni e r t und v i e l l e i c h t «ch a o t i s ch ») o h n e d i e ( n i ch t - tr i vi al e n ) K o s t e n d e r TreeMap . Ka n n g e b r a u c h t w e r d e n u m e i n e K o p i e e i n e r Map zu e r s t e l l e n di e di e se l b e Re i h e n f o l g e h a t w i e d a s O r i g i n a l , u n a b h ä n g i g v o n de n D e t a i l s di e s e r O r dnung. void foo(Map m) { Map copiedMap = new LinkedHashMap (m); ... } 65 Ko n s t r u k t i o n vo n Abbildung e n § Ei n e Ab b i l d u n g er f o r d er t zw e i Ty p Pa r a m e t e r : ei n en für di e Sc h l ü sse l , ei n en für di e We r t e Map< Ke y T y p e , Va l u e T y p e > na m e = new TreeMap < Ke y T y p e , Va l u e T y p e >() § Ab b i l d u n g vo n Ke y T y p e Ex e m p l a r e n au f Va l u e T y p e Ex e m p l a r e ( k e y à va l u e ) § Ke y T y p e und Va l u e T y p e : be i de s Re f e r e n z t y p e n § De f aul t Ko n s t r u k t o r lie f e r t e le e r e Ab b i l d u n g 66 Ko n s t r u k t i o n vo n Abbildung e n : Be i s p i e l e // maps from String keys (first name) to String values (family) Map<String, String> family = new LinkedHashMap <String, String>(); // maps from String keys (candidates) to Integer values (votes) Map<String, Integer> votes = new HashMap<String, Integer>(); § Kö n n t e au c h au c h sp e z i f i sc h e Im p le m e n t a t io n für Re f e r e n z v a r i a b l e wä h l e n Tree Map < Ke y T y p e , Va l u e T y p e > na m e = … 67 TreeMap § TreeMap s p e i c h e r t d i e S c h l ü s s e l i n e i n e m B i n ä r b a u m g e m ä s s de r na t ür l i c he n O r dnung für de n T yp de r S c hl üs s e l § Be s t im m t d u r c h d ie compareTo() Met h o d e Map<String, Integer> ages = new TreeMap <String, Integer>(); § Es g i b t a u c h K o n s t r u k t o r e n ( f ü r TreeMap ) d i e e s e r l a u b e n , an d e r e O r d n u n g sr e l a ti o n e n al s d i e n a tü r l i c h e O r d n u n g au s z u w äh l e n § Ke i n T h e m a f ü r d i e s e V o r l e s u n g 68 Map Me t h od en put( ke y , va l u e ) ad d s a m ap p i n g f r om t h e g i v e n k e y t o t h e g i v e n v al u e ; if t h e k e y a l r e a d y e x i s t s , r e p l a c e s it s v a l u e w it h t h e g i v e n o n e get( ke y ) re t u r n s t h e v a l u e m a p p e d t o t h e g i v e n ke y ( null if n o t f o u n d ) containsKey ( ke y ) re t u r n s true if t h e m a p c o n t a i n s a m a p p i n g f o r t h e g i v e n k e y remove( ke y ) re m o v e s a n y e x i s t i n g m a p p i n g f o r t h e g i v e n ke y clear() re m o v e s a l l ke y / v a l u e p a i r s f ro m t h e m a p size() re t u r n s t h e n u m b e r o f ke y / v a l u e p a i r s i n t h e m a p isEmpty () re t u r n s true if t h e m a p ' s s i z e i s 0 toString () re t u r n s a s t r i n g s u c h a s \"{a=90, d=60, c=70}\" 69 Abbildung e n § Wi c h t i g s t e Op e r a t i o n e n : § put ( ke y , va l u e ): Hi n z u f ü g e n ei n es Sc h l ü sse l s mi t ei n em We r t § ge t ( ke y ): Les en de s We r t e s de r mi t de m Sc h l ü sse l as s o z i i e r t is t . § re m o v e ( ke y ): En t f e r ne n de s Sc h l ü sse l s (u n d d es mi t ih m as s o z i i e r t e n We r t e s ) § Es gi b t ke i n «a d d » -- ei n Pa a r (K , V ) m u s s mi t «p u t » zu r Ab b i l d u n g hi nz ug e füg t we r d e n 70 Map Ve r h a l t e n § Di e se Ab b i l d u n g sp e i c h e r t ei n en We r t ( Integer ) für ei n en Sc h l ü sse l ( ei n String , d e r « N a m e » ) Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); 71 Ro l a n d Cl a r a Sar ah Ty p is t String – da he r en t s c h ei d e t compareTo de r Kl a s s e String di e Or d n u n g Bo x i n g ! Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); System.out.println (ages); 72 Ro l a n d Cl a r a Sar ah Ou t p u t {Clara=2, Roland=19, Sarah=57} 19 57 2 Map Ve r h a l t e n § Di e « p u t » O p e r a t i o n mi t Ar g u m e n t e n (K , V ) füg t di e As s o z i a t i on K à V zu r Ab b i l d u n g hi nz u § We n n es sc h o n ei n e As s o z i a t i on K à V' i n d e r Ab b i l d u n g ga b s o wi r d di e s e übe r s c hr i e be n Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 17); ages.put (\"Roland\", 19); // only Roland=19 is kept 73 put(…) übe r s c hr e ib t ! § Di e se Ab b i l d u n g sp e i c h e r t ei n en We r t ( Integer ) für ei n en Sc h l ü sse l ( ei n String , d e r \" N a m e \" ) Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); ages.put (\"Clara\", 3); // Clara had her birthday 74 Ro l a n d Cl a r a Sar ah 19 57 2 put(…) übe r s c hr e ib t ! § Di e se Ab b i l d u n g sp e i c h e r t ei n en We r t ( Integer ) für ei n en Sc h l ü sse l ( ei n String , d e r \" N a m e \" ) Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); ages.put (\"Clara\", 3); // Clara had her birthday System.out.println (ages); 75 Ro l a n d Cl a r a Sar ah 19 57 3 Ou t p u t {Clara=3, Roland=19, Sarah=57} 2 10. 5. 1 A rb e i t e n m i t A b b i l d u n g e n § Da s Map In t e r f a c e s c h r e ibt M e t h o d e n v o r , d ie e s e in f a c h (m ög l i c h ) m a c h e n , m i t Ab b i l d u n g e n z u a r b e i t e n § Ei n e M e t h o d e l i e f e r t d i e M e n g e a l l e r S c h l ü sse l w e r t e (« k e y s « ) § Ei n e a n d e r e M e t h o d e l i e f e r t a l l e d i e A n sa m m l u n g a l l e r We r t e ( « v a l u e s » ) , a u f d i e e i n S c h l ü s s e l w e r t a b g e b i l d e t i s t § Ke i n e M e n g e – Dupl i k a t e m ö g l i c h 77 We i t e r e Map Me t h od en 78 keySet () re t u r n s a s e t o f a l l ke y s i n t h e m a p values() re t u r n s a c o l l e c t i o n o f a l l v a l u e s i n t h e m a p putAll ( map ) ad d s al l k e y/ v al u e p ai r s f r om t h e g i v e n m ap t o t h i s m ap equals( map ) re t u r n s true if g i v e n m a p h a s t h e s a m e m a p p i n g s a s t h i s on e keySet () § Di e Me t h o d e keySet () lie f e r t ei n e Re f e r e n z au f d i e Me n g e al l e r «K e y s » ( Sc h l ü sse l ) i n d e r Ab b i l d u n g (M a p ) § Ka n n di e Me n g e al l e r Ke y s i n ei n er for - ea c h - Sc h l e i f e be ar be i t e n § Ka n n de n W e r t , de r zu ei n em Ke y ge h ö r t , dur c h Au f r u f vo n get fü r di e M ap erh a l t en § Fü r Map< Ke y T y p e , Va l u e T y p e > na m e he i s s t da s da s s na m e .keySet () ei n e Re f e r e n z au f ei n e Me n g e Set< Ke y T y p e > lie f e r t Set<String> ns = ages.keySet (); // ages previous slide 79 keySet () Be i s p i e l Di e Me t h o d e keySet () lie f e r t ei n e Re f e r e n z au f d i e Me n g e al l e r «K e y s » i n d e r Ab b i l d u n g Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); // ages.keySet () returns Set<String> Set<String> as = ages.keySet (); // get elements w/o for - each 80 keySet () Be i s p i e l Di e Me t h o d e keySet () lie f e r t ei n e Re f e r e n z au f d i e Me n g e al l e r «K e y s » i n d e r Ab b i l d u n g Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); // ages.keySet () returns Set<String> Set<String> as = ages.keySet (); System.out.println (as); Re i h e n f o l g e in ns be s t i m m t dur c h na t ür l i c he Or d n u n g de r Sc h l ü sse l 81 Ou t p u t [Clara, Roland, Sarah] keySet () Be i s p i e l Di e Me t h o d e keySet () lie f e r t ei n e Re f e r e n z au f d i e Me n g e al l e r «K e y s » i n d e r Ab b i l d u n g Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); // ages.keySet () returns Set<String> Set<String> as = ages.keySet (); for (String name : as) { // Clara - > 2 int age = ages.get (name); // Roland - > 19 System.out.println (name + \" - > \" + age); // Sarah - > 57 } 82 keySet () Be i s p i e l Di e Me t h o d e keySet () lie f e r t ei n e Re f e r e n z au f d i e Me n g e al l e r «K e y s » i n d e r Ab b i l d u n g Map<String, Integer> ages = new TreeMap <String, Integer>(); ages.put (\"Roland\", 19); ages.put (\"Clara\", 2); ages.put (\"Sarah\", 57); // ages.keySet () returns Set<String> // use directly w/o variable for (String name : ages.keySet ()) { // Clara - > 2 int age = ages.get (name); // Roland - > 19 System.out.println (name + \" - > \" + age); // Sarah - > 57 } 83 values() § Di e Me t h o d e values() lie f e r t ei n e Re f e r e n z au f d i e An s a m m l u n g al l e r in d e r M a p au f tr e t e n d e n We r t e § Ka n n di e s e We r t e mi t ei n er for - ea c h Sc h l e i f e abar be i t e n § Ab e r : E s gi b t ke i n e n ei n f a c h en We g de n od e r di e Sc h l ü sse l (K e y s ) fü r ei n en We r t zu fi n d e n § Bei s p i el : // setup see previous slide System.out.println ( ages.values ()); 84 Ou t p u t [2, 19, 57] keySet und values § Ei n e A b b i l d u n g i s t e i n e M e n g e v o n As s o z i a t i on e n (K à V) § De r « no r m al e » B l i c k ( vi e w ) i s t d i es e M en g e § keySet() und values() erl a u b en ei n en a n d er en B l i c k – abe r di e Ab b i l d u n g i s t n oc h i m m e r e i n e E i n h e i t 85 K1 à V1 K2 à V2 K3 à V3 K4 à V4 K1 , K2 , … s i n d i m m e r u n t e r s c h i e d l i c h , ab e r V 1 , V 2 , … n i c h t u n b e d i n g t keySet und values § Ei n e A b b i l d u n g i s t e i n e M e n g e v o n P a a r e n ( K e y , V a l u e ) § De r « no r m al e » B l i c k ( vi e w ) i s t d i es e M en g e § keySet() und values() erl a u b en ei n en a n d er en B l i c k – abe r di e Ab b i l d u n g i s t n oc h i m m e r e i n e E i n h e i t Ic o n s m a d e b y < a hr e f =\" h t t p s : / / www. f l a t i c o n . c o m /a u t h o r s / ki r a n s h a s t r y \" t i t l e = \" Ki r a n s h a s t r y \"> Ki r a n s h a s t r y </ a > f r o m <a hr e f =\" h t t p s : / / www. f l a t i c o n . c o m /\" ti tl e = \" Fl a t i c o n \"> www. f l a t i c o n . c o m </ a > 86 K1 à V1 K2 à V2 K3 à V3 K4 à V4 K1 , K2 , … s i n d i m m e r u n t e r s c h i e d l i c h , ab e r V 1 , V 2 , … n i c h t u n b e d i n g t keySet und values § Ei n e A b b i l d u n g i s t e i n e M e n g e v o n P a a r e n ( K e y , V a l u e ) § De r « no r m al e » B l i c k ( vi e w ) i s t d i es e M en g e § keySet() und values() erl a u b en ei n en a n d er en B l i c k – abe r di e Ab b i l d u n g i s t n oc h i m m e r e i n e E i n h e i t Ic o n s m a d e b y < a hr e f =\" h t t p s : / / www. f l a t i c o n . c o m /a u t h o r s / ki r a n s h a s t r y \" t i t l e = \" Ki r a n s h a s t r y \"> Ki r a n s h a s t r y </ a > f r o m <a hr e f =\" h t t p s : / / www. f l a t i c o n . c o m /\" ti tl e = \" Fl a t i c o n \"> www. f l a t i c o n . c o m </ a > 87 K1 à V1 K2 à V2 K3 à V3 K4 à V4 K1 , K2 , … s i n d i m m e r u n t e r s c h i e d l i c h , ab e r V 1 , V 2 , … n i c h t u n b e d i n g t keySet und values § keySet() und values() er l a u b en ei n en a n d er en jb d s a f Bl i c k – ab e r d i e A b b i l d u n g i s t n o c h i m m e r e i n e E i n h e i t § De sh a l b m ü sse n w i r e i n e R e f e r e n z v a r i a b l e e i n e s I n t e r f a c e t y p s ( Collection<ValueTyp> od e r Set<KeyTyp> ) ve r w e n d e n we n n w i r R e f e r e n z s p e i c h e r n w o l l e n // setup see previous slide Collection<Integer> av = ages.values (); Set<String> ak = ages.keySet (); 88 K1 à V1 K2 à V2 K3 à V3 K4 à V4 keySet und values § Re f e r e n z v a r i a b l e e i n e r k o n k r e t e n K l a s s e ( z . B . v o m T y p HashSet<KeyTyp>) s i n d n i c h t e r l a u b t . HashSet<String> ak = ages.keySet (); | Error: | incompatible types: java.util.Set < java.lang.String > cannot | be converted to java.util.HashSet < java.lang.String > § Mo d i f i k a t i o n e n s i n d a u c h n i c h t z u l ä s s i g Set<String> ak = ages.keySet (); ak.add (\"Sarah\"); | Error: | Exception java.lang.UnsupportedOperationException | at AbstractCollection.add (AbstractCollection.java:251) 89 void mumble(Map< String , String > map) { Map< String , String > result = new TreeMap < String,String >(); for (String key : map.keySet ()) { if ( key.compareTo ( map.get (key)) < 0){ result.put (key, map.get (key)); } else { result.put ( map.get (key), key); } } System.out.println (result); } Ge g e be n s e i di e A bbi l dung myMap : { z=n, o=e, t=z, f=v, a=e } Wa s w i r d f ü r mumble(myMap) au sg e g e b e n ? 91 Po l l void mumble(Map< String,String > map) { Map<String, String> result = new TreeMap < String,String >(); for (String key : map.keySet ()) { if ( key.compareTo ( map.get (key)) < 0){ result.put (key, map.get (key)); } else { result.put ( map.get (key), key); } } System.out.println (result); } Wa s w i r d f ü r mumble(myMap) au sg e g e b e n ? Ku r z f o r m mi t An f a n g s b u c h s t a b e n bi t t e , z. B . x=y , k=m , . . . 95 Po l l MyMap ve r e i n f a c h t : { z=n, o=e, t=z, f=v, a=e } void mumble(Map< String,String > map) { Map<String, String> result = new TreeMap < String,String >(); for (String key : map.keySet ()) { if ( key.compareTo ( map.get (key)) < 0){ result.put (key, map.get (key)); } else { result.put ( map.get (key), key); } } System.out.println (result); } Wa s w i r d f ü r mumble(myMap) au sg e g e b e n ? {a=e, e=o, f=v, n=z, t=z} 96 Po l l MyMap ve r e i n f a c h t : { z=n, o=e, t=z, f=v, a=e } void mumble(Map< String,String > map) { Map<String, String> result = new TreeMap < String,String >(); for (String key : map.keySet ()) { // [ z, o, t, f, a ] if ( key.compareTo ( map.get (key)) < 0){ result.put (key, map.get (key)); } else { result.put ( map.get (key), key); } } System.out.println (result); } Wa s w i r d f ü r mumble(myMap) au sg e g e b e n ? {a=e, e=o, f=v, n=z, t=z} 97 Po l l MyMap ve r e i n f a c h t : { z=n, o=e, t=z, f=v, a=e } compareTo : false false true true true 98 An t w o r t An z a h l Pr o z e n t a= e , d = t , e = o , f= v , t = z 15 12. 30% a= e , e = o , f= v , n = z, t = z 25 20. 49% e=o , t =z , d =t , f =v , a =e 16 13. 11% n= z , e = o , t = z , f = v , a = e 31 25. 41% An d e r e 35 28. 69% 122 Abbildung e n Map<K,V> § K ( Ke y T y p e ) u n d V ( Va l u e T y p e ) mü s s en be i de Re f e r e n z t y p e n se i n § Ke i n e we i t e r e n Ei ns c hr änk ung e n § Ty p ka n n dur c h In t e r f a c e de f i ni e r t se i n Map<Shape, Double> umfang = new TreeMap <Shape, Double>(); Map<Set<Shape>, Integer> anzahl = new TreeMap <Set<Shape>, Integer>(); // for Set of instances that implement Shape: max area § Bel i eb i g e Ko n s t r u k t i o n e n 101 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 10. 0 Gen er i s c h e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 — 2021 Al l r i g h t s r e s e r v e d . void mumble(Map< String,String > map) { Map<String, String> result = new TreeMap < String,String >(); for (String key : map.keySet ()) { // [ z, o, t, f, a ] if ( key.compareTo ( map.get (key)) < 0){ result.put (key, map.get (key)); } else { result.put ( map.get (key), key); } } System.out.println (result); } Wa s w i r d f ü r mumble(myMap) au sg e g e b e n ? {a=e, e=o, f=v, n=z, t=z} 3 Po l l MyMap ve r e i n f a c h t : { z=n, o=e, t=z, f=v, a=e } compareTo : false false true true true 4 An t w o r t An z a h l Pr o z e n t a= e , d = t , e = o , f= v , t = z 15 12. 30% a= e , e = o , f= v , n = z, t = z 25 20. 49% e=o , t =z , d =t , f =v , a =e 16 13. 11% n= z , e = o , t = z , f = v , a = e 31 25. 41% An d e r e 35 28. 69% 122 Ed u A p p P r o b l e m : Z e i g t e n i c h t d i e r i c h t i g e I n p u t Ab b i l d u n g ( 1 . Z e i l e a u ch O K ) Abbildung e n Map<K,V> § K ( Ke y T y p e ) u n d V ( Va l u e T y p e ) mü s s en be i de Re f e r e n z t y p e n se i n § Ke i n e we i t e r e n Ei ns c hr änk ung e n § Ty p ka n n dur c h In t e r f a c e de f i ni e r t se i n Map<Shape, Double> umfang = new TreeMap <Shape, Double>(); Map<Set<Shape>, Integer> anzahl = new TreeMap <Set<Shape>, Integer>(); // for Set of instances that implement Shape: max area § Bel i eb i g e Ko n s t r u k t i o n e n 78 class Record { String telNr; Integer plz; } Map<String, Record> directory = new TreeMap<String, Record>(); directory.put(\"ETH\", new Record(\"044 632 1111\", 8092)); 9 class Record { String telNr; Integer plz; public String toString() { return telNr+\" -- \"+plz; } } Map<String, Record> directory = new TreeMap<String, Record>(); directory.put(\"ETH\", new Record(\"044 632 1111\", 8092)); directory.put(\"EPFL\", new Record(\"021 693 1111\", 1015)); System.out.println(directory); Record(String s, Integer i ) { telNr = s; plz = i ; } Abbildung e n Map<K,V> § K ( Ke y T y p e ) u n d V ( Va l u e T y p e ) mü s s en be i de Re f e r e n z t y p e n se i n § Ke i n e we i t e r e n Ei ns c hr änk ung e n § Ty p ka n n dur c h In t e r f a c e de f i ni e r t se i n Map<Shape, Double> umfang = new TreeMap <Shape, Double>(); Map<Set<Shape>, Integer> anzahl = new TreeMap <Set<Shape>, Integer>(); // for Set of instances that implement Shape: count // Sorted by «area» (define compareTo and equals …) § Bel i eb i g e Ko n s t r u k t i o n e n 1011 Ei n e so l c h e A b b i l d u n g i s t d i e U m k e h r a b b i l d u n g f : S t r i ng à In t e g e r (N a m e à Al t e r ) f – 1 : I n t e g e r à Str i n g (A lt e r à Na m e ) Ge h t da s i m m e r ? W i e ? Üb e r s i c h t § 10. 1 Ei nl e i t ung § 10. 2 Ar r a y L i s t <T y p e > § 10. 3 Ve r g l e i c h e n vo n Ob j e kt e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 5. 1 Ar b e i t e n mi t Ab b i l d u n g e n § 10. 5. 2 Um k e h r a b b i l d u n g § 10. 6 It e r a t o r e n und Co mp a r a t o r en § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 13 Ar be it e n mi t Abbildung e n § Wi r wo l l e n für je d e /n As s i s t i e r e n d e /n d i e Du r c h sc h n i t t sn o t e fe s t h a l t e n . § Ab b i l d u n g Na m e ( String ) à Not e ( Double ) Map< String, Double > note = new LinkedHashMap < String, Double >(); note.put (\"Jared\", 4.6); note.put (\"Alyssa\", 5.0); note.put (\"Steve\", 5.9); note.put (\"Stef\", 4.6); note.put (\"Rob\", 4.0); ... 1415 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" § Fü r je d e n K e y ( String ) kö n n e n wi r de n zu g e o r d n e t e n We r t ( Double ) er f r a g en System.out.println (\" Jareds Note ist \" + note.get (\"Jared\")); // 4.6 § Ab e r d i e Ab b i l d u n g er l a u b t es ni c h t , ei n f a c h na c h al l e n As s i s t e n t e n zu fr a g e n , d i e ei n e be s t i m m t e Not e er r ei c h t en . § Wa s fü r ei n e Ab b i l d u n g br äuc h t e n wi r da f ür ? § Wa s fü r ei n en Ty p mü s s t e di e An tw or t habe n ? 16 Um k e h r ab b i l d u n g § Wi r kö n n t e n di e Ab b i l d u n g um k e hr e n so da s s si e ei n e Ab b i l d u n g vo n Not e n au f As s i s t e n t e n is t . Map<Double, String> invNote = new HashMap<Double, String>(); invNote.put (4.6, \"Jared\"); invNote.put (5.0, \"Alyssa\"); invNote.put (5.9, \"Steve\"); invNote.put (4.6, \"Stef\"); invNote.put (4.0, \"Rob\"); ... 17 Um k e h r ab b i l d u n g § Wi r kö n n t e n di e Ab b i l d u n g um k e hr e n so da s s si e ei n e Ab b i l d u n g vo n Not e n au f As s i s t e n t e n is t . // note as before Map<Double, String> invNote = new HashMap<Double, String>(); for (String s : note.keySet ()) { invNote.put ( note.get (s), s); } ... 18 Um k e h r ab b i l d u n g § Wi r kö n n t e n di e Ab b i l d u n g um k e hr e n so da s s si e ei n e Ab b i l d u n g vo n Not e n au f As s i s t e n t e n is t . Map<Double, String> invNote = new HashMap<Double, String>(); invNote.put (4.6, \"Jared\"); invNote.put (5.0, \"Alyssa\"); invNote.put (5.9, \"Steve\"); invNote.put (4.6, \"Stef\"); invNote.put (4.0, \"Rob\"); ... System.out.println (\" Wer hatte eine 4.6? \" + invNote.get (4.6)); // ??? 1921 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 5. 0 5. 9 invNote.put (4.6, \"Jared\"); 22 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 4. 6 5. 0 5. 9 \"J ar e d \" invNote.put (5.0, \"Alyssa\"); 23 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 4. 6 5. 0 \"Al y s s a\" \"J ar e d \" invNote.put (5.9, \"Steve\"); 24 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 4. 6 5. 0 5. 9 \"Al y s s a\" \"J ar e d \" \"S t e v e \" invNote.put (4.6, \"Stef\"); 25 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 4. 6 5. 0 5. 9 \"Al y s s a\" \"S t e f \" \"S t e v e \" invNote.put (4.0, \"Rob\"); 26 4. 0 4. 6 5. 0 5. 9 \"R o b \" \"Al y s s a\" \"J ar e d \" \"S t e f \" \"S t e v e \" 4. 0 4. 6 5. 0 5. 9 \"Al y s s a\" \"S t e f \" \"S t e v e \" \"R o b \" System.out.println ( invNote.keySet ()); // [4.0, 4.6, 5.0, 5.9] System.out.println ( invNote ); System.out.println (\" Wer hatte eine 4.6?\" + invNote.get (4.6)); // \"Stef\" § Di e se r A n sa t z is t ke i n e Lö s u n g . § Wo is t da s Pr o bl e m ? § Me h r e r e As s i s ti e r e n d e kö n n e n de n se l b e n No t e n d u r c h s c h n i t t habe n . § Di e M ap sp e i c h e r t nur de n le t z t e n Ei n t r ag 27 Ko r r e k t e Um k e h r ab b i l d u n g § Je d e Not e m u s s a u f ei n e Ans a m m l ung ( Co l l e c t i o n ) v on As s i s t i e r e n d e n ab g e b i l d e t we r d e n § Ei ne Me n g e (E x em p l a r ei n er Kl a sse di e Set im p le m e n t ie r t ) § Ei ne r ArrayList § … Map<Double, Set<String> > invNote = new HashMap <Double, Set<String> >(); 28 Ko r r e k t e Um k e h r ab b i l d u n g § Je d e Not e m u s s a u f ei n e Ans a m m l ung ( Co l l e c t i o n ) v on As s i s t i e r e n d e n ab g e b i l d e t we r d e n Map<Double, Set<String> > invNote = new HashMap<Double, Set<String> >(); § ... im Bei s p i el 29 Ab b i l d u n g : note Um k e h r a b b i l d u n g : invNote note.put ( \"Rob\", 4.0 ); invNote.put ( 4.0, { \"Rob\" } ); Ko r r e k t e Um k e h r ab b i l d u n g § put ( K , V ) e r s e t z t Ei n t r ag § Wa s w e n n e s s c h o n e i n e n E i n t r a g g i b t ? § L ö s u n g : z u r M e n g e h i n z u f ü g e n § Ei n t r ag f i nde n dann \"Rob\" daz u: invNote.get(4.0).add(\"Rob\") § Es m us s e i ne M e ng e g e be n zu de r \"Rob\" hi nz ug e f üg t w e r de n k ann § Dahe r m us s Ei n t r ag m i t l e e r e r M e ng e i ni t al i s i e r e n invNote( 4.0, new TreeSet<String>() ); 30 Um k e h r a b b i l d u n g : invNote invNote.put ( 4.0, { \"Rob\" } ); Um k eh r a b b i l d u n g Map<Double, Set<String> > invNote = new HashMap <Double , Set<String> >(); invNote.put (4.6, new TreeSet <String>()); invNote.get (4.6).add(\"Jared\"); invNote.put (5.0, new TreeSet <String>()); invNote.get (5.0).add(\"Alyssa\"); invNote.put (5.9, new TreeSet <String>()); invNote.get (5.9).add(\"Steve\"); invNote.get (4.6).add(\"Stef\"); invNote.put (4.0, new TreeSet <String>()); invNote.get (4.0).add(\"Rob\"); 353738394041424344 Um k eh r a b b i l d u n g Map<Double, Set<String> > invNote = new HashMap <Double , Set<String> >(); invNote.put (4.6, new TreeSet <String>()); invNote.get (4.6).add(\"Jared\"); invNote.put (5.0, new TreeSet <String>()); invNote.get (5.0).add(\"Alyssa\"); invNote.put (5.9, new TreeSet <String>()); invNote.get (5.9).add(\"Steve\"); invNote.get (4.6).add(\"Stef\"); invNote.put (4.0, new TreeSet <String>()); invNote.get (4.0).add(\"Rob\"); ... System.out.println (\" Wer hatte eine 4.6? \" + invNote.get (4.6)); // [Jared, Stef] 45 K o r r e kt e Um k eh r a b b i l d u n g ( aus Ab b i l d u n g ) // note as before Map<Double, Set<String >> invNote = new HashMap<Double, Set<String> >(); for (String s : note.keySet ()) { if (! invNote.containsKey ( note.get (s))) { invNote.put ( note.get (s), new HashSet<String>()); } invNote.get ( note.get (s)).add(s); } ... System.out.println (\" Wer hatte eine 4.6? \" + invNote.get (4.6)); // [Jared, Stef] 48 Wi c h t i g : Me n g e in it ia lis ie r e n be v o r das 1 . El e m e n t hi nz ug e f üg t wi r d . 50 Va r i a t i o n d e r Um k eh r a b b i l d u n g TreeMap <Double, Set<String>> invNote = new TreeMap <Double, Set<String>>(); invNote.put (4.6, new TreeSet <String>()); invNote.get (4.6).add(\"Jared\"); invNote.put (5.0, new TreeSet <String>()); invNote.get (5.0).add(\"Alyssa\"); invNote.put (5.9, new TreeSet <String>()); invNote.get (5.9).add(\"Steve\"); invNote.get (4.6).add(\"Stef\"); invNote.put (4.0, new TreeSet <String>()); invNote.get (4.0).add(\"Rob\"); System.out.println (\"… wenigstens 4.5? \" + invNote. ceilingEntry (4.5)); // 4.6=[Jared, Stef] System.out.println (\"… wenigstens 5.0? \" + invNote. ceilingEntry (5.0)); // 5.0=[Alyssa] Li e f ert kl e i n s t e n Ke y d e r gr ö s s e r od e r gl e i ch is t , mi t as s o z i i e r t e m We r t 515253 Men g e u n d A b b i l d u n g en § In t e r f a c e Map und Set Gr undl a g e für di v e r s e K l a s s e n § Be is p ie le : § TreeSet / HashSet / LinkedHashSet § TreeMap / HashMap / LinkedHashMap § und e i ni g e m e hr § Au c h I m p l e m e n t a ti on d u r c h e i g e n e K l a s s e n § Ei n sc h r ä n k u n g e n b z g l . M o d i f i k a t i o n d e r El e m e n t e d e r Me n g e / A b b i l d u n g § Än d e r u n g e n d i e compareTo bz w d e n Hash be t r e f f e n w e r de n ni c h t nac hg e f ühr t 54 Re i h e n fo l g e de r It e r a t io n Wi r d ei n Collection Ob j e k t au sg e g e b e n od e r in ei n em fo r - each Lo o p be a r be i t e t , da nn gi l t für di e Re i h e n f o l g e : § HashSet – ni c h t de fi ni e r t . § LinkedHashSet – wi e ei n g e f ü g t . § ArrayList – wi e im Ar r a y ge s p e i c h e r t , en t s p r ec h en d de m I nde x § LinkedList – wi e in d e r Li s t e ge s p e i c h e r t . § TreeSet – au f s t e i g e n d na c h na t ür l i c he r Or d n u n g ( de fi ni e r t dur c h compareTo ). 55 Re i h e n fo l g e de r It e r a t io n ( F o r t s e t z ung ) § HashMap – ni c h t de fi ni e r t . § TreeMap – au f s t e i g e n d na c h na t ür l i c he r Or d n u n g ( de fi ni e r t dur c h compareTo ). § LinkedHashMap – wi e ei n g e f ü g t . 56 10. 6. 1 It e r a t o r e n 58 Mot i v a t i on – ei n e Üb u n g s au f g ab e 1. Sc h r e i b e n Si e ei n Pr o gr a m m , d a s zä h l t wi e v i el e ve r s c h i e d e n e Wö r t e r in ei n em Te x t au f t au c h e n . § Sp e i c h e r n Si e d i e Wö r t e r in ei n er (A n ) Sa m m l u n g und hal t e n Si e f e s t wi e of t ei n Wo r t i n de m Te x t auf t r i t t . § Na c h de m Ei nl e s e n de s Te x t e s so l l t e es mö g l i c h se i n , fe s t z u s t e l l e n wi e of t ei n be s t i m m t e s Wo r t im Te x t auf t r i t t . 2. Ge be n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t au s (a ) u n d en t f er n en es au s de r Me n g e (b ) 59 Lö sung de s 1 . T e i l s de r Üb u n g s a u f g a b e // read file into a map of [word -- > number of occurrences] Map<String, Integer> wordCount = new TreeMap <String, Integer>(); Scanner input = new Scanner(new File(\" mobydick.txt \")); while ( input.hasNext ()) { String word = input.next (); if ( wordCount.containsKey(word )) { // seen this word before; increase count by 1 int count = wordCount.get(word ); wordCount.put(word , count + 1); } else { // never seen this word before wordCount.put(word , 1); } } 60 Scanner console = new Scanner(System.in ); System.out.print (\"Word to search for? \"); String word = console.next (); if ( wordCount.get (word)!=null) { System.out.println (\"Freq: \" + wordCount.get (word)); } else { System.out.println (\"Does not appear in text\"); } 61 Üb u n g ( Fo r t s e t z u n g ) 2. Ge be n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t au s (a ) u n d en t f er n en es au s de r Me n g e (b ) § Wi e fi nde n wi r di e s e Wö r t e r ? § Wi e kö n n e n wi r al l e Wö r t e r be s uc he n ( dann kö n n e n wi r ab f r ag e n wi e of t d a s W or t auf g e t r e t e n is t )? 62 Üb u n g ( Fo r t s e t z u n g ) 2. Ge be n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t au s (a ) u n d en t f er n en es au s de r Me n g e (b ) § Wi e fi nde n wi r di e s e Wö r t e r ? § Wi e kö n n e n wi r al l e Wö r t e r be s uc he n ( dann kö n n e n wi r ab f r ag e n wi e of t d a s W or t auf g e t r e t e n is t )? Map<String, Integer> wordCount = new TreeMap <String, Integer>(); Set<String> inText = wordCount.keySet (); for (String s : inText ) { ... } 63 Üb u n g ( Fo r t s e t z u n g ) 2. (a ) Ge be n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t au s Map<String, Integer> wordCount = new TreeMap <String, Integer>(); Set<String> inText = wordCount.keySet (); for (String s : inText ) { if (( wordCount.get (s) > 999) { System.out.println (s); } } 64 Mi t de n El e m e n t e n ei n er Me n g e (S e t) ar be i t e n § Bei Ab b i l d u n g e n (M a p ) lie f e r n keySet () und values() ei n e Re f e r e n z au f § Me n g e de r K e y s ( Sc h l ü sse l ) § An s a m m l u n g de r We r t e § Kö n n e n wi r di e s e Me n g e n ve r w e n d e n um di e Ab b i l d u n g zu ve r ä n d e r n ? § z.B . um Ei n t r äg e zu en t f ern en we n n de r W e r t ei n e Be d in g u n g erf ü l l t ? § Ne i n . W a s pa s s i e r t we n n wi r es ve r s u c h e n ? 67 Lö sung s v er suc h (T e il 2 .b) 2. (b ) En t f e r n e n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t Set<String> inText = wordCount.keySet (); for (String s : inText ) { if (( wordCount.get (s) > 999) { wordCount.remove (s); } } 68 Lö sung s v er suc h (T e il 2 .b) 2. (b ) En t f e r n e n Si e je d e s Wo r t d a s mi n d es t en s 1000m a l au f tr i t t Set<String> inText = wordCount.keySet (); for (String s : inText ) { if (( wordCount.get (s) > 999) { wordCount.remove (s); } } § Le i d e r tr i t t wä h r e n d de r Au s f ü h r u n g ( we n n es Wö r t e r gi b t di e > 9 9 9 au f tr e t e n ) ei n e Ex c e p t i o n a u f 69 Exception in thread \"main\" java.util.ConcurrentModificationException at java.base / java.util.HashMap$HashIterator.nextNode (HashMap. java:1493) at java.base / java.util.HashMap$KeyIterator.next (HashMap.java: 1516) at Example2a.main(Example2a.java:35) § Pr o bl e m : D i e fo r - each - Sc h l e i f e is t «r e a d - on l y » , d. h. di e An s a m m l u n g da r f ni c h t mo d i f i z i er t we r d e n wä h r e n d de r L o o p au sg e f ü h r t wi r d § Di e An s a m m l u n g is t hi e r ei n e Ab b i l d u n g 7071 Au c h Än d e r u n g e n vo n M e n g e n un t e r l i e g e n de n se l b e n Ei ns c hr änk ung e n Set<Double> scores = new TreeSet <Double>(); scores.add (21.0); scores.add (20.0); scores.add (24.0); scores.add (0.0); for (Double score : scores) { System.out.println (\"The score is \" + score); } for (Double score : scores) { if (score < 4.0) { // throws a ConcurrentModificationException scores.remove (score); } } Di e fo r - ea c h - Sc h l e i f e § Pr o bl e m : D i e fo r - each - Sc h l e i f e is t «r e a d - on l y » , d. h. di e Me n g e da r f ni c h t mo d i f i z i er t we r d e n wä h r e n d de r L o o p au sg e f ü h r t wi r d § Mü s s e n wi r im m e r ei n e ne ue Ab b i l d u n g ko n s t r u i e r e n nur we i l wi r ei n e As s o z i a t i on en t f er n en wo l l e n ? 72 Zu r E r i n n e r u n g § Di e M e t h o d e n keySet() und values() ge b e n e i n e Re f e r e n z a u f d i e K e y s b z w . W e r t e z u r ü c k § Ke i n e K o p i e ! § Di e se M e t h o d e n ä n d e r n d e n « B l i c k » ( vi e w ) a u f d i e Ab b i l d u n g § Da h e r k ö n n e n w i r n i c h t i n e i n e r fo r - each - Sc h l e i f e ü b e r d i e K e y s e i n e n E i n t r a g i n d e r A b b i l d u n g e n t f e r n e n 73 No c h ei n Lö s u n g s v e r s u c h (T e il 2 ) § Ei n e ex p l i z i t e Re f e r e n z v a r i a b l e hi l ft ni c h t : Map<String, Integer> wordCount ; // init as before Set<String> inText = wordCount.keySet (); for (String s : inText ) { if (( wordCount.get (s) > 999) { inText.remove (s); } } § Au c h hi e r tr i t t wä h r e n d de r Au s f ü h r u n g ( we n n es Wö r t e r gi b t di e > 9 9 9 au f tr e t e n ) ei n e Ex c e p t i o n a u f 74 It e r a tio n (f o r - ea c h ) u n d A b b i l d u n g Map<String, Integer> sMap = new TreeMap <String, Integer>(); § Sp e i c h e r t K e y s i n B i n är b au m 75 Pa u l Iv o Sar ah 19 20 21 Ro l a n d 19 Pe t e r Sha w n 18 20 for (String s: sMap.keySet ()) {…} § Ar b e i t e t m i t K e y s i n d i e s e r O r d n u n g : Ro l a n dIv o Sar ahPe t e rPa u l Sha w n It e r a tio n (f o r - ea c h ) u n d A b b i l d u n g § En t f e r n e n e i n e s S c h l ü sse l s h a t ( e v t l . ) w e i t r e i c h e n d e F o l g e n 76 Pe t e r Iv o Sar ah 20 20 21 Ro l a n d Sha w n 18 19 for (String s: sMap.keySet ()) {…} § Ar b e i t e t m i t K e y s i n d i e s e r O r d n u n g : Ro l a n dIv o Sar ahPe t e rPa u l Sha w n ✘ 76 It e r a tio n und M o dif ik a tio n de r A bbildung § Mü s s e n I t e r a t i o n ( A b a r b e i t e n / B e s u c h e n d e r S c h l ü s s e l e i n e r Ab b i l d u n g ) m od e l l i e r e n § Dann w i s s e n w i r w as « das näc hs t e El e m e n t » i s t , das be s uc h t w e r de n so l l § Kö n n e n E n t f e r n e n e i n e s S c h l ü s s e l s w ä h r e n d d e r I te r a t i o n m i t d e r Mo d i f i k a t i o n d e r A b b i l d u n g k o o r d i n i e r e n § Mo d e l l i e r u n g i m P r o g r a m m d u r c h e i n O b j e k t e x e m p l a r § Ex e m pl ar e i ne s T y p s de r I t e r a t i o n r e pr äs e n t i e r t : Iterator 77 It e r a t o r e n § It e r a t o r ( « it e r a t o r ») : E i n Ob j e k t da s ei n em Kl i e n t e n er l a u b t , di e El e m e n t e ei n er An s a m m l u n g zu be s uc he n§ Er i nne r t si c h an di e ( ak t ue l l e ) P o s i t i o n a n d erl a u b t es § auf das El e m e n t an di e s e r Po s i t i o n zu zu g r e i f e n § das E l e m e n t an di e s e r Po s i t i o n zu en t f er n en § ab z uf r ag e n ob es we i t e r e El e m e n t e gi b t § zu r näc hs t e n Po s i t i o n vo r z u r ü c k e n § L i ef e r t ei n en We g ei n e It e r a t io n zu ko n t r o l l i e r e n 78 Be i s p i e l § Ge g e be n s e i e i ne A r r a yL i s t list mi t 6 E l emen t en ( I n t eg er Ob j e k t e ) § Wi r w o l l e n a l l e E l e m e n t e b e s u c h e n § Im A u g e n b l i c k b e a r b e i t e n w i r E l e m e n t 9 79 in d e x 0 1 2 3 4 5 va l u e 3 8 9 7 5 1 2 si z e 6 li st Be i s p i e l § Im A u g e n b lic k b e a r b e it e n w ir E le m e n t 9 § It e r a t o r h ä lt f e s t : a k t u e lle s E le m e n t : 9 , n ä c h s t e s E le m e n t : 7 80 it e r a t o r Ak t u e l l e s El e m e n t : 9 Nä c h s t e s El e m e n t : 7 in d e x 0 1 2 3 4 5 va l u e 3 8 9 7 5 1 2 si z e 6 li st Be i s p i e l § Da n a c h g e h t e s w e i t e r z u El e m e n t 7 § It e r a t o r h ä lt f e s t : a k t u e lle s E le m e n t : 7 , n ä c h s t e s E le m e n t : 5 81 Ak t u e l l e s El e m e n t : 7 Nä c h s t e s El e m e n t : 5 it e r a t o r in d e x 0 1 2 3 4 5 va l u e 3 8 9 7 5 1 2 si z e 6 li st Be i s p i e l § Da n a c h g e h t e s w e i t e r z u El e m e n t 5 § It e r a t o r h ä lt f e s t : a k t u e lle s E le m e n t : 5 , n ä c h s t e s E le m e n t : 1 2 82 Ak t u e l l e s El e m e n t : 5 Nä c h s t e s El e m e n t : 12 it e r a t o r in d e x 0 1 2 3 4 5 va l u e 3 8 9 7 5 1 2 si z e 6 li st Be i s p i e l § Di e se l b e I d e e k ö n n e n w i r b e i e i n e r M e n g e e i n se t z e n § Be i e in e r L is t e b ie t e t s ic h d e r I n d e x a n , d ie R e ih e n f o lg e f e s t z u le g e n § Be i e in e r M e n g e b r a u c h e n w ir e in e n a n d e r e n W e g § Z. B . n a t ü r l i c h e O r d n u n g , H a s h - We r t e , R e i h e n f o l g e d e s E i n f ü g e n s 83 se t \"t h e \" \"t o \" \"f r o m \" \"w e \" Ak t u e l l e s El e m e n t : \" f r o m \" Näc h s t e s El e m e n t : \" t h e \" it e r a t o r \"a \" Be i s p i e l § Je n ac h A r t d e r M e n g e si n d v e r sc h i e d e n e O r d u n g sr e l a ti o n e n (R e i h e n f ol g e n ) m ög l i c h 84 se t \"t h e \" \"t o \" \"f r o m \" \"w e \" \"a \" \"a\" \"t o \" \"f r o m \" \"t h e \" \"w e \" Mö g l i c h e Re i h e n f o l g e it e r a t o r Ak t u e l l e s El e m e n t : \" f r o m \" Näc h s t e s El e m e n t : \" t h e \" 85 se t \"t h e \" \"t o \" \"f r o m \" \"w e \" \"a \" \"f r o m \" \"t h e \" \"t o \" \"w e \" \"a\" it e r a t o r An d e r e mö g l i c h e Re i h e n f o l g e Ak t u e l l e s El e m e n t : \" f r o m \" Näc h s t e s El e m e n t : \" t h e \" § Je n ac h A r t d e r M e n g e si n d v e r sc h i e d e n e O r d u n g sr e l a ti o n e n (R e i h e n f ol g e n ) m ög l i c h It e r a t o r § Ei n Ob j e k t da s ei n em Kl i e n t e n er l a u b t , ei n e It e r a t io n übe r di e El e m e n t e ei n er An s a m m l u n g dur c hz uführ e n § Er i nne r t si c h an di e ( ak t ue l l e ) P o s i t i o n a n d erl a u b t es § auf das El e m e n t an di e s e r Po s i t i o n zu zu g r e i f e n § das E l e m e n t an di e s e r Po s i t i o n zu en t f er n en § ab z uf r ag e n ob es we i t e r e El e m e n t e gi b t § zu r näc hs t e n Po s i t i o n vo r z u r ü c k e n § Iterator<T> is t ei n In t e r f a c e in java.util § Br a u c h e n al s o Ex e m pl ar ei n er Kl a sse , d ie Iterator im p le m e n t ie r t 86 Er s t e l l e n ei n es Iterator Ob j ek ts § Iterator<T> is t ei n In t e r f a c e in java.util § und K l a s s e n de s Collection Fr a m e w or k s im p le m e n t ie r e n Iterator und § Da s Co l l ec t i o n s Fr a m e w or k en t h ä l t di e iterator() Me t h o d e , di e ei n en It e r a t o r lie f e r t mi t de m di e El e m e n t e be s uc h t we r d e n kö n n e n . Set<String> set = new HashSet <String>(); ... Iterator<String> itr = set.iterator (); 87 Iterator Me t h od en § remove() da r f nur au f g e r u f e n we r d e n , na c hde m next() au f g e r u f e n wu r d e – da s ak tu e l l e El e m e n t wi r d en t f er n t § Ex c e p t i o n we n n 2 - ma l oh n e ne ue s next() auf g e r uf e n § Ve r ä n d e r u n g e n si n d nur vi a I t e r a t o r mö g l i c h 88 hasNext () re t u r n s true i f t h e r e a r e m or e e l e m e n t s t o e x a m i n e next() r e t u r n s t h e n e x t e l e m e n t f r om t h e c ol l e c t i on ( t h r ow s a NoSuchElementException i f t h e r e a r e n on e l e f t t o e x a m i n e ) remove() re m ov e s t h e l a s t v a l u e re t u r n e d b y next() ( t h r ow s a n IllegalStateException i f y ou h a v e n ' t c a l l e d next() ye t ) I t e r a t o r e n t h ä l t Zu s t a n d d e r I t e r a t i o n Set<String> set = new HashSet<String>(); Iterator<String> itr = set.iterator (); itr.hasNext (); // true itr.next (); // from 89 \"t h e \" \"t o \" \"f r o m \" \"w e \" \"a \" \"f r o m \" \"t h e \" \"t o \" \"w e \" \"a\" c u r r e nt ne xt has N e xt \"f r o m \" \"t h e \" tru e \"t h e \" \"t o \" tru e \"t o \" \"w e \" tru e \"w e \" \"a\" tru e \"a\" fa l s e Ak t u e l l e s El e m e n t : \" f r o m \" Näc h s t e s El e m e n t : \" t h e \" it r set I t e r a t o r e n t h ä l t Zu s t a n d d e r I t e r a t i o n Set<String> set = new HashSet<String>(); Iterator<String> itr = set.iterator (); itr.hasNext (); // true itr.next (); // from itr.next (); // the 90 \"t h e \" \"t o \" \"f r o m \" \"w e \" \"a \" \"f r o m \" \"t h e \" \"t o \" \"w e \" \"a\" c u r r e nt ne xt has N e xt \"f r o m \" \"t h e \" tru e \"t h e \" \"t o \" tru e \"t o \" \"w e \" tru e \"w e \" \"a\" tru e \"a\" fa l s e Ak t u e l l e s El e m e n t : \" t h e \" Näc h s t e s El e m e n t : \" t o \" it r set I t e r a t o r e n t h ä l t Zu s t a n d d e r I t e r a t i o n Set<String> set = new HashSet<String>(); Iterator<String> itr = set.iterator (); itr.hasNext (); // true itr.next (); // from itr.next (); // the itr.remove (); 91 \"t h e \" \"t o \" \"f r o m \" \"w e \" \"a \" \"f r o m \" \"t h e \" \"t o \" \"w e \" \"a\" c u r r e nt ne xt has N e xt \"f r o m \" \"t h e \" tru e \"t h e \" \"t o \" tru e \"t o \" \"w e \" tru e \"w e \" \"a\" tru e \"a\" fa l s e Ak t u e l l e s El e m e n t : \" t h e \" Näc h s t e s El e m e n t : \" t o \" it r set I t e r a t o r e n t h ä l t Zu s t a n d d e r I t e r a t i o n Set<String> set = new HashSet<String>(); Iterator<String> itr = set.iterator (); itr.hasNext (); // true itr.next (); // from itr.next (); // the itr.remove (); 92 set \"t o \" \"f r o m \" \"w e \" \"a \" \"f r o m \" \"t o \" \"w e \" \"a\" c u r r e nt ne xt has N e xt \"f r o m \" \"t o \" tru e \"t o \" \"w e \" tru e \"w e \" \"a\" tru e \"a\" fa l s e it r Ak t u e l l e s El e m e n t : Näc h s t e s El e m e n t : \" t o \" 93 Iterator Be i s p i e l 1 Ne h me n wi r ei n e Me n g e vo n Pr ü f u n g s e r g e b n i s s e n ( Integer )… . Set<Integer> scores = new TreeSet <Integer>(); scores.add (94); // Lisa scores.add (38); // Kim scores.add (87); // Roy scores.add (43); // Marty scores.add (72); // Marisa 95 Iterator Be i s p i e l 1 ( Te i l 2) Iterator<Integer> itr = scores.iterator (); System.out.println (scores); // [38, 43, 72, 87, 94] Wo l l e n al l e < 5 0 aus de r Me n g e en t f ern en while ( itr.hasNext () ) { int score = itr.next () ; if (score < 50) { // eliminate any failing grades itr.remove (); } } System.out.println (scores); // [72, 87, 94] 96 Iterator Me t h od en § Ei n I t e r a t o r Ex e m p l a r k a n n ei n m al für e i ne I t e r a t i o n ( übe r al l e E l e m e n t e ) v e r w e n d e t w e r d e n ( « si n g l e u se ») § We n n hasNext() da s R e s ul t a t false zu r ü c k g e g e b e n h a t (a l s o d i e An s a m m l u n g a b g e a r b e i t e t w u r d e ) k a n n d e r I t e r a t or ni c h t w e i t e r v e r w e nde t w e r de n um E l e m e n t e z u be a r be i t e n § Ne u e I t e r a t i o n ? n e u e r I t e r a t o r . § Un t e r br e c hung e n ( Aba r be i t e n e i ne r T e i l m e ng e , s pä t e r fo r t f a h r e n , e t c . ) e r l a u b t 99 hasNext () re t u r n s true i f t h e r e a r e m or e e l e m e n t s t o e x a m i n e Iterator Be i s p i e l 2 Ne h me n wi r ei n e Ab b i l d u n g vo n Na me n ( String ) a u f Re s u l t a t e ( Integer )… . Map<String, Integer> scores; scores = new TreeMap <String, Integer>(); scores.put (\"Kim\", 38); scores.put (\"Lisa\", 94); scores.put (\"Roy\", 87); scores.put (\"Marty\", 43); scores.put (\"Marisa\", 72); 100 Iterator Be i s p i e l 2 Map<String, Integer> scores; scores = new TreeMap <String, Integer>(); scores.put (\"Kim\", 38); scores.put (\"Lisa\", 94); scores.put (\"Roy\", 87); scores.put (\"Marty\", 43); scores.put (\"Marisa\", 72); 38 43 72 87 94 \"M ar i s a\" \"K i m \" \"L i s a\" \"M ar t y \" \"R o y \" 101 Iterator Be i s p i e l 2 38 43 72 87 94 \"M ar i s a\" \"K i m \" \"L i s a\" \"M ar t y \" \"R o y \" scores.keySet (): [Kim, Lisa, Marisa, Marty, Roy] 102 Iterator Be i s p i e l 2 ( Te i l 2) Iterator<String> itr = scores.keySet ().iterator(); System.out.println ( scores.keySet ()); // [Kim, Lisa, Marisa, Marty, Roy] while ( itr.hasNext () ) { String name = itr.next () ; int score = scores.get (name); System.out.println (name + \" got \" + score); if (score < 50) { // eliminate any failing students itr.remove (); // removes name and score } } System.out.println (scores); // {Lisa=94, Marisa=72, Roy=87} 104105 Iterator Be i s p i e l 2 – Ha sh M a p V a r i a ti o n scores = new Hash Map<String, Integer>(); Pr og r a m m un v e r ände r t – und gl e i ch e s Re s u l t a t abe r ande r e Re i h e n f o l g e de r It e r a t i o n Iterator<String> itr = scores.keySet ().iterator(); System.out.println ( scores.keySet ()); // [Marisa, Marty, Roy, Kim, Lisa] while ( itr.hasNext () ) { String name = itr.next () ; int score = scores.get (name); System.out.println (name + \" got \" + score); if (score < 50) { // eliminate any failing students itr.remove (); // removes name and score } } System.out.println (scores); // 107 W a s he is s t « ä nde r n» ? § Ei n e A b b i l d u n g b e s t e h t a u s A sso z i a t i o n e n ( K e y à Va l u e ) . § Mi t t e l s e i n e s I t e r a t o r s k ö n n e n w i r i n e i n e m L o o p ( ü b e r a l l e K e y s ) e i n e A s s o z i a t i o n ( k à v) en t f er n en § Wi r k ö n n e n a u c h e i n e A s s o z i a t i o n ( k à v) v e r ä n d e r n (« re p l a c e » ), d . h . f ü r d e n K e y k w ir d d e r W e r t v d u r c h w e r s e t z t so d a ss n u n ( k à w) i n d e r A b b i l d u n g i s t . § Au c h i n fo r - ea c h - Lo o p 108 W a s he is s t « ä nde r n» ? § Wi r k ö n n e n a u c h d i e A s s o z i a t i o n ( k à v) v e r än d e r n – da nn is t ( k à w) i n d er A b b i l d u n g § Ve r ä n d e r u n g e n h a b e n k e i n e n E i n f l u s s a u f d i e R e i h e n f o l g e de s E i n füg e ns . scores = new LinkedHash Map <String, Integer>(); // init as before System.out.println ( scores.keySet ()); scores.replace (\"Marty\", 55); System.out.println (scores); 109 Iterator Be i s p i e l 3 V a ri a t i on (R e s t wi e vo r h e r ) while ( itr.hasNext ()) { String name = itr.next (); int score = scores.get (name); System.out.println (name + \" got \" + score); if (score < 50) { // raise any failing students scores . replace (name, score+10); } } 111 scores : R e f e r e n z v a r i a b l e d e r A b b i l d u n g Ni c h t mö g l i c h wä r e ne ue r Ei n t r a gwhile ( itr.hasNext ()) { String name = itr.next (); int score = scores.get (name); System.out.println (name + \" got \" + score); if (score < 50) { //raise grade, record old one scores . replace (name, score+10); scores . put (\"OLD \" + name, score); } } 113 Er gi b t wi e d e r Lauf z e i t - fe h l e r da e s ke i n e n E i nt r a g fü r di e s e n St r i ng gi b t ! | Exception java.util.ConcurrentModificationException | at TreeMap$PrivateEntryIterator.nextEntry (TreeMap.java:1208) | at TreeMap$KeyIterator.next (TreeMap.java:1262) | at (#48:2) Ni c h t mö g l i c h wä r e ne ue r Ei n t r a gwhile ( itr.hasNext ()) { String name = itr.next (); int score = scores.get (name); System.out.println (name + \" got \" + score); if (score < 50) { //raise grade, record old one itr.remove (); scores.put (name, score+10); } } 114 Er g i b t wi ed er La u f z e i t - fe h l e r . | Exception java.util.ConcurrentModificationException | at TreeMap$PrivateEntryIterator.nextEntry (TreeMap.java:1208) | at TreeMap$KeyIterator.next (TreeMap.java:1262) | at (#70:2) Zu s a m m e n f a s s u n g Iterator § It e r a t o r en t k o p p el t Ab a r b e i t e n / Bes u c h en de r El e m e n t e ei n er An s a m m l u n g vo n d e n D e t a i l s d e r Da r s t e l l u n g § Kl i e n t mu s s ni c h t ge ä n d e r t we r d e n we n n si c h di e Dar s t e l l ung ände r t § … od e r di e Or d n u n g s r e l a t i o n § It e r a t o r er l a u b t En t f e r n e n od e r Ve r ä n d e r n ei n er As s o z i a t i on in d e r Sc h l e i f e § … abe r ke i n e ne ue n Ei n t r äg e 116 Üb e r s i c h t § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 6 It e r a t o r e n und Co mp a r a t o r en § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 117 10. 6 It e r a t o r e n und Co mp ar a t o r e n 118 10. 6. 2 Co mp ar a t o r e n 119 Ko n t r o l l e d e r P r o g r a m m a u s f ü h r u n g § It e r a t o r Ob j e k t mo d el l i er t It e r a t io n übe r al l e El e m e n t e ei n er An s a m m l u n g § D. h . Kl i e n t e n ka n n ei n e It e r a t i o n übe r di e El e m e n t e ei n er An s a m m l u n g dur c hz uf ühr e n § Gu t e r Se r vi c e : Collection en t h ä l t ( ab s t r ak t e ) Met h o d e iterator() § Im p l e m e n t i e r t vo n al l e n Kl a sse n d i e d a s I n t e r f a c e im p le m e n t ie r e n § Di e se Id e e ( ei n Ob j e k t mo d el l i er t ei n en As p e k t de r Pr o gr a m m a us führ ung ) kö n n e n wi r au c h in an d e r e n Si tu a ti o n e n ei n s e t z en 120 Wi r e r i n n e r n u n s … Re i h e n f o l g e d e r I t e r a t i o n Wi r d ei n Collection Ob j e k t au sg e g e b e n od e r in ei n em fo r - each Lo o p be a r be i t e t , da nn gi l t für di e Re i h e n f o l g e : § TreeSet – au f s t e i g e n d na c h na t ür l i c he r Or d n u n g ( de fi ni e r t dur c h compareTo ). Wi e k ö n n e n w i r d a s ä n d e r n ? 121 § Di e « n a t ü r l i c h e O r d n u n g » i s t d u r c h compareTo() de fi ni e r t § Kö n n te n a l s o d i e s e M e t h o d e n e u / a n d e r s d e f i n i e r e n § Di e s e Ä nde r ung g i l t dann abe r übe r al l ( f ür Ex e m pl ar e di e s e r K l as s e n) § An d e r e r An s a t z : O b j e k t E x e m p l a r d a s « V e r g l e i c h » m od e l l i e r t § In t e r f a c e Comparator<T> § Ex e m pl ar das Comparator im p le m e n t ie r t b e s t im m t e Or d n u n g s r e l a t i o n § Äh n l i c h w i e Iterator fü r It e r a t i o n 122 In t e r f a c e Comparator<T> § Mu s s Me t h o d e compare() im p le m e n t ie r e n d ie z w e i Ob j e k t e v e r g l e i c h t ( R e t u r n v a l u e : int ) § compare( A , B ) lie f e r t : ei n en We r t < 0 we n n A « vo r » B in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n A « nac h » B in d e r Or d n u n g s r e l a t i o n is t , ei n en We r t > 0 we n n A und B in d e r Or d n u n g s r e l a t i o n « gl e i ch » si n d 123 compare( T o 1, T o 2 ) C om p a r e s i t s t w o a r g u m e n t s f or or d e r . Be i s p i e l § Ei n e M e n g e v o n Da t e n sä t z e n m i t P r ü f u n g se r g e b n i sse n § St a t t i n e i n e r A b b i l d u n g sp e i c h e r n w i r e i n e M e n g e v o n P a a r e n (N a m e, P u n k t e) § Wo l l e n v i e l l e i c h t d e n D a t e n s a t z a u f N o t e n ( 1 . . 6 . 0 ) a b b i l d e n … 124 public class Student { String name; Integer points; Student() { name = null; points = null; } Student(String n, Integer p) { name=n; points=p; } public String toString () { return name + \":\" + points; } } // end Student Or d n u n g n a c h P u n k t en § Wo l l e n d i e D a t e n s ä t z e d e n P u n k t e n n a c h o r d n e n import java.util .*; public class StudentComparatorPoints implements Comparator<Student> { public int compare(Student s1, Student s2) { return s1.points - s2.points; } } § Ex e m p l a r d i e se r K l a sse P a r a m e t e r d e s TreeSet Ko n s t r u k t o r s 125126 Or d n u n g n a c h P u n k t en § Ex e m p l a r d i e se r K l a sse P a r a m e t e r d e s TreeSet Ko n s t r u k t o r s Comparator<Student> htc ; // how to compare htc = new StudentComparatorPoints (); Set<Student> scores = new TreeSet <Student>( htc ); § Da n n w e i t e r w i e v o r h e r 127 scores.add (new Student(\"Kim\", 38)); scores.add (new Student(\"Lisa\", 94)); scores.add (new Student(\"Roy\", 87)); scores.add (new Student(\"Marty\", 43)); scores.add (new Student(\"Marisa\", 72)); Or d n u n g n a c h P u n k t en , Fo r t s e t z u n g System.out.println (scores); for (Student s : scores) { System.out.println ( s.name + \" got \" + s.points + \" points\"); } § Re i h e n f o l g e ( d e r I t e r a t i o n ) bl a nk bl a nk bl a nk bl a nk bl a nk bl a je t zt n a ch e rzi e l t e n P u n k t e n 128 Or d n u n g n a c h Na m en § compare() für na t ür l i c he ( String ) O r d u n g : public class StudentComparatorName implements Comparator<Student> { public int compare(Student s1, Student s2) { return s1.name.compareTo(s2.name); } } § Or d n u n g je t zt wi e mi t compareTo () ba s i e r e nd au f Str i n g : Comparator<Student> htc ; // how to compare htc = new StudentComparator Name (); Set<Student> scores = new TreeSet <Student>( htc ); // init omitted System.out.println (scores); 129 § Und w e nn w i r di e L ä ng e de s N a m e ns v e r w e nde n w o l l e n? public class StudentComparatorLength implements Comparator<Student> { public int compare(Student s1, Student s2) { return s1.name.length() - s2.name.length(); } } § Ne u e Or d n u n g : Comparator<Student> htc ; // how to compare htc = new StudentComparator Length (); Set<Student> scores = new TreeSet <Student>( htc ); System.out.println (scores); 130 scores.add (new Student(\"Kim\", 38)); scores.add (new Student(\"Lisa\", 94)); scores.add (new Student(\"Roy\", 87)); scores.add (new Student(\"Marty\", 43)); scores.add (new Student(\"Marisa\", 72)); § Wa s w i r d a u s g e g e b e n ? public class StudentComparatorLength implements Comparator<Student> { public int compare(Student s1, Student s2) { return s1.name.length() - s2.name.length(); } } Comparator<Student> htc ; // how to compare htc = new StudentComparator Length (); Set<Student> scores = new TreeSet <Student>( htc ); System.out.println (scores); 131 scores.add (new Student(\"Kim\", 38)); scores.add (new Student(\"Lisa\", 94)); scores.add (new Student(\"Roy\", 87)); scores.add (new Student(\"Marty\", 43)); scores.add (new Student(\"Marisa\", 72)); Po l l § Und w e nn w i r di e L ä ng e de s N a m e ns v e r w e nde n w o l l e n? public class StudentComparatorLength implements Comparator<Student> { public int compare(Student s1, Student s2) { return s1.name.length() - s2.name.length(); } } § Ne u e Uno r dnung : Comparator<Student> htc ; // how to compare htc = new StudentComparator Name (); Set<Student> scores = new TreeSet <Student>( htc ); System.out.println (scores); § de nn \" Kim \" u n d \" Roy \" si n d « gl e i c h » u n d d e r Ei n t r a g für \" Roy \" wi r d ig n o r ie r t da \" Kim \" sc h o n in d e r Me n g e is t . § Oo o o p s . 132 Po l l Be m e r k u n g e n § compareTo(T other) ha t e i ne n P a r a m e t e r § De r ande r e i s t de r i m pl i z i t e P ar am e t e r de s Ex e m pl ar s f ür das di e Met h o d e a u f g e r u f e n w i r d § compare(T o1, T o2) ha t z w e i P a r a m e t e r § Comparable<T> mu s s v o n d er K l a s s e ( d er E x a mp l a r e, d i e s o r t i e r t w e r d e n s o l l e n ) i m p l e m e n t i e r t w e r d e n § Fü r d i e s e E x e m p l a r e i m m e r d i e s e l b e O r d n u n g s r e l a t i o n § Comparator<T> ei g en e K l a s s e, E x emp l a r f ü r Collection Ko n s t r u k t o r § Ka n n ( z . B . ) TreeMap und TreeSet un t e r s c hi e dl i c h s o r t i e r e n 133 Ano n y m e O bj e k t e § De r C o m p a r a t o r e x i s t i e r t n u r , u m a l s P a r a m e t e r a n d e n TreeSet Ko n s t r u k t o r ü b e r g e b e n z u w e r d e n § Of t s e h e n S i e i n P r o g r a mme n d a s s e i n « a n o n y me s » Ob j e k t da für e r s t e l l t w i r d scores = new TreeSet <Student>( new Comparator<Student>() { public int compare(Student s1, Student s2) { return s1.points - s2.points; } } ); § Dann br auc he n w i r ( e v t l . ) k e i ne s e par a t e K l as s e 134 § It e r a t o r e r la u bt M o d if ik a t io n e n d e r E le m e n t e d e r M e n g e bz w . E i n t r ä g e d e r A b b i l d u n g § Ei ns c hr änk ung e n § Co mp a r a t o r b i e t e t F l e x i b i l i t ä t b ei A u s w a h l d er Or d n u n g § Me h r e r e Or d n u n g s r e l a t i o n e n m ö g l i c h 135 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 10. 0 Gen er i s c h e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2016 — 2022 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 10. 1 Ei n l e i t u n g § 10. 2 Ar r a y L i s t <T y p e> § 10. 3 Ve r g l e i c h e n vo n Ob j e k t e n § 10. 4 M e n g e n § 10. 5 Ab b i l d u n g e n § 10. 6 It e r a t o r e n § 10. 7 I m p l e m e n t a t i o n ei n es ei n f a c h en ge n e r i s c h e n Ty p s 2 Lis t + A r r a y à Ar r a y L is t à Ar r a y L is t < T> § Ab s t r a k t i on d e r L i s t e § Im p le m e n t a t io n mi t f i x em A r r a y § Fl e xi b l e Ar r a y s § Ty p p a r a m e t e r 3 ArrayIntList à ArrayList<E> § Wi r w o l l e n d i s k u t i e r e n w i e e i n e ArrayList<E> im p le m e n - ti e r t w e r d e n kö n n t e n § Zi e l : d i e p r i n z i p i e l l e n Sc h r i t t e , n i c h t al l e D e t ai l s § Be s c h r ä n k u n g a u f e in ig e w ic h t ig e A s p e k t e § Nu r e i n z e l n e M e t h o d e n § De c k t si c h n i c h t i m m e r m i t ArrayList<E> au s d e m Co l l ec t i o n s F r a me w o r k § Ei ni g e A s pe k t e s i nd auc h ni c h t f e s t g e l e g t b z w . ö f f e n t l i c h 4 Di e Kla s s e LinkedIntList § Wi r en t wi c k el t en ei n e Kl as s e di e di e Kn o t e n mi t int We r t e n ve r s t e c k t : LinkedIntList § Ve r w e n d e t ListNode Ob j e k t e zu r Da r s t e l l u n g de r Li s t e fr o n t Li n k ed I n t Li s t Li s t N o d e Li s t N o d e Li s t N o d e da t a ne x t 42 da t a ne x t - 3 da t a ne x t 17 5 LinkedIntList Kla s s e public class ListNode { int data ; ListNode next ; } public class LinkedIntList { private ListNode front; public LinkedIntList () { front = null; } // Methoden fr o n t = Li n k ed I n t Li s t 6 Me t h o d e n de r Kl a s s e LinkedIntList int get(int index) { … } void set(int index, int value) { … } boolean isEmpty () { … } void add(int value) { … } int removeFirst () { … } int removeLast () { … } void clear() { … } int[] toArray () { … } String toString () { … } 8 § Je tz t : ei n In t e r f a c e ( IntList ) u n d ei n e Kl as s e ( LinkedIntList ), d i e d i e s e s I n t e r f a c e im p le m e n t ie r t § In t e r f a c e IntList en t h ä l t di e Me t h o d e n , d i e ei n e LinkedIntList au sm ac h e n . § Met h o d e n mü s s e n dann Si c h t b a r k e i t public habe n – ke i n Pr ob l e m 9 Me t h o d e n de s I n t e r f ac e s IntList public interface IntList { public int get(int index) ; public void set(int index, int value) ; public boolean isEmpty () ; public void add(int value) ; public int removeFirst () ; public int removeLast () ; public void clear() ; public int[] toArray () ; public String toString () ; } 10 LinkedIntList mi t In t e r f a c e /** * A singly - linked list of integer values */ public class LinkedIntList implements IntList { public int get( int index) { .. } public void set(int index, int value) { .. } public void add(int value) { .. } … // constructors … /** * For internal use only. */ private ListNode getNode (int index) { .. } private ListNode front; public ListNode last; } 11 Ei n e a n d e r e I m p l e m e n t a t i o n … § St a t t e i n e r K e t t e v o n K n o t e n k ö n n t e n w i r e i n e n A r r a y be nut z e n § De r A r r a y sp e i c h e r t d i e W e r t e § Wi r ma c h e n d e n A r r a y a m A n f a n g g e n ü g e n d g r o s s § Nu r d i e A r r a y e l e me n t e [0 .. (size - 1)] si n d r e l e v a n t , d e r R e s t ung e nut z t § Ne n n e n w i r d i e K l a s s e ArrayIntList 12 Neu e K l a sse class ArrayIntList implements IntList {…} § An d e r e I m p l e m e n t a t i on a l l e r M e t h od e n § Kl i e n t e n s i n d d a v o n n i c h t b e tr o f f e n § De nn s i e s o l l t e n m i t de m I n t e r f ac e IntList ar be i t e n, ni c h t m i t de r Kl a sse § IntList myList = new LinkedIntList (); § IntList myList = new ArrayIntList(); 13 Neu e K l a sse class ArrayIntList implements IntList {…} § An d e r e I m p l e m e n t a t i on a l l e r M e t h od e n § Kl i e n t e n s i n d d a v o n n i c h t b e tr o f f e n § De nn s i e s o l l t e n m i t de m I n t e r f ac e IntList ar be i t e n, ni c h t m i t de r Kl a sse § IntList myList = new ArrayIntList(); § Vi e l l e i ch t b r a u ch e n O p e r a t i o n e n w e n i g e r Z e i t § Ma n c h m a l n u r k o n s t a n t e r F a kt o r f ü r B i g - O – abe r w i c h t i g i n de r Pr a x i s 14 ArrayIntList public class ArrayIntList implements IntList { /** * For internal use only. */ private int[] data = new int[100]; private int size = 0; // constructors … // methods 15 add(int v) Wi e wü r d en wi r ei n en We r t a m E n d e d e r Li s t e hi nz ufüg e n ? add( 42 ) 16 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 0 0 0 0 si z e 6 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 42 0 0 0 si z e 7 add(int v) public void add( int value) { data[size] = value; size++; } 17 add(int pos, int v) Wi e wü r d en wi r ei n en We r t i n d e r M i t t e d e r Li s t e hi nz ufüg e n ? add(3, 42 ) 18 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 0 0 0 0 si z e 6 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 42 7 5 12 0 0 0 si z e 7 add(int pos, int v) § El e m e n t e in d e r M it t e ei n f ü g en is t ni c h t ei n f a c h § « re c h t s » d e r Ei n f üg e po s i t i o n mü s s e n di e El e m e n t e ve r s c h o b e n we r d e n § Re i h e n f o l g e is t kr i t i s ch public void add( int pos, int v) { for ( int i = size; i > pos; i -- ) { data[ i ] = data[ i - 1]; } data[pos] = v; size++; } 19 remove(int pos) § Wi e k ö n n e n w i r e i n E l e m e n t a u s d e r L i s t e e n t f e r n e n ? remove(2) 20 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 0 0 0 0 si z e 6 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 7 5 12 0 0 0 0 0 si z e 5 remove(int pos) § Wi r m ü s s e n ( w i e d e r ) E l e m e n t e v e r s c h i e b e n § Na c h «l i n k s » § In w e l c h e r R e i h e n f o l g e ? public void remove( int pos) { for ( int i = pos; i < size; i ++) { data [ i ] = data [ i + 1]; } size -- ; data [size] = 0; // optional (why?) } 21 We i t e r e M e t h o d e n … public int get( int index) { … } public void set( int index, int value) { … } public boolean isEmpty () { … } public int size() { … } public String toString () { … } 22 Au s g a n g s l a g e : Kl a s s e ArrayIntList public class ArrayIntList { /** * For internal use only. **/ private int[] data = new int[100]; private int size = 0; // constructors … // methods 24 Pr o bl e m : § In i t i a l i s i e r u n g d u r c h « In i t i a l i z e r Blo c k » § Un v e r ä n d e r b ar Lö s u n g : § Ko n s t r u k t o r Ko n s t r u k t o r ( e n ) § De f a u l t ( p a r a m e t e r l o se r ) K o n s t r u k t o r ( f a s t ) i m m e r e i n e g u t e Id e e 25 Kl a s s e ArrayIntList class ArrayIntList implements IntList { /** * For internal use only. **/ private int[] data ; private int size ; ArrayIntList () { data = new int [100]; size = 0; } // methods 26 Ko n s t r u k t o r ( e n ) § Di e se s De si g n e r l a u b t d e m K l i e n t e n n i c h t , Ei n f l u ss a u f d i e An f a n g s g r ös s e z u n e h m e n § Wa s w e n n d e r K l i e n t « w e i s s » d a s s 1 0 0 0 E l e m e n t e g e s p e i c h e r t we r d e n m ü s s e n ? § Wi r s e h e n ( s p ä t e r ) w i e w i r d i e G r ö s s e d e s A r r a ys data anpas s e n kö n n e n , a b e r A n p a s s u n g e n s i n d ni c h t um s ons t § Al s o d e f i n i e r e n w i r e i n e n w e i t e r e n K on s t r u k t or § Un d de f i ni e r e n e i ne S t andar d (a n f a n g s ) ka p a z i tä t § So l l ni c h t ve r ä n d e r b a r s e i n : static final § Ka n n d a n n public se i n 27 ArrayIntList public class ArrayIntList implements IntList { public static final int DEFAULT_CAPACITY = 100; private int[] data ; private int size ; ArrayIntList () { this (DEFAULT_CAPACITY); } ArrayIntList ( int capacity) { data = new int [capacity]; size = 0; } 28 ArrayIntList (B a si s Zusam m e n f assung ) // Adds value to end of List // For now: no checks public void add ( int value) { data[size] = value; size++; } //Adds value to position, shifts values with higher index public void add( int position, int value) { for (int i = size; i > position; i -- ) { data[ i ] = data[ i - 1]; } data[position] = value; size++; } // Removes first item selected by index // List must not be empty public void remove( int position) { for ( int i = position; i < size; i ++) { data[ i ] = data[ i + 1]; } data[size - 1] = 0; // optional (why?) size -- ; } 31 ArrayIntList (B a si s T e i l 2 ) // uses - 1 as indication of failure public int indexOf (int value) { for (int i = 0; i < size; i ++) { if (data[ i ] == value) { return i ; } } return - 1; } // Returns value in list // at given index // 0 <= index < size() public int get(int index) { return data[index]; } 32 public String toString () { if (size == 0) { return \"[]\"; } else { String result = \"[\" + data[0]; // fencepost for (int i =1; i <size; i ++) { result += \", \" + data[ i ]; } result += \"]\"; return result; } } Se r vi c e M e t h o d e n § Ei n K l i e n t k a n n a u f j e d e s El e m e n t z u g r e i f e n § Mi t t e l s get(index) § Ab e r w i e w e i s s d e r K l i e n t w i e v i e l e E l e m e n t e i n d e r L i s t e s i n d ? § Kl i e n t k ö n n t e /m ü ss t e A n z a h l E l e m e n t e n a c h f ü h r e n § Ei ns c hr änk ung f ür K l i e n t e n § Ka n n n i c h t d a s size At t r i b u t l e s e n ( i s t a u s g u t e n G r ü n d e n private ) § Dar um A c c e s s o r F unk t i o n size() 33 Mi t ArrayIntList Ex e m p l a r e n a r b e i t e n § Ei n e si n n v o l l e M e t h o d e i s t , d i e El e m e n t e e i n e r L i s t e a n e i n e an d e r e L i s t e an z u h än g e n § Met h o d addAll(ArrayIntList other) 34 ArrayIntList // Accessor for size public int size() { return size; } // Liste other darf nicht null sein public void addAll ( ArrayIntList other) { for ( int i = 0; i < other.size ; i ++) { add( other.data [ i ]); } } } // ArrayIntList 35 We n n e s k e i n e n P l a t z m e h r g i b t … add(15) 36 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 4 8 1 6 si z e 10 in d e x 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 dat a 3 8 9 7 5 12 4 8 1 6 15 0 0 0 0 0 0 0 0 0 si z e 11 add(int v) public void add( int value) { data[size] = value; size++; } 37 § We n n size==data.length da nn gi b t e s z ur L a uf z e i t e i ne ( ArrayIndexOutOfBounds ) Exception Anpa s s e n de r Gr ö s s e § Mü s s e n d i e G r ö s s e a n p a s s e n be v o r ve r s u c h t w i r d , i n e i n e m ni c h t - ex i s t i e re n d e s E l e m e n t d e s A r r a y s data ei n en W er t z u sp e i c h e r n § Sc h r i t t 1 : W e n n k e i n P l a tz i s t: E n d e d e r P r o g r am m au s f ü h r u n g § Sc h r i t t 2 : W e n n k e i n P l a tz i s t: m e h r P l a tz sc h a f f e n 38 Sc h ri t t 1 : K o n t r o l l i e rt e r A b b ru c h § Pr o gr a m m w i l l übe r Gr und de s Abbr uc hs i n f o r m i e r e n § Ni c h t e i n f a c h a u f n i c h t - vo r h a n d e n e s A r r a y e l e m e n t i n data zu g r e i f e n § Hä t t e ArrayIndexOutOfBoundsException zu r F ol g e § L ö s u n g : s e l b e r E x c e p t i o n w e r f e n b e v o r i l l e g a l e r Z u g r i f f er f o l g t § We l c h e E x c e p t i o n ? § Ei g e ne : m us s dann ang e k ündi g t w e r de n § Be s s e r : IllegalStateException : E i n M e t h o d e n a u f r u f i s t i l l e g a l od e r w i r d zu r U n z e i t g e m a c h t 3940 checkCapacity( int target) § Me t h o d e d i e p r ü f t o b n o c h g e n ü g e n d P l a t z i m data Ar r a y i s t § Si c h t b a r k e i t so l l t e private se i n § Zw e c k i s t V e r e i n f a c h u n g d e r I m p l e m e n t a t i o n , n i c h t f ü r K l i e n t e n § Wi r f t IllegalStateException we n n n i c h t g e n u g P l a t z private void checkCapacity ( int target) { if (target > data.length ) { throw new IllegalStateException (); } } 41 Be t r o f f e n e M e t h o d e n § Ei n i g e M e t h o d e n m ü sse n j e t z t checkCapacity au f r u f e n : § add( v al ue ) public void add (int value) { checkCapacity (size+1); data[size++] = value; } § add( po s i t i o n, v al ue ) – ge n a u s o § addA l l ( o t he r ) public void addAll ( ArrayIntList other) { checkCapacity ( size+other.size ); for (int i = 0; i < other.size ; i ++) { add( other.data [ i ]); } } 42 Be s s e r e I m p l e m e n t a t i o n checkCapacity § St a t t d e s p ar am e t e r l o se n D e f au l tk o n s tr u k t o r s k ö n n e n w i r de n K o ns t r uk t o r ne hm e n de r e i ne n S t r i ng a k z e p t i e r t private void checkCapacity (int target) { if (target > data.length ) { throw new IllegalStateException ( \"Insufficient capacity of list. Needed: \" + target + \" Elements\" ); } } § Bei s p i el Exception in thread \"main\" java.lang.IllegalStateException : Insufficient capacity of list. Needed: 14 Elements at ArrayIntList.checkCapacity (ArrayIntListDriver.java:138) at ArrayIntList.addAll (ArrayIntListDriver.java:130) at ArrayIntListDriver.main (ArrayIntListDriver.java:42) 43 Sc h ri t t 2 : m e h r Pl a t z s c h a f f e n An s t a t t checkCapacity (target) ei n e M e t h o d e d i e ei n en ne ue n A r r a y data er s t el l t : public void ensureCapacity (int target) { if (target > data.length ) { int newCapacity = data.length * 2 + 1; if (target > newCapacity ) { newCapacity = target; } data = Arrays.copyOf (data, newCapacity ); } } 44 int[] newData = new int[newCapacity]; for (int i = 0; i<size; i++) { newData[i] = data[i]; } data = newData; 45 § Me h r P l a t z s c h a f f e n e r f o r d e r t K o p i e r e n d e r a l t e n W e r t e § Dahe r V e r do ppe l ung de r G r ö s s e § Ab e r a u c h a n d e r e s S tr a t e g i e n m ög l i c h ( z . B . * 1.5 ) § Am or ti s i e r e n d e s O v e r h e a d s § Kl i e n t k ö n n t e d i e s e M e th o d e b e n u tz e n § We n n d e r K l i e n t w e i s s , w i e v i e l e E l e m e n t e ( d e m n ä c h s t ) h i n z u g e f ü g t we r d e n s o l l e n § Dahe r S i c h t bar k e i t public § Si e h e ensureCapacity (target) in ArrayList <E> aus java.util 46 ArrayList<E> § St a t t ArrayIntList ei n e g en er i s c h e K l a s s e d e f i n i er en § Er s e t z e int dur c h <E> wo E l e m e n t e b e t r o f fe n s i n d § Ni c h t P o s i t i o n o d e r G r ö s s e ( a l s o E[] data et c . ) § ArrayIntList() Ko n s t r u k t o r w i r d ArrayList() § ArrayIntList(int capacity) wi r d z u ArrayList (int capacity) { data = new E[capacity]; //see next slide size = 0; } § Üb e r a r b e i t e t e s addAll : addAll ( ArrayList <E> other) § Fa s t al l e s … de nn es gi b t ei n Pr o bl e m 47 Ar r a y s m it g e ne r is c he n T y pe n § Ja v a l äss t n i c h t z u e i n e n g e n e r i sc h e n A r r a y z u e r s t e l l e n ArrayListDriver.java:66: error: generic array creation data = new E[capacity]; ^ § Es i s t a b e r m ö g l i c h e i n e n A r r a y Object[] zu e r s t e l l e n u n d di e s e n m i t t e l s C a s t i n e i ne n A r r a y E[] zu v e r w a n d e l n ArrayList ( int capacity) { data = (E[]) new Object[capacity]; size = 0; } 48 Be m e r k u n g § Au c h d a s E r s t e l l e n e i n e s g e n e r i s c h e n O b j e k t s i s t n i c h t m ög l i c h class Test<T> { T foo() { return new T(); //not allowed } } § Ei n C a s t i s t n o t w e n d i g class Test<T> { T foo() { return (T) new Object(); //allowed } } 49 Da s i s t f a s t a l l e s … § Da s J a v a k e i n e g e n e r i sc h e n A r r a y s d i r e k t e r s t e l l e n k a n n h a t kl e i n e r e F ol g e n – Pr o gr a m m w i r d m i t W a r nung übe r s e t z t : ArrayListDriver.java:67: warning: [unchecked] unchecked cast data = (E[]) new Object [capacity]; | ^ | required: E[] | found: Object[] | where E is a type - variable: E extends Object declared in class ArrayList § Bes c h r ä n k u n g d es J a v a T y p S y s t ems : i g n o r i er en § Au c h d a f ü r g i b t e s e i n e An n ot a ti on @ SuppressWarnings (\"unchecked\") ArrayList ( int capacity) { … } 50 We i t e r e A n p a s s u n g e n § Di e M e t h o d e contains(value) lie f e r t d ie P o s it io n d e s er s t en A u f t r e t en s ( o d er - 1 w e n n value ni c h t i n de r L i s t e ) § De r T e s t w ur de m i t == ge m a c ht § Gu t e W a h l f ü r int , n ic h t a b e r f ü r R e f e r e n z e n § Mü s s e n equals(Object) ve r w e n d e n // uses - 1 as indication of failure public int indexOf (E value) { for ( int i = 0; i < size; i ++) { if (data[ i ]. equals (value)) { return i ; } } return - 1; } 51 § In M e t h o d e remove(position) wa r ü b e r s c h r e i b e n d e s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t mu ss di e s e r S c hr i t t dur c hg e führ t w e r de n data[size - 1] = null; // mandatory 52 0 1 2 3 4 5 6 7 8 9 3 - 5 7 42 0 0 0 0 0 0 § Wa s p a s s i e r t e w e n n das int El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) § In M e t h o d e remove(position) wa r ü b e r s c h r e i b e n d e s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t m u ss d i e se r Sc h r i t t d u r c h g e f ü h r t w e r d e n data[size - 1] = null; // mandatory 53 0 1 2 3 4 5 6 7 8 9 3 - 5 7 42 0 0 0 0 0 0 § Wa s p a s s i e r t e w e n n das int El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) § In M e t h o d e remove(position) wa r ü b e r s c h r e i b e n d e s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t m u ss d i e se r Sc h r i t t d u r c h g e f ü h r t w e r d e n data[size - 1] = null; // mandatory 54 0 1 2 3 4 5 6 7 8 9 3 7 42 42 0 0 0 0 0 0 § Wa s p a s s i e r t e w e n n das int El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) § Zw e i m a l 4 2 i m Ar r a y § In M e t h o d e remove(position) wa r ü b e r s c h r e i b e n d e s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t m u ss d i e se r Sc h r i t t d u r c h g e f ü h r t w e r d e n data[size - 1] = null; // mandatory 55 0 1 2 3 4 5 6 7 8 9 nul l nul l nul l nul l nul l nul l § Wa s p a s s i e r t w e n n das < E> El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) A someE B someT C someT D someT § In M e t h o d e remove (position ) wa r übe r s c hr e i be n de s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t m u ss d i e se r Sc h r i t t d u r c h g e f ü h r t w e r d e n data[size - 1] = null; // mandatory 56 0 1 2 3 4 5 6 7 8 9 nul l nul l nul l nul l nul l nul l § Wa s p a s s i e r t w e n n das < E> El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) A someT B someT C someT D someT § In M e t h o d e remove(position) wa r ü b e r s c h r e i b e n d e s al t e n A r r a y e l e m e n ts o p ti o n al data[size - 1] = 0; // optional (why?) § Je tz t m u ss d i e se r Sc h r i t t d u r c h g e f ü h r t w e r d e n data[size - 1] = null; // mandatory 57 0 1 2 3 4 5 6 7 8 9 nul l nul l nul l nul l nul l nul l § Wa s p a s s i e r t w e n n das < E> El e m e n t ni c h t übe r s c hr i e be n w i r d? remove(1) § Zw e i V e r w e i s e a u f Ob j e k t D A someT B someT uner - reichbar C someT D someT § Me h r e r e V e r w e i s e a u f O b j e k t D s i n d p r o b l e m a t i s c h w e n n s p ä t e r D a u c h e n t f e r n t w e r d e n s o l l § Ga r ba g e C o l l e c t o r k a nn ni c h t f e s t s t e l l e n da s s D une r r e i c hba r is t § El e m e n t e de s A r r a y s data ve r w e i s e n a u f E x e m p l a r u n d d e r G a r b a g e Co l l e ct o r « w e i ss» n i ch t , d a ss k e i n Z u g r i f f ( d u r ch d i e se E l e m e n t e ) erf o l g en k a n n 58 ArrayList <E> public class ArrayList <E> { public static final int DEFAULT_CAPACITY = 100; private E[] data ; private int size ; ArrayIntList () { this (DEFAULT_CAPACITY); } ArrayIntList ( int capacity) { data = (E[]) new Object[capacity]; size = 0; } public void add (E value) {..} public void add(int pos, E value) { .. } public E get(int index) { .. } public void addAll ( ArrayList <E> other) { .. } public int indexOf (E value) { for (int i = 0; i < size; i ++) { if (data[ i ].equals(value)) { return i ; } } return - 1; } 60 Di s k u s s i o n § ArrayList<E> en t h ä l t wi c h t i g ( s t ) e M e t h o d en § Is t d ie s e Im p le m e n t a t io n b r a u c h b a r ? § Mö c h t e n S i e m i r i h r a r b e i t e n ? § D. h . m ö c h t e n S i e K l i e n t e n e n t w i c k e l n ? 61 W a s f e hlt ? § K e i n e A bs i c h e r u n g g e g e n F e h l e r d e r K l i e n t e n § Wa s s o l l p a s s i e r e n w e n n d e r K l i e n t e i n e n i l l e g a l e n We r t für de n I nde x a ngi b t ? § index == - 1 ? § index >= size ? § index >= data.length ? 62 § Me t h o d e get(int index) is t n u r s in n v o ll w e n n index le g a l is t § Do k um e n t a t i o n s o l l t e f e s t hal t e n w as f ür B e di ng ung e n e r f ül l t s e i n mü s s e n d a mi t d i e O p e r a t i o n a u s g ef ü h r t w e r d e n k a n n § Wi r n e n n e n d i e s e i n e Pr e c o n d i ti o n § Be d in g u n g e n d ie vo r de r A us f ühr ung e r f ül l t s e i n m us s // Pre : 0 <= index < size public E get(int index) { return data[index]; } § Au f w a s m u s s s i c h get(int index) ve r l a s s e n k ö n n e n ? 63 § Da m i t d i e M e t h o d e get(int index) oh n e P r ob l e m e au sg e f ü h r t w e r d e n k an n m u ss ( f ü r al l e E x e m p l ar e v o n ArrayList<E> ) ge l t e n § data != null § size <= data.length § Di e se In v a r ia n t e n für da s O bj e k t e x a m pl a r m üs s e n v o n a l l e n Me t h o d e n g a r a n t i e r t w e r d e n § Wa s p a s s i e r t w e n n e i n K l i e n t d i e s e n C o d e e n t h ä l t ArrayList<String> a = new ArrayList<String>(0); a.get(0); //capacity 0 § In v a r i a n t e n e r fü l l t a b e r get(0) erf ü l l t ni c h t di e P r e c o ndi t i o n § Al s o k a n n d i e M e th od e n i c h t a u s g e f ü h r t w e r d e n 64 § Di e I m p l e m e n t a t i o n v o n ArrayList<E> mu s s s i c h a b s i c h er n § We n n d i e P r e c o n d i t i o n n i c h t e r f ü l l t i s t d a n n d a r f d i e M e t h o d e n i c h t aus g e f ühr t w e r de n § We n n index ille g a l is t g ib t e s e in e n F e h le r ( in d e r L o g ik d e s K lie n t e n ) § (B e s t e ) An t w or t a u f An f r a g e n d i e n i c h t e r f ü l l t w e r d e n k ön n e n : Ex c e p t i o n w e r f e n public E get(int index) { if (index >= size) { throw new IllegalArgumentException (\"Index \" + index +\" illegal\"); } return data[index]; } 65 W a s f e hlt ? § K e i n e A bs i c h e r u n g g e g e n F e h l e r d e r K l i e n t e n § Do k u m e n t a t i o n d e s Er g e b n i sse s/R ü c k g a b e w e r t e s § Wa s b e w i r k t d i e s e M e t h o d e ( A n n a h m e : d i e P r e c o n d i t i o n i s t erf ü l l t ) § Di e s ne nne n w i r di e Po s t c o n d i t i o n : Z u s t a n d d e s E x e m p l a r s n a ch de r A us f ühr ung // Post : returns element at given index public E get(int index) { … } 66 get(index) § (O b j e k t )i n v a r i a n t e n u n d P r e - Co n d i t i o n ( s ) mü s s en a u s r ei c h en , Po s t - co n d i t i o n a m E n d e d e r M e t h o d e s i c h e r zu s t e l l e n § // Inv: data != null § // Inv: size <= data.length // Pre : 0 <= index < size public E get(int index) { return data[index]; } // Post: get returns data[index], no other changes § In v a r ia n t e n mü s s en am E n d e ge l t e n , ni c h t an be l i e bi g e n Punk t e n in d e r Me t h o d e § Br a u c h e n abe r ma n c h ma l we i t e r e Au s s a g e n in d e r Met h o d e um fo l g e r n zu kö n n e n 67 Ar be it e n m it Aus s a g e n § Fü r j e d e n P u n k t i m P r og r a m m (i n d e r M e t h od e ) k ön n e n w i r Au s s a g e n m a c h e n § Di e dann e n t w e de r w ahr o de r ni c h t w ahr s i nd § Vo r s i c h t be i Sc h l e i f e n : Punk t wi r d meh r f a c h er r ei c h t § Ei ne A us s ag e k ann e i nm al w ahr s e i n ( z . B . be i m e r s t e n Dur c hl auf dur c h de n R um p f de r S c hl e i f e ) und e i nm al ni c h t w ahr s e i n ( z . B . be i m le t z t e n D u r c h la u f ) 68 Ar be it e n mi t Aus s a g e n § We n n wi r en t s c h ei d en ob ei n e Au s s a g e fa l s c h od e r wa h r is t da nn mü s s en wi r ko n s e r v a t i v se i n , d. h. nur An n a h m e n ma c h en di e in je d e m Fa l l er f ü l l t si n d § Dr e i Op t i o n e n § Au s s a g e is t im m e r wa h r § Au s s a g e is t ni e m al s wa h r § Au s s a g e is t ma n c h ma l wa h r (u n d ma n c h ma l ni c h t wa h r ) 69 Ar be it e n mi t Aus s a g e n § Ne h m e n wi r di e s e s C o de Bei s p i el if (x > 3) { // Point A x -- ; } else { // Point B x++; // Point C } // Point D § Wa s kö n n e n wi r übe r de n W e r t v o n x an d e n 4 St e l l e n sag e n ? § Is t x > 3 ? I M M ER ? M A N C H M A L ? N I E? 70 x > 3 Po i n t A Po i n t B Po i n t C Po i n t D x > 3 Po i n t A IM M E R Po i n t B NI E Po i n t C MA N C H MA L Po i n t D MA N C H MA L Au s s a g e n und Pr o g r a m m e § Wi r kö n n e n Au s s a g e n übe r das Pr og r a m m ma c h e n und fr a g e n ob si e an be s t i m m t e n St e l l e n wa h r si n d . § Gü l t i g e An t w o r t e n si n d IM M E R , N IE , od e r MA N C H MA L . System.out.print (\"Type a nonnegative number: \"); double number = console.nextDouble (); // Point A: is number < 0.0 here? while (number < 0.0) { // Point B: is number < 0.0 here? System.out.print (\"Negative; try again: \"); number = console.nextDouble (); // Point C: is number < 0.0 here? } // Point D: is number < 0.0 here? MANCHMAL IMMER MANCHMAL NIE 72 Mi t Au s s a g e n ar be i t e n … § Di r e k t na c hde m ei n e Va r i a b l e in it ia lis ie r t wu r d e , is t ih r We r t be k a nn t : int x = 3; // is x > 0? IMMER § Übe r di e We r t e vo n Pa r a m e t e r n wi s s en wi r i . A . ni c h t s : public static void mystery( int a, int b) { // is a == 10? MANCHMAL § In n e r h a lb ei n es if , while , us w . wi s s en wi r ev t l . et w a s : public static void mystery( int a, int b) { if (a < 0) { // is a == 10? NIE ... } } 73 Aus s a g e n und Sc h l e i f e n § Zu Beg i n n de s Rum p f e s ei n er Sc h l e i f e mu s s d er T es t true , er g eb en ha be n : while (y < 10) { // is y < 10? IMMER ... } § Di r e k t na c h ei n er Sc h l e i f e mu s s d er T es t false se i n : while (y < 10) { ... } // is y < 10? NIE 74 Aus s a g e n und Sc h l e i f e n § Im Rum p f ei n er Sc h l e i f e ka n n de r T e s t false er g eb en : while (y < 10) { y++; // is y < 10? MANCHMAL } 75 « Ma n c h m a l » § Ve r s c h i e d e n e Ak t i v i t ä t e n kö n n e n da z u führ e n , da s s de r W e r t ei n er Va r i a b l e unbe k a nn t is t ( di e s e führ e n da nn zu «M A N C H M A L» An t w or t e n ): § Ei ng abe vo n Scanner le s e n § Les en ei n er Za h l vo n ei n em Random Ob j e kt § Üb e r g a b e ei n es Pa r a m e t e r s § We n n für ei n e St e l l e im Pr o gr a m m so w o h l di e An t w or t «ja » al so au c h « ne i n » mö g l i c h is t , da nn is t di e ri ch t i g e An t w or t « ma n c h ma l ». § We n n ma n si c h ni c h t si c h e r is t dann is t « Ma n c h m a l » ei n e gu t e Ve r m u t u n g 76 Be i s p i e l 1 public static void mystery( int x, int y) { int z = 0; // Point A while (x >= y) { // Point B x = x - y; z++; if (x != y) { // Point C z = z * 2; } // Point D } // Point E System.out.println (z); } x < y x == y z == 0 Po i n t A Po i n t B Po i n t C Po i n t D Po i n t E We l c h e Au s s a g e n si n d an di e s e n St e l l e n wa h r ? Mö g l i c h si n d IM M E R , N IE od e r MA N C H MA L . 77 Be i s p i e l 1 public static void mystery( int x, int y) { int z = 0; // Point A while (x >= y) { // Point B x = x - y; z++; if (x != y) { // Point C z = z * 2; } // Point D } // Point E System.out.println (z); } x < y x == y z == 0 Po i n t A Po i n t B Po i n t C Po i n t D Po i n t E MA N CH MA L MA N CH MA L IMME R NI E MA N CH MA L MA N CH MA L MA N CH MA L NI E NI E MA N CH MA L MA N CH MA L NI E IMME R NI E MA N CH MA L We l c h e Au s s a g e n si n d an di e s e n St e l l e n wa h r ? Mö g l i c h si n d IM M E R , N IE od e r MA N C H MA L . 78 Be i s p i e l 2 public static int mystery(Scanner console) { int prev = 0; int count = 0; int next = console.nextInt (); // Point A while (next != 0) { // Point B if (next == prev ) { // Point C count++; } prev = next; next = console.nextInt (); // Point D } // Point E return count; } next == 0 prev == 0 next == prev Po i n t A Po i n t B Po i n t C Po i n t D Po i n t E We l c h e Au s s a g e n si n d an di e s e n St e l l e n wa h r ? Mö g l i c h si n d IM M E R , N IE od e r MA N C H MA L . 79 Be i s p i e l 2 public static int mystery(Scanner console) { int prev = 0; int count = 0; int next = console.nextInt (); // Point A while (next != 0) { // Point B if (next == prev ) { // Point C count++; } prev = next; next = console.nextInt (); // Point D } // Point E return count; } next == 0 prev == 0 next == prev Po i n t A Po i n t B Po i n t C Po i n t D Po i n t E MA N CH MA L IMME R MA N CH MA L NI E MA N CH MA L MA N CH MA L NI E NI E IMME R MA N CH MA L NI E MA N CH MA L IMME R MA N CH MA L MA N CH MA L We l c h e Au s s a g e n si n d an di e s e n St e l l e n wa h r ? Mö g l i c h si n d IM M E R , N IE od e r MA N C H MA L . 80 Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 83 § Mü s s e n si c h e r se i n da s s temp ( Re f e r e n z für ListNode Kn o t e n ) ni c h t null is t Vo n Aus s a g e n zu P r e /P o s t - Co n d i t i o n s § Is t wa h r am Punk t … ? (B : Lo o p t es t ) 84 temp != null A B C E D te m p ! = n u l l Po i n t A Po i n t B Po i n t C Po i n t D Po i n t E Lo g isc he Aus s a g e n fü r Lis t e § Is t wa h r am Punk t … ? (B : Lo o p t es t ) 85 temp != null A B C E D te m p ! = n u l l Po i n t A MA N C H MA L Po i n t B MA N C H MA L Po i n t C MA N C H MA L Po i n t D IM M E R Po i n t E MA N C H MA L Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 86 temp != null ( gefordert ) Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 87 temp != null ( gefordert ) ( garantiert ) Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 88 temp != null ( garantiert ) ( garantiert ) Zw e i t e u n d we i t e r e Au s f ü h r u n g (e n ) Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 89 temp != null ( gefordert ) Er s t e A u s f ü h r u n g Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 90 front != null ( gefordert ) Er s t e A u s f ü h r u n g Lo g isc he Aus s a g e n fü r Lis t e § Wo l l e n El e m e n t e ei n er Li s t e ( mi t ListNode Kn o t e n ) au sg e b e n 91 Pre: front != null Pr e - und P o s t - Co n d i t i o n s § (O b j e k t )i n v a r i a n t e n u n d P r e - Co n d i t i o n ( s ) mü s s en au sr e i c h e n , P o s t - co n d i t i o n a m E n d e d e r M e t h o d e s i c h e r zu st e l l e n § «R ü ck w ä rt s » s ch l i e s s e n : w a s m u s s b e i m A u f ru f d e r Me t h o d e g e l t e n d a m i t d i e P o s t - Co n d i t i o n er f ü l l t wi r d ? 92 ArrayList : W e i t e r e Pr e - und P o s t c o ndit io ns // Pre : capacity >= 0 // Post: created empty list with requested capacity @ SuppressWarnings (\"unchecked\") ArrayList (int capacity) { if (capacity < 0) { throw new IllegalArgumentException (\" Illegal length \" + capacity); } data = (E[]) new Object[capacity]; size = 0; } // Pre : size <= data.length // Post: value added to end of list public void add (E value) { ensureCapacity (size+1); data[size++] = value; } 93 // Pre : other != null // Post: list appended to end of list public void addAll ( ArrayList <E> other) { if (other == null) { throw new IllegalArgumentException (\"Null list\"); //throw new NullPointerException (); } ensureCapacity ( size+other.size ); for (int i = 0; i < other.size ; i ++) { add( other.data [ i ]); } } 94 ArrayList : W e i t e r e Pr e - und P o s t c o ndit io ns10. 7. 1 O v e rl oa d i n g a n d g e n e ri s c h e T y p e n § Ge ne r i s c he T ype n w ur de n z u J a v a hi nz ug e füg t ( 1 . 5 , 2 0 0 4 ) -- 8 J a h r e n a ch e r s t e r R e l e a s e § Tr a d e o f f z w i s c h e n S c h w i e r i g k e i t d e r I m p l e m e n t a t i o n , K o m p a t i b i l i t ä t mi t e x i s i t i e r e n d e n P r o g r a mme n , A u s f ü h r u n g s k o s t e n , … . § Re t r o f i t e i n i g e r K l a s s e n ( Vector , ArrayList , … ) § Au g e n m e r k auf par al l e l e A us f ühr ung § Ja v a En t w i c k l e r wo l l t e n rü ck w ä rt s K o m p a t i b i l i t ä t § ... u n d m ö g lic h s t w e n ig e Ä n d e r u n g e n d e r J V M e t c . § Fo l g e n (l ei d er) no c h si c h t b a r 95 (S t a r k ) V e r e in f a c h t § Co mp i l er p r ü f t T y p en § Dann wi r d In f o r m a t i o n übe r G e ne r i c s e n t f e r n t § «T y p e e r a s u r e » § JV M er f ä h r t n i c h t d i e ( g en er i s c h en ) T y p en § Fo l g e : O v e r l o a d i n g f u n k t i o n i e r t n i c h t w e n n z w e i ( o d e r meh r ) M e t h o d en ei n e « ä h n l i c h e» S i g n a t u r h a b en § Se l b e r g e n e r i sc h e r Ty p m i t u n t e r s c h i e d l i c h e n Ty p p a r a m e t e r n 96 class Test { public static void main(String[] args ) { ArrayList <Number> fn = new ArrayList <Number>(); ArrayList <String> fs = new ArrayList <String>(); Test tester = new Test(); tester.myTest (fs); tester.myTest ( fn ); } void myTest ( ArrayList <String> fs) { System.out.println (\" myTest ::String\"); } void myTest ( ArrayList <Number> fn ) { System.out.println (\" myTest ::Number\"); } } 97 class Test { public static void main(String[] args ) { ArrayList <Number> fn = new ArrayList <Number>(); ArrayList <String> fs = new ArrayList <String>(); Test tester = new Test(); tester.myTest (fs); tester.myTest ( fn ); } void myTest ( ArrayList <String> fs) { System.out.println (\" myTest ::String\"); } void myTest ( ArrayList <Number> fn ) { System.out.println (\" myTest ::Number\"); } } 98 class Test { public static void main(String [] void myTest ( ArrayList <String> fs) { System.out.println (\" myTest ::String\"); } void myTest ( ArrayList <Number> fn ) { System.out.println (\" myTest ::Number\"); } } Error: | name clash: myTest ( java.util.ArrayList < java.lang.Number >) and | myTest ( java.util.ArrayList < java.lang.String >) have the same | erasure | void myTest ( ArrayList <Number> fn ) { | ^ ---------------------------------- ... Da s S y s t e m « si e h t » ei n Pr o bl e m : void myTest ( ArrayList ) void myTest ( ArrayList ) ha be n di e se l b e Si g n a tu r 99 10. 7. 2 T y p e n u n d S u b t y p e n 100 Zu w e i s u n g e n ( B a s i s t y p e n ) § xref und yref si n d Va r i a b l e de r B a s i s t ype n X und Y xref = yref zu l ä s s i g w e n n T y p Y au t o m a ti sc h u m g e w an d e l t w e r d e n k an n § Od e r di e Ty p e n id e n t is c h si n d § Au t om a t i s c h e Um w a n d l u n g (« c a s t » ) f ü r ko m p a t i b l e Ty p e n § Se l b e L o g i k f al l s au f d e r R HS e i n A u sd r u c k s t e h t 101 Ko m b a t i b i l i t ä t d e r B a s i s t y p e n § Wi c h t i g e B a s i s t y p e n : boolean , int , long , double § boolean is t in k o m p a t ib e l m it int , long , double § Aber int , long und double si n d k o m p a t i b e l 102 int long double int long double ex p l i z i t e K o n v e r t i e r u n g im p liz it e Ko n v e r t i e r u n g im p liz it e Ko n v e r t i e r u n g – po t e nz i e l l mi t Ge n a u i g k e i t s v e r l u s t Zu w e i s u n g e n ( R e f e r e n z v a r i a b l e ) § aref und bref s i n d R ef e r e n z v a r i a b l e f ü r T y p A und T yp B aref = bref zu l ä s s i g w e n n T y p B mi t T y p A ko m p a t i b e l i s t 103 Ko m p a t i b i l i t ä t d e r R e f e r e n z t y p e n § (V e r e i n f a c h t ) K om p a t i b e l w e n n i m s e l b e n « Z w e i g » d e r Ty p Hi e r ar c h i e § En t w e de r be s t i m m t dur c h V e r e r bung ( be i K l as s e n) od e r § Be s t im m t d u r c h E r w e it e r u n g ( b e i I n t e r f a c e s ) § Bei s p i el : T y p A is t Object und T yp B is t Integer da nn is t aref = bref we g e n class extends Object { … } er l a u b t (Integer is t S u b t y p v o n Object) 104 Ba s i s - und R e f e r e nz t y pe n § Va r i a b l e d e r B a s i s t y p e n k ö n n e n n i c h t i n e i n e m (a r i t h m e t i s c h e n ) Au s d r u c k m i t R e f e r e n z t y p e n k om b i n i e r t we r d e n § Au s n a h m e : W r a p p e r Ty p e n u n d + Op e r a t o r f ü r String , z . B . \"\" + 3 § Fü r W r a p p e r T y p e n u n d B a s i s t y p e n g i l t : § Un b o x i n g f ü r V e r w e n d u n g i n A u s d r u c k § Bo x in g w e n n W e r t in W r a p p e r E x e m p la r g e s p e ic h e r t w ir d 105 Wi e g e h t d i e P r o g r a m m i e r s p r a c h e m i t n e u e n Ty p e n u m ? § Ge g e be n s i nd z w e i T ype n A und B , m i t B S ub t yp v o n A . § A u n d B b i l d e n d i e B a s i s f ü r z w e i n e u e T y p e n , N(A) u n d N(B ). § Wa s s o l l f ü r N ( A ) , N ( B ) g e l t e n ? § N( B ) S u b t y p v o n N( A ) ? § N( A ) S u b t y p v o n N( B ) ? § N( A ) u n d N( B ) s t e h e n i n k e i n e r B e z i e h u n g § Äh n l i c h e Üb e r l e g u n g e n f ü r M e t h od e n d e r T y p e n A u n d B 106 Wi e g e h t d i e P r o g r a m m i e r s p r a c h e m i t n e u e n Ty p e n u m ? § Ge g e be n s i nd z w e i T ype n A und B , m i t B S ub t yp v o n A . § A u n d B b i l d e n d i e B a s i s f ü r z w e i n e u e T y p e n , N(A) u n d N(B ). § Wa s s o l l f ü r N ( A ) , N ( B ) g e l t e n ? § N( B ) S u b t y p v o n N( A ) ? -- Co v a r i a n z § N( A ) S u b t y p v o n N( B ) ? -- Co n t r a v a r i a n z § N( A ) u n d N( B ) s t e h e n i n k e i n e r B e z i e h u n g -- In v a r i a n z § Äh n l i c h e Üb e r l e g u n g e n f ü r M e t h od e n d e r T y p e n A u n d B 107 Wo i s t d a s w i c h t i g ? § Se i d e r n e u e T y p N ( T ) d e r T y p « A r r a y v o n T » o d e r«T - Ar r a y » , d .h . T [] in J a v a § Ar r a y T y p e n i n J a v a s i n d c o v a r i a n t § jshell > ia = new Integer[5]; § ia ==> Integer[5] { null, null, null, null, null } § jshell > Object[] oa = ia ; § oa ==> Integer[5] { null, null, null, null, null } § Zu w e i su n g Object [] oa = ia is t e r la u bt 108 § Me t h o d e foo(Object[] ox) ka n n mi t ei n em Integer Ar r a y a l s Ar g u m e n t a u f g e r u f e n w e r d e n § Po l y m o r p h i s m u s i n A k t i o n § Ni c h t u m s on s t § Ja v a JV M m u ss für je d e Zu w e i su n g zu ei n em Ar r a y E l e m e n t pr üf e n ob di e s e Zu w e i su n g er l a u b t is t 109 § Ja v a JV M m u ss für je d e Zu w e i su n g zu ei n em Ar r a y E l e m e n t pr üf e n ob di e s e Zu w e i su n g er l a u b t is t § jshell > oa [0] = Integer.valueOf (7 ); // nach oa = ia ; § $112 ==> 7 § jshell > oa [1] = \"String\"; § | Exception java.lang.ArrayStoreException : java.lang.String § | at (#113:1) § Mi t e i n e m A r r a y m i t Object Re f e r e n z e n w ä r e d a s e r l a u b t § jshell > Object[] x = new Object[5]; § x ==> Object[5] { null, null, null, null, null } § jshell > x[1] = \"Test\"; § $115 ==> \"Test\" 110 Wo i s t d a s w i c h t i g ? § Se i d e r n e u e T y p N ( T ) d e r T y p « A r r a y L i s t v o n T » o d e r«T - Ar r a y » , d. h. ArrayList<T> in J a v a § Ge ne r i s c he T ype n s i nd i n v a r i a n t jshell > ArrayList <Integer> ai = new ArrayList <Integer>(); ai ==> [] jshell > ArrayList <Object> ao = ai; | Error: | incompatible types: java.util.ArrayList < java.lang.Integer > | cannot be converted to java.util.ArrayList < java.lang.Object > | ArrayList <Object> ao = ai; | ^^ § Bes s er e Co mp i l er k ö n n t en Co v a r i a n c e er l a u b en … 111 Ko m p a t i b i l i t ä t d e r R e f e r e n z t y p e n § (V e r e i n f a c h t ) K om p a t i b e l w e n n i m s e l b e n « Z w e i g » d e r T y p Hi e r ar c h i e § En t w e de r be s t i m m t dur c h V e r e r bung ( be i K l as s e n) od e r § Be s t im m t d u r c h E r w e it e r u n g ( b e i I n t e r f a c e s ) § Gi l t a uc h für A r r a y s ( v o n k o m pa t i bl e n T ype n) , a be r ni c h t für ge n e r i s c h e T y p e n 112 § De s w e g e n si n d A r r a y s m i t g e n e r i sc h e n T y p e n i n J a v a «u m s t ä n d l i ch » § Si e h e K o n s t r u k t o r f ü r (u n se r e ) ArrayList<T> wi e f r ü h e r im p le m e n t ie r t § Mö g l i c h a b e r n u r m i t Ma s s a g e d e s T y p S y s t e m s § Ni c h t u n s e r T h e ma § Si e w o l l e n e i n e n A r r a y v o n M e n g e n ? HashSet<Integer>[] ? § Ve r s u c h e n S i e e s d o c h m i t e i n e r ArrayList § Ei ne ArrayList<Set<Integer>> is t le ic h t m ö g lic h 113 jshell > ArrayList <Set<Integer>> aset ; aset ==> null jshell > aset = new ArrayList <Set<Integer>>(); aset ==> [] // leere Menge von Mengen jshell > aset.add (new HashSet<Integer>()); aset ==> [[]] // Menge enthaelt nur leere Menge aset.add (new HashSet<Integer>( Arrays.asList (1, 2, 3))); aset ==> [[], [1, 2, 3]] // zwei Mengen: {} und {1, 2, 3} aset.add (new HashSet<Integer>( Arrays.asList (3, 2, 1))); aset ==> [[], [1, 2, 3], [1, 2, 3]] // ha! «equals« ... aset.add (new TreeSet <Integer>( Arrays.asList (3, 2, 1))); aset ==> [[], [1, 2, 3], [1, 2, 3], [1, 2, 3]] // auch TreeSet 114 W a r um ? § Je d e s « F e a tu r e » e i n e r P r o g r am m i e r sp r ac h e i s t E r g e b n i s ei n er A b w ä g u n g ( « T r a d eo f f » ) § Sc h w i e r i g k e i t d e r I m p l e m e n t a t i o n , K o m p a t i b i l i t ä t m i t e x i si t i e r e n d e n Pr og r a m m e n , Au s f ü h r u n g s k os t e n , …. 115 Sc h l u s s b e m e rk u n g e n § En t w i c k e l n v o n g e n e r i sc h e n K l a sse n n i c h t T h e m a d e r Vo r l e s u n g § Si e so l l t e n m i t d e m Co l l e ct i o n s Fr a m e w o r k a r b e i t e n k ö n n e n a b e r w i r er w a rt en (u n d p rü f en ) n i c h t , das s Si e so l c h e Kl a sse n e n t w i c k e l n kö n n ( t ) en § Si e so l l t e n w i sse n w an n W r ap p e r T y p e n g e b r au c h t w e r d e n § Vo r s i c h t b e i ( v e r m e i n t l i c h e n ) O v e r l o a d i n g P r o b l e m e n § K e i n d i r e k t e s E r s t e l l e n e i n e s g e n e r i s c h e n T y ps / g e n e r i s c h e n Ar r a y s m i t new 116 static Nes t ed C l a sses 117 Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front ; public String toString () {} //Adds value to end of List void add ( int value) { } int remove() { } ... } // LinkedIntList class ListNode { int data; ListNode next; ListNode () { } ListNode (int v) { } ListNode (int v, ListNode c){} public String toString () {} } // ListNode 118 Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; public String toString () {} //Adds value to end of List void add ( int value) { } int remove() { } ... } // LinkedIntList class ListNode { int data; ListNode next; ListNode () { } ListNode (int v) { } ListNode (int v, ListNode c){} public String toString () {} } // ListNode 119 next = new ListNode (...) Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; public String toString () {} class ListNode { int data; ListNode next; ListNode () { } ListNode (int v) { } ListNode (int v, ListNode c){} public String toString () {} } // ListNode // Adds value to end of List void add ( int value) { } int remove() { } ... } // LinkedIntList 120 next = new ListNode (...) Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; public String toString () {} class ListNode { int data ; ... } // ListNode //Adds value to end of List void add ( int value) { } int remove() { } ... public static void main (String[] a) { LinkedIntList myList ; myList = new LinkedIntList (); } } // LinkedIntList 121 next = new ListNode (...) Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; public String toString () {} class ListNode { int data; ... } // ListNode //Adds value to end of List void add ( int value) { } int remove() { } ... public static void main (String[] a) { LinkedIntList myList ; myList = new LinkedIntList (); ListNode n = new ListNode (); } } // LinkedIntList 122 next = new ListNode (...) Ni c h t er l a u b t ! Ke i n um s c hl i e s s e nde s Ex e m pl ar v o n LinkedIntList LinkedIntList_3.java:117: error: non - static variable this cannot be referenced from a static context ListNode n = new ListNode (); ^ 1 error § Ex e m p l a r e de r Kl as s e ListNode kö n n e n nur in ei n em Ex e m p l a r d e r Kl as s e LinkedIntList ex i s t i e re n § Ka n n dahe r ni c h t in static Me t h o d e er s t el l t we r d e n § Wi e At t r i b u t e ( ei n es Ex e m p l a r s ) : nur si c h t b a r we n n es E x em p l a r gi b t § Ei n f a c h e « Lö s u n g »: Kl as s e static de k l a r i e r e n § Ka n n dann vo n al l e n static Met h o d e n ve r w e n d e t we r d e n 123 Fe h l e r m e l d u n g Li n k ed I n t Li s t / Li s t N o d e Beis p iel class LinkedIntList { private ListNode front; public String toString () {} static class ListNode { int data; ... } // ListNode //Adds value to end of List void add ( int value) { } int remove() { } ... public static void main (String[] a) { LinkedIntList myList ; myList = new LinkedIntList (); ListNode n = new ListNode (); } } // LinkedIntList 124 next = new ListNode (...) Nu n er l a u b t ! Ke i n Ex e m pl ar v o n LinkedIntList nö t i g Zu s a m m e n f a s s u n g § static «n e s t e d cl a s s e s » k ö n n e n v e r w e n d e t w e r d e n § Vo n ( non - static ) M e t h o d en d er um s c hl i e s s e nde n (o u t er) Kl a sse § De nn di e s e we r d e n f ü r e i n E x e m p l a r d e r O u t e r K l a s s e a u s g e f ü h r t § Vo n static Met h o d e n d e r Ou t e r K l a s s e § no n - static «n e s t e d cl a s s e s » ( «i n n e r cl a s s e s ») k ö n n e n n u r vo n ( non - static ) M e t h od e n d e r u m s c h l i e s s e n d e n (ou t e r ) Kl as s e v e r w e n d e t w e r d e n § Ve r w e n d e t : new Op e r a t o r , R e f e r e n zv a r i a b l e , . . . 125 An d e r e s Beis p iel class Main { static class Tuple implements Comparable<Tuple> { } // Tuple public static int getMinimumCost ( int n, int[][] A ) { } public static void main (String[] a ) { } } // Main 126 Ka n n mi t Tuple ar b e i t e n Ke i n Ex e m pl ar v o n Main nö t i g Zu s a m m e n f a s s u n g § E in e static (K l a s s e n - )V a r i a b l e (d i e w i r n i c h t od e r s e l t e n ve r w e n d e n s o l l t e n ) e x i s t i e r t ei n m al für a l l e E x e m pl a r e de r Kl as s e § ... u n d a u c h o h n e E x e m p l a r e d e r K l a s s e § Ei n e static «n e s t e d cl a s s » i s t d e n static Me t h o d e n u n d de n non - static Me t h o d e n b e k a n n t ( d . h . k a n n v e r w e n d e t we r d e n ) § Ob di e Ex e m p l a re (d er «n e s t e d c l a s s ») g e l e s e n / g e s c h r i e b e n w e r d e n kö n n e n h ä n g t v o n d e n R e f e r e n z v a r i a b l e n a b § Mu s s E x e m p l a r e r r e i c h e n k ö n n e n u m e s z u l e s e n / s c h r e i b e n 127 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 11. 0 Sy s t e m a t i s c h e s Pr o g r a m m i e r e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 -- 2022 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 11. 1 Ab s t r a k t e Da t e n t y p e n (AD T ) i n J a v a § 11. 2 Ob j e k t In v a r ia n t e n § 11. 3 En t w u r f vo n K l a s s e n § 11. 4 Ko m p a t i b l e An w e i s u n g e n § 11. 6 Re a l e Pr o bl e m e § 11. 7 Bei s p i el (e ) 2 11. 1 A b s t r a k t e D a t e n t y p e n i n J a v a … i m K o n t e x t d e s C o l l e c t i o n s F r a m e w o r k s 3 Ab s t r a k t e Da t e n Ty p e n (A D T ) § Ab s t r a k t e r Da t e n Ty p (AD T ): Sp e z i f i k a ti o n ei n er An s a m m l u n g vo n Da t e n und de r Op e r a t i o n e n , d i e mi t di e s e n Da t e n au sg e f ü h r t we r d e n kö n n e n . § Be s c h r e ib t wa s ei n e An s a m m l u n g ma c h t ( od e r mi r ih r ge t a n we r d e n ka n n ), ni c h t wi e si e es ma c h t § Wi s s e n ni c h t wi e ei n e be s t i m m t e An s a m m l u n g im p le m e n t ie r t is t – und br a uc he n di e s au c h ni c h t zu wi s s en . § Wi r mü s s e n nur das Ko n z e p t de r An s a m m l u n g ve r s t e h e n , so w i e di e Op e r a t i o n e n , d ie dam i t aus g e f ühr t we r d e n kö n n e n . Ab s t r a k t e Da t e n Ty p e n (A D T ) § In J a v a ( in s b e s o n d e r e im Co l l ec t i o n s F r a me w o r k ) be s c hr e i be n wi r AD T s mi t In t e r f a c e s : § Collection , Deque , List , Map , Queue , Set , SortedMap § Ei n A D T ka n n da nn dur c h ve r s c h i e d e n e Kl as s e n re a l i s i e r t se i n : § ArrayList und LinkedList im p le m e n t ie r t List § HashSet und TreeSet im p le m e n t ie r t Set § LinkedList , ArrayDeque , e t c . im p le m e n t ie r t Queue Ar be it e n mi t AD T I n t e r f a c e s § Es is t ei n e gut e Id e e di e Va r i a b l e n für An s a m m l u n g e n al s Va r i a b l e d e s A D T I n t e r f a c e Ty p s zu de k l a r i e r e n : List<String> list = new ArrayList <String>(); § Ge na us o so l l t e n Me t h o d e n en t s p r ec h en d e Pa r a m e t e r mi t AD T I n t e r f a c e Ty p e n de k l a r i e r e n : public void process (List<String> list) { ... } Ar be it e n mi t AD T I n t e r f a c e s § Es is t ei n e gut e Id e e di e Va r i a b l e n für An s a m m l u n g e n al s Va r i a b l e d e s A D T I n t e r f a c e Ty p s zu de k l a r i e r e n : List<String> list = new ArrayList <String>(); § Ge na us o so l l t e n Me t h o d e n en t s p r ec h en d e Pa r a m e t e r mi t AD T I n t e r f a c e Ty p e n de k l a r i e r e n : public void process( List<String> list) { ... } § Fl e xi b i l i t ä t ! Wi r kö n n e n di e s e n Co d e wi ed er v er w en d en W a r um sol l t en wir AD T ve r w e n d e n ? § We r wi l l meh r al s ei n e Ar t v on L i s t e n , Wa r t e s c h l a n g e n , et c ? § Je d e Im p le m e n t a t io n ka n n für be s t i m m t e Au f g a b e n ef f i z i e n t e r se i n 11. 1. 1 L a u f z e i t v e rh a l t e n 9 ArrayList<Type> – w a s w o lle n wir m e hr ? § L i s t O p e r a t i o n e n : § add ( va lu e ): de f aul t i s t Ei n f üg e n am Ende § Mi t add ( in d e x , v al u e ) : in d e r M it t e m ö g lic h § Unbe gr e nz t e Gr ö s s e § L e s e n e i n e s b e l i e b i g e n E l e m e n t e i n O ( 1 ) 10 add( va lu e ) add( in d e x , va lu e ) get( in d e x ) remove( in d e x ) set( in d e x , va lu e ) size() toString () Be i s p i e l § Sc h r e i b e n Si e ei n Pr o gr a m m da s « ei n e gr o s s e An z a h l » v o n We r t e n ei n l i es t und da nn in d e r um g e k e hr t e n Re i h e n f o l g e au sg i b t § Gr os s e An z a h l : 1 0 0 '0 0 0 , 1 '0 0 0 '0 0 0 , … . § Ke i n e we i t e r e n Op e r a t i o n e n ( fü r di e s e s Be is p ie l ) § Wi r wo l l e n ei n e Kl a sse de s C o l l e c t i o ns F r am e w o r k s be nut z e n § Wo l l e n of f e n ha l t e n we l c h e Kl as s e ve r w e n d e t we r d e n so l l 12 Be i s p i e l § Mö g l i c h e Me t h o d e public static void task() { CollectionType c = ... process(c); } § Wi r k l i c h e Ar b e i t wi r d in Me t h o d e process er l ed i g t public static void process( CollectionType c) { // get input // output in reverse order } 13 Be i s p i e l – F o r t s e t z ung § Ne h m e n wi r an wi r ha be n es mi t Integer We r t e n zu tu n List<Integer> c = new ArrayList <Integer>(); public static void process(List<Integer> c) { // … } § Di e se Me t h o d e ka n n mi t ArrayList <Integer> Ex e m p l a r e n ve r w e n d e t we r d e n § Ab e r is t ArrayList de r be s t e Ty p fü r di e s e Au f g a b e ? § Wa s gi b t es de nn no c h ? 14 Ja v a C o l l e c t i o n s Fr am e w o rk 15 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t Li n k e d Li s tAr r a y L i s t Tr e e S e t <<I n t er f a c e> So r t e d Se t Ha s h S e t <<I n t er f a c e> Ma p Tr e e M a p <<I n t er f a c e> So r t e d M ap Ha s h M a p LinkedList<E> § Ben u t z t ei n en K n o t en T y p ä h n l i c h d en ListNodes au s fr ühe r e n V o r l e s ung e n § En t häl t R e f e r e nz auf e i n O bj e k t e x e m pl ar v o m T y p E § In d e r P r a x is d o p p e lt - ve r l i n k t e L i s t e m i t V e r w e i s e n a u f d a s er s t e u n d l e t z t e E l emen t d er L i s t e § Ei n e a n d e r e I m p l e m e n t a t i o n d e s List In t e r f a c e s § Ev t l . u n t e r s c h i e d l i c h e I m p l e m e n t a t i o n e n i n v e r s c h i e d e n e n J a v a Sy s t e m e n o d e r f ü r v e r s c h i e d e n e A n we n d u n g e n 16 List<E> 1718 LinkedList Me t h od en add( va l u e ) a p p e n d s v a l u e a t e n d of l i s t add( in d e x , va l u e ) i n s e r t s g i v e n v a l u e j u s t b e f or e t h e g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e r i g h t clear() r e m o v e s a l l e l e m e n t s of t h e l i s t indexOf ( va l u e ) r e t u r n s f i r s t i n d e x w h e r e g i v e n v a l u e i s f ou n d in l is t ( - 1 i f n ot f ou n d ) get( in d e x ) re t u r n s t h e v a l u e a t g i v e n i n d e x remove( in d e x ) re m ov e s / re t u r n s v a l u e a t g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e l e f t set( in d e x , va l u e ) re p l a c e s v a l u e a t g i v e n i n d e x w i t h g i v e n v a l u e size() r e t u r n s t h e n u m b e r of e l e m e n t s i n l i s t toString () r e t u r n s a s t r i n g r e p r e s e n t a t i on of t h e l i s t su c h a s \"[3, 42, - 7, 15]\" 19 Ko m m t uns die s e Lis t e be k a nn t vo r ? 20 Ko m m t uns die s e Lis t e be k a nn t vo r ? § Di e se l b e n Me t h o d e n si n d für ArrayList de fi ni e r t . 21 ArrayList Me t h od en add( va l u e ) a p p e n d s v a l u e a t e n d of l i s t add( in d e x , va l u e ) i n s e r t s g i v e n v a l u e j u s t b e f or e t h e g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e r i g h t clear() r e m o v e s a l l e l e m e n t s of t h e l i s t indexOf ( va l u e ) r e t u r n s f i r s t i n d e x w h e r e g i v e n v a l u e i s f ou n d in l is t ( - 1 i f n ot f ou n d ) get( in d e x ) re t u r n s t h e v a l u e a t g i v e n i n d e x remove( in d e x ) re m ov e s / re t u r n s v a l u e a t g i v e n i n d e x , s h i f t i n g s u b s e q u e n t v a l u e s t o t h e l e f t set( in d e x , va l u e ) re p l a c e s v a l u e a t g i v e n i n d e x w i t h g i v e n v a l u e size() r e t u r n s t h e n u m b e r of e l e m e n t s i n l i s t toString () r e t u r n s a s t r i n g r e p r e s e n t a t i on of t h e l i s t su c h a s \"[3, 42, - 7, 15]\" 22 Be i s p i e l – F o r t s e t z ung § Ne h m e n wi r an wi r ha be n es mi t Integer We r t e n zu tu n public static void process( List <Integer> c) { // … } § Di e se Me t h o d e ka n n für ArrayList <Integer> und LinkedList<Integer> Ex e m p l a r e ve r w e n d e t we r d e n § We l c h e Kl a sse is t be s s e r ? 23 Da s Kle ing e dr uc k t e § LinkedList : ge t ( i n d e x ) br a uc h t O( n ) Ze i t § ArrayList : ge t ( i n d e x ) br a uc h t O( 1 ) Ze i t 24 Al l o f t h e o p e r a t i o n s p e r f o r m a s c o u l d b e e x p e ct e d f o r a d o u b l y - lin k e d lis t . Op e r a t i on s t h a t i n d e x i n t o t h e l i s t w i l l t r a v e r s e t h e l i s t f r om t h e b e g i n n i n g or th e e n d , w h i c h e v e r i s c l o s e r t o th e s p e c i f i e d i n d e x . Th e s i z e , is E m p t y , g e t, [a n d ] s e t [. . ] o p e r a tio n s ru n in c o n s t a nt tim e . T h e a d d op e r a t i on r u n s i n am o r t i z ed c o ns t an t t i m e , th a t is , a d d in g n e le m e nts re q u i re s O ( n ) t i m e . A l l o f t h e o t h e r o p e r a t i o n s r u n i n l i n e a r t i m e ( r o u g h l y sp e a ki n g ) . T h e c o n s t a n t f a c t o r i s l o w c o m p a r e d t o t h a t f o r t h e L i n k e d L i s t im p le m e nt a t io n . Da s Kl e i n g e d r u c k t e § Is t a ls o e in e ArrayList im m e r b e s s e r a ls e in e LinkedList ? § Si c h e r w e n n d a s P r o g r a m m ü b e r w i e g e n d get(index) Op e r a t i o n e n aus f ühr t § Gi b t e s a uc h O pe r a t i o ne n für di e e i ne LinkedList sc h n e l l e r s i n d a l s f ü r e i n e ArrayList ? 25 Da s Kle ing e dr uc k t e § LinkedList : a d d ( 0, v a l u e ) br a uc h t O( 1 ) Z e i t § ArrayList : a d d ( 0, v a l u e ) br a uc h t O( n ) Z e i t 26 Al l o f t h e o p e r a t i o n s p e r f o r m a s c o u l d b e e x p e ct e d f o r a d o u b l y - lin k e d lis t . Th e a d d o p e r a t i o n ( de f au l t : add at t h e e n d ) r u n s i n am o r t i z ed c o ns t an t t i m e , th a t i s , a d d i n g n e l e m e n ts r e q u i r e s O ( n ) ti m e . A l l o f th e o th e r o p e r a ti o n s ( in c lu d in g a d d a t p o s it io n index ) r u n i n l i n e a r t i m e (r o u g h l y s p e a k i n g ). T h e co n s t a n t f a c t o r i s l o w co m p a r e d t o t h at f o r t h e L i n k e d L i s t i m p l e m e n t at i o n . Wa s p a s s i e r t b e i add(position, value) be i e i ne r ArrayList ? 27 add(int pos, int v) Wi e wü r d en wi r ei n en We r t i n d e r M i t t e d e r Li s t e hi nz ufüg e n ? add(3, 42 ) 28 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 0 0 0 0 si z e 6 add(int pos, int v) Wi e wü r d en wi r ei n en We r t i n d e r M i t t e d e r Li s t e hi nz ufüg e n ? add(3, 42 ) 29 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 7 5 12 0 0 0 0 si z e 6 in d e x 0 1 2 3 4 5 6 7 8 9 da t a 3 8 9 42 7 5 12 0 0 0 si z e 7 § Wa s p a s s i e r t b e i add(0, value) be i e i ne r A r r a yL i s t m i t 100' 000 E l e m e n t e n ? 30 public void add( int pos, int v) { for ( int i = size; i > pos; i -- ) { nums [ i ] = nums [ i - 1]; } nums [pos] = v; size++; } § (F a s t ) 100'000 E l e m e n t e mü s s en v er s c h o b en we r d e n ! Ans a m m lung e n § Wa s für ei n e An s a m m l u n g ( co l l e c t i o n ) is t di e be s t e für di e s e s Pr o bl e m ? § Das häng t vo m Pr og r a m m ab. § Wi e ka n n ma n di e s e Fr a g e be a n t w o r t e n ? W a s mü s s en wi r wi s s en ? § Id e a l e r w e i s e sc h r e i b e n wi r Met h o d e process so das s wi r si e fü r mö g l i c h s t vi e l e An s a m m l u n g s ty p e n ve r w e n d e n kö n n e n 31 P r a k t is c he Ana ly s e § Mü s s e n da s La u f z e i t v e rh a l t e n für re a l i s t i s c h e n In p u t mes s en § Wa s is t « re a l i s t i s c h e r » I n p u t ? § Ze i t m e s s u n g e n ni c h t ei n f a c h § Ja v a S y s t e m h a t vi e l e Ko m p o n e n te n ( ei n i g e habe n wi r no c h ga r n i c h t ke n n e n g e l e r n t ) u n d ve r s c h i e d e n e Co m p i l e r § Ei n f ac he Me s s u n g gi b t uns «e n d - to - en d » Üb e r s i c h t § System.currentTimeMillis () od e r System.nanoTime () § Ei ng e baut 32 System.currentTimeMillis () § Gi b t di e Z e i t ( i n m s ) se i t 00 :00, 1. Jan u ar 1970. § Ty p de s Rüc k g a be w e r t e s is t long § 64 B i t s § Ka n n wi ed er h o l t au f g e r u f e n we r d e n um di e Au s f ü h r u n g s z e i t ei n er ( ge n ü ge n d la n g e la u f e n d e n ) Me t h o d e zu mes s en 33 System.nanoTime () Th e ja v a . l a n g . S y s t e m . n a n o T i m e () m e t h o d r e t u r n s t h e c u r r e n t v a l u e o f t h e m o s t p r e c i s e av a i l a b l e s y s t e m t i m e r , i n n a n o s e c o n d s . T h e v a l u e r e t u r n e d r e p r e s e n t s n a n o s e c o n d s si n c e so m e f i x e d b u t a r b i t r a r y t i m e ( p e r h a p s i n t h e f u t u r e , so v a l u e s m a y b e n e g a t i v e ) an d p r o v i d e s n an o s e c o n d p r e c i s i o n , b u t n o t n e c e s s ar i l y n an o s e c o n d ac c u r ac y . § Ty p de s Rüc k g a be w e r t e s is t long § Ka n n wi ed er h o l t au f g e r u f e n we r d e n um di e Au s f ü h r u n g s z e i t ei n er ( ge n ü ge n d la n g e la u f e n d e n ) Me t h o d e zu mes s en 34 List<Integer> aList = new ArrayList <Integer>(); long startTime = System.nanoTime (); for ( int i = 0; i < 100000; i ++) { aList.add (0, Integer.valueOf ( i )); } long endTime = System.nanoTime (); long duration = endTime - startTime ; System.out.println (\" ArrayList add: \" + duration); 36 Be i s p i e l – F o r t s e t z ung public static void process(List<Integer> c) { // get input // print in reverse order } § Di e se Me t h o d e ka n n für ArrayList <Integer> und LinkedList<Integer> Ex a m p l a r e ve r w e n d e t we r d e n § We l c h e Kl a sse is t be s s e r ? 37 Be i s p i e l – Messu n g en § 100' 000 I n t e g e r We r t e hi nz ufüg e n lis t . a d d ( In t e g e r . v a l u e O f ( i )) § Me s s u n g e n § Dur c hs c hni t t vo n 4 Au s f ü h r u n g e n ( ! Vo r s i c h t !! ) § In t e l ( R ) X e o n ( R ) C P U E 5 - 4640 0 @ 2. 40GH z , O p e n J D K ( 1. 8. 0_ 161 - b1 4 ) 38 Kl a s s e Ze i t ( n s ) LinkedList 9' 312' 254 9. 312E + 06 ArrayList 11' 972' 638 1. 197E + 07 § Er n s t h a f t e Ev a l u a t i o n e n mü s s en vi e l e As p e k t e be r üc k s i c h t i g e n § Me h r f a c h e Au s f ü h r u n g de s se l b e n Pr o gr a m m s § Dur c hs c hni t t ( ar i t hm e t i s c h , har m o ni s c h , ge o m e t r i s c h ) § k - ou t - of - N § Pr o z e s s o r e n si n d ko m p l e x § Sp e i c h e r Hi e r a r c h i e § Ec h t e Cl o ck R a t e § Ja v a Um g e bung is t ko m p l e x 40 Messu n g en ( für Du r c h sc h n i t t au f le t z t e m Sl i d e ) § ArrayList : 41 Ti m e ( n s ) 12' 881' 027 11' 416' 029 11' 446' 881 12' 146' 617 Ti m e ( n s ) 8' 711' 755 10' 547' 642 9' 001' 888 8' 987' 733 § LinkedList : § Gr os s e Va r i a t i o n e n (Lo w P r ec i s i o n ) § Ei n f üg e n / En t f e r ne n am An f a n g ge ht se h r sc h n e l l i n ei n er LinkedList – be i vi e l e n ande r e n Op e r a t i o n e n ge w i n nt di e ArrayList haus ho c h Messu n g en ( op e n j d k ve r s i o n \" 1 7 . 0 . 4 . 1 \" 2 0 2 2 - 08 - 12) § ArrayList (n s ): 42 5.6695E+08 6.2218E+08 5.1743E+08 5.3626E+08 5.9327E+08 4.9550E+08 4.8707E+08 7.1691E+08 § LinkedList (n s ): § Ma c ( 2 0 1 7 , 1 6 G B 2 1 3 3 MH z L P D D R 3 ) 2 . 8 G H z Q u a d - Co r e I n t e l Co r e i 7 7.6516E+06 7.8430E+06 7.1460E+06 7.9119E+06 7.8321E+06 7.1287E+06 7.9476E+06 7.7520E+06 Du r c h s c h n i t t Vo r s i c h t § Tr a u e n S i e n u r D a t e n d i e S i e s e l b s t g e m e s s e n h a b e n . . . § LinkedList is t o f t la n g s a m e r a ls ArrayList § Me s s u n g e n f ü r add( Integer.valueOf ( i )) § Ei n f üg e n am Ende 43 Kl a s s e Ze i t ( n s ) LinkedList 6'001'076 6.0011E+06 ArrayList 5'546'068 5.5461E+06 Vo r s i c h t § Tr a u e n S i e n u r D a t e n d i e S i e s e l b s t g e m e s s e n h a b e n . . . § LinkedList is t o f t la n g s a m e r a ls ArrayList § Me s s u n g e n f ü r add( Integer.valueOf ( i )) § Ei n f üg e n am Ende 44 Kl a s s e Ze i t ( n s ) LinkedList 6'001'076 6.0011E+06 ArrayList 5'546'068 5.5461E+06 P. G e o f f r e y Lo w n e y et al . , \" T h e Mu l t i f l o w Tr a c e S c h e d u l i n g C o m p i l e r \" Be i s p i e l § Sc h r e i b e n Si e ei n Pr o gr a m m , d a s zä h l t wi e vi e l e ve r s c h i e d e n e Wö r t e r in ei n em Te x t au f t au c h e n ( z. B . , To l s t o i s «K ri e g u n d F ri e d e n » [ Во й на и ми р ] od e r Go e t he s «F a u s t ») . § Sp e i c h e r n Si e di e Wö r t e r in ei n er (A n ) Sa m m l u n g und ge b e n Si e di e An z a h l de r auf g e t r e t e ne n Wö r t e r aus . § Si n d « [d a s] Gu t e », « gu t e », «g u t », « gu t e r », « gu t e n » ve r s c h i e d e n ? § Na c h de m Ei nl e s e n de s Te x t e s so l l t e es mö g l i c h se i n , fe s t z u s t e l l e n ob ei n be s t i m m t e s Wo r t im Te x t auf t r i t t . 45 Be i s p i e l § In p u t : T h o m a s M a n n , D i e Bu d d en b r o o k s , 1 ' 6 0 2 ' 1 7 7 B y t e s § Qu e l l e : Pr oj e k t Gu t t e n b e r g § Le s e n de r Da t e i , Ei n f ü g e n in C o lle c t io n § In t e l ( R ) X e o n ( R ) C P U E 5 - 4640 0 @ 2. 40GH z , O p e n J D K ( 1. 8. 0_ 161 - b1 4 ) 46 Kl a s s e Ze i t (m s ) LinkedList 662 ArrayList 615 § Na c h de m Ei nl e s e n de s Te x t e s so l l t e es mö g l i c h se i n , fe s t z u s t e l l e n ob ei n be s t i m m t e s Wo r t im Te x t auf t r i t t . § Wa s f ü r e i n e M e t h o d e b r a u c h e n w i r ? § Fr a g e i m C h a t : From to trg2 (Direct Message) : Wie schnell funktioniert contains? O(1)? Al l o f t h e o t h e r o p e r a t i o n s r u n i n l i n e a r t i m e ( r o u g h l y s p e a k i n g ) . 48 contains( val ue ) re t u r n s t r u e i f g i v e n v a l u e i s f o u n d s o m e w h e re i n t h i s l i s t Messu n g en § In p u t : T h o m a s M a n n , D i e B u d d e n b r o o k s , 236' 239 Wö r t e r § Qu e l l e : Pr oj e k t Gu t t e n b e r g § Su c h e (1000 x, 18 Wö r t e r ) § In t e l ( R ) X e o n ( R ) C P U E 5 - 4640 0 @ 2. 40GH z , O p e n J D K ( 1. 8. 0_ 161 - b1 4 ) 49 Kl a s s e Ze i t (m s ) LinkedList 31' 520 ArrayList 8' 083 Meh r Messu n g en fü r an d e r e Kla s s e n § In p u t : T h o m a s M a n n , D i e B u d d e n b r o o k s , 236' 239 Wö r t e r § Qu e l l e : Pr oj e k t Gu t t e n b e r g § Su c h e (1000 x, 18 Wö r t e r ) § In t e l ( R ) X e o n ( R ) C P U E 5 - 4640 0 @ 2. 40GH z , O p e n J D K ( 1. 8. 0_ 161 - b1 4 ) 52 Kl a s s e Ze i t (m s ) LinkedList 31' 520 ArrayList 8' 083 HashSet 2 TreeSet 10 Noc h m eh r K l ei n g ed r u c k t es 55 Wo f i n d e n w i r d i e I n f o r m a t i o n ? Je t z t 5657 Au s z u g . . . 58 We i t e r e D e t a i l s W a r um sol l t en wir AD T ve r w e n d e n ? § We r wi l l meh r al s ei n e Ar t v on L i s t e n , Wa r t e s c h l a n g e n , et c ? § Je d e Im p le m e n t a t io n ka n n für be s t i m m t e Au f g a b e n ef f i z i e n t e r se i n § ArrayList is t sc h n e l l e r we n n wi r El e m e n t e am Ende ei n f ü g en / en t f ern en ; LinkedList is t sc h n e l l e r we n n wi r El e m e n t e in d e r M it t e od e r am An f a n g ei n f ü g en / en t f ern en ; § HashSet fi n d e t ei n en We r t i n ei n er gr o s s e n Me n g e in ku r z e r Ze i t ; TreeSet sp e i c h e r t di e We r t e so r t i e r t . De s h a l b : V a ri a b l e mö g l i c h s t mi t AD T I n t e r f a c e s § Es is t ei n e gut e Id e e di e Va r i a b l e n für An s a m m l u n g e n al s Va r i a b l e d e s A D T I n t e r f a c e Ty p s zu de k l a r i e r e n : List<String> list = new ArrayList <String>(); § Kö n n e n sp ä t e r ko n k r e t e n Ty p für Da r s t e l l u n g an p asse n / au s w äh l e n § Un d d a s Pr og r a m m fu n k t i o n i e r t im m e r no c h § Vo r t e i l de r Ab s t r a k t i on Ab s t r a k t io n § Pr o z e dur a l : § De t ai l s de s Ve r h a l t e n s ( Pr o z e d u r e n , z.B . d e r Met h o d e n ) ni c h t si c h t b a r § Sp e z i f i k a t i o n de s Ve r h a l t e n s is t di e A b s t r ac t i o n § Mü s s e n di e Sp e z i f i k a t i o n mi t ei n er Im p l e m e n t a t i o n erf ü l l en § Da r s t e l l u n g : § De t ai l s de r Da t e n dar s t e l l u n g ni c h t si c h t b a r § Au c h ei n We g Ei g e ns c ha f t e n zu sp e z i f i z i e r e n § Ei n An s a tz übe r Pr og r a m m + Da t e n zu fo l g e r n § St a n d a r d Te r m i n o l o g i e : Ab s tr a k t e Da t a Ty p e n , od e r AD T 61 W a r um is t Da t e n Ab s t r a k t io n so wic h tig § Ar b e i t e n mi t Da t e n ze n t r a l e s The m a vi e l e r An w e n d u n g e n § « Da t e n v e r ar be i t ung » § Da t a S c i e nc e § En t w i c k e l n (u n d Be s c h r e ib e n ) v o n Al g or i th m e n se l t e n e r § Übe r l e g e n Si e si c h we l c h e Da t e n s t r u k t u r e n Si e br a uc he n § Wi e we r d e n di e wi c h t i g e n Da t e n or g a n i s i e r t ? § We l c h e Op e r a t i o n e n dür f e n / mü s s e n Kl i e n t e n mi t de n Da t e n ma c h e n ? 62 W a r um is t Da t e n Ab s t r a k t io n so wic h tig § Mö g l i c h e Pr o bl e m e di e si c h be i m Au s a r b e i t e n de r Ab s t r a k t i on de r Da t e n d a r s t e l l u n g er g eb en kö n n e n : § En t s c he i dung e n fü r / ge ge n ei n e Da t e ns t r uk t ur we r d e n zu fr ü h ge m a c ht § Un n ö t i g e Wi e d e r h o l u n g e n ( in s b e s o n d e r e we n n Tr a n s f o r m a t i o n e n ge m a c ht we r d e n ) § Sp ä t e r e Än d e r u n g e n de r ( K e r n) Da t e ns t r uk t ur e (n ) o f t sc h w i e r i g bz w auf w e ndi g § Gl i e d e r u n g in M o d u le hi l f t is t abe r ni c h t ei n f a c h 63 Ei n AD T de f inie r t Op er a ti o n en § AD T ab s tr ah i e r t di e O r g a ni z a t i o n und be t o n t di e Bed eu t u n g de r Da t e n § AD T än d e r t Fo ku s vo n Str u k tu r au f Ge br a uc h § Da r s t e l l u n g so l l t e für de n Kl i e n t e n ni c h t wi c h t i g se i n § Dahe r so l l t e si e ni c h t si c h t b a r se i n ! § De n k e n im Ra um de r Op e r a t i o n e n § Er s t e l l e n ei n es Ex e m pl ar s , ge t B a s e , ge t A n g l e , …. 64 class RightTriangle { double base , altitude ; } class RightTriangle { double base , hypot , angle ; } Ei n AD T de f inie r t Op er a ti o n en § AD T ab s tr ah i e r t di e O r g a ni z a t i o n und be t o n t di e Bed eu t u n g de r Da t e n § AD T än d e r t Fo ku s vo n Str u k tu r au f Ge br a uc h § Da r s t e l l u n g so l l t e für de n Kl i e n t e n ni c h t wi c h t i g se i n § Dahe r so l l t e si e ni c h t si c h t b a r se i n ! § De n k e n im Ra um de r Sc h n i t ts t e l l e n ( d. h . interface) § Er s t e l l e n ei n es Ex e m pl ar s , ge t B a s e , ge t A n g l e , …. 65 class RightTriangle { double base , altitude ; } class RightTriangle { double base , hypot , angle ; } Vo r t e i l e ei n es F o k us au f A D T s § We n n Kl i e n t e n di e Da t e n a b s t r a k t i o n re s p e k t i e re n ( od e r re s p e k t i e re n mü sse n ) § z.B . Kl i e n t ar be i t e t mi t ei n em « Pu n k t in ei n er 2 - di m Ebe ne mi t di e s e n Op e r a t i o n e n » § En t sc h e i d u n g übe r di e I m pl e m e n t a t i o n de s A D T ka n n au f g e sc h o b e n we r d e n § Kö n n e n Fe h l e r dur c h Än d e r u n g de r Da r s t e l l u n g be he be n § Al g or i t h m e n kö n n e n ge ä n d e r t we r d e n § Um ( be s s e r e ) Lei s t u n g zu erh a l t en § Um be s o nde r e Si t u a t i o n e n aus z unut z e n 66 Co l l e c t i o n s F r ame w o r k Dr e i w i c h t i g e I n t e r f a c e s: List , Map und Set Ab s tr a k t e D a t e n ty p e n ( AD T) m i t u n t e r s c h i e d l i c h e n V or - und N ac h t e i l e n 67 AD T Im p l e m e n t a t i o n e n Vo r t e i l e Na c h t e i l e Ei n s a t z b e i s p i e l List ArrayList LinkedList El em en t e i n R ei h en f o l g e d es Ei n fü g en s g es p ei c h er t , Op e r a t i o n e n am E n d e s c h n e l l La n gs a m e s u c h e , l a n gs a m e s hi nz uf üg e n o de r e n t f e r ne n ir g e n d w e lc h e r ( b e lie b ig e r ) El em en t e Ze i l e n e i n e r D a t e i , G U I El em en t e, L i s t e v o n Ko n t e n Set Ha s h S e t Tr e e S e t Me n g e v o n U n i k a t e n d i e sc h n e ll d u r c h su c h t w e r d e n ka n n Ke i n I n d e x , k e i n Z u g r i f f a u f be l i e bi g e E l e me n t e Un t e r s c h i e d l i c h e W ö r t e r i n Te x t , L o t t e r i e z a h l e n Map Ha s h M a p Tr e e M a p Sp e i c h e r t B e z i e h u n g e n zw i s c h e n « k e y » u n d « v a l u e » Pa a r e n v o n O b j e k t e n Sp e z i e l l e A n s am m l u n g , ke i n e U m ke h r u n g d e r Be z i e h u n g e n Zä h l e n v o n W ö r t e r n o d e r an d e r e n Ob j e k t e n , Te l e f o n b u c h , A d r e s s b u c h We i t e r e ( i n t e r e s s a n t e ) A D T § Wi r h a b e n e i n e L i s t e § In t e r f a c e List § W e rt e w e r d e n n u r a m A n f a n g h i n z u g e f ü g t o d e r e n t f e rn t § Kö n n e n d i e O p e r a t i o n e n s c h l e c h t add(v) und remove() ne nne n § Wo l l e n a u c h n i c h t i m m e r add(0, v) od e r remove(0) ve r w e n d e n § Br a u c h en n eu e N a men § push(v) : f ü g e a m A n f a n g h i n z u § pop() : l i e f e r t W e r t a m A n f a n g 68 Stack : b e s o n d e r e L i s t e § We i t e r e ( m ö g l i c h e ) O p e r a t i o n e n § peek() : E r s t e s E l e m e n t a n s e h e n ( s t a t t get(0) od e r top() ) § isEmpty() ex i s t i e r t s c h o n ( a u s C o l l e c t i o n ) 69 Deque : b e s o n d e r e L i s t e n § Ei n f ü g e n u n d En t f e r n e n a n b e i d e n En d e n d e r L i s t e 70 11. 1. 2 Ab s t r a k t e Kla s s e n 71 LinkedList und ArrayList § Gl e i c he s Ve r h a l t e n ( Me n g e vo n Me t h o d e n , Ef f e k t de r Me t h o d e n ), un t e r s c hi e dl i c he Im p le m e n t a t io n § Ei n i g e Me t h o d e n kö n n e n für be i de Kl as s e n ( ev t l ) dur c h de n se l b e n Co d e im p le m e n t ie r t we r d e n § size() § contains() § isEmpty () 72 public int size() { return size; } public boolean contains(int value) { return ( indexOf (value) >= 0); } public boolean isEmpty () { return (size() == 0); } § Di e se Me t h o d e n kö n n t e n im In t e r f a c e List im p le m e n t ie r t we r d e n § Mu s s abe r dann ei n e Kl a sse se i n we n n auf A t t r i but e zu g e g r i f f e n wi r d Me t h o d e n vo n ArrayList und LinkedList § So l l t e n wi r List in ei n e Kl as s e um w a nde l n ? Wa r u m / Wa r u m ni c h t ? § Kö n n e n wi r auf ande r e We i s e di e s e ( häuf i g e ) Si t u a t i o n be hande l n ? 77 Ab s t r a k t e Kla s s e n ( « Ab s t r a c t C la s s e s » ) § ab s t r act cl as s : Ei n e sp e z i e l l e Kl as s e di e ei n e Mi s c h f o r m zw i s c h e n In t e r f a c e u n d Kl as s e is t . § De f i ni e r t ei n en Su p e r c l a ss - Ty p mi t Met h o d e n d e k l a r a t i o n e n ( wi e ei n In t e r f a c e ) und vo l l s t ä n d i g e n Met h o d e n ( mi t Ru m p f /B o d y ) ( wi e ei n e Kl a s s e ). § De f i ni e r t At t r i b u t e ( wi e ei n e Kl a s s e ) od e r Ko n s t a n te n ( wi e ei n In t e r f a c e od e r Kl as s e n ) § Fü r ab s t r ak t e Kl a sse n kö n n e n ke i n e Ex e m pl ar e er s t el l t we r d e n ( d. h. de r new Op e r a t o r ka n n ni c h t Ex e m pl ar e di e s e s Ty p s ge n e r i e r e n ). § Kl as s e n d i e ni c h t ab s tr ak t si n d ( wi e uns e r e bi s he r i g e n Kl as s e n ) he i s s e n ko n k r e t e (« c on c r e t e » ) K l a s s e n § Ab s t r a k t e Kl as s e n kö n n e n er w ei t er t we r d e n § Er w e i t e r t e Kl a sse is t en t w ed er auc h ab s t r ak t od e r ko n k r e t ( we n n es fü r al l e Met h o d e n ei n e Im p l e m e n t a t i o n gi b t ) § Re g e l n fü r Er w e i t e r ung wi e be i ko n k r e t e n Kl a sse n § Wa s ge h ö r t in ei n e ab s tr ak t e Kl as s e ? § Im p l e m e n t a t i o n ge m e i n s a m e n Zu s t a n d e s (A t t ri b u t e) od e r ge m e i n s a m e n Ve r h a l t e n s di e v o n al l e n Su b c l a sse s ge e r b t we r d e n so l l ( ab s t r ak t e Kl a sse n si n d Su p e r c l a sse s in d e r Ve r e r b u n g s h i e r a r c h i e ) § Ab s tr a k t e Met h o d e n di e di e S ubc l as s e s im p le m e n t ie r e n mü s s e n § Sc h r e i b e n Ve r h a l t e n vo r (R o l l e ei n es In t e r f a c e s ) 79 Ab s t r a c t C la s s S y n t a x § Ke y w o r d abstract // declaring an abstract class public abstract class na m e { ... // declaring an abstract method // (any subclass must implement it) public abstract ty p e me th o d Na me ( par am e t e r s ); } Me t h od en : De k l a r a t i o n – De f i n i t i o n § De k l a r a t i o n (i n ab s tr ak t e r Kl as s e ) § Mi t Ke y w o r d abstract § Mu s s P a r a m et e r , Rü c k g a b e w e r t und Si c h t b a r k e i t fe s t l e g e n § De f i n i t i o n ( i n ko n k r e t e r Un t e r k l a s s e /S u b c l a s s ) § Mi t Ru m p f § Ka n n in abg e l e i t e t e n Kl a sse n übe r s c hr i e be n we r d e n § Es ge l t e n di e Si c h t b a r k e i t sr e g e l n fü r übe r s c hr i e be ne Met h o d e n 81 § Kö n n e n Re f e r e n z v a r i a b l e ei n es ab s tr ak t e n Ty p s de k l a r i e r e n ( ab e r ni c h t Ob j e k t e x e mp l a r e ge n e r i e r e n ) § Wi e be i In t e r f a c e s § Ei n e Er w e i t e r u n g ( mi t t el s extends ) is t au c h wi ed er ab s tr ak t (u n d mu ss al s abstract de k l a r i e r t se i n ) so f e r n ni c h t al l e ab s tr ak t e n Me t h o d e n im p le m e n t ie r t si n d § Ei ne Kl a s s e ka n n al s abstract de k l a r i e r t we r d e n , au c h we n n si e ke i n e ab s t r ak t e n Me t h o d e n en h ä l t § Ve r h i n d e r t Ko n s t r u k t i o n vo n Ex e m pl a r e n 82 Ab s t r a c t C la s s e s v s . I n t e r f a c e s § Nor m a l e Kl as s e n d i e be ha up t e n , ei n In t e r f a c e zu im p le m e n t ie r e n , mü s s en al l e Me t h o d e n de s I n t e r f a c e s im p le m e n t ie r e n : public class Empty implements IntList {} // error § Ab s t r a k t e Kl as s e n kö n n e n be ha up t e n , ei n In t e r f a c e zu im p le m e n t ie r e n ohne Co d e für di e Me t h o d e n zu en t h a l t en – ei n e Su b c l ass m u ss d i e Me t h o d e n im p le m e n t ie r e n . public abstract class Empty implements IntList {} // ok public class Child extends Empty {} // error Ab s t r a k t e Kla s s e n § Er l a u b e n Wi e d e r v e r w e n d u n g vo n ( pa r t i e l l e n ) Lö s u n g e n § Vi e l f a c h in d e r Im p le m e n t a t io n d e s J a v a S y s t e m s ei n g es e t z t 84 Ja v a C o l l e c t i o n Fr am e w o rk 85 <<I n t er f a c e> Co l l e c t i o n <<I n t er f a c e> Li s t <<I n t er f a c e> Se t Ab s t r a c t C o l l ec t i o n Ab s t r a c t L i s t Ab s t r a c t S e t Ab s t r a c t S eq u en t i a l L i s t Li n k e d Li s tAr r a y L i s t Tr e e S e t <<I n t er f a c e> So r t e d Se t Ha s h S e t <<I n t er f a c e> Ma p Ab s t r a c t M a p Tr e e M a p <<I n t er f a c e> So r t e d M ap Ha s h M a p Ja v a E v o l u t i o n § Ur s pr üngl i c h dur ft e e i n interface nur a b s t r a k t e M e t ho de n (oh n e R u m p f ) u n d K on s t a n t e n e n t h a l t e n § Sp ä t e r e R e vi si o n e n d e r Sp r ac h e e r l au b e n au c h , i n e i n e m interface ko n k r e t e M e t h o d e n a n z u g e b e n § Mü s s e n a b e r i m m e r public se i n § Fü r u n s k e i n T h e m a (u n s e r e P r og r a m m e s i n d n i c h t s o um f a ngr e i c h . . . ) 86 Üb e r s i c h t § 11. 1 Ab s t r a k t e Da t e n t y p e n (AD T ) i n J a v a § 11. 2 Ob j e k t In v a r ia n t e n § 11. 3 En t w u r f vo n K l a s s e n § 11. 4 Ko m p a t i b l e An w e i s u n g e n § 11. 6 Re a l e Pr o bl e m e § 11. 7 Bei s p i el (e ) 87 11. 2 Ob j ek t In v a r ia n t e n § Ma n c h m a l kö n n e n / mü s s en al l e Ex e m p l a r e ei n e Bed i n g u n g er f ü l l en § Di e se Bed i n g u n g mu s s vo r und na c h de r Au s f ü h r u n g al l e r Me t h o d e n ge l t e n § Ab e r ni c h t ( unbe di ng t ) wä h r e n d de r Au s f ü h r u n g § So wi e es In v a r ia n t e n für Sc h l e i f e n gi b t so ka n n ma n In v a r ia n t e n für Ob j e k t e de fi ni e r e n § Mü s s e n fü r je d e s Ex e m pl ar ge l t e n § Mü s s e n ge l t e n we n n Zu g r i f f auf Ex e m pl ar mö g l i c h is t 88 Ob j ek t In v a r ia n t e n § Mu s s na c h de r Ko n s t r u k t i o n de s E x e m pl a r s ge l t e n § Ve r a n t w o r t u n g de s Ko n s t r u k t o r s § Ob j e k t In v a r ia n t e : Pr e c ond i t i on und Po s t c o n d i t i o n je d e r Me t h o d e § So l l t e n in d e r Kl as s e n d e f i n i ti o n au f g e f ü h r t we r d e n § Gu t e Do k um e n t a t i o n auc h we n n ni c h t fü r Be w e is e ve r w e n d e t § Ma n c h m a l Kl a sse n i n v a r i a n t e n (« cl a s s i n v a r i a n t s » ) ge n a n nt 899193 Kla s s e ZeitSpanne // Darstellung eines Zeit Intervals von Stunden und Minuten public class ZeitSpanne { private int stunden ; private int minuten ; … } 96 Ko n s t r u k t o r ( en ) § Ei n Ko n s t r u k t o r für ZeitSpanne Ob j e k t e wi r d Stu n d e n und Mi n u t e n al s Pa r a m e t e r ak z e p ti e r e n und ei n en t s p r ec h en d es Ob j e k t e x e mp l a r ko n s t r u i e r e n § Ev t l . br auc he n wi r auc h de n par am e t e r l o s e n Ko n s t r u k t o r – abe r wa s is t ei n e gu t e De f aul t z e i t s panne ? § Da m i t ab e r er g eb en si c h zw e i Pr o bl e m e 97 P r o ble m 1 : ZeitSpanne ( int stunden , int minuten ) § Is t es zu l ä s s i g da s s minuten >= 60 is t ? § Wa s ma c h en wi r we n n z. B . d e r Kl i e n t ei n e Ze i t S p a n n e vo n 0 Stu n d e n und 147 Mi n u t e n ko n s t r u i e r e n wi l l ? Ko n v e r t i e r e n na c h 2 St d und 27 Mi n ? § We r is t da für ve r a n t w o r t l i c h ? § Kl i e n t § ZeitSpanne Kl a sse 100 P r o ble m 2 : ZeitSpanne ( int stunden , int minuten ) § Wa s so l l t e n wi r ma c h en we n n stunden <0 od e r minuten <0 ? § Ne g a t i v e We r t e si n d ni c h t er l a u b t § Wi e dar auf re a g i e re n ? § Au f 0 se t z e n ? § IllegalArgumentException we r f e n 103 Kla s s e ZeitSpanne § At t r i b u t minuten für ZeitSpanne Ex e m p l a r e mu s s zw i s c h e n 0 und 59 ( ei n s c h l i es s l i c h ) lie g e n § Ille g a le Ar g u m e n t e für de n Ko n s t r u k t o r ha be n ei n e IllegalArgumentException zu r Fo l g e § We n n für de n Ko n s t r u k t o r de r W e r t für di e Mi n u t e n de s ZeitSpanne Ob j e k t s ≥ 60 is t so wi r d de r W e r t i n Stu n d e n und Mi n u t e n um g e w a nde l t 104 // Darstellung eines Zeit Intervals von Stunden und Minuten // public class ZeitSpanne { private int stunden ; private int minuten ; public ZeitSpanne ( int stunden , int minuten ){ if ( stunden < 0 || minuten < 0) { throw new IllegalArgumentException (); } this.stunden = stunden + minuten /60; this.minuten = minuten % 60; } } 105 Ob j ek t In v a r ia n t e § At t r i b u t minuten für ZeitSpanne Ex e m p l a r e mu s s zw i s c h e n 0 und 59 ( ei n s c h l i es s l i c h ) lie g e n 106 // Darstellung eines Zeit Intervals von Stunden und Minuten // Invariante : stunden >= 0, 0 <= minuten <= 59 public class ZeitSpanne { private int stunden ; private int minuten ; public ZeitSpanne ( int stunden , int minuten ){ if ( stunden < 0 || minuten < 0) { throw new IllegalArgumentException (); } this.stunden = stunden + minuten /60; this.minuten = minuten % 60; } } 107 Ve r h a l t e n § Si n n v o l l e Op e r a t i o n mi t ZeitSpanne : ve r l ä n g e r n § Ad d i ti on v on St u n d e n und Mi n u t e n § Op e r a t i o n : add( int stunden , int minuten ) § In k o r r e k t e Ve r s i o n public void add( int stunden , int minuten ) { this.stunden += stunden ; this.minuten += minuten ; } 110 Ve r h a l t e n § Di e se Im p le m e n t a t io n d e r add Op e r a t i o n ve r l e t z t ev t l . d ie In v a r ia n t e § Au s s e r d e m mü s s en wi r ille g a le Ar g u m e n t e be ha nde l n 111 public void add( int stunden , int minuten ) { if ( stunden < 0 || minuten < 0) { throw new IllegalArgumentException (); } this.stunden += stunden ; this.minuten += minuten ; // stellt Invariante wieder her this.stunden += this.minuten /60; this.minuten = this.minuten % 60; } 112 Re d u n d a n z § Wi r mü s s en di e In v a r ia n t e an 2 St e l l e n si c h e r s t e l l e n § Im Ko n s t r u k t o r § In d e r add Met h o d e § Wa s we n n wi r sp ä t e r ei n ma l di e Da r s t e l l u n g än d e r n wo l l e n ? 113 Re d u n d a n z § Wi r mü s s en di e In v a r ia n t e an 2 St e l l e n si c h e r s t e l l e n § Im Ko n s t r u k t o r § In d e r add Met h o d e § Wa s we n n wi r sp ä t e r ei n ma l di e Da r s t e l l u n g än d e r n wo l l e n ? § Bes s er wä r e es , nur an ei n er St e l l e mi t de r In v a r ia n t e zu ar b e i t e n 114 Re d u n d a n z § De r Ko n s t r u k t o r so l l di e add Me t h o d e ve r w e n d e n § Na c h In i t i a l i s i e r u n g § add Met h o d e ga r a n t i e r t In v a r i a n t e public ZeitSpanne ( int stunden , int minuten ){ this.stunden = 0; this.minuten = 0; add( stunden , minuten ); } 115 We i t e r e Me t h od en § toString is t (f a s t ) im m e r ei n e wi c h t i g e Me t h o d e // liefert String für diese Zeitspanne // z.B. \"3h 10m\" public String toString () { return \"\" + stunden + \"h \" + minuten + \"m\"; } 116 Abk a p s e lung und In v a r ia n t e n § Oh n e Ab k a p s e l u n g is t es sc h w i e r i g od e r unm ö gl i c h , In v a r ia n t e n si c h e r z u s t e l l e n § Ir g e n d ei n Kl i e n t kö n n t e di e In v a r i a n t e ve r l e t z t e n § Ab k a p s e l u n g gi b t de r Kl as s e di e Ko n t r o l l e übe r di e Op e r a t i o n e n , d i e Kl i e n t e n mi t de n Ex e m p l a r e n ma c h en kö n n e n § Vo r r a u s s e t z u n g fü r Ev o l u t i o n ( d e r Kl a sse ) 117 Ei n e an d e r e Im ple m e n t a tio n § In t e r n e Da r s t e l l u n g mu s s ni c h t de r e x t e r n si c h t b ar e n en t s p r ec h en § Br a u c h en wi r stunden und minuten al s At t r i b u t e ? 118 Ei n e an d e r e Im ple m e n t a tio n § In t e r n e Da r s t e l l u n g mu s s ni c h t de r e x t e r n si c h t b ar e n en t s p r ec h en § Br a u c h en wi r stunden und minuten al s At t r i b u t e ? § Di e Au f t e i l u n g de r Lä n g e in Stu n d e n und Mi n u t e n is t ni c h t zw i n g e n d public class ZeitSpanne { private int minutenInsgesamt ; … } 119 Alt e r na t iv e I m ple m e n t a t io n § Än d e r u n g de r Da r s t e l l u n g mö g l i c h so l an g e Kl i e n t e n ni c h t be t r o ff e n si n d § Ve r e i n f a c h u n g de r add Me t h o d e public void add( int stunden , int minuten ) { if ( stunden < 0 || minuten < 0) { throw new IllegalArgumentException (); } minutenInsgesamt += 60* stunden + minuten ; } 120 // Darstellung eines Zeit Intervals von Stunden und Minuten // Invariante : minutenInsgesamt >= 0 public class ZeitSpanne { … public ZeitSpanne ( int stunden , int minuten ){ minutenInsgesamt = 0; add( stunden , minuten ); } public String toString () { return \"\" + ( minutenInsgesamt / 60) + \"h \" + ( minutenInsgesamt % 60) + \"m\"; } 121 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 11. 0 Sy s t e m a t i s c h e s Pr o g r a m m i e r e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 -- 2022 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 11. 1 Ab s t r a k t e Da t e n t y p e n (AD T ) i n J a v a § 11. 2 Ob j e k t In v a r ia n t e n § 11. 3 En t w u r f vo n K l a s s e n § 11. 4 Ko m p a t i b l e An w e i s u n g e n und Me t h o d e n a u f r u f § 11. 5 Re a l e Pr o bl e m e § 11. 6 Bei s p i el (e ) 2 11. 3 En t w u r f vo n K l a s s e n § Ve r s c h i e d e n e He u r i s ti k e n § Ke i n e fe s t e n Re g e l n § Ar t h u r J . R i e l , Ob j e c t - Or i e n t e d D e s i g n He u r i s t i c s © A ddi s o n - We s l e y , 1 9 9 6 ( o n l i n e v i a E T H L i b r a r y ) 3 § Da t e n so l l t e n in n e r h a lb ei n er Kl as s e ge s c h ü t z t s e i n ( vo r Zu g r i f f od e r Mo d i f i k a t i o n ) (A . 1) § Wa s m u s s wi r k l i c h vo n Kl i e n t e n ge s e h e n we r d e n kö n n e n ? § Wa s wo l l e n Kl i e n t e n mi t de n Da t e n ma c h e n ? Ka n n das ni c h t di e Kl a sse ma c h e n ? ( z.B . ei n e add Met h o d e fü r ZeitSpanne anbi e t e n ) 4 § Ei n e Kl as s e so l l t e ei n e Au f g a b e übe r ne hm e n . § Ei n e Kl as s e so l l ei n e ( nur ei n e ) Ab s t r a k t i on er f a s s en (A . 8) § Ei n e so l c h e Kl as s e ha t ei n e ho he Ko h ä s i o n § Fr a g e : Ha t d i e Kl as s e e i n e e i n d e u ti g e Au f g a b e / Z u s t ä n d i g k e i t ? 5 § Kl as s e n so l l t e n kl e i n s e i n ( A . 3 ) § We n i g e Me t h o d e n / Op e r a t i o n e n § Lei c h t er zu ve r s t e h e n § Kl i e n t e n ( en t w i c k l er ) ve r l i e r e n ni c h t di e Üb e r s i c h t § Es gi b t Au s n a h m e n … 6 § Ve r e r b u n g s et z t Kl as s e n i n ei n e Be z i eh u n g – di e s e so l l t e fr üh in d e r En t w i c k l u n g be r üc k s i c h t i g t we r d e n § Ve r e r b u n g s h i e r a r c h i e n so l l t e n ti e f se i n – je ti e f e r de s t o be s s e r (D . 39) § St r u k t u r de s Da t e n / Ob j e kt Ra u m e s § Ve r e r b u n g s h i e r a r c h i e n so l l t e n nur so ti e f se i n da s s ei n Me n s c h si e im Ku r z z e i t g e d ä c h t n i s sp e i c h e r n ka n n (D . 40) § D. h . 5 - 7 Ebe ne n ; o f t wi r d 6 al s ma x i ma l e r We r t ge n a n nt 7 § Ve r e r b u n g ka n n gut s e i n. M us s es ab e r ni c h t se i n . § Ve r e r b u n g er l a u b t di e Spe zi al i s i er u n g vo n K l a s s e n ( bz w . Ob j e k t e n ) (D . 36) § Dr üc k t ei n e « is t - ei n » Be z ie h u n g aus § Ve r e r b u n g oh n e « is t - ei n » Be z ie h u n g of t e n pr o bl e m a t i s c h 8 § Ma n c h m a l kl i n g t Ve r e r b u n g na c h ei n er gut e n Id e e , ab e r br i ng t sp ä t e r Pr o bl e m e ! § Bei s p i el : Er w e i t e r u n g de r Point - Kl as s e für 3. D i m e n s i o n § Wo l l e n di e Höh e übe r NN hi nz uf üg e n § Wo l l e n So f t w a r e fü r Point Ex e m pl ar e wi e d e r v e r w e n d e n Sl i d e s mi t Ma t e r i a l v o n Mi c h a e l Fa e s 9 Point Kla s s e public class Point { private int x; private int y; // constructors // methods } § Di e se r C o d e de fi ni e r t ei n en Ty p mi t Na m e n Point . § Je d e s Point Ob j e kt en t h ä l t zw e i At t r i b u t e : ei n e ga n z e Za h l ( int ) mi t Na me n x , u n d ei n e ga n z e Za h l ( int ) mi t Na me n y 10 equals Me t h od e in Point // Returns whether obj refers to a Point object with // the same ( x , y ) coordinates as this Point. public boolean equals( Object obj ) { if ( obj instanceof Point) { // obj is a Point; cast and compare it Point other = (Point) obj ; return x == other.x && y == other.y ; } else { // obj is not a Point; cannot be equal return false ; } } 11 § Ma n c h m a l kl i n g t Ve r e r b u n g na c h ei n er gut e n Id e e , ab e r ma c h t sp ä t e r Pr o bl e m e ! § Bei s p i el : Er w e i t e r u n g de r Point - Kl as s e für 3. D i m e n s i o n . 13 Point x : int y : int Point3D z : int public class Point3D extends Point { private int z ; public Point3D( int x, int y, int z) { super (x, y); this . z = z; } public int getZ () { return z ; } } § Im p le m e n t a t io n si e h t ni c h t sc h l e c h t au s ! A b e r A c h tu n g be i equals : § Point : § Point3D : 14 public boolean equals(Object obj) { if (obj instanceof Point) { Point other = (Point) obj; return x == other. x && y == other. y ; } else { return false ; } } public boolean equals(Object obj) { if (obj instanceof Point3D ) { Point3D p = ( Point3D ) obj; return getX () == p.getX () && getY () == p.getY () && z == p. z ; } else { return false ; } } x und y si n d private in S u p e rk la s s e … § Ve r h a l t e n v o n instanceof : § instanceof fr a g t , o b e i n O bj e k t « ei n Point is t » ! § Ve r h a l t e n d e r equals - Me t h o d e n : 15 new Point (4, 3) instanceof Point new Point (4, 3) instanceof Point3D new Point3D (4, 3, 2) instanceof Point true false true ! Point Point3D is t ei n Point p = new Point (12, 7); Point p3d = new Point3D (12, 7, 11); … println (\" p.equals (p3d) = \" + p.equals (p3d)); … println (\"p3d.equals(p) = \" + p3d.equals(p)); p.equals (p3d) = true p3d.equals(p) = false equals so l l t e sy m m e t r i sc h se i n ! § Ab e r Ac h t u n g be i equals : Point : Point3D 16 public boolean equals(Object obj) { if (obj instanceof Point) { Point other = (Point) obj; return x == other.x && y == other.y ; } else { return false ; } } public boolean equals(Object obj) { if (obj instanceof Point3D) { Point3D p = (Point3D) obj; return getX () == p.getX () && getY () == p.getY () && z == p.z ; } else { return false ; } } p.equals (p3d) p3d.equals(p) Lisk o v - sc h es Su b s t i t u t i o n s p ri n zi p § Sc h l e c h t e s D e si g n ! § Co d e d er mi t Point - Ob j e k t e n funk t i o ni e r t s o l l t e a uc h m i t O bj e k t e n v o n S ubk l a s s e n, in k l. Point3D , f u n k t i o n i e r e n . § Su b s ti tu i e r b ar k e i t: Ei n O b j e k t e i n e r S u b k l a sse k a n n ü b e r a l l er f o l gr ei ch ve r w e n d e t w e r d e n , w o e i n O b j e k t d e r S u p e r k l a s s e er w a r t e t wi r d . 17 Ba r ba r a Li s k o v Lisk o v - sc h es Su b s t i t u t i o n s p ri n zi p § Ei n Point3D is t k e in Point . A ls o s o llt e k e in e V e r e r b u n g , d. h. k e i ne « is t - ei n » - Be z i eh u n g , v er w en d e t w er d en ! § Bes s er n eu i mp l emen t i er en , tr o tz C o d e - Du p l i z i e r u n g … 18 Point Point3D 20 « ha t - ei n » – Be z i e h u n g § St a t t V e r e r b u n g ( is t - ei n – Be z i eh u n g ) g i b t es a u c h an d e r e W e g e , « ve r wa n d t e » Ob j e k t e z u v e r k n ü p f e n . § Bei s p i el : E i n e Circle - Kl as s e . D e f i n i e r t d u r c h Ra di us und Z e n tr um , d. h. x - und y - Ko o r d i n a t e . § Wi r kö n n t e n vo n Point er b en u n d radius - At t r i b u t hi nz ufüg e n… § Ne i n . Ei n K r e i s is t k e in Punk t . Auc h w e nn de r Z us t a nd ei n es K r ei s es z u m T ei l a u s d em Z u s t a n d ei n es P u n k t s be s t e h t . r ( x , y ) 21 « ha t - ei n » – Be z i e h u n g § Bes s er : E i n A t t r i b u t v o m T y p Point hi nz ufüg e n. § « ha t - ei n » – Be z i eh u n g : Ei ne V e r k nüp f ung z w i s c he n z w e i O bj e k t e n w o be i e i ne s e i n At t r i b u t e h a t , w e l c h e s e i n e R e f e r e n z a u f d a s a n d e r e e n t h ä l t . D a s en t h a l t en e O b j ek t i s t T ei l d es Z u s t a n d s . § Kl as s e n - Di a g r a m m : § Co d e: § Ob j e k t - Str u k tu r : 22 Circle 11 Point ha t ei n Circle c enter radius 2.5 Point 4x y 3 public class Circle { private Point center ; private double radius ; public Circle(Point center, double radius) { this . center = new Point(center); this . radius = radius; } } Point - Ob j e k t ko p i e r e n , da m i t … Point - 6x y 12 Circle c enter radius 4.7 … je d e s Circle - Ob j e k t se i n ei g en es ha t ! Üb e r s i c h t § 11. 1 Ab s t r a k t e Da t e n t y p e n (AD T ) i n J a v a § 11. 2 Ob j e k t In v a r ia n t e n § 11. 3 En t w u r f vo n K l a s s e n § 11. 4 Ko m p a t i b l e An w e i s u n g e n und Me t h o d e n a u f r u f § 11. 5 Re a l e Pr o bl e m e § 11. 6 Bei s p i el (e ) 23 Ko m p a t i b i l i t ä t d e r R e f e r e n z t y p e n § (V e r e i n f a c h t ) K om p a t i b e l w e n n i m s e l b e n « Z w e i g » d e r T y p Hi e r ar c h i e § En t w e de r be s t i m m t dur c h V e r e r bung ( be i K l as s e n) od e r § Be s t im m t d u r c h E r w e it e r u n g ( b e i I n t e r f a c e s ) § Bei s p i el : T y p A is t Object und T yp B is t Integer da nn is t aref = bref we g e n class Integer extends Object { … } er l a u b t (Integer is t S u b t y p v o n Object) § Zu w e i su n g e r l au b t w e n n k o m p a t i b e l 24 11. 4 K o m p a t i b l e An w ei s u n g en u n d Me t h o d e n a u f r u f § (I m m e r n oc h ) v e r e i n f a c h t … s p ä t e r e V or l e s u n g e n v e r t i e f e n di e s e s The m a § St i c h w o r t : T y p S y s t e m e (si n d n e u e T y p e n c o v a r i a n t , c o n t r a v a r i a n t , in v a r ia n t ? ) § Me i n T i p : ke i n e unnö t i g e K o m pl e x i t ä t i n i hr e n Pr o gr a m m e n § Ab e r S i e w ol l e n v e r s t e h e n w e l c h e M e t h od e n v e r s i on au f g e r u f e n w i r d § Un d d a z u m ü s s e n S i e a l l e R e g e l n f ü r Z u w e i s u n g ( e n ) v e r s t e h e n 2526 Üb e rb l i c k § Zu e r s t n o c h m al Zu w e i su n g e n m i t R e f e r e n z v ar i ab l e n § Er s t m al o hne J a v a interface Ko n s t r u k t § Be z u g z u M e t h o d en a u f r u f mi t P a r a me t er n § Fi n d e n d e r « a m b e s t e n p a s s e n d e n » V e r s i on e i n e r M e t h od e § We n n e s m e h r e r e M e t h o d e n z u r A u s w a h l g i b t § Ov e r l o a d i n g ( m i t Ü b e r r a s c h u n g e n ) § Me t h o d e n a u f r u f Bei s p i el § (e xt r a ) I n t e r f a c e s und K l a s s e n 27 Üb e rb l i c k § Zu e r s t n o c h m al Zu w e i su n g e n m i t R e f e r e n z v ar i ab l e n § Er s t m al o hne J a v a interface Ko n s t r u k t § Be z u g z u M e t h o d en a u f r u f mi t P a r a me t er n § Fi n d e n d e r « a m b e s t e n p a s s e n d e n » V e r s i on e i n e r M e t h od e § We n n e s m e h r e r e M e t h o d e n z u r A u s w a h l g i b t § Ov e r l o a d i n g ( m i t Ü b e r r a s c h u n g e n ) § Me t h o d e n a u f r u f Bei s p i el 28 W a r um ? § Co mp i l er u n d L a u f z ei t s y s t em ar b e i t e n zu s a m m e n § Be i A u s w a h l d e r « a m b e s t e n p a s s e n d e n » M e t h o d e § Be i A u f r u f d e r M e t h o d e § Co mp i l er : a r b ei t e t vo r de r A us führ ung de s Pr o gr a m m s § Ke n n t d e k l a r i e r t e n T y p v o n V a r i a b l e n § Ke n n t ni c h t de n ak t ue l l e n T y p ( de s O bj e k t s auf das di e V ar i abl e ve r w e i s t ) § Ke n n t ni c h t d e n Pf a d z u r Z u w e i s u n g / z u m A u f r u f 29 W a r um ? § Co mp i l er u n d L a u f z ei t s y s t em ar b e i t e n zu s a m m e n § Be i A u s w a h l d e r « a m b e s t e n p a s s e n d e n » M e t h o d e § Be i A u f r u f d e r M e t h o d e § L a u f z e i t s y s t e m : k o n t r o l l i e r t wä h r e n d de r A us führ ung § Ke n n t d e n a k t u e l l e n T y p ( d e s O b j e k t s a u f d a s d i e V a r i a b l e v e r w e i s t ) § Ke n n t a l l e a k t u e l l e n W e r t e § Ap p r o x i m i e r t d e k l a r i e r t e n T y p v on V a r i a b l e n ( f ü r g e n e r i s c h e T y p e n ) 30 Ve r e r b u n g s h i e r a r c h i e § Di e V e r e r b u n g h i e r a r c h i e b e s t i m m t , w e l c h e Zu w e i su n g e n ko m p a t i b e l si n d § Mi t e x p l i z i t e r o d e r i m p l i z i t e r K o n v e r t i e r u n g § Im p liz it e K o n v e r t ie r u n g § superReferenz = subklasseReferenz § Im m e r e r l a u b t – Co m p i l e r p r ü f t o b l e g a l § Ex p l i z i t e K o n v e r t i e r u n g 31 Sn o w Ra i n Fo g Sl e e t § subklasseReferenz = ( Subklasse ) superReferenz § Nu r mi t C a s t § La u f z ei t c h ec k d a s s superReferenz auf S ubk l as s e Ex e m pl ar v e r w e i s t K o m p a t i b l e Zu w e i s u n g e n Snow a; Sleet b; Fog c; Rain r; 32 Sn o w Ra i n Fo g Sl e e t a = b; // compatible, implizit conversion a = new Fog(); // compatible, implizit conversion c = (Fog) a; // compatible, explizit conversion // check at runtime K o m p a t i b l e Zu w e i s u n g e n Snow a; Sleet b; Fog c; Rain r; 33 Sn o w Ra i n Fo g Sl e e t b = new Sleet(); c = (Fog) b; // compatible but exception during execution K o m p a t i b l e Zu w e i s u n g e n Snow a; Sleet b; Fog c; Rain r; 34 Sn o w Ra i n Fo g Sl e e t a = b; // compatible, implizit conversion b = r; // incompatible, cannot be converted b = (Sleet) r; // incompatible, cannot be converted r = (Rain) b; // incompatible, cannot be converted ( I n ) k o m p a t i b l e Zu w e i s u n g e n Dr e i m ö g l i c h e F e h l e r 1. Zu w e i s u n g v o n T y p d e r n i c h t S u b t y p i s t – vo m Co m p i l e r e n t d e c k t : incompatible types 2. Ca s t z u T y p d e r n i c h t S u b - od e r S u p e r t yp i s t – vo m Co m p i l e r e n t d e c k t : inconvertible types 3. Ca s t u n d d e r a k t u e l l e T y p i s t n i c h t ( S u b ) T y p – zu r Lauf z e i t e n t de c k t : cast exception 35 Sn o w Ra i n Fo g Sl e e t // see last slide for context b = r; // 1, Rain not subtype of Sleet b = (Sleet) r; // 2, Sleet not subtype of Rain b = new Sleet(); c = (Fog) a; // 3, a refers to Sleet – not Fog - object Me t h od en B i n d u n g § Zw e i S c h r i t t e 1. Co mp i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e k o mm t / en § Ge s uc h t w i r d a uf gr und de s T yp s de r R e f e r e nz v a r i a bl e und Na m e § Ge funde n w i r d « di e a m be s t e n pa s s e nde » M e t ho de M ( foo in K la s s e o d e r In t e r f a c e Base ) § En t sc h i e d e n w i r d a u f G r u n d d e r P a r a m e t e r 2. Zu r L au f z e i t w i r d d i e V e r si o n v o n M ( foo ) f ü r d e n a k t u e l l e n Ty p a u f g e r u f e n § An n a h m e : M e t h od e (n ) s i c h t b a r 36 Base bref; bref.foo( ... ); 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e P a r a m e t e r pa s s e n§ Pa r a m e t e r p a s s e n : Z u w e i s u n g d e s a k t u e l l e n Pa r a m e t e r s z u m fo r m a l e n P a r a m e t e r e r l a u b t class A { void foo(int i ) { System.out.println (\"foo\"); } } A aref = new A() aref.foo (3); // foo 37 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e Pa ra m e t e r p a s s e n § Pa r a m e t e r p a s s e n : Z u w e i s u n g d e s a k t u e l l e n Pa r a m e t e r s z u m fo r m a l e n P a r a m e te r e r l a u b t class B { void foo(Integer i ) { System.out.println (\"foo\"); } } B bref = new B(); bref.foo ( Integer.valueOf (3)); // foo 38 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e P a r a m e t e r pa s s e n ni c h t § Fa l l A : I m p l i z i t e K o n v e r t i e r u n g i s t m ö g l i c h u n d P a r a m e t e r p a s s t d a n n class C { void foo(Object o) { System.out.println (\"foo\"); } } C cref = new C(); cref.foo ( Integer.valueOf (3)); // foo 39 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e P a r a m e t e r pa s s e n ni c h t § Fa l l B : ( U n ) B o x i n g i s t m ö g l i c h u n d P a r a m e t e r p a s s t d a n n ( e v t l . m i t im p liz it e r K o n v e r t ie r u n g ) class A { void foo(int i ) { System.out.println (\"foo\"); } } A aref = new A() aref.foo ( Integer.valueOf (8)); // foo 40 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e P a r a m e t e r pa s s e n ni c h t § Fa l l C : W e d e r C a s t n o c h B o x i n g i s t m ö g l i c h : F e h l e r ( E r r o r ) v o r Au s f ü h r u n g A aref = new A() aref.foo (\"hello\"); | Error: | incompatible types: java.lang.String cannot be converted to int | aref.foo (\"hello\"); | ^ ----- ^ 41 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Ei n f a c h e r F a l l : e s g i b t n u r e i n e M e t h o d e u n d d i e P a r a m e t e r pa s s e n ni c h t § Fa l l C : W e d e r C a s t n o c h B o x i n g i s t m ö g l i c h : F e h l e r ( E r r o r ) v o r Au s f ü h r u n g B bref = new B(); bref.foo (true); | Error: | incompatible types: boolean cannot be converted to java.lang.Integer | bref.foo (true); | ^ -- ^ 42 W a s pa s s ie r t hie r ? § Fa l l A , B , o d e r C ? class C { void foo(Object o) { System.out.println (\"foo\"); } } C cref = new C(); cref.foo (true); // foo – Fall B: Boxing! Impliziter Cast // boolean - > Boolean - > Object 43 Co mp i l e r – Re i h e n fo l g e d e r S c h r i t t e § An n a h m e : M e t h od e M m i t r i c h t i g e m Na m e n u n d r i c h t i g e r An z a h l / R e i h e n f ol g e P a r a m e t e r § Es g i b t ei n e Met h o d e d i e i n F r a g e k o m m t § Pa s s t Pa r a m e t e r d i r e k t ? § Pa s s t p a s s t Pa r a m e t e r n a c h C a s t ( F a l l A ) ? § Pa s s t Pa r a m e t e r n a c h ( U n ) Bo x i n g ( u n d g g f . Ca s t ) ? (F a l l B )? § Ge h t ni c h t ( F a l l C ) 44 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Et w a s k o m p l i z i e r t e r : E s g i b t m e h r a l s e i n e M e t h o d e f ü r d i e de r / di e P a r a m e t e r di r e k t pa s s t / e n § Ov e r l o a d i n g § Ni c h t e r l a u b t . class X { void foo(int j) { .. } void foo(int k) { .. } } | Error: | method foo(int) is already defined in class X | abstract void foo(int k); | ^ ----------------------- ^ 45 1. C o m p i l er f i n d e t M e t h o d e( n ) d i e i n F r a g e ko m m t / e n § Et w a s k o m p l i z i e r t e r : E s g i b t m e h r a l s e i n e M e t h o d e f ü r d i e de r / di e P a r a m e t e r di r e k t pa s s t / e n § Ov e r l o a d i n g § Ni c h t e r l a u b t . Ei ne s o l c he K l as s e w i r d g ar ni c h t übe r s e t z t ! class X { void foo(int j) { .. } void foo(int k) { .. } } | Error: | method foo(int) is already defined in class X | void foo(int k); | -------------- ^ 46 Me t h od en d e fi n i t i on § Di e De f i n i t i o n e i n e r M e t h o d e b e s t e h t a u s § Na me d e r M e t h o d e § Ty p ( u n d R e i h e n f o l g e ) d e r P a r a m e t e r § Ty p d e s R ü c k g a b e w e r t e s ( b z w . void ) § Gg f . throws Li s t e d er m ö g l i c h en E x c ep t i o n s § Mo d i f i z i e r e r § public , private , protected, static und w e i t e r e § K e i n e z w e i M et h o d e n d ü r f e n s e l b e n N a m e n u n d Pa r a m e t e r l i s t e h a b e n 47 «s i g n a t u r e » public static void foo(int x, Object o) throws IOException Gi l t a u c h f ü r M e t h o d e n d e k l a r a t i o n in I n t e r f a c e od e r ab s t r ak t e r Kl a s s e 1. C o m p i l er f i n d e t M e t h o d en d i e i n F r a g e ko m m e n § Ko m p l i z i e r t e r : E s g i b t m e h r a l s e i n e M e t h o d e f ü r d i e d e r / d i e Pa r a m e t e r na c h B o xi ng und / od e r C a s t s pa s s t / e n§ Ke i n e M e t h o d e p a s s t d i r e k t § Ov e r l o a d i n g m i t u n t e r s c h i e d l i c h e n S i g n a t u r e n § Ei ne s o l c he K l as s e wi r d übe r s e t z t ! class X { void foo(int i , double d) { System.out.println (\"Option 1\"); } void foo(double d, int i ) { System.out.println (\"Option 2\"); } } 48 § Ko m p l i z i e r t e r : E s g i b t m e h r a l s e i n e M e t h o d e f ü r d i e d e r / d i e Pa r a m e t e r na c h B o xi ng und / od e r C a s t s pa s s t / e n § Ei ne s o l c he K l as s e wi r d übe r s e t z t ! § Au f r u f n u r g e s t a t t e t w e n n M e th od e e i n d e u ti g b e s ti m m t X xref = new X(); xref.foo (1, 1.0); // Option 1 xref.foo (0.0, 1); // Option 2 xref.foo (1, Double.valueOf (0.0)); // Option 1 xref.foo (0, 1); | Error: | reference to foo is ambiguous | both method foo( int,double ) in X and [..] foo( double,int ) in X match | xref.foo (0, 1); | ^ ------ ^ 49 Co m p i l e r fi n d e t Error in M e t h o d e di e A uf r uf v o n foo() en th ä l t § De r T y p d e r R e f e r e n z v a r i a b l e e n t sc h e i d e t w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l § Ov e rri d i n g übe r s c hr e i b t i n e i ne r E r w e i t e r ung e i ne M e t ho de de r S upe r k l a s s e we n n d i e S i g n a t u r i d e n t i s c h i s t . 50 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . 51 Ba s e fo o ( i n t ) fo o ( O b j e c t )Base bref = new Base(); bref.foo(7); 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . § Di e se M e t h o d e w i r d z u r L a u f z e i t a u f g e r u f e n 52 Ba s e fo o ( i n t ) fo o ( O b j e c t )Base bref = new Base(); bref.foo(7); 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . 53 Ba s e fo o ( i n t ) fo o ( O b j e c t )Base bref = new Base(); bref.foo(Integer.valueOf(7)); 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . § Di e se M e t h o d e w i r d z u r L a u f z e i t a u f g e r u f e n 54 Ba s e fo o ( i n t ) fo o ( O b j e c t )Base bref = new Base(); bref.foo(Integer.valueOf(7)); 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e ü b e r s c h r e i b t , d a n n wi r d d i e V er s i o n d es a k t u el l en T y p s a u f g er u f en 55 Ba s e fo o ( i n t ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) 2. ) Au f r u f ( z u r L a u f z ei t ) d er V er s i o n f ü r a kt u e l l e n T y p § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e a u f g e r u f e n we r d e n s o l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e ü b e r s c h r e i b t , d a n n wi r d d i e V er s i o n d es a k t u el l en T y p s a u f g er u f en 56 Ba s e fo o ( i n t ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t w i r d a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t 57 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t w i r d a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t 58 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new Base(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t w i r d a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t 59 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new Base(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t § Er w e i t e r u n g u n w i c h t i g . . . 60 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new Base(); bref.foo(7); Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t 61 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new Base(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t 62 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t § We l c h e V e r s i o n ? 63 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) od e r Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t § We l c h e V e r s i o n ? 64 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Po l l od e r Wa r u m s p i e l t d i e R e i h e n f o l g e d e r S c h r i t t e e i n e Ro l l e ? § De r 1 . S c h r i t t b e s t i m m t e , w e l c h e M e t h o d e au f g e r u f e n w e r d e n so l l . § We n n e i n e E r w e i t e r u n g e i n e M e t h o d e übe r s c hr e i b t , da nn w i r d di e V e r s i o n de s ak tu e l l e n T y p s au f g e r u f e n § Ab e r 1 . S c h r i t t a b h ä n g i g v on T y p d e r Re f e r e n z v a r i a b l e g e m a c h t § We l c h e V e r s i o n ? 65 Ba s e fo o ( d o u b l e ) fo o ( O b j e c t ) Base bref = new ExtB(); bref.foo(7); Ex t B fo o ( i n t ) fo o ( O b j e c t ) Po l l 66 Me t h od en Ov er l o a d i n g u n d Ov er r i d i n g § Kö n n e n ge n a u e s hi ns e he n ve r l a n g e n § Wi r wo l l e n Si e ni c h t he r e i nl e g e n ab e r Si e mü s s en Un t e r s c hi e d vo n O ve r l o a d i n g u n d O ve r r i d i n g ke n n e n § Si e mü s s en ve r s t e h e n , we l c h e Me t h o d e in ei n em Pr o gr a m m oh n e Ov e r l o a d i n g au f g e r u f e n wi r d 67 Ov er l o a d i n g § Ov e r l o a d i n g in Ko m b i n a t i o n mi t Ca s t s und Wr a p p i n g er f o r d er t g en a u es h i n s eh en § Ov e r l o a d i n g ha t ab e r au c h hi l fr e i c he A s pe k t e 68 Ov er l o a d i n g § Ve r e i n f a c h t da s Le s e n und di e Kl i e n t e n § Kö n n t e ne ue Na m e n ei n f ü h r en void foo ( int j , double d ) { … } void foo (double d , int j ) { … } § wä r e da nn void foo_1 ( int j , double d ) { … } void foo_2 (double d , int j ) { … } 69 Ov er l o a d i n g § Ov e r l o a d i n g ka n n ei n g es e t z t we r d e n § Fü r Met h o d e n di e i n de r se l b e n Kl a sse de f i ni e r t si n d § Fü r Met h o d e n di e i n un t e r s c hi e dl i c he n Kl a sse n ei n er In h e r i t a n c e Hi e r a r c h i e de f i ni e r t si n d § Fü r Met h o d e n di e i n In t e r f a c e s od e r ab s t r ak t e n Kl a sse n de f i ni e r t si n d § Au c h für Ko n s t r u k t o r e n … § « Übe r l a de ne » Me t h o d e n kö n n e n ( wi e al l e Me t h o d e n ) übe r s c hr i e be n we r d e n 70 Ov er r i d i n g u n d Ov er l o a d i n g § Um e i ne M e t ho de a us de r S upe r k l a s s e T i n de r S ubk l a s s e S zu ü b e r s c h r e i b e n m ü s s e n d i e P a r a m e t e r l i s t e n i n T u n d S id e n t is c h s e in . § So n s t h a n d e l t e s si c h u m O v e r l o a d i n g § Ge f a hr be i O v e r l o a di ng: i m pl i z i t e K o n v e r t i e r ung e n § Ei n z i g e r e r l a u b t e r U n t e r sc h i e d : d e r R ü c k g a b e w e r t T R in T mu s s mi t Rüc k g a be w e r t S R i n S ko m p a t i b e l se i n § D. h . Zu w e i s u n g variableTR = variableSR is t erl a u b t 71 Ov er l o a d i n g u n d Ov er r i d i n g § Ma c h e n S i e si c h da s L e be n ni c h t unnö t i g sc h w e r § Ve r l a s s e n Si e si c h ni c h t au f im p liz it e Ko n v e r t i e r u n g e n § St e l l e n Si e si c h e r das s ei n e Met h o d e ei n e ande r e übe r s c hr e i b t we n n Si e d a s wo l l e n class C extends B { @Override String foo(Y yref ) { return \"foo 1 C\"; } } 72 method does not override or implement a method from a supertype @Override ^ Ov er l o a d i n g so l l d em K l i en t en h el f en § Gut e s B e i s pi e l : System.out.print( Argument ) § Me t h o d e print is t « ov e r lo a d e d » – 9 - fa c h § Me t h o d e println s o g a r 1 0 - fa c h 7374757677 Zu r ü c k z u u n s e r e m B e i s p i e l 78 Zu r ü c k z u u n s er em B ei s p i el ArrayList <Integer> al = new ArrayList <Integer>( Arrays.asList (1, 2, 3)); al ==> [1, 2, 3] al.remove ( Integer.valueOf (1)) al ==> [2, 3] ArrayList <Integer> al = new ArrayList <Integer>( Arrays.asList (1, 2, 3)); al ==> [1, 2, 3] al.remove (1) al ==> [1, 3] ArrayList <Integer> al = new ArrayList <Integer>( Arrays.asList (1, 2, 3)); al ==> [1, 2, 3] long q = 1; al.remove (q); al ==> [1, 2, 3] 79 Zu r ü c k z u u n s er em B ei s p i el , T ei l 2 ArrayList <Integer> al = new ArrayList <Integer>( Arrays.asList (1, 2, 3)); al ==> [1, 2, 3] short s = 1; al.remove (s); al ==> [1, 3] ArrayList <String> al = new ArrayList <String>( Arrays.asList (\" a\",\"b \", \"c\")); al ==> [a, b, c] al.remove (1) al ==> [a, c] 80 Zu r ü c k z u u n s er em B ei s p i el , T ei l 3 ArrayList <String> al = new ArrayList <String>( Arrays.asList (\" a\",\"b \", \"c\")); al ==> [a, b, c] al.remove ( Integer.valueOf (0)) al ==> [a, b, c] al.remove (0+Integer.valueOf(0)) al ==> [b, c] 81 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 , 2 0 1 8 Al l r i g h t s r e s e r v e d . 1 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 11. 0 Sy s t e m a t i s c h e s Pr o g r a m m i e r e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 -- 2021 Al l r i g h t s r e s e r v e d . 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 12. 0 Fi n a l e Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 -- 2021 Al l r i g h t s r e s e r v e d . In f o r m a tio ne n z ur P r üf ung § Al l e An g a b e n oh n e Ge w ä hr . Än d e r u n g e n mö g l i c h . 4 P r üf ung § Wa s ic h we i s s : § Am 3. 2. 2023, 14: 00 – 16: 40 § Wo ? I n Z ü r i c h , ve r s c h i e d e n e Or t e § Pr o gr a m m i e r pr üfung (a m C om p u t e r ) u n d ( sc h r i f t l i c h e ) Gr undl a g e n § Sc h r i f t l i c h (1 / 3 Pu n k t e , 4 0 M in ) § Pr og r a m m i e r p r ü f u n g (2 / 3 Pu n k t e , 8 0 M in + 4 0 M in « e x t r a » ) § Ke i n e Pa u s e zwi s c h e n de n Blö c k e n 5 Al l e An g a b e n oh n e Ge w ä hr . Än d e r u n g e n mö g l i c h . Ei n P r o b l e m . § HS 2 0 2 0 / 2 1 § St u d i e r e n d e : 5 9 2 § An m e l d u n g e n : 551 (S t a n d D e z. 2 0 2 0 ): § An m e l d u n g e n : 475 (S t a n d 1 W o c h e v o r P rü f u n g ) § Pr ü f u n g e n : 452 6 § Pl ä tz e : 513 in 1 2 R ä u m e n Ei n P r o ble m -- Ei n e V e r b e s s e r u n g § HS 2 0 2 0 / 2 1 § St u d i e r e n d e : 5 9 2 § An m e l d u n g e n : 551 (S t a n d D e z. 2 0 2 0 ): § An m e l d u n g e n : 475 (S t a n d 1 W o c h e v o r P rü f u n g ) § Pr ü f u n g e n : 452 10 § Pl ä tz e : 513 § HS 2 0 2 2 / 2 3 § St u d i e r e n d e : 6 0 2 § An m e l d u n g e n : 572 (S t a n d D e z. 2 0 2 2 ): § An m e l d u n g e n : 510 (V e r m u t u n g 1 W o c h e v o r P r ü f u n g ) § Pr ü f u n g e n : 480 § Pl ä tz e : 531 in 4 R ä u m e n Wo ? ? § HG u n d O N A § ON A § Ne u n b r u n n e n s t r a s s e 50, 8050 Z ü r i c h § Wä h r e n d de s S e m e s t e r s fü r Vo r l e s u n g e n ge n u t z t § Dahe r le id e r ke i n e Pr ob e p r ü f u n g § HG 16 Jan 2 0 2 0 17 Ph o t o : T . M o s e r , L E T , E T H ON A E 7 Jan 2 0 2 0 18 HG G 1 (B i l d: T h. Gr o s s Aug 2 0 2 0 J a n 2 0 2 1 Aug 2 0 2 1 19 (B i l d: E T H / S t e f a n Gei s s l er I D S D L ) ON A E 7 Fe b 2 0 2 3 § Ve r m u t l i c h m e i s t e R ä u m e w i e i m J a n 2 0 2 0 , e i n R a u m w i e i n Au g 2 0 2 0 / Au g 2 0 2 1 20 ONA G eb ä u d e -- Hi n w ei s § 373 P l ä t z e , e i n E i n g a n g § Sc h l a n g e (n ) m ö g l i c h § K e i n V o r d a c h , k e i n e L o b b y , k e i n e H a l l e … § Ne h m e n S i e e i n e n R e g e n s c h i r m m i t w e n n d a s W e t t e r un fr e undl i c h i s t § Di e P r üf ung s s e s s i o n g e h t w e i t e r … 21 P r üf ung s um g e bung § Ec l i p s e ( wi e in St u d e n t e n a r b e i t sr ä u m e n , H G ) § Li s t e ( nur E ng l i s c h v e r f üg bar ) § Pr o j e k t e im wo r k s p a c e § Li nux ( abe r br auc he n Si e ni c h t wi r k l i c h ) § Ja v a 1 7 Do k um e n t a t i o n in E c lip s e [ Eng l i s c h !] § Ke i n gi t – Pr oj e k t d a t e i e n lo k a l sp e i c h e r n ge n ü g t § Übe n Si e mi t E c l i ps e § Vi e l e gu t e Fe a t u r e s § Ab e r wi c h t i g e r is t das s Si e Ih r e Pr og r a m m e dur c hde nk e n 23 We i t e r e In f o r m a tio ne n § St an d ar d : de ut s c h - sc h w e i z e r i sc h e Ta s t a t u r § ( wi e in St u d e n t e n a r b e i t sr ä u m e n , H G ) § Üb e n Si e … we n n Si e \" { \" i n d e r Pr ü f u n g su c h e n mü s s e n ve r g e h t Ze i t ! § ( Ho f f e n tl i c h ) U S Ta s t a t u r e n ve r f ü g b a r § eM a i l Mi t t e Ja n u a r 2023 § Ni c h t ga r a n t i e r t und auc h ni c h t wi r k l i c h en t s c h ei d en d § Ke i n e Mo b i l t e l e f o n e , T a b l et s , S m a r t w a t c h e s et c in d e n Pr üfungs r ä um e n ( zu h a u s e od e r in R u c k s a c k la s s e n ) § Vi e l l e i ch t ande r e Re g e l u n g we n n fr ü h e r Ei nl as s in Rä u m e 24 We i t e r e I n f o r m a t i o n e n § Pr üfung au f D e u tsc h § An t w or t e n au f En g l i sc h ak z e p ti e r t § Li b r e T r a n s l a t e ( Op e n S o u r c e M a c h i n e T r a n s l a t i o n ) wä h r e n d de r Pr o gr a m m i e r pr üfung § Ni c h t wä h r e n d de r ( sc h r i f t l i c h e n ) Gr u n d l a g e n p r ü f u n g § Wö r t e r b u c h er l a u b t (g i l t für al l e E T H Pr üfung e n ) 25 We i t e r e I n f o r m a t i o n e n § Ra um e i n t e i l ung ku r z (1 - 2 Ta g e ) vo r de r Pr üfung pe r eM a i l § Ev t l . auc h sc h o n fr ü h e r (T r a d eo f f – Ab m e l d u n g e n ko m m e n vo r ) § Zu f ä l l i g e Ei n t e i l ung § St e l l e n Si e si c h e r das s eM a i l Si e err ei c h t 26 We i t e r e I n f o r m a t i o n e n § We i t e r e In f o r m a t io n e n sp ä t e r § Ge n a u e r Ab l a u f § Re g e l n – bi t t e Les en ! § Di e Di s z i pl i nar o r dnung ke n n t dr ak o ni s c he St r a f e n § Ge h e n Si e zu m ri c h t i g en Ra u m zu r ri c h t i g en Ze i t § We b Se i t e be o ba c h t e n § Si d e - Ch a n n e l : I n « An k ü n d i g u n g e n …» se h e n Si e we n n wi c h t i g e eM a i l ve r s c h i c k t wu r d e 27 P r üf ung s a bla uf ( Ä n d e ru n g e n mög l i c h ) § Tü r ö f f n u n g um … ( mi n d es t en s 30 M i n vo r Pr üfungs be gi nn ) § Si e mü s s en ni c h t vo r h e r er s c h ei n en § We r si c h bi s zu m Pr üfungs be gi nn ei n r ei h t ha t di e vo l l e Ze i t ! § Si e dür f e n na c h Ei n t r i t t de n Pr üfungs r a um ni c h t ve r l a s s e n § Au s n a h m e : Be s u c h vo n W C § Ni e me h r al s ei n St u d e n t /i n zu r se l b e n Ze i t ( Ko n t r o l l e dur c h Au f s i c h t ) 28 P r üf ung s a bla uf ( Ä n d e ru n g e n mög l i c h ) § Ei n g a n g sk o n t r o l l e ( mi t Le g i ) § Pl a t z ne hm e n § Ca . 1 0 M i n vo r St ar t ma c h en wi r ei n e Du r c h sa g e § Le t z t er Ze i t p u n k t In t e r n e t - fä h i g e Ge r ä t e zu ve r s o r g e n § Le t z t e Ch a n ce To i l e t t e n b e s u c h oh n e Au f s i c h t § Sc h r i f tl i c h e Pr üfung § Leg en Si e d i e Leg i auf Ih r e n Ar b e i ts p l a tz ( ev t . Ko n t r o l l e ge f o r d e r t vo n E T H ) § En d e sc h r i f t l i c h e Pr üfung § Leg en Si e d i e Leg i auf di e Pr ü f u n g – wi r sa m m e l n di e Pr ü f u n g ei n § Ke i n We i t e r a r b e i t e n an de r sc h r i f t l i c h e n Pr ü f u n g 29 § Beg i n n Pr o gr a m m i e r pr üfung § Na c h An w e i s u n g e n : § An m e l d e n am C o m put e r § Hi l f r e i c h : ne t hz Ko n t o Na me ( abe r ni c h t zwi n g e n d …) § Ec l i p s e st a r t e n § En d e na c h 2 S t d od e r we n n Si e fe r t i g si n d § Co m p u t e r sp e r r e n § gg f . Ra u m ve r l a s s e n § Ke i n e In t e r n e t - fä h i g e n Ge r ä t e zu g e l a s s e n § Ke i n e Sm a r t w a t c h e s e t c . § Ne h me n Si e ei n e ( ei n f a c h e ) Uh r mi t § Ev t l . is t ei n e Uh r im Ra u m ni c h t ei n f a c h si c h t b a r … 30 We n n d e r P r ü f u n g s c o m p u t e r s p i n n t … § Me l d e n S i e s i c h b e i d e r A u f s i c h t § We n n e s m i t d e m S y s t e m e i n H a r d w a r e / S o f t w a r e P r o b l e m gi b t e r ha l t e n S i e e i ne n ne ue n A r be i t s pl a t z § und e i ne Z e i t gut s c hr i ft § Ab e r : w e n n S i e 1 0 0 J V M s l a u f e n l a s s e n (u n d I h r S y s t e m la n g s a m lä u f t ) d a n n is t d a s Ih r P r o b le m § Au c h d a s F i n d e n e i n e r E n d l os - Sc h l e i f e i s t I h r P r o b l e m 32 P r üf ung s a bla uf § Na c h de r Pr üfung dür f e n Si e d e n Pr üfungs r a um bi s 20 Mi n u t e n vo r En d e ve r l a s s e n . § Wo l l e n ru h i g e At m o s p h ä r e bi s zu m Ende § Bit t e Ra u m le is e ve r l a s s e n – ev tl . habe n ande r e St u d i e r e n d e ei n e Ze i t g u t s c h r i f t § Wi r sa m m e l n di e Au f g a b e n s t e l l u n g e n (u n d d i e sc h r i f t l i c h e Pr ü f u n g ) ei n § Ne h m e n Si e Les es t o f f mi t … § Ke i n Ha n d y et c nac h St a r t d e r Pr ü f u n g bi s nac h Ve r l a s s e n de s Ra u m s 33 Ei n (un) wic h tig e r As pe k t § We n n Si e « ge r i n g f ü g i g » ve r s p ät e t si n d dür f e n Si e ev t l . d ie Pr üfung no c h ab l e g e n § Ke i n An r e c h t abe r auc h in d e r Sc h w e i z ka n n es Ve r s p ä t u n g e n ge b e n § Ex t r a Ze i t am Ende § Ge r i n g f ü g i g : < 3 0 Mi n u t e n § Hä n g t ab v o n Ra u m b e l e g u n g , I T ( L E T ) P e r s o n a l § In f o r m ie r e n Si e be i Ve r s p ä t u n g e n ( od e r Er k r a n k u n g e n ) sc h n e l l s t e n s di e Pr üfungs pl a ns t e l l e !! ( +4 1 4 4 6 3 2 2 0 6 8 ) § Ni c h t de n Do z e n t e n 36 P r üf ung § Um f a ng : § In h a l t de r Vo r l e s u n g § Pr ob e p r ü f u n g e n im Ar c h i v de s V I S § Mi t b r i n g e n : § Leg i § St i f t ( wi r st e l l e n Pa p i e r ) § gg f Wö r t e r b u c h (E - D, F - D, F - E, I - E, I - D, … . ) § Oh n e Ja v a No t i z e n ! 37 P r üf ung s s t o f f § In h a l t de r Vo r l e s u n g § In k l u s i v e EB N F , w e ak e s t p r e c o n d i t i o n s , Sc hl e i f e n In v a r i a n t e n und de n be ha nde l t e n Ja v a Ko n z e p t e n § Ve r s t ä n d n i s , ni c h t De t ai l s § Ze i g e n Si e, das s Si e pr o gr am m i e r e n kö n n e n § Ev a l u a t i o n d e r P r o g r am m i e r p r ü f u n g p r i m är dur c h Te s t S u i t e § Ih r Pr ogr a m m mu s s übe r s e t z t we r d e n kö n n e n ! § Ko m m e n t a r e wi e Si e da s P r o bl e m lö s e n kö n n t e n he l f e n ni c h t ( vi e l ) § Di e ab g e g e b e n e Lö s u n g zä h l t § Gr a p h i s c h e Be n u t z e r ob e r f l ä c h e ni c h t Pr ü fu n g s s t off 38 P r üf ung s s t o f f § Re g e l n wi e für di e Bo n u s a u f g a b en § Si e be k o m m e n ge n a u e An w e i s u n g e n § Zw e i Ma l : § Ei n paar Ta g e vo r de r Pr ü f u n g ( zu Ha u s e le s e n , ni c h t mi t b r i n g e n ) § Mi t de r Pr ü f u n g § Si e dür f e n al l e Kl asse n / Bi b l i o t h ek en na c h Wu n s c h im p o r t ie r e n es s ei de nn es is t ex p l i z i t ve r b o t e n § Im p o r t i e r e n Si e abe r nur wa s S i e br auc he n § We n n Im p o r t v e r b o t e n dann is t auc h Im p o r t mi t vo l l s t ä n d i g e m Na me n ve r b o t e n ( ja v a .u t i l .S c a n n e r ) 39 P r üf ung s s t o f f § Si e dür f e n Kl as s e n ve r ä n d e r n / hi nz ufüg e n es s ei de nn es is t ex p l i z i t ve r b o t e n § Än d e r n Si e ni c h t di e Si g n a tu r e n vo n vo r g e g e b e n e n Me t h o d e n od e r Ko n s t r u k t o r e n ! § Vo r s i c h t mi t static Va r i a b l e n ( me i n Ra ts c h l a g : nur we n n nö t i g ) § Wa n d e l n Si e ni c h t In t e r f a c e s in K la s s e n u m od e r um g e k e hr t 40 Be w e r t u n g § Pr o gr a m m i e r a uf g a be n mü s s en Te s t s u i t e be ha nde l n kö n n e n § Wi r ge b e n ei n i g e Te s t s vo r , ande r e so l l t e n Si e se l b s t sc h r e i b e n § Da s Pr o gr a m m mu s s übe r s e t z t und au sg e f ü h r t we r d e n kö n n e n . § Wi e be i de n Bo n u s a u f g a b en 41 Be w e r t u n g § Pr o gr a m m i e r a uf g a be n mü s s en Te s t s u i t e be ha nde l n kö n n e n § Es gi b t we i t e r e Te s t s fü r di e Be w e r t u n g § Äh n l i c h wi e be i Bo n u s a u f g a b en ( je meh r Te s t s ko r r e k t be ha nde l t we r d e n de s t o be s s e r ) § Ko r r e k t h e i t – ni c h t La u f z ei t ( in n e r h a lb ve r n ü f t i g e r Gr e n z e n ) § St e l l e n Si e si c h e r da s s Ih r Pr o gr a m m te r m i n i e r t § Wi r st e l l e n « gr o s s e » Te s t s e t s zu r Ve r f ü g u n g § Lö s u n g mu s s auc h fü r gr o s s e s Te s t s e t fu n k t i o n i e r e n § In 1 0 s e c so l l t e je d e r Te s t ( be que m ) aus g e f ühr t we r d e n kö n n e n 45 Vo r b e r e i t u n g § Si e kö n n e n Fr a g e n an ep r o g - hi l f e @ i n f . e t hz . c h sc h i c k e n § Od e r auc h an mi c h di r e k t § Ni c h t an di e As s i s t e n t * in n e n (d i e habe n auc h Pr ü f u n g e n ) § Fü r in t e r e s s a n t e Fr a g e n we r d e n wi r di e An tw or t auf de r W e b Se i t e publ i z i e r e n § Fr a g e n na c h de m 2 6 . Jan u ar we r d e n ( ev t l ) ni c h t be a n t w o r t e t § Ke i n e Ve r w i r r u n g in d e n le t z t e n N St u n d e n 46 Vo r b e r e i t u n g § Stu d y C e n t e r f ü r Hi l f e i m Jan u ar § Wo c h e v o m 1 6 . J a n . § Wo c h e v o m 2 3 . J a n . § .... a b e r n i c h t s p ä t e r § Fa n g e n S i e r e c h t z e i t i g a n § Pr og r a m m i e r e n e r f or d e r t Ü b u n g 47 De t a i l s f o l g e n p e r e M a i l . E v t l . m i t vo r h e r i g e r A n m e l d u n g . Be z ü g l i c h de r Pr ü f u n g habe ic h ei n paar Fr a g e n : Ka n n ma n a n d e n al t en Pr ü f u n g e n übe n --- JA bz w . ve r ä n d e r t s ic h z. B . im Th e o r i e t e i l de r Au f g a b e n t y p fü r EBN F ? --- Mö g l i c h ( si e h e un t e n ) Ko n k r e t : Mü s s e n wi r s c h w e r p u n k t m ä s s ig ve r i f i z i e r e n ob e in e Z e ic h e n f o lg e mi t t e l s EBN F Re g e l n le g a l is t , od e r mü s s e n wi r s c h w e r p u n k t m ä s s ig EBN F Re g e l n e r s t e lle n ? --- be i de s is t mö g l i c h So l l t e ma n d i e Au f g a b e n in d e n Se r i e n er n eu t lö s e n od e r eh er in d ie Br e i t e ge h e n und an d er e Au f g a b e n t y p e n au s vo r h e r i g e n Jah r en übe n ? -- le r n e n Si e mi t de n Ko n z e p te n zu ar be i t e n -- ei n e ne ue Au f g a b e is t vi e l l e i c h t si n n v o l l e r al s ei n e al t e ( sc h o n ei n m a l ge l ö s t e ) 48 Be m e r k u n g e n e i n e s S t u d i e r e n d e n Hä u f i g ha be ic h la n g e an d e n Au f g ab e n ge s e s s e n und ma n c h ma l vi e l Ze i t im De b u g g i n g ve r b r a c h t . W i e \" s c h n e l l \" so l l t e ma n Pr a xi sa u f g a b e n lö s e n kö n n e n ? Ge he n Si e in k r e m e n t e ll vo r . Wa s is t ve r l a n g t ? W a s sag e n di e T e s t s ? W a s ha be ic h vi e l l e i c h t übe r s e he n ? Ei n e la n g e Bes c h r ei b u n g hi l ft Ih n e n . S ie so l l t e n ni c h t ra t e n mü s s en . 49 Be m e r k u n g e n e i n e r A s s i s t i e r e n d e n § Pr o gr a m m i e r e n e r f o r de r t Übung § Üb e n S i e § Bo n u s p r ü f u n g en u n d a l t e P r ü f u n g en i m V I S A r c h i v § VI S h i l f s b e r e i t – me l d e n S i e f e h l e n d e D a t e i e n e t c . § L e s e n S i e d i e A u f g a b e n s t e l l u n g e r s t w e n n S i e d i e A u f g a b e n lö s e n w o lle n § Lö s en S i e d i e l e t z t en P r o b ep rü f u n g en m i t Z ei t f en s t er 50 ET H P r ü f u n g e n s i n d n i c h t e i n f a c h § An d e r s a l s G y m i § Me l d e n S i e s i c h a b w e n n S i e n i c h t v o r b e r e i t e t s i n d § Se tz e n Si e si c h i n d e r P r ü f u n g n i c h t u n t e r D r u c k . A u f g ab e n ha be n ( f a s t i m m e r ) T e i l a uf g a be n – au c h e i n e p ar ti e l l e L ö su n g zä h l t 51 Be w e r t u n g : P u n k t e à Not e § Vi e l e O p t i o n e n ( f ü r d e n D o z e n t e n ) § 0 % Pk t – > 1 . 0 , 1 0 0 % P k t – > 6 . 0 § 0 % Pk t – > 1 . 0 , 9 0 % P k t – > 6 . 0 § 0 % Pk t – > 1 . 0 , 4 0 % P k t – > 4 . 0 , 9 0 % P k t – > 6 . 0 § Wi r v e r s u c h e n f a i r z u s e i n § So l l t e e i n e A u f g a b e z u sc h w i e r i g se i n d a n n p a sse n w i r d i e B e n o t u n g an 52 Vo r l e s u n g § Ex p e r i m e n t m i t F o k u s G r u p p e n § Wa s i s t I h r e E r f a h r u n g ? § So l l t e n w i r so e t w a s a u c h im näc hs t e n Ja h r ma c h e n ? § La s s en S i e es u n s w i s s en § Wi e w a r e s i n d e n « g e m i s c h t e n G r u p p e n » ? § De r V S ET H m a c h t d a z u e i n e U m f r a g e § ht t p s : / / e v a l u at i o n - app1 . l e t . e t hz . c h/ e v al # § (F r a g en a n d en V SE T H ) 53 Vo r l e s u n g 2 0 2 3 § We r b u n g § Wi r s u c h e n ( w i e d e r ) [ H i l f s ] A s s i s t i e r e n d e § Bei I n t er es s e s c h i c k en S i e mi r Ma i l (E n d e F e b '2 3 , n a c h P r ü f u n g sse ssi o n ) § Vo r a u s s e t z u n g e n § In t e r e s s e a m U n t e r r i c h t e n / H e l f e n / E r k l ä r e n § Sp a ss a m P r o g r a m m i e r e n § Ke i n e f e s t e G r e n z e f ü r N o t e § Ab e r S i e s ol l t e n d a s M a t e r i a l b e h e r r s c h e n § Be id e T e ile d e r Ba s is p r ü f u n g m ü s s e n b e s t a n d e n s e in 5456 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g 11. 0 Sy s t e m a t i s c h e s Pr o g r a m m i e r e n Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 -- 2022 Al l r i g h t s r e s e r v e d . Üb e r s i c h t § 11. 1 Ab s t r a k t e Da t e n t y p e n (AD T ) i n J a v a § 11. 2 Ob j e k t In v a r ia n t e n § 11. 3 En t w u r f vo n K l a s s e n § 11. 3. 1 Be is p ie l – Fe s t s t e l l e n vo n Ei g e ns c ha f t e n § 11. 3. 2 Be is p ie l – Kl a sse n e n t w u r f § 11. 3. 3 Be is p ie l – Äh n l i c h e s Ve r h a l t e n § 11. 4 Ko m p a t i b l e An w e i s u n g e n und Me t h o d e n a u f r u f § 11. 5 Re a l e Pr o bl e m e 59 11. 3. * B em er k u n g en z u P r o g r a m m i er a u f g a b en § L e s e n S i e d i e A u f g a b e n s t e l l u n g a u f m e r k s a m d u r c h § Wa s s o l l I h r P r o g r a m m m a c h e n ? § Sk i z i e r e n Si e B e i sp i e l T e s ts/ Se h e n Si e si c h d i e an g e g e b e n e n Te s t s a n § We n n S i e A u f g a b e n s t e l l u n g v e r s t e h e n , s k i z z i e r e n S i e e i n e Lö s u n g § We r d e n d i e U n i t T e s t s b e h a n d e l t ? V i e l l e i c h t m e h r T e s t s s k i z z i e r e n § Da n a c h k ö n n e n S i e J a v a C o d e sc h r e i b e n 60 11. 3. 1 Be i s p i e l – Fe st ste l l e n vo n Ei g e n s c h a f t e n 6162636465 11. 3. 2 Be i s p i e l – Kla s s e ne n t w ur f 66 Heu r i s ti k fü r En t w u r f 1. Kl as s e n id e n t if iz ie r e n 2. Be z i eh u n g zw i s c h e n Kl as s e n er a r b ei t en 3. At t r i b u t e 4. Me t h o d e n It e r a t iv : m e h r e r e M a le d u r c h s p ie le n En t w u r f v e r f e i n e r n 676870 Be i s p i e l 71 Ve r e i n f a c h u n g e n 7273 Wa s fü r Fr ag e n hä t t e ei n /e En t w i c k l e r /in? 74 Fr ag e n ? Anna hm e n § Al l e Fa h r s t ü h l e si n d una bhä ngi g vo n ei n a n d er § Fa h r s t ü h l e be w e g e n si c h nur na c h ob e n od e r un t e n , d. h. di e Ka b i n e n be w e g e n si c h nur ve r t i k a l , ni c h t ho r i z o n t a l § Ze i t zu m Öf f n e n / Sc h l i e sse n de r Tü r e n ka n n ve r n a c h l ä s s i g t we r d e n § We n n Fa h r s t u h l k a b i n e n si c h ni c h t be w e g e n da nn st e h t de r Fa h r s t u h l au f ei n er Et a g e 7677 Fr o m Wi k i m e d i a C o m m o n s unde r t he cr e a t i v e co m m o n s cc - by - sa 3 . 0 lic e ns e . Fr o m Yo u Tu b e vi d e o by T hy s s e nK r upp ( a c c e s s e d 1 2 / 2 0 / 1 9 ) 1. ) K l a s s e n fi n d en § He u r i s ti k : Nom e n im Te x t fi nde n 7879 Be i s p i e l 8081 Be i s p i e l 82 Kla s s e n fi n d en § He u r i s ti k : Nom e n im Te x t fi nde n und or d n e n Fa h r s t u h l , L i f t St o c k w e r k , Et a g e , Ei n s t i e g se t a g e , Zi e l e t ag e Si m u l a t o r Ge bä ude Re i s e w u n s c h . Li f t b e w e g u n g , Ruf Po s i t i o n , Ri c h tung 85 Kn ö p f e , Ruf Pa s s a g i e r e § Ni c h t je d e s Nom e n is t re l e va n t § Kn ö p f e § Ma n c h e Nom e n kö n n e n wi r ni c h t ei n o r d n en § Üb e r b l i c k , Zu s t a n d , Ei ns a t z § Ab g r e n z u n g zw i s c h e n Nom e n ni c h t im m e r kl a r § Ru f , Re i s e w u n s c h , P o s it io n § Po s i t i o n , Zi e l e t a g e , Ri c h tu n g 86 Er s t e Kla s s e n Lis t e § Ge bä ude § be s t e h t aus Et a g e n [ St o c k w e r k e n ] ( An z a h l is t Pa r a m e t e r ) u n d Fa h r s t ü h l e n ( An z a h l is t Pa r a m e t e r ) § Pa s s a g i e r § ge n e r i e r t Re i s e w ü n s c h e (a u f ei n er Au s g a n g s e t a g e , zu ei n er Zi e l e t a g e ) § Fa h r s t u h l § be w e g t si c h nac h ob e n bz w un t e n od e r st e ht st i l l § ha t P o s i t i o n und Zi e l 87 F o r t s e t z ung § Si m u l a t o r § fü r Ge b ä u d e mi t N St o c k w e r k e n und M Fa h r s t ü h l e n § 1 - Se k u n d e Gr a n u l a r i t ä t § fü h r t Bu c h § Lo g b u ch § häl t Er e i g ni s s e fe s t 88 2. ) Be z i e h u n g zw i s c h e n Kla s s e n er a r b ei t en § Pa s s a g i e r e ru f e n Fa h r s t u h l § Fa h r s t u h l re i s t zu r Au s g a n g s e t a g e , öf f n e t si c h , fä h r t zu r Zi e l e t ag e § Lo g b u ch hä l t Er e i g n i sse fe s t 91 ve r w e n d e t 92 GebaeudeSimulator FahrstuhlStockwerk 1. . * 1 11 1. . * 1 + main( args ) Be z i e h u n g zw i s c h e n Kla s s e n er a r b ei t en § Pa s s a g i e r e ru f e n Fa h r s t u h l § Fa h r s t u h l re i s t zu r Au s g a n g s e t a g e , öf f n e t si c h , fä h r t zu r Zi e l e t ag e § Lo g b u ch hä l t Er e i g n i sse fe s t § Et w a s fe h l t : we r en t s c h ei d e t ( wä h l t Fa h r s t u h l au s , fi nde t nä c hs t e Au s g a n g s e t a g e )? § Ko n t r o l l e r al s Ab s t r a k t i on de r Fa h r s t u h l k o n t r o l l e 93 ve r w e n d e t § Re s t d e r Be s c h r e i b u n g fü g t no c h me h r El e m e n t e hi nz u … 94 Gebaeude - Kontroller Simulator FahrstuhlStockwerk 1. . * 1 11 1. . * 1 + main( args ) § Br a u c h en wi r Pa s s a g i e r e ? 95 3. ) A t t ri b u t e § St o c k w e r k : § Pa s s a g i e r e wa r t e n auf Re i s e nac h ob e n § Pa s s a g i e r e wa r t e n auf Re i s e nac h un t e n § Fa h r s t u h l § Po s i t i o n § Zi e l e t a g e § Zu s t a n d : fa h r e n d , wa r t e n d 96 4. ) Me t h od en § Si m u l a t o r § ei n S c h ri t t § ve r a r b e i t e W u e n s c h e § St o c k w e r k § re s e t W u n s c h ( Ri c h tu n g ) § Fa h r s t u h l § se t Z i e l § ge t P o s i t i o n , ge t R i c ht u n g § mov e C a b i n 97 11. 3. 3 Be i s p i e l – Ähnlic he s Ve r h a l t e n 99100 11. 5 R e a l e P r ob l e m e § Mö g l i c h e U r s a c h e n § Endl i c he Dar s t e l l ung v o n ( i m P r i nz i p) ung e g r e nz t e n W e r t e n § z.B . 3 2 - bi t int re p r ä s e n t i e r t g a n z e Z a h l § Il l u s i o n e n d e r P r o g r a m m i e r s p r a c h e § z.B . == Op e r a t o r f ü r d o u b l e ( R e p r ä s e n t a t i o n v o n r e e l l e n Z a h l e n ) ob w oh l B e r e c h n u n g e n u n g e n a u s i n d § Op t i m i e r u n g e n d e r J a v a S o f t w a r e P l a t f o r m d i e z u u n t e r s c h i e d l i c h e m Ve r h a l t e n ( z . B . a b h ä n g i g v o n K o n f i g u r a t i o n ) f ü h r e n § Si e h e n ä c h s t e Sl i d e s 101 11. 5. 1 J a v a u n d d i e J V M § Vo r s i c h t be i eq u a l s, = = , u n d B o x i n g § Ja v a Vi r t u e l l e Ma c h i n e ( J V M) führ t Ja v a Pr o gr a m m au s – und ve r s u c h t Op t i mi e r u n g e n § Vi e l e Op t i m i e r u n g e n si n d ni c h t ( im Pr og r a m m ) si c h t b a r § Ab e r m a n c h e sc h o n … 102 Fü r Re f e r e n z t y p e n be nut z e n wir equals § Si e er i n n er n si c h 103 Di e equals Me t h od e § St r i n g Ob j e kt e we r d e n mi t ei n er Met h o d e mi t Na me n equals ve r g l i c h e n . Scanner console = new Scanner(System.in ); System.out.print(\" Wie heissen Sie ? \"); String name = console.next (); if ( name.equals(”Hase \") ) { System.out.println(\" Wissen Sie mehr ? \"); ... } Ve r g l e i c h e vo n S t r i n g Ob j ek t en§ Ve r g l e i c h s o p e r a t o r e n wi e < und == funk t i o ni e r e n ni c h t wi e vi e l l e i c h t er w ar t e t für Ob j e k t e . Scanner console = new Scanner(System.in ); System.out.print(”Wie heissen Sie ? \"); String name = console.next (); if ( name == ” Hase \" ) { System.out.println (” Wissen Sie mehr ? \"); } else { System.out.println (\" Gehen Sie!\"); } § Di e se s Pr o gr a m m wi r d übe r s e t z t ab e r de r T e s t er g i b t ni e true . Wie heissen Sie? Gehen Sie! Hase Gilt fü r al l e Re f e r e n z t y p e n Point p1 = new Point(4,5); Point p2 = new Point(4,5); if (p1 == p2) { // always false! } if (p1. equals (p2)) { // true! mit richtigem equals … § Wi r mü s s e n Met h o d e equals() aus Object übe r s c hr e i be n 106 Fü r al l e Re f e r e n z t y p e n § De r Ve r g l e i c h s o p e r a t o r == t e s t et für Ob j e k t r e f e r e n z e n ob es si c h um da s se l b e Ex e m p l a r ha nde l t ListNode front, current; ... if (front == current) { // circular list } § Ka n n au c h ( je na c h Pr o bl e m ) si n n v o l l se i n 107 Da s sel b e Ex e m p l a r v s . gl e i c h e Ex e m p l a r § Fü r Ba s i s t y p en gi b t es ke i n e n Un t e r s c hi e d int x = 5; int y = x; if (x==5) { … } if (x==y) { … } § Di e Za h l «5» gi b t es nur ei n ma l § Un d wi r kö n n t e n equals() ni c h t ve r w e n d e n da es ke i n Ob j e kt e x e m p l a r gi b t 108 ( Aut o m a t is c he s Un - )B o x ing § … wu r d e zu Ja v a hi nz ug e füg t na c hde m ma n Er f a h r u n g e n mi t Wr a p p e r Ty p e n ( Integer , Double , … ) ha t t e § Au t om a t i s c h e s Bo x i n g / U n b o x i n g ka n n zu Übe r r a s c hung e n führ e n , de nn di e J a v a La u f z e i t u m g e b u n g ve r s u c h t , d e n Sp e i c h e r p l a tz sp ar sam zu be nut z e n 109 Ar be it e n mi t Wr a p p e r Ty p e n § Fü r Ex e m p l ar e ei n es Wr a p p e r Ty p s ge l te n di e übl i c he n Re g e l n fü r Re fe r e n z v a r i a b l e 113 Integer i1 = Integer.valueOf (128); Integer i2 = Integer.valueOf (128); System.out.print (\"Integer \"+ i1+\" and \"+i2+\" :\"); if (i1 == i2){ System.out.println (\" Equal\"); } else { System.out.println (\" Not Equal\"); } § Ou t p u t wi e (? ) er w a r t e t Integer 128 and 128 : Not Equal Oh n e de pr e c a t e d Ko n s t r u k t o r Ar be it e n mi t Wr a p p e r Ty p e n 114 Integer i1 = Integer.valueOf (0); Integer i2 = Integer.valueOf (0); System.out.print (\"Integer \"+ i1+\" and \"+i2+\" :\"); if (i1 == i2){ System.out.println (\" Equal\"); } else { System.out.println (\" Not Equal\"); } § Ou t p u t wi e (? ) er w a r t e t Integer 0 and 0 : Equal Oh n e de pr e c a t e d Ko n s t r u k t o r § Fü r Ex e m p l ar e ei n es Wr a p p e r Ty p s ge l te n di e übl i c he n Re g e l n m an c h m al ni c h t Bo x i n g v o n W r a p p e r Ty p e n § Fü r Ex e m p l ar e ei n es Wr a p p e r Ty p s ge l te n di e übl i c he n Re g e l n m an c h m al ni c h t 115 Integer i1 = 0; Integer i2 = 0; System.out.print (\"Integer \"+ i1+\" and \"+i2+\" :\"); if (i1 == i2){ System.out.println (\" Equal\"); } else { System.out.println (\" Not Equal\"); } § Ou t p u t wi e er w a r t e t Integer 0 and 0 : Equal Ve r w e n d u n g ei n er int Va r i a b l e ände r t ni c h t s Bo x i n g v o n W r a p p e r Ty p e n § Fü r Ex e m p l ar e ei n es Wr a p p e r Ty p s ge l te n di e übl i c he n Re g e l n m an c h m al do c h 116 Integer i1 = 128; Integer i2 = 128; System.out.print (\"Integer \"+ i1+\" and \"+i2+\" :\"); if (i1 == i2){ System.out.println (\" Equal\"); } else { System.out.println (\" Not Equal\"); } § Ou t p u t wi e er w a r t e t Integer 128 and 128 : Not Equal Ve r w e n d u n g ei n er int Va r i a b l e ände r t ni c h t s Vo r s i c h t be i au t o ma t i s c h e m (U n)B o x ing § Au s d r ü c k e mi t Integer Ex e m p l a r e n , d i e dur c h Bo x i n g en t s t a n d en , kö n n e n zu Übe r r a s c hung e n führ e n 117 ArrayList <Integer> list = new ArrayList <Integer>(); int n = 420; list.add (n); list.add (n); if ( list.get (0) == list.get (1)) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } int n = 42; list.add (n); list.add (n); if ( list.get (0) == list.get (1)) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } Vo r s i c h t be i au t o ma t i s c h e m (U n)B o x ing § Au s d r ü c k e mi t Integer Ex e m p l a r e n , d i e dur c h Bo x i n g en t s t a n d en , kö n n e n zu Übe r r a s c hung e n führ e n 118 ArrayList <Integer> list = new ArrayList <Integer>(); int n = 420; list.add (n); list.add (n); if ( list.get (0).equals( list.get (1))) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } Vo r s i c h t be i au t o ma t i s c h e m (U n)B o x ing § Au s d r ü c k e mi t Integer Ex e m p l a r e n , d i e dur c h Bo x i n g en t s t a n d en , kö n n e n zu Übe r r a s c hung e n führ e n 119 ArrayList <Integer> list = new ArrayList <Integer>(); list.add ( Integer.valueOf (420)); if ( list.get (0) == 420) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } list.add (new Integer(42)); if ( list.get (0) == 42) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } Vo r s i c h t be i Wr a p p e r Ty p e n § Au c h Integer.valueOf ( int value) sc h ü t z t ni c h t im m e r vo r Übe r r a s c hung e n § Si e h e vo r h e r i g e Be is p ie le 121 § Fü r ma n c h e We r t e wi r d be i m Bo x i n g d a s Integer Ex e m p l a r wi ed er v er w en d e t ( hi e r für 42) u n d be i an d e r e n ni c h t ( für 420). § «I d e a l l y , b o x i n g a p r i m i t i v e v a l u e w o u l d a l w a y s y i e l d a n i d e n t i c a l re f e re n c e . I n p r a c t i c e , t h i s m a y n o t b e f e a s i b l e u s i n g e x i s t i n g im p le m e n t a t io n t e c h n iq u e s . [ . . ] [ C ] e r t a in co m m o n v a l u e s [s h o u l d ] a l w a y s be bo x e d i n t o i ndi s t i ng ui s ha bl e o bj e c t s . » Or a c l e J a v a D o c ( j l s - 5. 1. 7) § «C o m m o n v a l u e s » wi r d vo m Co mp i l er / La u f z e i t s y s t e m de fi ni e r t , d. h. is t « im p le m e n t a t io n d e p e n d e n t » § Un t e r s c h i e d l i c h e Sy s t e m e habe n ev tl . un t e r s c hi e dl i c he We r t e § Das S y s t e m ka n n ko n f i g u r i e r t we r d e n java - Djava.lang.Integer.IntegerCache.high =420 Boxing § d. h . a n un t e r s c hi e dl i c he n Ta g e n / Sy s t e m e n ka n n es ei n ande r e s Ve r s t ä n d n i s vo n « c o m m o n v a l u e s » ge b e n . 122 java - Djava.lang.Integer.IntegerCache.high =130 § Da m i t st e l l e n wi r si c h e r da s s Integer i1 = Integer.valueOf (128); Integer i2 = Integer.valueOf (128); § au f d as se l b e Ex e m p l a r ve r w e i s e n System.out.print (\"Integer \"+ i1+\" and \"+i2+\" :\"); if (i1 == i2){ System.out.println (\" Equal\"); } else { System.out.println (\" Not Equal\"); } § Ou t p u t wi e (? ) er w a r t e t Integer 128 and 128 : Equal 123 Mei n Ra t s c h l ag § Fü r Ob j e k t e x e mp l a r e be nut z e n wi r equals() – au c h für Wr a p p e r Ty p e n 124 ArrayList <Integer> list = new ArrayList <Integer>(); int n = 420; list.add (n); list.add (n); if ( ( list.get (0)).equals( list.get (1)) ) { System.out.println (\"Equal\"); } else { System.out.println (\"Not Equal\"); } 11. 5. 2 Re a l i t ä t und Ab s t r a k t io n § long und int si n d Ba s i s t y p en für di e Da r s t e l l u n g vo n ga n z e n Za h le n § Ja v a ke n n t ke i n e «u n s i g n e d » Za h l e n ( d. h. , Za h l e n oh n e Vo r z e i c h e n , d. h. ni c h t - ne g a t i v e Za h l e n ) § double is t ei n Ba s i s t y p für re e l l e Za h le n § Al l e Za h le n d a r s t e llu n g e n si n d en d l i c h § 32 b i t fü r int § 64 b i t fü r long und double 125 Re a l i t ä t und Ab s t r a k t io n § Ge g e be n int i ; Gi l t i * i >= 0 ? 126 Re a l i t ä t und Ab s t r a k t io n § Ge g e be n int i ; Gi l t i * i >= 0 ? 127 jshell > int i = 40000; i ==> 40000 jshell > int j = 50000; j ==> 50000 jshell > i * i $3 ==> 1600000000 jshell > j*j $4 ==> - 179496729 W a s is t hie r pa s s ie r t ? 128 En d l i c h e Da r s t e l l u n g ( en ) § Ei n e na t ür l i c he Za h l X wi r d dur c h 32 B i t s da r g e s t e l l t § Al l g e m e i n : X h a t w Bit s x w - 1 x w - 2 .. x 1 x 0 § Ei n e Da r s t e l l u n g we i s t je d e m Bi t ei n Ge w i c h t zu § Ge w i c h t vo n B i t w i : 2 i ( fü r al l e B i t s 0 . . w - 1) § Wi r ha t t e n ( vi e l l e i c h t ) fr ühe r sc h o n ge s e h e n di e I n t e g e r Da r s t e l l u n g vo n X ge s e h e n : § Ei ne Ab b i l d u n g vo n 3 2 B i t s i n d i e na t ür l i c he n Za h l e n § Inte ge r(X) he i s s t hi e r : na t ür l i c he ga n z e Za h l , ke i n Be z u g zu r Ja v a Kl a sse 129 I n t e g e r ( X ) = x i ⋅ 2 i i = 0 w − 1 ∑ Na t ür l i c he Z a hl e n: ℕ 0 = { 0 , 1 , 2 , . . . } En d l i c h e Da r s t e l l u n g § Mi t di e s e r Ab b i l d u n g kö n n e n wi r mi t w Bi t s Za h le n in Ber ei c h vo n 0 … 2 w – 1 d a r s t e l l e n § Za h l e n o h n e V o r z e i c h e n ( « u n s i g n e d » ) § Se i t Ja v a 8 a u c h i n Ja v a m ö g l i c h (sp ä t e r m e h r ) . . . § Di e A b b i l d u n g n e n n e n w i r d a h e r B 2 U ( B i n a r y - to - Uns i gne d) 130 B2U(X) = x i ⋅2 i i=0 w−1 ∑ 131 Bi t s B2 U 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 8 1001 9 1010 10 1011 11 1100 12 1101 13 1110 14 1111 15 § Um uns ei n Bi l d zu ve r s c h a f f e n ar b e i t e n wi r mi t w == 4 § Un s i g n e d Be r e ic h : 0 … 15 Neg a ti v e Z a h l en § De r S p e i c h e r i m C o m p u t e r h a t k e i n « V o r z e i c h e n » § Nu r B i t s … . § Ne g a t i v e Z a h l e n s i n d (a u c h ) s e h r w i c h t i g § Ei n e W e g n e g a t i v e Z a h l e n d a r z u s t e l l e n i s t , d a s G e w i c h t e i n e s Bi t s z u ä n d er n : § Ge w i c h t v on B i t 0 . . w - 2: 2 i (w i e b i s h er) § Ge w i c h t v on B i t w - 1: – 2 w - 1 132 X h a t w Bi t s x w - 1 x w - 2 .. x 1 x 0 Neg a ti v e Za h l e n § Di e se Da r s t e l l u n g he i s s t da s Zw e i e r k o m p l e m e n t (« T w o's Co mp l emen t » ) § B2 T – Bin a r y - to - Tw o ' s c o m p l e m e n t § Bi t w - 1 is t da s « Vo r z e i c h e n b i t » – « si g n e d i n t e g e rs» § 0: Za h l po s i t i v § 1: Za h l ne g a t i v § Ab e r Vo r s i c h t : h a t Ge w i c h t – 2 w - 1 § Di e Dar s t e l l ung fü r Ja v a int We r t e und V ar i abl e ( long ge n a u s o mi t 64 b i t ) 133 B2T(X) = −x w−1 ⋅2 w−1 + x i ⋅2 i i=0 w−2 ∑ 134 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 § Um uns ei n Bi l d zu ve r s c h a f f e n ar b e i t e n wi r mi t w == 4 § «S i g n e d » Be r e ic h : – 8 … 7 135 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 § Um uns ei n Bi l d zu ve r s c h a f f e n ar b e i t e n wi r mi t w == 4 § Un s i g n e d Be r e ic h : 0 … 15 § Si g n e d B e r e i c h : – 8 ... 7 § ( – 2 w - 1 ) … ( 2 w - 1 – 1) § Ad d i t i on / Su b tr ak ti o n kö n n e n ef f i z i e n t im p le m e n t ie r t we r d e n § Id e n t i s c h e Ha r d w a r e fü r si g n e d u n d uns i g ne d Po s i t i v e & n e g a t i v e Za h l e n 136 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 § Um uns ei n Bi l d zu ve r s c h a f f e n ar b e i t e n wi r mi t w == 4 § Un s i g n e d Be r e ic h : 0 … 15 § Si g n e d B e r e i c h : – 8 ... 7 § ( – 2 w - 1 ) … ( 2 w - 1 – 1) § Ad d i t i on / Su b tr ak ti o n kö n n e n ef f i z i e n t im p le m e n t ie r t we r d e n § Id e n t i s c h e Ha r d w a r e fü r si g n e d u n d uns i g ne d Po s i t i v e & n e g a t i v e Za h l e n Po s i t i v e & n e g a t i v e Za h l e n § Bei s p i el Ad d i t i on : 2 + 4 2: 0010 4: 0100 6: 0110 137 Bi t s B2 T 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 - 8 1001 - 7 1010 - 6 1011 - 5 1100 - 4 1101 - 3 1110 - 2 1111 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Bei s p i el Ad d i t i on : 2 + 4 2: 0010 4: 0100 6: 0110 138 Bi t s B2 T 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 - 8 1001 - 7 1010 - 6 1011 - 5 1100 - 4 1101 - 3 1110 - 2 1111 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Bei s p i el Ad d i t i on : – 7 + 2 – 7 : 1 0 0 1 2: 0010 2: 1011 139 Bi t s B2 T 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 - 8 1001 - 7 1010 - 6 1011 - 5 1100 - 4 1101 - 3 1110 - 2 1111 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Bei s p i el Ad d i t i on : – 7 + 2 – 7 : 1 0 0 1 2: 0010 – 5 : 1 0 1 1 140 Bi t s B2 T 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 - 8 1001 - 7 1010 - 6 1011 - 5 1100 - 4 1101 - 3 1110 - 2 1111 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Wa s pa s s i e r t we n n uns e r Er g e b n i s ni c h t da r g e s t e l l t we r d e n ka n n ? § Wr a p - ar o und § Bei s p i el Ad d i t i on : 5 + 4 5: 0101 4: 0100 6: 1001 141 Bi t s B2 T 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 - 8 1001 - 7 1010 - 6 1011 - 5 1100 - 4 1101 - 3 1110 - 2 1111 - 1 Wä r e 9 we n n wi r ke i n Vo r z e i c h e n hä t t e n (a l s o mi t uns i g ne d Za h l e n ar b e i t e t e n ) Po s i t i v e & n e g a t i v e Za h l e n § Wa s pa s s i e r t we n n uns e r Er g e b n i s ni c h t da r g e s t e l l t we r d e n ka n n ? § Wr a p - ar o und § Bei s p i el Ad d i t i on : 5 + 4 5: 0101 4: 0100 6: 1001 142 Wä r e 9 we n n wi r ke i n Vo r z e i c h e n hä t t e n (a l s o mi t uns i g ne d Za h l e n ar b e i t e t e n ) Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Wa s pa s s i e r t we n n uns e r Er g e b n i s ni c h t da r g e s t e l l t we r d e n ka n n ? § Wr a p - ar o und § Bei s p i el Ad d i t i on : 5 + 4 5: 0101 4: 0100 – 7: 1001 143 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 Ab e r wi r ar b e i t e n mi t Za h le n mi t Vo r z e i c h e n (s i g n e d ) Po s i t i v e & n e g a t i v e Za h l e n § Wa s pa s s i e r t we n n uns e r Er g e b n i s ni c h t da r g e s t e l l t we r d e n ka n n ? § Wr a p - ar o und § Bei s p i el Ad d i t i on : – 8 – 1 - 8: 1000 1: 0001 6: 0111 144 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 Po s i t i v e & n e g a t i v e Za h l e n § Wa s pa s s i e r t we n n uns e r Er g e b n i s ni c h t da r g e s t e l l t we r d e n ka n n ? § Wr a p - ar o und § Bei s p i el Ad d i t i on : – 8 – 1 - 8: 1000 1: 0001 7: 0111 145 Bi t s B2 U B2 T 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 - 8 1001 9 - 7 1010 10 - 6 1011 11 - 5 1100 12 - 4 1101 13 - 3 1110 14 - 2 1111 15 - 1 § Da h e r g i l t : M A X_ V A L U E + 1 = = M I N _ V A L U E § 7 + 1 = = – 8 ( fü r 4 - Bit A d d it io n ) int myInt = Integer.MAX_VALUE ; System.out.println ( myInt ); System.out.println (myInt+1); § ab e r …. ( s e i t J a v a 8 ! ) u n s i g n e d O p e r a t i o n e n i n Integer String sInt = Integer.toUnsignedString (myInt+1); System.out.println ( sInt ); 146 2147483648 2147483647 - 2147483648 § Da h e r g i l t : M A X_ V A L U E + 1 = = M I N _ V A L U E § 7 + 1 = = – 8 ( fü r 4 - Bit A d d it io n ) int myInt = Integer.MAX_VALUE ; System.out.println ( myInt ); System.out.println (myInt+1); 147 2147483647 - 2147483648 § We n n für ei n e int Va r i a b l e x da s Re s u l t a t vo n ( x+k ) < x ( mi t k>0 ) da nn lie g t ei n Ov e r f l o w vo r § Od e r U n d e r f l ow we n n (x - k) > x ( mi t k>0 ) 148 W a r um is t da s wic h tig ? § Fü r int gi l t da he r ( le id e r ) ni c h t § intA > intB ⇒ ( intA + 1) > ( intB + 1) § Od e r § intA < ( intA + 1) 149 Ma ssn a h m en § Mü s s e n si c h e r s t e l l e n da s s uns e r Pr o gr a m m nur We r t e im Ber ei c h vo n ( – 2 w - 1 ) … ( 2 w - 1 – 1) p r o d u z i e r t . § Mi t int ar b e i t e n ab e r b e i m ö g l i c h e m O v e r f l o w / U n d e r f l o w long ve r w e n d e n § Ka n n s o f e s t s t e l l e n o b O v e r f l o w / U n d e r f l o w a u f t r a t 150 Da s is t ab e r nic h t al l e s … § Gi l t de nn we n i g s t e n s (a + b) + c == a + (b + c) ? § Fü r int/long ja . 151 Re a l i t ä t und Ab s t r a k t io n § Ge g e be n double d, e, f; Gi l t (d + e) + f == d + (e + f) ? class Weird { public static void main (String[] args) { double d = 1e308; System.out.println( (d + - d) + 3.14); System.out.println(d + ( - d + 3.14)); } } 152 Re a l i t ä t und Ab s t r a k t io n § Ge g e be n double d, e, f; Gi l t (d + e) + f == d + (e + f) ? class Weird { public static void main (String[] args) { double d = 1e308; System.out.println( (d + - d) + 3.14); // 3.14 System.out.println(d + ( - d + 3.14)); // 0.0 } } 153 Da s is t ab e r nic h t al l e s … § Gi l t de nn we n i g s t e n s (a + b) + c == a + (b + c) ? § Fü r int /long ja . § Fü r float/double ne i n. 154 Vo r s i c h t § we n n Ih r Pr o gr a m m mi t num e r i s c he n Da t e n re c h n e t § Me h r Bi t s ( long , double vs float ) he l f e n nur be gr e nz t § Sk al i e r e n Si e d i e Da t e n , übe r de nk e n Si e Ih r Mo d e l l § Wa s wo l l e n Si e be r e c hne n ? 155156 “There’s\tno\tsense\tin\tbeing\tprecise\twhen\tyou\tdon’t\teven\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tknow\twhat\tyou’re\ttalking\tabout.”\t J.\tvon\tNeumann\t 157 “There’s\tno\tsense\tin\tbeing\tprecise\twhen\tyou\tdon’t\teven\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tknow\twhat\tyou’re\ttalking\tabout.”\t J.\tvon\tNeumann\t Ab e r … e r w a r e i n S t u d e n t a n d e r ET H ( C he m i e ) be v o r e s da s De p a r t e me n t I n f o r ma t i k g a b ! 252 - 0027 Ei n f ü h r u n g in di e Pr o g r a m m i e r u n g Th o m a s R . G r o s s De par t m e n t In f o r m a t i k ET H Z ür i c h Co p y r i g h t ( c ) P e a r so n 2 0 1 3 a n d T h o m a s G r o ss 2 0 1 6 , 2 0 1 8 Al l r i g h t s r e s e r v e d . 158","libVersion":"0.3.1","langs":""}