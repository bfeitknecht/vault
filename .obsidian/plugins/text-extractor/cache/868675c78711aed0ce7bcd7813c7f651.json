{"path":"sem2/DDCA/VRL/slides/DDCA-L23b-memory-robustness.pdf","text":"Mohammad Sadrosadati Frank K. Gürkaynak (Lecture by Giray Yaglikci) ETH Zürich Spring 2024 23 May 2024 Digital Design and Computer Architecture Lecture 23b: Memory Robustness How Robust (Reliable/Secure/Safe) is This Bridge? 2 Source: http://www.technologystudent.com/struct1/tacom1.png Collapse of the “Galloping Gertie” 3 Source: AP http://www.wsdot.wa.gov/tnbhistory/connections/connections3.htm How Secure Are These People? 4Source: https://s-media-cache-ak0.pinimg.com/originals/48/09/54/4809543a9c7700246a0cf8acdae27abf.jpg Security is about preventing unforeseen consequences How Safe & Secure Are Our Platforms? 5Source: https://taxistartup.com/wp-content/uploads/2015/03/UK-Self-Driving-Cars.jpg Security is about preventing unforeseen consequences What Is RowHammer? n One can predictably induce bitflips in commodity DRAM chips q >80% of the tested DRAM chips are vulnerable n First example of how a simple hardware failure mechanism can create a widespread system security vulnerability 6 An “Early” Position Paper [IMW’13] n Onur Mutlu, \"Memory Scaling: A Systems Architecture Perspective\" Proceedings of the 5th International Memory Workshop (IMW), Monterey, CA, May 2013. Slides (pptx) (pdf) EETimes Reprint https://people.inf.ethz.ch/omutlu/pub/memory-scaling_memcon13.pdf The DRAM Scaling Problem n DRAM stores charge in a capacitor (charge-based memory) q Capacitor must be large enough for reliable sensing q Access transistor should be large enough for low leakage and high retention time q Scaling beyond 40-35nm (2013) is challenging [ITRS, 2009] n DRAM capacity, cost, and energy/power hard to scale 8 As Memory Scales, It Becomes Unreliable n Data from all of Facebook’s servers worldwide n Meza+, “Revisiting Memory Errors in Large-Scale Production Data Centers,” DSN’15. 9 Intuition: quadratic increase in capacity Large-Scale Failure Analysis of DRAM Chips n Analysis and modeling of memory errors found in all of Facebook’s server fleet n Justin Meza, Qiang Wu, Sanjeev Kumar, and Onur Mutlu, \"Revisiting Memory Errors in Large-Scale Production Data Centers: Analysis and Modeling of New Trends from the Field\" Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Rio de Janeiro, Brazil, June 2015. [Slides (pptx) (pdf)] [DRAM Error Model] 10 Infrastructures to Understand Such Issues 11 An Experimental Study of Data Retention Behavior in Modern DRAM Devices: Implications for Retention Time Profiling Mechanisms (Liu et al., ISCA 2013) The Efficacy of Error Mitigation Techniques for DRAM Retention Failures: A Comparative Experimental Study (Khan et al., SIGMETRICS 2014) Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors (Kim et al., ISCA 2014) Adaptive-Latency DRAM: Optimizing DRAM Timing for the Common-Case (Lee et al., HPCA 2015) AVATAR: A Variable-Retention-Time (VRT) Aware Refresh for DRAM Systems (Qureshi et al., DSN 2015) A Curious Phenomenon Row of Cells Row Row Row Row Wordline VLOWVHIGH Victim Row Vic/m Row Hammered Row Repeatedly reading a row enough times (before memory gets refreshed) induces disturbance errors in adjacent rows in most real DRAM chips you can buy today OpenedClosed 13 Modern DRAM is Prone to Disturbance Errors Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors, (Kim et al., ISCA 2014) 86% (37/43) 83% (45/54) 88% (28/32) A company B company C company Up to 1.0×107\t errors Up to 2.7×106 errors Up to 3.3×105\t errors 14 Most DRAM Modules Are Vulnerable Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors, (Kim et al., ISCA 2014) 15 All modules from 2012–2013\tare vulnerable First Appearance Recent DRAM Is More VulnerableWhy Is This Happening? n DRAM cells are too close to each other! q They are not electrically isolated from each other n Access to one cell affects the value in nearby cells q due to electrical interference between n the cells n wires used for accessing the cells q Also called cell-to-cell coupling/interference n Example: When we activate (apply high voltage) to a row, an adjacent row gets slightly activated as well q Vulnerable cells in that slightly-activated row lose a little bit of charge q If RowHammer happens enough times, charge in such cells gets drained 16 Higher-Level Implications n This simple circuit level failure mechanism has enormous implications on upper layers of the transformation hierarchy 17 Microarchitecture ISA (Architecture) Program/Language Algorithm Problem Logic Devices Runtime System (VM, OS, MM) Electrons Microarchitecture ISA Program/Language Algorithm Problem Runtime System (VM, OS, MM) User Logic Devices Electrons CPU loop: mov (X), %eax mov (Y), %ebx clflush (X) clflush (Y) mfence jmp loop Download from: https://github.com/CMU-SAFARI/rowhammer DRAM Module A Simple Program Can Induce Many Errors Y X CPU Download from: h=ps://github.com/CMU-SAFARI/rowhammer DRAM Module A Simple Program Can Induce Many Errors Y X1. Avoid cache hits – Flush X from cache 2. Avoid row hits to X – Read Y in another row CPU loop: mov (X), %eax mov (Y), %ebx clflush (X) clflush (Y) mfence jmp loop Download from: h=ps://github.com/CMU-SAFARI/rowhammer DRAM Module A Simple Program Can Induce Many Errors Y X CPU loop: mov (X), %eax mov (Y), %ebx clflush (X) clflush (Y) mfence jmp loop Download from: https://github.com/CMU-SAFARI/rowhammer DRAM Module A Simple Program Can Induce Many Errors Y X CPU loop: mov (X), %eax mov (Y), %ebx clflush (X) clflush (Y) mfence jmp loop Y X Download from: https://github.com/CMU-SAFARI/rowhammer DRAM Module A Simple Program Can Induce Many Errors A real reliability & security issue CPU Architecture Errors Access-Rate Intel Haswell (2013) 22.9K 12.3M/sec Intel Ivy Bridge (2012) 20.7K 11.7M/sec Intel Sandy Bridge (2011) 16.1K 11.6M/sec AMD Piledriver (2012) 59 6.1M/sec 23Kim+, “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors,” ISCA 2014. Observed Errors in Real SystemsOne Can Take Over an Otherwise-Secure System 24 Exploiting the DRAM rowhammer bug to gain kernel privileges (Seaborn, 2015) Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors (Kim et al., ISCA 2014) RowHammer Security Attack Example n “Rowhammer” is a problem with some recent DRAM devices in which repeatedly accessing a row of memory can cause bit flips in adjacent rows (Kim et al., ISCA 2014). q Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors (Kim et al., ISCA 2014) n We tested a selection of laptops and found that a subset of them exhibited the problem. n We built two working privilege escalation exploits that use this effect. q Exploiting the DRAM rowhammer bug to gain kernel privileges (Seaborn+, 2015) n One exploit uses rowhammer-induced bit flips to gain kernel privileges on x86-64 Linux when run as an unprivileged userland process. n When run on a machine vulnerable to the rowhammer problem, the process was able to induce bit flips in page table entries (PTEs). n It was able to use this to gain write access to its own page table, and hence gain read-write access to all of physical memory. 25 Exploiting the DRAM rowhammer bug to gain kernel privileges (Seaborn & Dullien, 2015) Security Implications 26 Security Implications 27 More Security Implications (I) 28 Source: https://lab.dsst.io/32c3-slides/7197.html Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript (DIMVA’16) “We can gain unrestricted access to systems of website visitors.” More Security Implications (II) 29 Source: https://fossbytes.com/drammer-rowhammer-attack-android-root-devices/ Drammer: Deterministic Rowhammer Attacks on Mobile Platforms, CCS’16 “Can gain control of a smart phone deterministically” More Security Implications (III) n Using an integrated GPU in a mobile system to remotely escalate privilege via the WebGL interface. IEEE S&P 2018 30 More Security Implications (IV) n Rowhammer over RDMA (I) USENIX ATC 2018 31 More Security Implications (V) n Rowhammer over RDMA (II) 32 More Security Implications (VI) n CHES 2020 An\tFPGA-based\tRowHammer\tattack\t recovering\tprivate\tkeys\ttwice\tas\tfast\t compared\tto\tCPU-based\tattacks More Security Implications (VII) n IEEE S&P 2020 More Security Implications (VIII) n USENIX Security 2019 More Security Implications (IX) n USENIX Security 2020 More Security Implications (X) n ACM CCS 2022 HammerScope\tis\ta\tsoftware-based\t power\tanalysis\tmethod\tusing\t RowHammer\tas\ta\tside\tchannel More Security Implications? 38 A RowHammer Survey Across the Stack n Onur Mutlu and Jeremie Kim, \"RowHammer: A Retrospective\" IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD) Special Issue on Top Picks in Hardware and Embedded Security, 2019. [Preliminary arXiv version] [Slides from COSADE 2019 (pptx)] [Slides from VLSI-SOC 2020 (pptx) (pdf)] [Talk Video (1 hr 15 minutes, with Q&A)] 39https://arxiv.org/pdf/1904.09724.pdf A RowHammer Survey: Recent Update n Onur Mutlu, Ataberk Olgun, and A. Giray Yaglikci, \"Fundamentally Understanding and Solving RowHammer\" Invited Special Session Paper at the 28th Asia and South Pacific Design Automation Conference (ASP-DAC), Tokyo, Japan, January 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (26 minutes)] 40 https://arxiv.org/pdf/2211.07613.pdf Understanding RowHammer First RowHammer Analysis [ISCA 2014] 42 n Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu, \"Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors\" Proceedings of the 41st International Symposium on Computer Architecture (ISCA), Minneapolis, MN, June 2014. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Source Code and Data] [Lecture Video (1 hr 49 mins), 25 September 2020] One of the 7 papers of 2012-2017 selected as Top Picks in Hardware and Embedded Security for IEEE TCAD (link). Selected to the ISCA-50 25-Year Retrospective Issue covering 1996- 2020 in 2023 (Retrospective (pdf) Full Issue). SoftMC: Open Source DRAM Infrastructure n Hasan Hassan et al., “SoftMC: A Flexible and Practical Open- Source Infrastructure for Enabling Experimental DRAM Studies,” HPCA 2017. n Flexible n Easy to Use (C++ API) n Open-source github.com/CMU-SAFARI/SoftMC 43 SoftMC: Open Source DRAM Infrastructure 44 https://github.com/CMU-SAFARI/SoftMC n Hasan Hassan, Nandita Vijaykumar, Samira Khan, Saugata Ghose, Kevin Chang, Gennady Pekhimenko, Donghyuk Lee, Oguz Ergin, and Onur Mutlu, \"SoftMC: A Flexible and Practical Open-Source Infrastructure for Enabling Experimental DRAM Studies\" Proceedings of the 23rd International Symposium on High-Performance Computer Architecture (HPCA), Austin, TX, USA, February 2017. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Full Talk Lecture (39 minutes)] [Source Code] DRAM Bender 45 https://github.com/CMU-SAFARI/DRAM-Bender n Ataberk Olgun, Hasan Hassan, A Giray Yağlıkçı, Yahya Can Tuğrul, Lois Orosa, Haocong Luo, Minesh Patel, Oğuz Ergin, and Onur Mutlu, \"DRAM Bender: An Extensible and Versatile FPGA-based Infrastructure to Easily Test State-of-the-art DRAM Chips\" IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD), 2023. [Extended arXiv version] [DRAM Bender Source Code] [DRAM Bender Tutorial Video (43 minutes)] 46 DRAM\tBender:\tPrototypes Five\tout\tof\tthe\tbox\tFPGA-based\tprototypes https://github.com/CMU-SAFARI/DRAM-Bender\t RowHammer Infrastructure (2012-2014) 47Kim+, “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors,” ISCA 2014. Temperature Controller PC HeaterFPGAs FPGAs 48 Tested DRAM Modules from 2008-2014 (129 total) 1. Most Modules Are at Risk 2. Errors vs. Vintage 3. Error = Charge Loss 4. Adjacency: Aggressor & Victim 5. Sensitivity Studies 6. Other Results in Paper 7. Solution Space 49 RowHammer Characterization Results Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors, (Kim et al., ISCA 2014) 4. Adjacency: Aggressor & Victim Most aggressors & vic6ms are adjacent 50 Note: For three modules with the most errors (only ﬁrst bank)AdjacentAdjacentAdjacent Non-AdjacentNon-Adjacent Note: For three modules with the most errors (only ﬁrst bank)Not Allowed Less frequent accesses à Fewer errors55ns500ns 51 ❶ Access Interval (Aggressor) Note: Using three modules with the most errors (only first bank) More frequent refreshes à Fewer errors ~7x frequent64ms 52 ❷ Refresh Interval RowStripe ~RowStripe ❸ Data Pattern 111111 111111 111111 111111 000000 000000 000000 000000 000000 111111 000000 111111 111111 000000 111111 000000 Solid ~Solid 10x Errors Errors affected by data stored in other cells 53 6. Other Key Observations [ISCA’14] • Victim Cells ≠ Retention-Weak Cells – Almost no overlap between them • Errors are repeatable – Across ten iterations of testing, >70% of victim cells had errors in every iteration • As many as 4 errors per cache-line – Simple ECC (e.g., SECDED) cannot prevent all errors • Cells affected by two aggressors on either side – Double sided hammering Major RowHammer Characteristics (2014) 55 n Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu, \"Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors\" Proceedings of the 41st International Symposium on Computer Architecture (ISCA), Minneapolis, MN, June 2014. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Source Code and Data] [Lecture Video (1 hr 49 mins), 25 September 2020] One of the 7 papers of 2012-2017 selected as Top Picks in Hardware and Embedded Security for IEEE TCAD (link). Selected to the ISCA-50 25-Year Retrospective Issue covering 1996- 2020 in 2023 (Retrospective (pdf) Full Issue). RowHammer is Getting Much Worse (2020) n Jeremie S. Kim, Minesh Patel, A. Giray Yaglikci, Hasan Hassan, Roknoddin Azizi, Lois Orosa, and Onur Mutlu, \"Revisiting RowHammer: An Experimental Analysis of Modern Devices and Mitigation Techniques\" Proceedings of the 47th International Symposium on Computer Architecture (ISCA), Valencia, Spain, June 2020. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (20 minutes)] [Lightning Talk Video (3 minutes)] 56 RowHammer Has Many Dimensions (2021) n Lois Orosa, Abdullah Giray Yaglikci, Haocong Luo, Ataberk Olgun, Jisung Park, Hasan Hassan, Minesh Patel, Jeremie S. Kim, and Onur Mutlu, \"A Deeper Look into RowHammer’s Sensitivities: Experimental Analysis of Real DRAM Chips and Implications on Future Attacks and Defenses\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (21 minutes)] [Lightning Talk Video (1.5 minutes)] [arXiv version] n 57 RowHammer vs. Wordline Voltage (2022) n A. Giray Yağlıkçı, Haocong Luo, Geraldo F. de Oliviera, Ataberk Olgun, Minesh Patel, Jisung Park, Hasan Hassan, Jeremie S. Kim, Lois Orosa, and Onur Mutlu, \"Understanding RowHammer Under Reduced Wordline Voltage: An Experimental Study Using Real DRAM Devices\" Proceedings of the 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Baltimore, MD, USA, June 2022. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [arXiv version] [Talk Video (34 minutes, including Q&A)] [Lightning Talk Video (2 minutes)] 58 RowHammer in HBM Chips (2023) n Ataberk Olgun, Majd Osserian, A. Giray Yağlıkçı, Yahya Can Tugrul, Haocong Luo, Steve Rhyner, Behzad Salami, Juan Gomez-Luna, and Onur Mutlu, \"An Experimental Analysis of RowHammer in HBM2 DRAM Chips\" Proceedings of the 53nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks Disrupt Track (DSN Disrupt), Porto, Portugal, June 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (24 minutes, including Q&A)] 59https://arxiv.org/pdf/2305.17918.pdf RowHammer Solutions Two Types of RowHammer Solutions n Immediate q To protect the vulnerable DRAM chips in the field q Limited possibilities n Longer-term q To protect future DRAM chips q Wider range of protection mechanisms n Our ISCA 2014 paper proposes both types of solutions q Seven solutions in total q PARA proposed as best solution à already employed in the field 6162 RowHammer\tSolution\tApproaches • More\trobust\tDRAM\tchips\tand/or\terror-correcting\tcodes • Increased\trefresh\trate\t • Physical\tisolation • Reactive\trefresh • Proactive\tthrottling DRAM Bank Aggressor Row Victim Rows Isola2on Rows Large-enough\tdistance DRAM BankAggressor Row Victim rows RefreshVic2m Rows Refresh Rapidly\tactivated\t(hammered) Fewer\tactivations\tpossible in\ta\trefresh\tinterval Fewer\tactivations\tallowed\tfor\taggressive\tapplications Cost, Power, Performance, Complexity Apple’s Security Patch for RowHammer n https://support.apple.com/en-gb/HT204934 HP, Lenovo, and many other vendors released similar patches Our First Solution to RowHammer • PARA: Probabilis)c Adjacent Row Ac)va)on • Key Idea – APer closing a row, we acQvate (i.e., refresh) one of its neighbors with a low probability: p\t=\t0.005 • Reliability Guarantee – When p=0.005, errors in one year: 9.4×10-14 – By adjusQng the value of p, we can vary the strength of protecQon against errors 64 Advantages of PARA • PARA refreshes rows infrequently – Low power – Low performance-overhead • Average slowdown: 0.20% (for 29 benchmarks) • Maximum slowdown: 0.75% • PARA is stateless – Low cost – Low complexity • PARA is an effective and low-overhead solution to prevent disturbance errors 65 Requirements for PARA • If implemented in DRAM chip (done today) – Enough slack in Qming and refresh parameters – Plenty of slack today: • Lee et al., “Adap-ve-Latency DRAM: Op-mizing DRAM Timing for the Common Case,” HPCA 2015. • Chang et al., “Understanding Latency Varia-on in Modern DRAM Chips,” SIGMETRICS 2016. • Lee et al., “Design-Induced Latency Varia-on in Modern DRAM Chips,” SIGMETRICS 2017. • Chang et al., “Understanding Reduced-Voltage Opera-on in Modern DRAM Devices,” SIGMETRICS 2017. • Ghose et al., “What Your DRAM Power Models Are Not Telling You: Lessons from a Detailed Experimental Study,” SIGMETRICS 2018. • Kim et al., “Solar-DRAM: Reducing DRAM Access Latency by Exploi-ng the Varia-on in Local Bitlines,” ICCD 2018. • If implemented in memory controller – Need coordinaQon between controller and DRAM – Memory controller should know which rows are physically adjacent 66 Probabilistic Activation in Real Life (I) 67https://twitter.com/isislovecruft/status/1021939922754723841 Probabilistic Activation in Real Life (II) 68https://twitter.com/isislovecruft/status/1021939922754723841 Seven RowHammer Solutions Proposed 69 n Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu, \"Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors\" Proceedings of the 41st International Symposium on Computer Architecture (ISCA), Minneapolis, MN, June 2014. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Source Code and Data] [Lecture Video (1 hr 49 mins), 25 September 2020] One of the 7 papers of 2012-2017 selected as Top Picks in Hardware and Embedded Security for IEEE TCAD (link). Selected to the ISCA-50 25-Year Retrospective Issue covering 1996- 2020 in 2023 (Retrospective (pdf) Full Issue). A Takeaway Main Memory Needs Intelligent Controllers for Security, Safety, Reliability, Scaling 70 Aside: Intelligent Controller for NAND Flash USB Jack Virtex-II Pro (USB controller) Virtex-V FPGA (NAND Controller) HAPS-52 Mother Board USB Daughter Board NAND Daughter Board 1x-nm NAND Flash Cai+, “Error Characterization, Mitigation, and Recovery in Flash Memory Based Solid State Drives,” Proc. IEEE 2017. [DATE 2012, ICCD 2012, DATE 2013, ITJ 2013, ICCD 2013, SIGMETRICS 2014, HPCA 2015, DSN 2015, MSST 2015, JSAC 2016, HPCA 2017, DFRWS 2017, PIEEE 2017, HPCA 2018, SIGMETRICS 2018] 72 https://arxiv.org/pdf/1706.08642 Proceedings of the IEEE, Sept. 2017 Intelligent Flash Controllers [PIEEE’17]A RowHammer Survey n Onur Mutlu and Jeremie Kim, \"RowHammer: A Retrospective\" IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD) Special Issue on Top Picks in Hardware and Embedded Security, 2019. [Preliminary arXiv version] [Slides from COSADE 2019 (pptx)] [Slides from VLSI-SOC 2020 (pptx) (pdf)] [Talk Video (1 hr 15 minutes, with Q&A)] 73https://arxiv.org/pdf/1904.09724.pdf A RowHammer Survey: Recent Update n Onur Mutlu, Ataberk Olgun, and A. Giray Yaglikci, \"Fundamentally Understanding and Solving RowHammer\" Invited Special Session Paper at the 28th Asia and South Pacific Design Automation Conference (ASP-DAC), Tokyo, Japan, January 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (26 minutes)] 74 https://arxiv.org/pdf/2211.07613.pdf Two Major RowHammer Directions n Understanding RowHammer q Many effects still need to be rigorously examined n Aging of DRAM Chips n Environmental Conditions (e.g., Process, Voltage, Temperature) n Memory Access Patterns n Memory Controller & System Design Decisions n … n Solving RowHammer q Flexible and efficient RowHammer solutions are necessary n In-field patchable / reconfigurable / programmable solutions q Co-architecting System and Memory is important n To avoid performance and denial-of-service problems 75 Evaluating Industry’s RowHammer Solutions TRRespass Industry-Adopted Solutions Do Not Work n Pietro Frigo, Emanuele Vannacci, Hasan Hassan, Victor van der Veen, Onur Mutlu, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi, \"TRRespass: Exploiting the Many Sides of Target Row Refresh\" Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P), San Francisco, CA, USA, May 2020. [Slides (pptx) (pdf)] [Lecture Slides (pptx) (pdf)] [Talk Video (17 minutes)] [Lecture Video (59 minutes)] [Source Code] [Web Article] Best paper award. Pwnie Award 2020 for Most Innovative Research. Pwnie Awards 2020 78 TRRespass n First work to show that TRR-protected DRAM chips are vulnerable to RowHammer in the field q Mitigations advertised as secure are not secure n Introduces the Many-sided RowHammer attack q Idea: Hammer many rows to bypass TRR mitigations (e.g., by overflowing proprietary TRR tables that detect aggressor rows) n (Partially) reverse-engineers the TRR and pTRR mitigation mechanisms implemented in DRAM chips and memory controllers n Provides an automatic tool that can effectively create many- sided RowHammer attacks in DDR4 and LPDDR4(X) chips 79 Example Many-Sided Hammering Patterns 80 BitFlips vs. Number of Aggressor Rows 81 TRRespass Vulnerable DRAM Modules 82 TRRespass Vulnerable Mobile Phones 83 TRRespass Based RowHammer Attack 84 TRRespass Key Results n 13 out of 42 tested DDR4 DRAM modules are vulnerable q From all 3 major manufacturers q 3-, 9-, 10-, 14-, 19-sided hammer attacks needed n 5 out of 13 mobile phones tested vulnerable q From 4 major manufacturers q With LPDDR4(X) DRAM chips n These results are scratching the surface q TRRespass tool is not exhaustive q There is a lot of room for uncovering more vulnerable chips and phones 85 TRRespass Key Takeaways RowHammer is still an open problem Security by obscurity is likely not a good solution 86 Uncovering TRR Almost Completely Industry-Adopted Solutions Are Very Poor n Hasan Hassan, Yahya Can Tugrul, Jeremie S. Kim, Victor van der Veen, Kaveh Razavi, and Onur Mutlu, \"Uncovering In-DRAM RowHammer Protection Mechanisms: A New Methodology, Custom RowHammer Patterns, and Implications\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (25 minutes)] [Lightning Talk Video (100 seconds)] [arXiv version] 8889 U-TRR\tSummary\t&\tKey\tResults Target\tRow\tRefresh\t(TRR):\t a\tset\tof\tobscure,\tundocumented,\tand\tproprietary\tRowHammer\tmitigation\ttechniques A\tnew\tmethodology\tthat\tleverages\tdata\tretention\tfailures\tto\t uncover\tthe\tinner\tworkings\tof\tTRR\tand\tstudy\tits\tsecurity U-TRR 15x\tVendor\tA DDR4\tmodules U-TRR New\t RowHammer\t access\tpatterns 15x\tVendor\tB DDR4\tmodules 15x\tVendor\tC DDR4\tmodules All\t45\tmodules\twe\ttest\tare\tvulnerable 99.9%\tof\trows\tin\ta\tDRAM\tbank\t experience\tat\tleast\tone\tRowHammer\tbit\tflip Up\tto\t7\tRowHammer\tbit\tflips\tin\t an\t8-byte\tdataword,\tmaking\tECC\tineffective TRR\tdoes\tnot\tprovide\tsecurity\tagainst\tRowHammer We\tcannot\teasily\tstudy\tthe\tsecurity\tproperties\tof\tTRR Is\tTRR\tfully\tsecure?\tHow\tcan\twe\tvalidate\tits\tsecurity\tguarantees? U-TRR\tcan\tfacilitate\tthe\tdevelopment\tof\tnew\tRowHammer\tattacks\t and\tmore\tsecure\tRowHammer\tprotection\tmechanisms 90 Key\tTakeaways All\t45\tmodules\twe\ttest\tare\tvulnerable 99.9%\tof\trows\tin\ta\tDRAM\tbank\t experience\tat\tleast\tone\tRowHammer\tbit\tflip ECC\tis\tineffective:\tup\tto\t7\tRowHammer\tbit\tElips\t in\tan\t8-byte\tdataword\t Google’s Half-Double RowHammer Attack (May 2021) 91https://security.googleblog.com/2021/05/introducing-half-double-new-hammering.html n Given three consecutive rows A, B, and C, we were able to attack C by directing a very large number of accesses to A, along with just a handful (~dozens) to B. n Based on our experiments, accesses to B have a non-linear gating effect, in which they appear to “transport” the Rowhammer effect of A onto C. n This is likely an indication that the electrical coupling responsible for Rowhammer is a property of distance, effectively becoming stronger and longer-ranged as cell geometries shrink down. 92https://security.googleblog.com/2021/05/introducing-half-double-new-hammering.html Google’s Half-Double RowHammer Attack (May 2021)Google’s Half-Double RowHammer Attack n Appears at USENIX Security 2022 93https://www.usenix.org/system/files/sec22-kogler-half-double.pdf RowHammer in 2020+ DRAM\tRead\tDisturbance 95 DRAM\tcells\tbecome\tincreasingly\t more\tvulnerable\tto\tread\tdisturbance Technology\tnode\tscaling 0K 20K 40K 60K 80K 100K 120K 140K More\tthan\t10X\treduction Minimum\thammer\tcount\tneeded\tto\tinduce\tthe\tfirst\tread\tdisturbance\tbitflip More\tthan\t100X\treduction [Luo+,\tISCA’23] [Kim+,\tISCA’20] [Kim+,\tISCA’14] Revisiting RowHammer RowHammer is Getting Much Worse n Jeremie S. Kim, Minesh Patel, A. Giray Yaglikci, Hasan Hassan, Roknoddin Azizi, Lois Orosa, and Onur Mutlu, \"Revisiting RowHammer: An Experimental Analysis of Modern Devices and Mitigation Techniques\" Proceedings of the 47th International Symposium on Computer Architecture (ISCA), Valencia, Spain, June 2020. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (20 minutes)] [Lightning Talk Video (3 minutes)] 9798 Key\tTakeaways\tfrom\t1580\tChips • Newer\tDRAM\tchips\tare\tmuch\tmore\tvulnerable\tto\t RowHammer\t(more\tbit=lips,\thappening\tearlier) • There\tare\tnew\tchips\twhose\tweakest\tcells\tfail\tafter\tonly\t 4800\thammers\t • Chips\tof\tnewer\tDRAM\ttechnology\tnodes\tcan\texhibit\t RowHammer\tbitOlips\t1)\tin\tmore\trows\tand\t2)\tfarther\t away\tfrom\tthe\tvictim\trow.\t • Existing\tmitigation\tmechanisms\tare\tNOT\teffective\tat\t future\ttechnology\tnodes 99 1580\tDRAM\tChips\tTested 1580\ttotal\tDRAM\tchips\ttested\tfrom\t300\tDRAM\tmodules • Three\tmajor\tDRAM\tmanufacturers\t{A,\tB,\tC} • Three\tDRAM\ttypes\tor\tstandards\t{DDR3,\tDDR4,\tLPDDR4} • LPDDR4\tchips\twe\ttest\timplement\ton-die\tECC • Two\ttechnology\tnodes\tper\tDRAM\ttype\t{old/new,\t1x/1y} • Categorized\tbased\ton\tmanufacturing\tdate,\tdatasheet\tpublication\tdate,\tpurchase\t date,\tand\tcharacterization\tresults Type-node:\tconfiguration\tdescribing\ta\tchip’s\ttype\tand\ttechnology\t node\tgeneration:\tDDR3-old/new,\tDDR4-old/new,\tLPDDR4-1x/1y storage density and reduce technology node size for future chip designs. To achieve this goal, we perform a rigorous experimental characterization study of DRAM chips from three di￿erent DRAM types (i.e., DDR3, DDR4, and LPDDR4), three major DRAM manufacturers, and at least two di￿erent process technology nodes from each DRAM type. We show how di￿erent chips from di￿erent DRAM types and technol- ogy nodes (abbreviated as “type-node” con￿gurations) have varying levels of vulnerability to RowHammer. We compare the chips’ vulnerabilities against each other and project how they will likely scale when reducing the technology node size even further (Section 5). Finally, we study how e￿ec- tive existing RowHammer mitigation mechanisms will be, based on our observed and projected experimental data on the RowHammer vulnerability (Section 6). 4. Experimental Methodology We describe our methodology for characterizing DRAM chips for RowHammer. 4.1. Testing Infrastructure In order to characterize the e￿ects of RowHammer across a broad range of modern DRAM chips, we experimentally study DDR3, DDR4, and LPDDR4 DRAM chips across a wide range of testing conditions. To achieve this, we use two di￿erent testing infrastructures: (1) the SoftMC frame- work [39, 104] capable of testing DDR3 and DDR4 DRAM modules in a temperature-controlled chamber and (2) an in- house temperature-controlled testing chamber capable of testing LPDDR4 DRAM chips. SoftMC. Figure 3 shows our SoftMC setup for testing DDR4 chips. In this setup, we use an FPGA board with a Xilinx Virtex UltraScale 95 FPGA [130], two DDR4 SODIMM slots, and a PCIe interface. To open up space around the DDR4 chips for temperature control, we use a vertical DDR4 SODIMM riser board to plug a DDR4 module into the FPGA board. We heat the DDR4 chips to a target temperature using silicone rubber heaters pressed to both sides of the DDR4 module. We control the temperature using a thermocouple, which we place between the rubber heaters and the DDR4 chips, and a temperature controller. To enable fast data trans- fer between the FPGA and a host machine, we connect the FPGA to the host machine using PCIe via a 30 cm PCIe ex- tender. We use the host machine to program the SoftMC hardware and collect the test results. Our SoftMC setup for testing DDR3 chips is similar but uses a Xilinx ML605 FPGA board [129]. Both infrastructures provide ￿ne-grained con- trol over the types and timings of DRAM commands sent to the chips under test and provide precise temperature control at typical operating conditions. Figure 3: Our SoftMC infrastructure [39, 104] for testing DDR4 DRAM chips. LPDDR4 Infrastructure. Our LPDDR4 DRAM testing infrastructure uses industry-developed in-house testing hard- ware for package-on-package LPDDR4 chips. The LPDDR4 testing infrastructure is further equipped with cooling and heating capabilities that also provide us with precise temper- ature control at typical operating conditions. 4.2. Characterized DRAM Chips Table 1 summarizes the DRAM chips that we test using both infrastructures. We have chips from all of the three major DRAM manufacturers spanning DDR3, DDR4, and two known technology nodes of LPDDR4. We refer to the DRAM type (e.g., LPDDR4) and technology node of a DRAM chip as a DRAM type-node con￿guration (e.g., LPDDR4-1x). For DRAM chips whose technology node we do not exactly know, we identify their node as old or new. Table 1: Summary of DRAM chips tested. DRAM Number of Chips (Modules) Tested type-node Mfr. A Mfr. B Mfr. C Total DDR3-old 56 (10) 88 (11) 28 (7) 172 (28) DDR3-new 80 (10) 52 (9) 104 (13) 236 (32) DDR4-old 112 (16) 24 (3) 128 (18) 264 (37) DDR4-new 264 (43) 16 (2) 108 (28) 388 (73) LPDDR4-1x 12 (3) 180 (45) N/A 192 (48) LPDDR4-1y 184 (46) N/A 144 (36) 328 (82) DDR3 and DDR4. Among our tested DDR3 modules, we identify two distinct batches of chips based on their manu- facturer date, datasheet publication date, their purchase date, and their RowHammer characteristics. We categorize DDR3 devices with a manufacturing date earlier than 2014 as DDR3- old chips, and devices with a manufacturing date including and after 2014 as DDR3-new chips. Using the same set of properties, we identify two distinct batches of devices among the DDR4 devices. We categorize DDR4 devices with a man- ufacturing date before 2018 or a datasheet publication date of 2015 as DDR4-old chips and devices with a manufacturing date including and after 2018 or a datasheet publication date of 2016 or 2017 as DDR4-new chips. Based on our observa- tions on RowHammer characteristics from these chips, we expect that DDR3-old/DDR4-old chips are manufactured at an older date with an older process technology compared to DDR3-new/DDR4-new chips, respectively. This enables us to directly study the e￿ects of shrinking process technology node sizes in DDR3 and DDR4 DRAM chips. LPDDR4. For our LPDDR4 chips, we have two known distinct generations manufactured with di￿erent technology node sizes, 1x-nm and 1y-nm, where 1y-nm is smaller than 1x-nm. Unfortunately, we are missing data from some genera- tions of DRAM from speci￿c manufacturers (i.e., LPDDR4-1x from manufacturer C and LPDDR4-1y from manufacturer B) since we did not have access to chips of these manufacturer- technology node combinations due to con￿dentiality issues. Note that while we know the external technology node val- ues for the chips we characterize (e.g., 1x-nm, 1y-nm), these values are not standardized across di￿erent DRAM manufac- turers and the actual values are con￿dential. This means that a 1x chip from one manufacturer is not necessarily manufac- tured with the same process technology node as a 1x chip from another manufacturer. However, since we do know rela- tive process node sizes of chips from the same manufacturer, we can directly observe how technology node size a￿ects RowHammer on LPDDR4 DRAM chips. 4.3. E￿ectively Characterizing RowHammer In order to characterize RowHammer e￿ects on our DRAM chips at the circuit-level, we want to test our chips at the worst-case RowHammer conditions. We identify two condi- tions that our tests must satisfy to e￿ectively characterize RowHammer at the circuit level: our testing routines must both: 1) run without interference (e.g., without DRAM refresh or RowHammer mitigation mechanisms) and 2) systemati- cally test each DRAM row’s vulnerability to RowHammer 4 100 5.\tFirst\tRowHammer\tBit\tFlips\tper\tChip Newer chips from each DRAM manufacturer are more vulnerable to RowHammer Mfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120K Mfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120KMfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120K 101 5.\tFirst\tRowHammer\tBit\tFlips\tper\tChip Newer chips from a given DRAM manufacturer more vulnerable to RowHammer Mfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120K Mfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120KMfr. A Mfr. B Mfr. CHammer Count needed for the ﬁrst bit ﬂip (HCﬁrst)No Bit FlipsNo Bit FlipsDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-oldDDR3-newDDR4-oldDDR4-newDDR3-oldDDR3-newDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1y0K 20K 40K 60K 80K 100K 120K \tThere\tare\tchips\twhose\tweakest\tcells\tfail\t after\tonly\t4800\thammers\t \tIn\ta\tDRAM\ttype,\tHCfirst\treduces\tsignificantly\tfrom\t old\tto\tnew\tchips,\ti.e.,\tDDR3:\t69.2k\tto\t22.4k,\t DDR4:\t17.5k\tto\t10k,\tLPDDR4:\t16.8k\tto\t4.8k 102 105 104 103 102 105 104 103 102DRAM bandwidth overhead of RowHammer mitigation (%) HCfirstNormalized System Performance (%) a) b) LPDDR4-1y DDR4-new DDR4-old DDR3-old LPDDR4-1x LPDDR4-1x DDR3-old DDR4-old DDR4-new DDR4-new DDR4-old DDR3-old } } } Mfr. A Mfr. B Mfr. CDDR3-oldDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-new 105 104 103 102 105 104 103 102 10-3 10-2 10-1 100 101 102 103 0 20 40 60 80 100 10 30 50 70 90 DDR3-new LPDDR4-1y DDR3-new DDR3-newDDR3-oldDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-new PARA TWiCe-ideal Ideal Ideal TWiCe-ideal PARADDR3-oldDDR3-newDDR4-oldLPDDR4-1xDDR4-newLPDDR4-1y Mitigation\tMechanism\tEvaluation Ideal\tmechanism\tis\tsignificantly\tbetter\t than\tany\texisting\tmechanism\tfor\tHCfirst\t<\t1024 Significant\topportunity\tfor\tdeveloping\ta\tRowHammer\tsolution\t with\tlow\tperformance\toverhead\tthat\tsupports\tlow\tHCfirstDRAM bandwidth overhead of RowHammer mitigation (%) HCfirstNormalized System Performance (%) a) b) LPDDR4-1y DDR4-new DDR4-old DDR3-old LPDDR4-1x LPDDR4-1x DDR3-old DDR4-old DDR4-new DDR4-new DDR4-old DDR3-old } } } Mfr. A Mfr. B Mfr. CDDR3-oldDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-new 105 104 103 102 105 104 103 102 10-3 10-2 10-1 100 101 102 103 0 20 40 60 80 100 10 30 50 70 90 DDR3-new LPDDR4-1y DDR3-new DDR3-newDDR3-oldDDR4-oldDDR4-newLPDDR4-1xLPDDR4-1yDDR3-new PARA TWiCe-ideal Ideal Ideal TWiCe-ideal PARA HCfirst\t(number\tof\thammers\trequired\tto\tinduce\tfirst\tRowHammer\tbit\tflip) New RowHammer Characteristics RowHammer Has Many Dimensions n Lois Orosa, Abdullah Giray Yaglikci, Haocong Luo, Ataberk Olgun, Jisung Park, Hasan Hassan, Minesh Patel, Jeremie S. Kim, and Onur Mutlu, \"A Deeper Look into RowHammer’s Sensitivities: Experimental Analysis of Real DRAM Chips and Implications on Future Attacks and Defenses\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (21 minutes)] [Lightning Talk Video (1.5 minutes)] [arXiv version] n 104105 Our\tGoal Provide\tinsights\tinto\tthree\tfundamental\tproperties\t To\tfind\teffective\tand\tefficient\tattacks\tand\tdefenses 106 Summary\tof\tThe\tStudy\t&\tKey\tResults • 272\tDRAM\tchips\tfrom\tfour\tmajor\tmanufacturers • 6\tmajor\ttakeaways\tfrom\t16\tnovel\tobservations • A\tRowHammer\tbit\tElip\tis\tmore\tlikely\tto\toccur\t 1)\tin\ta\tbounded\trange\tof\ttemperature 2)\tif\tthe\taggressor\trow\tis\tactive\tfor\tlonger\ttime\t 3)\tin\tcertain\tphysical\tregions\tof\tthe\tDRAM\tmodule\tunder\tattack • Our\tnovel\tobservations\tcan\tinspire\tand\taid\tfuture\twork - Craft\tmore\teffective\tattacks - Design\tmore\teffective\tand\tefKicient\tdefenses 107 Mfr. DDR4 DIMMs DDR3 SODIMMs # Chips Density Die Org. A (Micron) 9 1 144 (8) 8Gb (4Gb) B (P) x4 (x8) B (Samsung) 4 1 32 (8) 4Gb (4Gb) F (Q) x8 (x8) C (SK Hynix) 5 1 40 (8) 4Gb (4Gb) B (B) x8 (x8) D (Nanya) 4 - 32 (-) 8Gb (-) C (-) x8 (-) DRAM\tChips\tTested 272\tDRAM\tChips\tin\ttotal Two\tDRAM\tstandards 4\tMajor\tManufacturers 108 Reduces\tthe\tminimum\tactivation\tcount\tto\tinduce\ta\tbit\tflip\tby\t36%\t Bypasses\tdefenses\tthat\tdo\tnot\taccount\tfor\tthis\treduction Time Row\tA\tis\t active Row\tB\tis\t active Row\tA\tis\t active Activating\taggressor\trows\tas\tfrequently\tas\tpossible: TimeRow\tA\tis\tactive Row\tB\tis\tactive Keeping\taggressor\trows\tactive\tfor\ta\tlonger\ttime: 36%\treduction\t in\tHC!irst Example\tAttack\tImprovement\t3: Bypassing\tDefenses\twith\tAggressor\tRow\tActive\tTime 109 Spatial\tVariation\tacross\tRows DRAM\tRows\t(sorted\tby\treducing\tHCfirst) The\tminimum\tactivation\tcount\tto\tobserve\tbit\tflips\t(HCfirst)\t across\tDRAM\trows:Minimum\tActivation\tCountto\tObserve\ta\tBit\tFlip\t(HCfirst) The\tRowHammer\tvulnerability\t significantly\tvaries\tacross\tDRAM\trows 110 Spatial\tVariation\tacross\tColumns Column\tIndexChip\tIDNumber\tof\t Bit\tFlips\tin\t a\tColumn OBSERVATION\t13 Certain\tcolumns\tare\tsignificantly\tmore\tvulnerable\t to\tRowHammer\tthan\tother\tcolumns 111 Example\tDefense\tImprovements • Example\t1:\tLeveraging\tvariation\tacross\tDRAM\trows • Example\t2:\tLeveraging\tvariation\twith\ttemperature • A\tDRAM\tcell\texperiences\tbit\tLlips\twithin\ta\tbounded\ttemperature\trange • A\trow\tcan\tbe\tdisabled\twithin\tthe\trow’s\tvulnerable\ttemperature\trange Vulnerable\tTemperature\tRange Temperature no\tbit\tflipsno\tbit\tflips Disable\tRowA Temperature Disable\tRowB 80%\tarea\treduction for\tGraphene\t[Park+,\tMICRO'20] 33%\tarea\treduction\t for\tBlockHammer\t[Yağlıkçı+,\tHPCA'21]90% 10% Breakdown\t of\tDRAM\tRows 𝟐×HCfirst HCfirst Aggressiveness\tcan\tbe\treduced: More RowHammer Analysis RowHammer vs. Wordline Voltage (2022) n A. Giray Yağlıkçı, Haocong Luo, Geraldo F. de Oliviera, Ataberk Olgun, Minesh Patel, Jisung Park, Hasan Hassan, Jeremie S. Kim, Lois Orosa, and Onur Mutlu, \"Understanding RowHammer Under Reduced Wordline Voltage: An Experimental Study Using Real DRAM Devices\" Proceedings of the 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Baltimore, MD, USA, June 2022. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [arXiv version] [Talk Video (34 minutes, including Q&A)] [Lightning Talk Video (2 minutes)] 113114 Updated\tDRAM\tTesting\tInfrastructure FPGA-based\tSoftMC\t(Xilinx\tVirtex\tUltraScale+\tXCU200) Fine-grained\tcontrol\tover\tDRAM\tcommands,\t timing\tparameters\t(±1.5ns),\ttemperature\t(±0.1°C\t), and\twordline\tvoltage\t(±1mV) *Hassan\tet\tal.,\t\"SoftMC:\tA\tFlexible\tand\tPractical\tOpen-Source\tInfrastructure\tfor\tEnabling\tExperimental\t DRAM\tStudies,\"\tin\tHPCA,\t2017.\t[Available\ton\tGitHub:\thttps://github.com/CMU-SAFARI/SoftMC] * 115 Summary Reducing\twordline\tvoltage\tcan\treduce\tRowHammer\tvulnerability\t\t\t\t without\tsignificantly\taffecting\treliable\tDRAM\toperation We\tprovide\tthe\tfirst\tRowHammer\tcharacterization\tunder\treduced\twordline\tvoltage Experimental\tresults\twith\t272\treal\tDRAM\tchips\tshow\tthat\treducing\twordline\tvoltage: 1. Reduces\tRowHammer\tvulnerability • Bit\terror\trate\tcaused\tby\ta\tRowHammer\tattack\treduces\tby\t15.2%\t(66.9%\tmax) • A\trow\tneeds\tto\tbe\tactivated\t7.4%\tmore\ttimes\t(85.8%\tmax)\tto\tinduce\tthe\tfirst\tbit\tflip 2. Increases\trow\tactivation\tlatency\t • More\tthan\t76%\tof\tthe\ttested\tDRAM\tchips\treliably\toperate\tusing\tnominal\ttiming\tparameters • Remaining\t24%\treliably\toperate\twith\tincreased\t(up\tto\t24ns)\trow\tactivation\tlatency\t 3. Reduces\tdata\tretention\ttime • 80%\tof\tthe\ttested\tDRAM\tchips\treliably\toperate\tusing\tnominal\trefresh\trate\t • Remaining\t20%\treliably\toperate\tby • Using\tsingle\terror\tcorrecting\tcodes • Doubling\tthe\trefresh\trate\tfor\ta\tsmall\tfraction\t(16.4%)\tof\tDRAM\trows\t 116 More\tDetails\tand\tDiscussion\ton\tYouTube\t 116 https://www.youtube.com/live/CRtm1es4n3o?si=8N5zB6e_RUc5Ejl8 Question Are we now RowHammer-free in 2023 and Beyond? 117 RowPress [ISCA 2023] n Haocong Luo, Ataberk Olgun, Giray Yaglikci, Yahya Can Tugrul, Steve Rhyner, M. Banu Cavlak, Joel Lindegger, Mohammad Sadrosadati, and Onur Mutlu, \"RowPress: Amplifying Read Disturbance in Modern DRAM Chips\" Proceedings of the 50th International Symposium on Computer Architecture (ISCA), Orlando, FL, USA, June 2023. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Lightning Talk Video (3 minutes)] [RowPress Source Code and Datasets (Officially Artifact Evaluated with All Badges)] Officially artifact evaluated as available, reusable and reproducible. Best artifact award at ISCA 2023. 118 RowPress\t Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu ISCA\t2023\tSession\t2B:\tMonday\t19\tJune,\t2:15\tPM\tEDT\t RowPress\tvs.\tRowHammer Instead\tof\tusing\ta\thigh\tactivation\tcount, 120 RowHammer Aggressor Row Open Close RowPress Aggressor Row Open Close We\tobserve\tbitflips\teven\twith\tONLY\tONE\tactivation\t in\textreme\tcases\twhere\tthe\trow\tstays\topen\tfor\t30ms 36ns,\t47K\tactivations\tto\tinduce\tbitflips 7.8µs,\tonly\t5K\tactivations\tto\tinduce\tbitflips ☞\tincrease\tthe\ttime\tthat\tthe\taggressor\trow\tstays\topen Real\tDRAM\tChip\tCharacterization\t(I) FPGA-Based\tDDR4\tTesting\tInfrastructure • Based\ton\tSoftMC\t[Hassan+,\tHPCA’17]\tand\t DRAM\tBender\t[Olgun+,\tTCAD’23] • Fine-grained\tcontrol\tover\tDRAM\tcommands,\ttimings,\tand\t temperature 121https://github.com/CMU-SAFARI/DRAM-Bender DRAM\tchips\ttested • 164\tDDR4\tchips\tfrom\tall\t3\tmajor\tDRAM\tmanufacturers • Covers\tdifferent\tdie\tdensities\tand\trevisions Real\tDRAM\tChip\tCharacterization\t(II) 122 Major\tTakeaways\tfrom\tReal\tDRAM\tChips 123 RowPress\tsignificantly\tamplifies\t DRAM’s\tvulnerability\tto\tread\tdisturbance RowPress\thas\ta\tdifferent\tunderlying\t error\tmechanism\tfrom\tRowHammer Key\tCharacteristics\tof\tRowPress\t(I) 124 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitflip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitflips Key\tCharacteristics\tof\tRowPress\t(II) 125 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitflip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitflips • Gets\tworse\tas\ttemperature\tincreases Different\tFrom\tRowHammer • Affects\ta\tdifferent\tset\tof\tcells\tcompared\tto\tRowHammer\tand\t retention\tfailures • Behaves\tdifferently\tas\taccess\tpattern\tand\ttemperature\tchanges\t compared\tto\tRowHammer Real-System\tDemonstration\t(I) 126 Key\tIdea:\tA\tproof-of-concept\tRowPress\tprogram\tkeeps\ta\t DRAM\trow\topen\tfor\ta\tlonger\tperiod\tby\tkeeping\ton\t accessing\tdifferent\tcache\tblocks\tin\tthe\trow Intel\tCore\ti5-10400\t (Comet\tLake) Samsung\tDDR4\tModule\t M378A2K43CB1-CTD (Date\tCode:\t20-10) w/\tTRR\tRowHammer\tMitigation // Sync with Refresh and Loop Below for (k = 0; k < NUM_AGGR_ACTS; k++) for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR1[j]; for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR2[j]; for (j = 0; j < NUM_READS; j++) clflushopt(AGGRESSOR1[j]); clflushopt(AGGRESSOR2[j]); mfence(); activate_dummy_rows(); Number of Cache Blocks Accessed Per Aggressor Row ACT (NUM_READS=1 is Rowhammer) Real-System\tDemonstration\t(II) 127 Leveraging\tRowPress,\tour\tuser-level\tprogram\t induces\tbit=lips\twhen\tRowHammer\tcannot On\t1500\tvictim\trows More\tResults\t&\tSource\tCode 128 Many\tmore\tresults\t&\tanalyses\tin\tthe\tpaper Ø 6\tmajor\ttakeaways Ø 19\tmajor\tempirical\tobservations Ø 3\tmore\tpotential\tmitigations Fully\topen\tsource\tand\tartifact\tevaluated Ø https://github.com/CMU-SAFARI/RowPress https://arxiv.org/pdf/2306.17061.pdf RowPress Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu https://github.com/CMU-SAFARI/RowPress RowHammer in HBM Chips (2023) n Ataberk Olgun, Majd Osserian, A. Giray Yağlıkçı, Yahya Can Tugrul, Haocong Luo, Steve Rhyner, Behzad Salami, Juan Gomez-Luna, and Onur Mutlu, \"An Experimental Analysis of RowHammer in HBM2 DRAM Chips\" Proceedings of the 53nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks Disrupt Track (DSN Disrupt), Porto, Portugal, June 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (24 minutes, including Q&A)] 130https://arxiv.org/pdf/2305.17918.pdf 131 Executive\tSummary Motivation:\tHBM\tchips\thave\tnew\tarchitectural\tcharacteristics\t(e.g.,\t3D-stacked\tdies) that\tmight\taffect\tthe\tRowHammer\tvulnerability\tin\tvarious\tways Understanding\tRowHammer\tenables\tdesigning\teffective\tand\tefficient\tsolutions Problem:\tNo\tprior\tstudy\tdemonstrates\tthe\tRowHammer\tvulnerability\tin\tHBM Goal:\tExperimentally\tanalyze\thow\tvulnerable\tHBM\tDRAM\tchips\tare\tto\tRowHammer Experimental\tStudy:\tDetailed\texperimental\tcharacterization\tof\tRowHammer in\ta\tmodern\tHBM2\tDRAM\tchip.\tOur\tstudy\tprovides\ttwo\tmain\tfindings: 1.\tSpatial\tvariation\tof\tRowHammer\tvulnerability • Different\tchannels\tin\ta\t3D-stacked\tHBM\tchip\texhibit\tdifferent\tRowHammer\tvulnerability • DRAM\trows\tnear\tthe\tend\tof\ta\tDRAM\tbank\tare\tmore\tRowHammer\tresilient 2.\tOn-DRAM-die\tRowHammer\tmitigations • A\tmodern\tHBM\tchip\timplements\tundisclosed\ton-DRAM-die\tRowHammer\tmitigation\t • The\tmitigation\trefreshes\ta\tvictim\trow\tafter\tevery\t17\tperiodic\trefresh\toperations\t (e.g.,\tsimilar\tto\tDDR4\tchips) Some of Our Solutions BlockHammer Solution in 2021 n A. Giray Yaglikci, Minesh Patel, Jeremie S. Kim, Roknoddin Azizi, Ataberk Olgun, Lois Orosa, Hasan Hassan, Jisung Park, Konstantinos Kanellopoulos, Taha Shahroodi, Saugata Ghose, and Onur Mutlu, \"BlockHammer: Preventing RowHammer at Low Cost by Blacklisting Rapidly- Accessed DRAM Rows\" Proceedings of the 27th International Symposium on High-Performance Computer Architecture (HPCA), Virtual, February-March 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Intel Hardware Security Academic Awards Short Talk Slides (pptx) (pdf)] [Talk Video (22 minutes)] [Short Talk Video (7 minutes)] [Intel Hardware Security Academic Awards Short Talk Video (2 minutes)] [BlockHammer Source Code] Intel Hardware Security Academic Award Finalist (one of 4 finalists out of 34 nominations) 133 HiRA: Hidden Row Activation n Abdullah Giray Yağlıkçı, Ataberk Olgun, Minesh Patel, Haocong Luo, Hasan Hassan, Lois Orosa, Oguz Ergin, and Onur Mutlu, \"HiRA: Hidden Row Activation for Reducing Refresh Latency of Off-the-Shelf DRAM Chips,” in MICRO 2022. [Slides (pptx) (pdf)] [Longer Lecture Slides (pptx) (pdf)] [Lecture Video (36 minutes)] [arXiv version] 134 Spatial Variation-Aware Read Disturbance Defenses n A. Giray Yağlıkçı, Geraldo F. de Oliviera, Yahya Can Tuğrul, İsmail Emir Yüksel, Ataberk Olgun, Haocong Luo, and Onur Mutlu, “Spatial Variation-Aware Read Disturbance Defenses: Experimental Analysis of Real DRAM Chips and Implications on Future Solutions,” Proceedings of the 30th Edition of The International Symposium on High-Performance Computer Architecture (HPCA), Edinburgh, Scotland, UK, March 2024. 135136 More\tDetails\tand\tDiscussion\ton\tYouTube\t 136 https://www.youtube.com/live/YQwRYWpCsk0?si=jXPueMHb5wgs69-q ABACuS: All-Bank Activation Counters n Ataberk Olgun, Yahya Can Tugrul, Nisa Bostanci, Ismail Emir Yuksel, Haocong Luo, Steve Rhyner, Abdullah Giray Yaglikci, Geraldo F. Oliveira, and Onur Mutlu, \"ABACuS: All-Bank Activation Counters for Scalable and Low Overhead RowHammer Mitigation\" To appear in Proceedings of the 33rd USENIX Security Symposium (USENIX Security), Philadelphia, PA, USA, August 2024. [arXiv version] [ABACuS Source Code] 137 CoMeT: Count-Min-Sketch-based Row Tracking n Nisa Bostanci, Ismail Emir Yuksel, Ataberk Olgun, Konstantinos Kanellopoulos, Yahya Can Tugrul, A. Giray Yaglikci, Mohammad Sadrosadati, Onur Mutlu \"CoMeT: Count-Min-Sketch-based Row Tracking to Mitigate RowHammer at Low Cost,” in Proceedings the 30th International Symposium on High-Performance Computer Architecture (HPCA), Edinburgh, March 2024. [arXiv version] [CoMeT Source Code] 138 More RowHammer in 2020-Today RowHammer in 2020 (I) 140 RowHammer in 2020 (II) 141 RowHammer in 2020 (III) 142 RowHammer in 2021 (I) 143 RowHammer in 2021 (II) 144 RowHammer in 2021 (III) 145 RowHammer in 2022 (I) 146 RowHammer in 2022 (II) 147 RowHammer in 2022 (III) 148 RowHammer in 2022 (IV) 149 RowHammer in 2022 (V) 150 RowHammer in 2022 (VI) 151 RowHammer in 2022 (VII) 152 RowHammer in 2022 (VII) n A. Giray Yaglıkcı, Ataberk Olgun, Minesh Patel, Haocong Luo, Hasan Hassan, Lois Orosa, Oguz Ergin, and Onur Mutlu, \"HiRA: Hidden Row Activation for Reducing Refresh Latency of Off-the- Shelf DRAM Chips\" Proceedings of the 55th International Symposium on Microarchitecture (MICRO), Chicago, IL, USA, October 2022. [Slides (pptx) (pdf)] [Longer Lecture Slides (pptx) (pdf)] [Lecture Video (36 minutes)] [arXiv version] 153 https://arxiv.org/pdf/2209.10198.pdf RowHammer in 2022 (VIII) https://arxiv.org/pdf/2204.10378.pdf 154 RowHammer in 2022 (IX) https://arxiv.org/pdf/2207.13358.pdf 155 RowHammer in 2023 (I) 156 RowHammer in 2023 (II) 157 RowHammer in 2023 (III)RowHammer in 2023 (IV) n SOSP 2023 159 RowHammer in 2023 (V) n IEEE Computer Architecture Letters, 2023 n IEEE Embedded Systems Letters, 2023 160 RowHammer in 2023 (VI) n MEMSYS 2023 n MICRO 2023 161 RowHammer in 2024 (I) 162 RowHammer in 2024 (II) 163 RowHammer in 2024 (III) 164 Row Migration-Based RowHammer Defenses 165 Industry Solutions to RowHammer 2020-Today Per-Row Activation Counters in DRAM n Tanj Bennett, Stefan Saroiu, Alec Wolman, and Lucian Cojocar, “Panopticon: A Complete In-DRAM Rowhammer Mitigation,” DRAMSec Workshop (co- located with ISCA), 2021. 167 RowHammer in 2023: SK Hynix 168 RowHammer in 2023: Samsung 169 https://arxiv.org/pdf/2302.03591v1.pdf DDR5 Update in 2024 n DRAM implements per-row activation counters n DRAM asserts a back-off signal when refresh is needed n Memory controller issues refresh upon back-off signal 170 JEDEC, “JESD79-5C_v1.30: DDR5 SDRAM Specification,” April, 2024. Blog Post on DDR5 Update n Stefan Saroiu, “DDR5 Spec Update Has All It Needs to End RowHammer: Will It?,” https://stefan.t8k2.com/rh/PRAC 171 Question Are we now RowHammer-free in 2024 and Beyond? 172 RowHammer in DDR5 Patrick Jattke; Max Wipfli; Flavien Solt; Michele Marazzi; Matej Bölcskei; and Kaveh Razavi, “ZenHammer: Rowhammer Attacks on AMD Zen-based Platforms,” in USENIX Security, 2024. [Paper] [URL] 173 We\tfound\tbit\tflips\ton\tonly\t1\tof\t10\ttested\tdevices\t(S1),\tsuggesting\tthat\tthe\tchanges\t in\tDDR5\tsuch\tas\timproved\tRowhammer\tmitigations,\ton-die\terror\tcorrection\tcode\t(ECC),\t and\ta\thigher\trefresh\trate\t(32\tms)\tmake\tit\tharder\tto\ttrigger\tbit\tflips. Better RowHammer Solutions A Takeaway Main Memory Needs Intelligent Controllers for Security, Safety, Reliability, Scaling 175176 RowHammer\tSolution\tApproaches • More\trobust\tDRAM\tchips\tand/or\terror-correcting\tcodes • Increased\trefresh\trate\t • Physical\tisolation • Reactive\trefresh • Proactive\tthrottling DRAM Bank Aggressor Row Victim Rows Isolation Rows Large-enough\tdistance DRAM BankAggressor Row Victim rows RefreshVic2m Rows Refresh Rapidly\tactivated\t(hammered) Fewer\tactivations\tpossible in\ta\trefresh\tinterval Fewer\tactivations\tallowed\tfor\taggressive\tapplications Cost, Power, Performance, Complexity Ramulator 2.0 \"Ramulator 2.0: A Modern, Modular, and Extensible DRAM Simulator” IEEE Computer Architecture Letters, August 2023. (Preprint available on arxiv) [arXiv version] [Ramulator 2.0 Source Code] FPGA-based Exploration of DRAM and RowHammer 178 EFCL Summer School n Visit the program here: https://safari.ethz.ch/track-4-efcl-summer-2024/ 179 Mohammad Sadrosadati Frank K. Gürkaynak (Lecture by Giray Yaglikci) ETH Zürich Spring 2024 23 May 2024 Digital Design and Computer Architecture Lecture 23b: Memory Robustness Backup Slides (Not Covered) 181 Data Retention in Memory [Liu et al., ISCA 2013] n Retention Time Profile of DRAM looks like this: 182 Location dependent Stored value pattern dependent Time dependent Liu+, “RAIDR: Retention-Aware Intelligent DRAM Refresh,” ISCA 2012. RAIDR: Heterogeneous Refresh [ISCA’12] n Jamie Liu, Ben Jaiyen, Richard Veras, and Onur Mutlu, \"RAIDR: Retention-Aware Intelligent DRAM Refresh\" Proceedings of the 39th International Symposium on Computer Architecture (ISCA), Portland, OR, June 2012. Slides (pdf) [Invited Retrospective at 50 Years of ISCA, 2023 (pdf)] Selected to the ISCA-50 25-Year Retrospective Issue covering 1996-2020 in 2023 (Retrospective (pdf) Full Issue). n Jamie Liu, Ben Jaiyen, Yoongu Kim, Chris Wilkerson, and Onur Mutlu, \"An Experimental Study of Data Retention Behavior in Modern DRAM Devices: Implications for Retention Time Profiling Mechanisms\" Proceedings of the 40th International Symposium on Computer Architecture (ISCA), Tel- Aviv, Israel, June 2013. Slides (ppt) Slides (pdf) [Invited Retrospective at 50 Years of ISCA, 2023 (pdf)] Selected to the ISCA-50 25-Year Retrospective Issue covering 1996-2020 in 2023 (Retrospective (pdf) Full Issue). 184 Analysis of Data Retention Failures [ISCA’13] n Samira Khan, Donghyuk Lee, Yoongu Kim, Alaa Alameldeen, Chris Wilkerson, and Onur Mutlu, \"The Efficacy of Error Mitigation Techniques for DRAM Retention Failures: A Comparative Experimental Study\" Proceedings of the ACM International Conference on Measurement and Modeling of Computer Systems (SIGMETRICS), Austin, TX, June 2014. [Slides (pptx) (pdf)] [Poster (pptx) (pdf)] [Full data sets] 185 Mitigation of Retention Issues [SIGMETRICS’14]Mitigation of Retention Issues [DSN’15] n Moinuddin Qureshi, Dae Hyun Kim, Samira Khan, Prashant Nair, and Onur Mutlu, \"AVATAR: A Variable-Retention-Time (VRT) Aware Refresh for DRAM Systems\" Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Rio de Janeiro, Brazil, June 2015. [Slides (pptx) (pdf)] 186 n Samira Khan, Donghyuk Lee, and Onur Mutlu, \"PARBOR: An Efficient System-Level Technique to Detect Data- Dependent Failures in DRAM\" Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Toulouse, France, June 2016. [Slides (pptx) (pdf)] Mitigation of Retention Issues [DSN’16] n Samira Khan, Chris Wilkerson, Zhe Wang, Alaa R. Alameldeen, Donghyuk Lee, and Onur Mutlu, \"Detecting and Mitigating Data-Dependent DRAM Failures by Exploiting Current Memory Content\" Proceedings of the 50th International Symposium on Microarchitecture (MICRO), Boston, MA, USA, October 2017. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Poster (pptx) (pdf)] Mitigation of Retention Issues [MICRO’17] Mitigation of Retention Issues [ISCA’17] n Minesh Patel, Jeremie S. Kim, and Onur Mutlu, \"The Reach Profiler (REAPER): Enabling the Mitigation of DRAM Retention Failures via Profiling at Aggressive Conditions\" Proceedings of the 44th International Symposium on Computer Architecture (ISCA), Toronto, Canada, June 2017. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] n First experimental analysis of (mobile) LPDDR4 chips n Analyzes the complex tradeoff space of retention time profiling n Idea: enable fast and robust profiling at higher refresh intervals & temperatures Mitigation of Retention Issues [DSN’19] n Minesh Patel, Jeremie S. Kim, Hasan Hassan, and Onur Mutlu, \"Understanding and Modeling On-Die Error Correction in Modern DRAM: An Experimental Study Using Real Devices\" Proceedings of the 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Portland, OR, USA, June 2019. [Source Code for EINSim, the Error Inference Simulator] Best paper award. Mitigation of Retention Issues [MICRO’20] n Minesh Patel, Jeremie S. Kim, Taha Shahroodi, Hasan Hassan, and Onur Mutlu, \"Bit-Exact ECC Recovery (BEER): Determining DRAM On-Die ECC Functions by Exploiting DRAM Data Retention Characteristics\" Proceedings of the 53rd International Symposium on Microarchitecture (MICRO), Virtual, October 2020. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (15 minutes)] [Lightning Talk Video (1.5 minutes)] Best paper award. Mitigation of Retention Issues [MICRO’21] n Minesh Patel, Geraldo F. de Oliveira Jr., and Onur Mutlu, \"HARP: Practically and Effectively Identifying Uncorrectable Errors in Memory Chips That Use On-Die Error-Correcting Codes\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (20 minutes)] [Lightning Talk Video (1.5 minutes)] [HARP Source Code (Officially Artifact Evaluated with All Badges)] 192 More on DRAM Refresh & Data Retention 193https://www.youtube.com/watch?v=v702wUnaWGE&list=PL5Q2soXY2Zi9xidyIgBxUz7xRPS-wisBN&index=3 RowPress RowPress [ISCA 2023] n Haocong Luo, Ataberk Olgun, Giray Yaglikci, Yahya Can Tugrul, Steve Rhyner, M. Banu Cavlak, Joel Lindegger, Mohammad Sadrosadati, and Onur Mutlu, \"RowPress: Amplifying Read Disturbance in Modern DRAM Chips\" Proceedings of the 50th International Symposium on Computer Architecture (ISCA), Orlando, FL, USA, June 2023. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Lightning Talk Video (3 minutes)] [RowPress Source Code and Datasets (Officially Artifact Evaluated with All Badges)] Officially artifact evaluated as available, reusable and reproducible. Best artifact award at ISCA 2023. 195 RowPress\t Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu ISCA\t2023\tSession\t2B:\tMonday\t19\tJune,\t2:15\tPM\tEDT\t High-Level\tSummary 197 • We\tdemonstrate\tand\tanalyze\tRowPress,\ta\tnew\t read\tdisturbance\tphenomenon\tthat\tcauses\tbitflips\t in\treal\tDRAM\tchips • We\tshow\tthat\tRowPress\tis\tdifferent\tfrom\tthe\t RowHammer\tvulnerability • We\tdemonstrate\tRowPress\tusing\ta\tuser-level\t program\ton\ta\treal\tIntel\tsystem\twith\treal\tDRAM\tchips • We\tprovide\teffective\tsolutions\tto\tRowPress What\tis\tRowPress? 198 Keeping\ta\tDRAM\trow\topen\tfor\ta\tlong\ttime\t causes\tbit5lips\tin\tadjacent\trows These\tbitOlips\tdo\tNOT\trequire\tmany\trow\tactivations Only\tone\tactivation\tis\tenough\tin\tsome\tcases! Now,\tlet's\tdelve\tinto\tsome\tbackground\tand\t see\thow\tthis\tis\tdifferent\tfrom\tRowHammer☞ Read\tDisturbance\tin\tDRAM • Read\tdisturbance\tin\tDRAM\tbreaks\tmemory\tisolation • Prominent\texample:\tRowHammer 199 Row\t1 Row\t2 Row\t3 Row\t2open Row\t1 Row\t3 Row\t2closed Row\t2open Row\t1 Row\t3 Row\t2open Row\t2closed DRAM Chip Victim\tRow Victim\tRow Aggressor\tRow Repeatedly\topening\t(activating)\tand\tclosing\ta\tDRAM\trow\t many\ttimes\tcauses\tRowHammer\tbitflips\tin\tadjacent\trows Are\tThere\tOther\tRead-Disturb\tIssues\tin\tDRAM? • RowHammer\tis\tthe\tonly\tstudied\tread-disturb\tphenomenon • Mitigations\twork\tby\tdetecting\thigh\trow\tactivation\tcount 200 What\tif\tthere\tis\tanother\tread-disturb\tphenomenon that\tdoes\tNOT\trely\ton\thigh\trow\tactivation\tcount? https://www.reddit.com/r/CrappyDesign/comments/arw0q8/now_this_this_is_poor_fencing/ RowPress\tvs.\tRowHammer Instead\tof\tusing\ta\thigh\tactivation\tcount, 201 RowHammer Aggressor Row Open Close RowPress Aggressor Row Open Close We\tobserve\tbitflips\teven\twith\tONLY\tONE\tactivation\t in\textreme\tcases\twhere\tthe\trow\tstays\topen\tfor\t30ms 36ns,\t47K\tactivations\tto\tinduce\tbitflips 7.8µs,\tonly\t5K\tactivations\tto\tinduce\tbitflips ☞\tincrease\tthe\ttime\tthat\tthe\taggressor\trow\tstays\topen Real\tDRAM\tChip\tCharacterization\t(I) FPGA-Based\tDDR4\tTesting\tInfrastructure • Based\ton\tSoftMC\t[Hassan+,\tHPCA’17]\tand\t DRAM\tBender\t[Olgun+,\tTCAD’23] • Fine-grained\tcontrol\tover\tDRAM\tcommands,\ttimings,\tand\t temperature 202https://github.com/CMU-SAFARI/DRAM-Bender DRAM\tchips\ttested • 164\tDDR4\tchips\tfrom\tall\t3\tmajor\tDRAM\tmanufacturers • Covers\tdifferent\tdie\tdensities\tand\trevisions Real\tDRAM\tChip\tCharacterization\t(II) 203 Major\tTakeaways\tfrom\tReal\tDRAM\tChips 204 RowPress\tsignificantly\tamplifies\t DRAM’s\tvulnerability\tto\tread\tdisturbance RowPress\thas\ta\tdifferent\tunderlying\t error\tmechanism\tfrom\tRowHammer Key\tCharacteristics\tof\tRowPress\t(I) 205 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitflip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitflips Key\tCharacteristics\tof\tRowPress\t(II) 206 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitElip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitElips • Gets\tworse\tas\ttemperature\tincreases Different\tFrom\tRowHammer • Affects\ta\tdifferent\tset\tof\tcells\tcompared\tto\tRowHammer\tand\t retention\tfailures • Behaves\tdifferently\tas\taccess\tpattern\tand\ttemperature\tchanges\t compared\tto\tRowHammer Real-System\tDemonstration\t(I) 207 Key\tIdea:\tA\tproof-of-concept\tRowPress\tprogram\tkeeps\ta\t DRAM\trow\topen\tfor\ta\tlonger\tperiod\tby\tkeeping\ton\t accessing\tdifferent\tcache\tblocks\tin\tthe\trow Intel\tCore\ti5-10400\t (Comet\tLake) Samsung\tDDR4\tModule\t M378A2K43CB1-CTD (Date\tCode:\t20-10) w/\tTRR\tRowHammer\tMitigation // Sync with Refresh and Loop Below for (k = 0; k < NUM_AGGR_ACTS; k++) for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR1[j]; for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR2[j]; for (j = 0; j < NUM_READS; j++) clflushopt(AGGRESSOR1[j]); clflushopt(AGGRESSOR2[j]); mfence(); activate_dummy_rows(); Number of Cache Blocks Accessed Per Aggressor Row ACT (NUM_READS=1 is Rowhammer) Real-System\tDemonstration\t(II) 208 Leveraging\tRowPress,\tour\tuser-level\tprogram\t induces\tbitflips\twhen\tRowHammer\tcannot On\t1500\tvictim\trows Mitigating\tRowPress\t(I) 209 We\tpropose\ta\tmethodology\tto\tadapt\texisting\t RowHammer\tmitigations\tto\talso\tmitigate\tRowPress Key\tIdea: 1. Limit\tthe\tmaximum\trow\topen\ttime\t(tmro) 2. Configure\tthe\tRowHammer\tmitigation\tto\taccount\tfor\tthe\t RowPress-induced\treduction\tin\tACmin Row\tOpen\tTimeACminRowPress-Induced\t ACmin\tReduction Original\t RowHammer\t Mitigation Adapted Mitigation tmro Less\t Row\tBuffer\tLocality More\tRowPress\t Read\tDisturbance Mitigating\tRowPress\t(II) 210 Evaluation\tmethodology • Adapted\tRowHammer\tMitigations: Graphene\t(Graphene-RP)\t and\tPARA\t(PARA-RP) • Cycle-accurate\tDRAM\tsimulator:\tRamulator\t[Kim+,\tCAL’15] - 4\tGHz\tOut-of-Order\tCore,\tdual-rank\tDDR4\tDRAM - FR-FCFS\tscheduling - Open-row\tpolicy\t(with\tlimited\tmaximum\trow\topen\ttime) • 58\tfour-core\tmultiprogrammed\tworkloads\tfrom\tSPEC\tCPU2017,\t TPC-H,\tand\tYCSB • Metric: Additional\tperformance\toverhead of\tGraphene-RP\t (PARA-RP)\tover\tGraphene\t(PARA) - Measured\tby\tweighted\tspeedup Mitigating\tRowPress\t(III) 211 Key\tevaluation\tresults Our\tsolutions\tmitigate\tRowPress\t at\tlow\tadditional\tperformance\toverhead -2% 0% 2% 4% 6% 8% 10% 36 66 96 186 336 636 tmro (ns) Additional Performance Overhead of Graphene-RP Avg. Overhead Max Overhead 0% 10% 20% 36 66 96 186 336 636 tmro (ns) Additional Performance Overhead of PARA-RP Avg. Overhead Max Overhead Avg. -0.63% Max. 6.4% Avg. 4.5% Max. 13.1% More\tResults\t&\tSource\tCode 212 Many\tmore\tresults\t&\tanalyses\tin\tthe\tpaper Ø 6\tmajor\ttakeaways Ø 19\tmajor\tempirical\tobservations Ø 3\tmore\tpotential\tmitigations Fully\topen\tsource\tand\tartifact\tevaluated Ø https://github.com/CMU-SAFARI/RowPress https://arxiv.org/pdf/2306.17061.pdf Conclusion 213 We\tdemonstrate\tand\tanalyze\tRowPress,\ta\twidespread read\tdisturbance\tphenomenon\tthat\tcauses\tbitflips\t in\treal\tDRAM\tchips We\tcharacterize\tRowPress\ton\t164\tDDR4\tchips\t from\tall\t3\tmajor\tDRAM\tmanufacturers • RowPress\tgreatly\tamplifies\tread\tdisturbance:\tminimum\tactivation\tcount reduces\tby\t1-2\torders\tof\tmagnitude\t • RowPress\thas\ta\tdifferent\tmechanism\tfrom\tRowHammer\t&\tretention\tfailures We\tdemonstrate\tRowPress\tusing\ta\tuser-level\tprogram • Induces\tbitflips\twhen\tRowHammer\tcannot We\tprovide\teffective\tsolutions\tto\tRowPress • Low\tadditional\tperformance\toverhead RowPress Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu https://github.com/CMU-SAFARI/RowPress RowPress [ISCA 2023] n Haocong Luo, Ataberk Olgun, Giray Yaglikci, Yahya Can Tugrul, Steve Rhyner, M. Banu Cavlak, Joel Lindegger, Mohammad Sadrosadati, and Onur Mutlu, \"RowPress: Amplifying Read Disturbance in Modern DRAM Chips\" Proceedings of the 50th International Symposium on Computer Architecture (ISCA), Orlando, FL, USA, June 2023. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Lightning Talk Video (3 minutes)] [RowPress Source Code and Datasets (Officially Artifact Evaluated with All Badges)] Officially artifact evaluated as available, reusable and reproducible. Best artifact award at ISCA 2023. 215216 DRAM\tBender:\tPrototypes Five\tout\tof\tthe\tbox\tFPGA-based\tprototypes https://github.com/CMU-SAFARI/DRAM-Bender\t DRAM Bender 217 https://github.com/CMU-SAFARI/DRAM-Bender n Ataberk Olgun, Hasan Hassan, A Giray Yağlıkçı, Yahya Can Tuğrul, Lois Orosa, Haocong Luo, Minesh Patel, Oğuz Ergin, and Onur Mutlu, \"DRAM Bender: An Extensible and Versatile FPGA-based Infrastructure to Easily Test State-of-the-art DRAM Chips\" IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD), 2023. [Extended arXiv version] [DRAM Bender Source Code] [DRAM Bender Tutorial Video (43 minutes)] More to Come… Two Major Directions n Understanding Bitflips (Hardware errors in general) q Many effects on bitflips still need to be rigorously examined n Aging of DRAM Chips n Environmental Conditions (e.g., Process, Voltage, Temperature) n Memory Access Patterns n Memory Controller & System Design Decisions n … n Solving Bitflips (Hardware errors in general) q Flexible and efficient solutions are necessary n In-field patchable / reconfigurable / programmable solutions q Co-architecting across the system stack/components is important n To avoid performance and denial-of-service problems 219 A RowHammer Survey: Recent Update n Onur Mutlu, Ataberk Olgun, and A. Giray Yaglikci, \"Fundamentally Understanding and Solving RowHammer\" Invited Special Session Paper at the 28th Asia and South Pacific Design Automation Conference (ASP-DAC), Tokyo, Japan, January 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (26 minutes)] 220 https://arxiv.org/pdf/2211.07613.pdf Better Coordination of DRAM & Controller https://arxiv.org/pdf/2207.13358.pdf 221 222 Self-Managing\tDRAM:\tOverview Self-Managing\tDRAM\t(SMD) enables\tautonomous\tin-DRAM\tmaintenance\toperations ACT_NACK\tpin Memory\t Controller DRAM Chip command\tbus data\tbus Leveraging\tthe\tability\tto\treject\tan\tACT,\ta\tmaintenance\toperation\t can\tbe\timplemented\tcompletely\twithin\ta\tDRAM\tchip Key\tIdea: Prevent\tthe\tmemory\tcontroller\tfrom\taccessing\tDRAM\tregions\tthat\tare under\tmaintenance\tby\trejecting\trow\tactivation\t(ACT)\tcommands 223 SMD-Based\tMaintenance\tMechanisms DRAM\t Refresh RowHammer\t Protection Memory\t Scrubbing Fixed\tRate\t(SMD-FR) Variable\tRate\t(SMD-VR) uniformly\trefreshes\tall\tDRAM\trows\t with\ta\t+ixed\trefresh\tperiod skips\trefreshing\trows\tthat\t can\tretain\ttheir\tdata\tfor\tlonger\tthan\t the\tdefault\trefresh\tperiod Probabilistic\t(SMD-PRP) Deterministic\t(SMD-DRP) keeps\ttrack\tof\tmost\t frequently\tactivated\trows\tand\t performs\tneighbor\trow\trefresh\twhen\t activation\tcount\tthreshold\tis\texceeded Periodic\tScrubbing\t(SMD-MS) periodically\tscans\tthe\tentire\tDRAM\tfor\terrors\tand\tcorrects\tthem Performs\tneighbor\trow\trefresh\t with\ta\tsmall\tprobability\t on\tevery\trow\tactivation 224 Self-Managing\tDRAM:\tSummary Implementing\tnew\tmaintenance\tmechanisms\toften\trequires\tdifficult-to-realize\tchanges The\tthree\tmajor\tDRAM\tmaintenance\toperations: vRefresh vRowHammer\tProtection vMemory\tScrubbing Our\tGoal Ease\tthe\tprocess\tof\tenabling\tnew\tDRAM\tmaintenance\toperations1 Enable\tmore\tefficient\tin-DRAM\tmaintenance\toperations2 Self-Managing\tDRAM\t(SMD) Enables\timplementing\tnew\tin-DRAM\tmaintenance\tmechanisms\t with\tno\tfurther\tchanges\tin\tthe\tDRAM\tinterface\tand\tmemory\tcontroller SMD-based\trefresh,\tRowHammer\tprotection,\tand\tscrubbing\tachieve\t 9.2%\tspeedup\tand\t6.2%\tlower\tDRAM\tenergy\tvs.\tconventional\tDRAM Talk on Self-Managing DRAM 225https://www.youtube.com/watch?v=mGa6-vpExbE Hidden Row Activation n A. Giray Yaglıkcı, Ataberk Olgun, Minesh Patel, Haocong Luo, Hasan Hassan, Lois Orosa, Oguz Ergin, and Onur Mutlu, \"HiRA: Hidden Row Activation for Reducing Refresh Latency of Off-the- Shelf DRAM Chips\" Proceedings of the 55th International Symposium on Microarchitecture (MICRO), Chicago, IL, USA, October 2022. [Slides (pptx) (pdf)] [Longer Lecture Slides (pptx) (pdf)] [Lecture Video (36 minutes)] [arXiv version] 226 https://arxiv.org/pdf/2209.10198.pdf HiRA:\tHidden\tRow\tActivation\t for\tReducing\tRefresh\tLatency\tof\tOff-the-Shelf\tDRAM\tChips Abdullah\tGiray\tYağlıkçı\t Ataberk\tOlgun\t\t\t\tMinesh\tPatel\t\t\t\tHaocong\tLuo\t\t\t\tHasan\tHassan Lois\tOrosa\t\t\t\tOğ uz\tErgin\t\t\t\tOnur\tMutlu\t\t 228 \t2 Two\tMain\tTypes\tof\tDRAM\tRefresh Periodic\tRefresh:\tPeriodically\trestores\tthe\tcharge \t \t DRAM\tcells\tleak\tover\ttime1 DRAM\tRow Preventive\tRefresh\t\t Preventive\tRefresh RowHammer:\tRepeatedly\taccessing\ta\tDRAM\trow\tcan\tcause\t \t \t \t\t\tbit\tflips\tin\tother\tphysically\tnearby\trows Preventive\tRefresh:\tMitigates\tRowHammer\t \t \t \t\t\t\t\t\t\t\t\t\t \tby\trefreshing\tphysically\tnearby\trows\t \t \t \t\t\t\t\t\t\t\t\t\t \tof\ta\trepeatedly\taccessed\trow 229 Key\tIdea Hide\trefresh\tlatency\tby\trefreshing\ta\tDRAM\trow\t concurrently\twith\tactivating\tanother\trow\t in\ta\tdifferent\tsubarray\tof\tthe\tsame\tbank 230 Subarray\tX Subarray\tY HiRA:\tHidden\tRow\tActivation\t–\tKey\tInsight Activating\ttwo\trows\tin\tquick\tsuccession\t that\tare\tin\tdifferent\tsubarrays\tin\tthe\tsame\tbank\t can\trefresh\tone\trow\tconcurrently\twith\t activating\tthe\tother\trow Row\tA Row\tB Refreshes\tRowA concurrently\twith Activating\tRowB ACT ACT DRAM\tBank 231 Refresh\tRowA\tconcurrently\twith\tActivating\tRowB HiRA Saved\ttime using\tHiRA HiRA:\tHidden\tRow\tActivation ACT RowA PRE ACT RowB time time RowA’s\t refresh RowB’s\t activation ACT RowA PRE ACT RowB RowA’s\t refresh RowB’s\t activation RD RDWithout\tHiRAWith\tHiRA Precharge 232 DRAM\tTesting\tInfrastructure FPGA-based\tSoftMC\t(Xilinx\tVirtex\tUltraScale+\tXCU200) *Hassan\tet\tal.,\t\"SoftMC:\tA\tFlexible\tand\tPractical\tOpen-Source\tInfrastructure\tfor\tEnabling\tExperimental\t DRAM\tStudies,\"\tin\tHPCA,\t2017.\t[Available\ton\tGitHub:\thttps://github.com/CMU-SAFARI/SoftMC] Xilinx\tAlveo\tU200\tFPGA\tBoard (programmed\twith\tSoftMC*) DRAM\tModule\twith\tHeaters MaxWell\tFT200\t Temperature\tController PCIe\t Host\tInterface Fine-grained\tcontrol\tover\tDRAM\tcommands,\t timing\tparameters\t(±1.5ns),\tand\ttemperature\t(±0.1°C\t) 233 HiRA-MC:\tHiRA\tMemory\tController\t Generates\teach\tperiodic\trefresh\t and\tRowHammer-preventive\trefresh\t with\ta\tdeadline Buffers\teach\trefresh\trequest\tand\t performs\tthe\trefresh\trequest\t until\tthe\tdeadline Finds\tif\tit\tcan\trefresh\ta\tDRAM\trow\t concurrently\twith\ta\tDRAM\taccess\t or\tanother\trefresh 1 2 3 234 HiRA\tfor\tPeriodic\tRefreshes\t • No-Refresh:\tNo\tperiodic\trefresh\tis\tperformed\t(Ideal\tcase) • Baseline:\tAuto-Refresh\t(using\tconventional\tREF\tcommands) 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 2 4 8 16 32 64 128Weighted\tSpeedup(Normalized\tto\tNo-Refresh) DRAM\tChip\tCapacity\t(Gb) No\tRefresh Baseline HiRA 26%\t slowdown 12.6% speedup Periodic\trefreshes\tcause\tsignificant\t(26%)\tperformance\toverhead HiRA\timproves\tsystem\tperformance\tby\t12.6%\tover\tthe\tbaseline 235 0.00 0.20 0.40 0.60 0.80 1.00 1.20 1024 512 256 128 64Weighted\tSpeedup(Normalized\tto\tNo-Defense) RowHammer\tThreshold\t(Number\tof\tActivations) No-Defense PARA HiRA HiRA\tfor\tPreventive\tRefreshes\t • No\tDefense:\tNo\tRowHammer\tmitigation\temployed\t(i.e.,\tno\tpreventive\trefresh) • PARA\t[Kim+,\tISCA’14]:\tthe\tRowHammer\tdefense\twith\tthe\tlowest\thardware\toverhead 96% slowdown 3.7x speedup PARA\tsignificantly\treduces\t(by\t96%)\tsystem\tperformance HiRA\timproves\tsystem\tperformance\tby\t3.7x\tover\tPARA 236 More\tin\tthe\tFull\tPaper • Real\tDRAM\tChip\tExperiments - verify\tthat\tHiRA’s\tsecond\trow\tactivation\tis\tperformed - analyze\tthe\tvariation\tacross\tbanks • Sensitivity\tto - the\tlength\tof\ttime\tslack\tfor\trefreshes - the\tnumber\tof\tchannels - the\tnumber\tof\tranks • Hardware\tComplexity\tAnalysis - Chip\tarea\tcost\tof\t0.0023%\tof\ta\tprocessor\tdie\tper\tDRAM\trank - No\tadditional\tlatency\toverhead\t • Experimental\tmethodology\t - provide\tdetailed\talgorithms\tfor\teach\tset\tof\treal\tchip\texperiments - an\textensive\tsecurity\tanalysis\tfor\tthe\tRowHammer\tdefense • Detailed\tAlgorithm\tof\tFinding\tConcurrent\tRefreshes https://arxiv.org/pdf/2209.10198.pdf 237 Conclusion • HiRA:\tHidden\tRow\tActivation\t–\ta\tnew\tDRAM\toperation - First\ttechnique\tthat\trefreshes\ta\tDRAM\trow\tconcurrently\twith\tactivating\tanother\t row\tin\tthe\tsame\tbank\tin\toff-the-shelf\tDRAM\tchips - Real\tDRAM\tchip\texperiments: • HiRA\tworks\ton\t56\treal\toff-the-shelf\tDRAM\tchips\t • 51.4%\treduction\tin\tthe\ttime\tspent\tfor\trefresh\toperations • HiRA-MC:\tHiRA\tMemory\tController\t–\ta\tnew\tmechanism - Leverages\tHiRA\tto\tperform\trefresh\trequests\t concurrently\twith\tDRAM\taccesses\tand\tother\trefresh\trequests - HiRA-MC\tprovides: • 12.6%\tspeedup\tby\thiding\tperiodic\trefresh\tlatency • 3.7x\tspeedup\tby\thiding\tRowHammer-preventive\trefresh\tlatency HiRA:\tHidden\tRow\tActivation\t for\tReducing\tRefresh\tLatency\tof\tOff-the-Shelf\tDRAM\tChips Abdullah\tGiray\tYağlıkçı\t Ataberk\tOlgun\t\t\t\tMinesh\tPatel\t\t\t\tHaocong\tLuo\t\t\t\tHasan\tHassan Lois\tOrosa\t\t\t\tOğ uz\tErgin\t\t\t\tOnur\tMutlu\t\t Hidden Row Activation n A. Giray Yaglıkcı, Ataberk Olgun, Minesh Patel, Haocong Luo, Hasan Hassan, Lois Orosa, Oguz Ergin, and Onur Mutlu, \"HiRA: Hidden Row Activation for Reducing Refresh Latency of Off-the- Shelf DRAM Chips\" Proceedings of the 55th International Symposium on Microarchitecture (MICRO), Chicago, IL, USA, October 2022. [Slides (pptx) (pdf)] [Longer Lecture Slides (pptx) (pdf)] [Lecture Video (36 minutes)] [arXiv version] 239 https://arxiv.org/pdf/2209.10198.pdf Talk on Hidden Row Activation 240https://www.youtube.com/live/HTo3bVFSTjw?si=mlUvNGdNZhPolHO1 Future Memory Robustness Challenges Future of Main Memory Robustness n DRAM is becoming less reliable à more vulnerable n Due to difficulties in DRAM scaling, other problems may also appear (or they may be going unnoticed) n Some errors may already be slipping into the field q Read disturb errors (Rowhammer) q Retention errors q Read errors, write errors q … n These errors can also pose security vulnerabilities 242 Future of Main Memory Robustness n DRAM n Flash memory n Emerging Technologies q Phase Change Memory q STT-MRAM q RRAM, memristors q … 243 Many Errors and Their Mitigation [PIEEE’17] 244 Cai+, “Error Characterization, Mitigation, and Recovery in Flash Memory Based Solid State Drives,” Proc. IEEE 2017. A Survey on Flash Memory Errors 245https://arxiv.org/pdf/1706.08642 Proceedings of the IEEE, Sept. 2017 A Takeaway Main Memory Needs Intelligent Controllers for Security, Safety, Reliability, Scaling 246 The Takeaway Intelligent Memory Controllers Can Avoid Many Failures & Enable Better Scaling 247 Architecting Future Memory for Security n Understand: Methods for vulnerability modeling & discovery q Modeling and prediction based on real (device) data and analysis q Understanding vulnerabilities q Developing reliable metrics n Architect: Principled architectures with security as key concern q Good partitioning of duties across the stack q Cannot give up performance and efficiency q Patch-ability in the field n Design & Test: Principled design, automation, (online) testing q Design for security q High coverage and good interaction with system reliability methods 248249Kim+, “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors,” ISCA 2014. Temperature Controller PC HeaterFPGAs FPGAs Understand and Model with Experiments (DRAM)Understand and Model with Experiments (Flash) USB Jack Virtex-II Pro (USB controller) Virtex-V FPGA (NAND Controller) HAPS-52 Mother Board USB Daughter Board NAND Daughter Board 1x-nm NAND Flash [DATE 2012, ICCD 2012, DATE 2013, ITJ 2013, ICCD 2013, SIGMETRICS 2014, HPCA 2015, DSN 2015, MSST 2015, JSAC 2016, HPCA 2017, DFRWS 2017, PIEEE 2017, HPCA 2018, SIGMETRICS 2018] Cai+, “Error Characterization, Mitigation, and Recovery in Flash Memory Based Solid State Drives,” Proc. IEEE 2017. Collapse of the “Galloping Gertie” (1940) 251 Source: AP http://www.wsdot.wa.gov/tnbhistory/connections/connections3.htm Another Example (1994) 252Source: By 최광모 - Own work, CC BY-SA 4.0, h9ps://commons.wikimedia.org/w/index.php?curid=35197984 Yet Another Example (2007) 253 Source: Morry Gash/AP, https://www.npr.org/2017/08/01/540669701/10-years-after-bridge-collapse-america-is-still-crumbling?t=1535427165809 A More Recent Example (2018) 254Source: AFP / Valery HACHE, https://www.capitalfm.co.ke/news/2018/08/genoa-bridge-collapse-what-we-know/ A Most Recent Example (2022) 255h\"ps://www.post-gaze\"e.com/local/city/2022/01/28/pi\"sburgh-bridge-collapse-forbes-braddock-avenue-point-breeze-squirrel-hill/stories/202201280075 A Most Recent Example (2022) 256h9ps://www.reuters.com/world/us/biden-highlight-manufacturing-jobs-gdp-growth-pi9sburgh-2022-01-28/ A Most Recent Example (2022) 257h9ps://usa.streetsblog.org/2022/01/28/pi9sburgh-bridge-collapse-underscores-urgent-need-for-ﬁx-it-ﬁrst-policy/ A Most Recent Example (2022) 258https://www.npr.org/2022/01/28/1076343656/pittsburgh-bridge-collapse-biden-visit The Takeaway, Again Intelligent Memory Controllers Can Avoid Such Failures 259 A Takeaway Main Memory Needs Intelligent Controllers for Security, Safety, Reliability, Scaling 260 An Early Proposal for Intelligent Controllers [IMW’13] n Onur Mutlu, \"Memory Scaling: A Systems Architecture Perspective\" Proceedings of the 5th International Memory Workshop (IMW), Monterey, CA, May 2013. Slides (pptx) (pdf) EETimes Reprint https://people.inf.ethz.ch/omutlu/pub/memory-scaling_memcon13.pdf Industry Is Writing Papers About It, Too 262 Industry Is Writing Papers About It, Too 263 Industry’s RowHammer Solutions (I) 264 Industry’s RowHammer Solutions (II) 265 Industry’s RowHammer Solutions (III) 266 Industry’s RowHammer Solutions (IV) 267 https://arxiv.org/pdf/2302.03591v1.pdf Final Thoughts on RowHammer Aside: Byzantine Failures n This class of failures is known as Byzantine failures n Characterized by q Undetected erroneous computation q Opposite of “fail fast (with an error or no result)” n “erroneous” can be “malicious” (intent is the only distinction) n Very difficult to detect and confine Byzantine failures n Do all you can to avoid them n Lamport et al., “The Byzantine Generals Problem,” ACM TOPLAS 1982. 269Slide credit: Mahadev Satyanarayanan, CMU, 15-440, Spring 2015 Aside: Byzantine Generals Problem 270https://dl.acm.org/citation.cfm?id=357176 ACM TOPLAS 1982 Before RowHammer (I) 271https://www.cs.princeton.edu/~appel/papers/memerr.pdf IEEE S&P 2003 Before RowHammer (II) 272https://www.cs.princeton.edu/~appel/papers/memerr.pdf IEEE S&P 2003 After RowHammer A simple memory error can be induced by software 273 RowHammer: Retrospective n New mindset that has enabled a renewed interest in HW security attack research: q Real (memory) chips are vulnerable, in a simple and widespread manner à this causes real security problems q Hardware reliability à security connection is now mainstream discourse n Many new RowHammer attacks… q Tens of papers in top security & architecture venues q More to come as RowHammer is getting worse (DDR4 & beyond) n Many new RowHammer solutions… q Apple security release; Memtest86 updated q Many solution proposals in top venues (latest in HPCA/S&P 2023) q Principled system-DRAM co-design (in original RowHammer paper) q More to come… 274 Perhaps Most Importantly… n RowHammer enabled a shift of mindset in mainstream security researchers q General-purpose hardware is fallible, in a widespread manner q Its problems are exploitable n This mindset has enabled many systems security researchers to examine hardware in more depth q And understand HW’s inner workings and vulnerabilities n It is no coincidence that two of the groups that discovered Meltdown and Spectre heavily worked on RowHammer attacks before q More to come… 275 Conclusion Summary: RowHammer n Memory reliability is reducing n Reliability issues open up security vulnerabilities q Very hard to defend against n Rowhammer is a prime example q First example of how a simple hardware failure mechanism can create a widespread system security vulnerability q Its implications on system security research are tremendous & exciting n Bad news: RowHammer is getting worse n Good news: We have a lot more to do q We are now fully aware hardware is easily fallible q We are developing both attacks and solutions q We are developing principled models, methodologies, solutions 277 Ongoing and Future Work Discover New Bitflips Fundamentally Fix Them To Build More Robust Systems for Future 278 A RowHammer Survey Across the Stack n Onur Mutlu and Jeremie Kim, \"RowHammer: A Retrospective\" IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD) Special Issue on Top Picks in Hardware and Embedded Security, 2019. [Preliminary arXiv version] [Slides from COSADE 2019 (pptx)] [Slides from VLSI-SOC 2020 (pptx) (pdf)] [Talk Video (1 hr 15 minutes, with Q&A)] 279https://arxiv.org/pdf/1904.09724.pdf A RowHammer Survey: Recent Update n Onur Mutlu, Ataberk Olgun, and A. Giray Yaglikci, \"Fundamentally Understanding and Solving RowHammer\" Invited Special Session Paper at the 28th Asia and South Pacific Design Automation Conference (ASP-DAC), Tokyo, Japan, January 2023. [arXiv version] [Slides (pptx) (pdf)] [Talk Video (26 minutes)] 280 https://arxiv.org/pdf/2211.07613.pdf Referenced Papers, Talks, Artifacts n All are available at https://people.inf.ethz.ch/omutlu/projects.htm https://www.youtube.com/onurmutlulectures https://github.com/CMU-SAFARI/ 281 Open Source Tools: SAFARI GitHub 282https://github.com/CMU-SAFARI/ RowPress Backup RowPress\t Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu ISCA\t2023\tSession\t2B:\tMonday\t19\tJune,\t2:15\tPM\tEDT\t Metric:\tThe\tminimum\tnumber\tof\taggressor\trow\tactivations\tin\ttotal\t to\tcause\tat\tleast\tone\tbitflip\t(ACmin) Access\tPattern:\tSingle-sided\t(i.e.,\tonly\tone\taggressor\trow).\tSweep\t aggressor\trow\ton\ttime\t(tAggON)\tfrom\t36ns to\t30ms Data\tPattern:\tCheckerboard\t(0xAA\tin\taggressor\tand\t0x55\tin\tvictim) Temperature:\t50°C Algorithm:\tBisection-based\tACmin\tsearch • Each\tsearch\titeration\tis\tcapped\tat\t60ms\t(<64ms\trefresh\twindow) • Repeat\t5\ttimes\tand\treport\tthe\tminimum\tACmin\tvalue\tobserved • Sample\t3072\tDRAM\trows\tper\tchip Characterization\tMethodology\t(III) 286 [More\tsensitivity\tstudies\tin\tthe\tpaper] Key\tCharacteristics\tof\tRowPress\t(I) 287 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitflip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitflips Key\tCharacteristics\tof\tRowPress\t(II) 288 Amplifying\tRead\tDisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitElip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitElips • Gets\tworse\tas\ttemperature\tincreases Different\tFrom\tRowHammer • Affects\ta\tdifferent\tset\tof\tcells\tcompared\tto\tRowHammer\tand\t retention\tfailures • Behaves\tdifferently\tas\taccess\tpattern\tand\ttemperature\tchanges\t compared\tto\tRowHammer Amplifying\tRead\tDisturbance (I) 289 RowHammer RowPress ACmin = 1 How minimum activation\tcount\tto\tinduce\ta\tbitflip\t(ACmin)\t changes\tas\taggressor\trow\ton\ttime\t(tAggON)\tincreases [min, max]tREFI9x tREFI How\tminimum\tactivation\tcount\tto\tinduce\ta\tbitflip\t(ACmin)\t changes\tas\taggressor\trow\ton\ttime\t(tAggON)\tincreases Amplifying\tRead\tDisturbance (II) 290 RowHammer RowPress How\tminimum\tactivation\tcount\tto\tinduce\ta\tbitKlip\t(ACmin)\t changes\tas\taggressor\trow\ton\ttime\t(tAggON)\tincreases Amplifying\tRead\tDisturbance (III) 291 ACmin\treduces\tby\t21X\ton\taverage\twhen\ttAggON\tincreases\tfrom\t36ns\tto\t7.8µs 191X 70.2µs RowPress\tsignificantly\treduces\tACmin\tas\ttAggON\tincreases Amplifying\tRead\tDisturbance (IV) 292 ACmin\t@\t80°C\tnormalized\tto\tACmin\t@\t50°C • Data\tpoint\tbelow\t1\tmeans\tfewer\tactivations\tto\tcause\tbitUlips @ 80°C\t compared\tto\t50°C When\ttAggON\tis\t7.8\tμs,\tRowPress\trequires\tabout\t50%\tfewer\tactivations\t to\tinduce\tbit_lips\tat\t80°C\tcompared\tto\t50°C RowPress\tgets\tworse\tas\ttemperature\tincreases Key\tCharacteristics\tof\tRowPress\t 293 Amplifying\tread\tdisturbance\tin\tDRAM • Reduces\tthe\tminimum\tnumber\tof\trow\tactivations\tneeded\tto\t induce\ta\tbitflip\t(ACmin)\tby\t1-2\torders\tof\tmagnitude • In\textreme\tcases,\tactivating\ta\trow\tonly\tonce\tinduces\tbitflips • Gets\tworse\tas\ttemperature\tincreases Different\tfrom\tRowHammer • Affects\ta\tdifferent\tset\tof\tcells\tcompared\tto\tRowHammer\tand\t retention\tfailures • Behaves\tdifferently\tas\taccess\tpattern\tor\ttemperature\tchanges\t compared\tto\tRowHammer Difference\tBetween\tRowPress\tand RowHammer\t(I) 294 Cells\tvulnerable\tto\tRowPress\tvs.\tRowHammer • Cells\tvulnerable\tto\tRowPress\t(RowHammer)\tare\tthose\tthat\tUlip\t@\tACmin • Overlap\t=\t$%&'()\t+,\t-(../\t0%.1()2'.(\t3+\t4+35\t6+78)(//\t219\t6+7:2&&() $%&'()\t+,\t-(../\t0%.1()2'.(\t3+\t6+78)(// On\taverage,\tonly\t0.013%\tof\tDRAM\tcells\tvulnerable\tto\tRowPress are\talso\tvulnerable\tto\tRowHammer,\twhen\ttAggON\t≥\t7.8us Difference\tBetween RowPress and RowHammer\t(II) 295 Cells\tvulnerable\tto\tRowPress\tvs.\tRowHammer • Cells\tvulnerable\tto\tRowPress\t(RowHammer)\tare\tthose\tthat\tUlip\t@\tACmin • Overlap\t=\t$%&'()\t+,\t-(../\t0%.1()2'.(\t3+\t4+35\t6+78)(//\t219\t6+7:2&&() $%&'()\t+,\t-(../\t0%.1()2'.(\t3+\t6+78)(// Most\tcells\tvulnerable\tto\tRowPress\t are\tNOT\tvulnerable\tto\tRowHammer Difference\tBetween RowPress and RowHammer\t(III) 296 Directionality\tof\tRowHammer\tand\tRowPress\tbitKlips RowPress\tand\tRowHammer\tbitKlips\thave\topposite\tdirections The\tmajority\tof\tRowHammer\tbitflips\tare\t1\tto\t0 The\tmajority\tof\tRowPress\tbitflips\tare\t0\tto\t1 Difference\tBetween RowPress and RowHammer (IV) 297 Effectiveness\tof\tsingle-sided\tvs.\tdouble-sided\tRowPress • Data\tpoint\tbelow\t0\tmeans\tfewer\tactivations\tto\tcause\tbitflips with\t single-sided\tRowPress\tcompared\tto\tdouble-sided\tRowPress As\ttAggON\tincreases\tbeyond\ta\tcertain\tlevel,\tsingle-sided\tRowPress\t becomes\tmore\teffective\tcompared\tto\tdouble-sided Different\tfrom\tRowHammer\twhere\tdouble-sided\tis\tmore\teffective Difference\tBetween RowPress and RowHammer (V) 298 Sensitivity\tto\ttemperature • Data\tpoint\tbelow\t1\tmeans\tfewer\tactivations\tto\tcause\tbitflips @ 80°C\t compared\tto\t50°C RowPress\tgets\tworse\tas\ttemperature\tincreases, which\tis\tvery\tdifferent\tfrom\tRowHammer Real-System\tDemonstration\t(I) 299 Key\tIdea:\tA\tproof-of-concept\tRowPress\tprogram\tkeeps\ta\t DRAM\trow\topen\tfor\ta\tlonger\tperiod\tby\tkeeping\ton\t accessing\tdifferent\tcache\tblocks\tin\tthe\trow Intel\tCore\ti5-10400\t (Comet\tLake) Samsung\tDDR4\tModule\t M378A2K43CB1-CTD (Date\tCode:\t20-10) w/\tTRR\tRowHammer\tMitigation // Sync with Refresh and Loop Below for (k = 0; k < NUM_AGGR_ACTS; k++) for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR1[j]; for (j = 0; j < NUM_READS; j++) ∗AGGRESSOR2[j]; for (j = 0; j < NUM_READS; j++) clflushopt(AGGRESSOR1[j]); clflushopt(AGGRESSOR2[j]); mfence(); activate_dummy_rows(); Number of Cache Blocks Accessed Per Aggressor Row ACT (NUM_READS=1 is Rowhammer) Real-System\tDemonstration\t(II) 300 Leveraging\tRowPress,\tour\tuser-level\tprogram\t induces\tbitflips\twhen\tRowHammer\tcannot On\t1500\tvictim\trows Mitigating\tRowPress\t(I) 301 We\tpropose\ta\tmethodology\tto\tadapt\texisting\t RowHammer\tmitigations\tto\talso\tmitigate\tRowPress Key\tIdea: 1. Limit\tthe\tmaximum\trow\topen\ttime\t(tmro) 2. ConEigure\tthe\tRowHammer\tmitigation\tto\taccount\tfor\tthe\t RowPress-induced\treduction\tin\tACmin Row\tOpen\tTimeACminRowPress-Induced\t ACmin\tReduction Original\t RowHammer\t Mitigation Adapted Mitigation tmro Less\t Row\tBuffer\tLocality More\tRowPress\t Read\tDisturbance Mitigating\tRowPress\t(II) 302 Evaluation\tmethodology • Adapted\tRowHammer\tMitigations: Graphene\t(Graphene-RP)\t and\tPARA\t(PARA-RP) • Cycle-accurate\tDRAM\tsimulator:\tRamulator\t[Kim+,\tCAL’15] - 4\tGHz\tOut-of-Order\tCore,\tdual-rank\tDDR4\tDRAM - FR-FCFS\tscheduling - Open-row\tpolicy\t(with\tlimited\tmaximum\trow\topen\ttime) • 58\tfour-core\tmultiprogrammed\tworkloads\tfrom\tSPEC\tCPU2017,\t TPC-H,\tand\tYCSB • Metric: Additional\tperformance\toverhead of\tGraphene-RP\t (PARA-RP)\tover\tGraphene\t(PARA) - Measured\tby\tweighted\tspeedup Mitigating\tRowPress\t(III) 303 Key\tevaluation\tresults Our\tsolutions\tmitigate\tRowPress\t at\tlow\tadditional\tperformance\toverhead -2% 0% 2% 4% 6% 8% 10% 36 66 96 186 336 636 tmro (ns) Additional Performance Overhead of Graphene-RP Avg. Overhead Max Overhead 0% 10% 20% 36 66 96 186 336 636 tmro (ns) Additional Performance Overhead of PARA-RP Avg. Overhead Max Overhead Avg. -0.63% Max. 6.4% Avg. 4.5% Max. 13.1% More\tResults\t&\tSource\tCode 304 Many\tmore\tresults\t&\tanalyses\tin\tthe\tpaper Ø 6\tmajor\ttakeaways Ø 19\tmajor\tempirical\tobservations Ø 3\tmore\tpotential\tmitigations Fully\topen\tsource\tand\tartifact\tevaluated Ø https://github.com/CMU-SAFARI/RowPress https://arxiv.org/pdf/2306.17061.pdf Conclusion 305 We\tdemonstrate\tand\tanalyze\tRowPress,\ta\twidespread read\tdisturbance\tphenomenon\tthat\tcauses\tbitflips\t in\treal\tDRAM\tchips We\tcharacterize\tRowPress\ton\t164\tDDR4\tchips\t from\tall\t3\tmajor\tDRAM\tmanufacturers • RowPress\tgreatly\tamplifies\tread\tdisturbance:\tminimum\tactivation\tcount reduces\tby\t1-2\torders\tof\tmagnitude\t • RowPress\thas\ta\tdifferent\tmechanism\tfrom\tRowHammer\t&\tretention\tfailures We\tdemonstrate\tRowPress\tusing\ta\tuser-level\tprogram • Induces\tbitflips\twhen\tRowHammer\tcannot We\tprovide\teffective\tsolutions\tto\tRowPress • Low\tadditional\tperformance\toverhead RowPress Amplifying\tRead\tDisturbance\t in\tModern\tDRAM\tChips Haocong\tLuo Ataberk\tOlgun\t\t\t\t\t\t\t\t\t\t\t\t\tA.\tGiray\tYağlıkçı\t\t\t\t\t\t\t\tYahya\tCan\tTuğrul Steve\tRhyner\t\t\t\t\t\t\t\t\tMeryem\tBanu\tCavlak\t\t\t\t\t\tJoël\tLindegger\t Mohammad\tSadrosadati\t\t\t\t\t\t\tOnur\tMutlu https://github.com/CMU-SAFARI/RowPress Ongoing WorksRowHammer & RowPress on HBM Chips An\tExperimental\tAnalysis\tof \tRowHammer\tin\tHBM2\tDRAM\tChips Ataberk\tOlgun\t\t\tMajd\tOsseiran A.\tGiray\tYağlıkçı Yahya\tCan\tTuğ rul Steve\tRhynerHaocong\tLuo Juan\tGomez\tLuna Onur\tMutluBehzad\tSalami 310 The\tRowHammer\tVulnerability\t(I) CPU DRAM\tModule DRAM\tChip 311 The\tRowHammer\tVulnerability\t(II) Row\t0 Row\t1 Row\t2 Row\t3 Row\t4 Repeatedly\topening\t(activating)\tand\tclosing\t(precharging)\t a\tDRAM\trow\tcauses\tRowHammer\tbit\tflips\tin\tnearby\trows Row\t2open Row\t1 Row\t3 Row\t2closed Row\t2open Row\t1 Row\t3 Row\t0 Row\t4 Victim\tRow Victim\tRow Victim\tRow Victim\tRow Aggressor\tRowRow\t2open Row\t2closed DRAM\tChip 312 CPU loop: mov (X), %eax mov (Y), %ebx clflush (X) clflush (Y) mfence jmp loop Y X https://github.com/CMU-SAFARI/rowhammer\t DRAM Module A\tSimple\tProgram\tCan\tInduce\tBitflips 313 Exploiting the DRAM rowhammer bug to gain kernel privileges (Seaborn, 2015) Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors (Kim et al., ISCA 2014) One\tCan\tTake\tOver\ta\tSystem 314 Most\tDRAM\tModules\tAre\tVulnerable\t(2020) storage density and reduce technology node size for future chip designs. To achieve this goal, we perform a rigorous experimental characterization study of DRAM chips from three di￿erent DRAM types (i.e., DDR3, DDR4, and LPDDR4), three major DRAM manufacturers, and at least two di￿erent process technology nodes from each DRAM type. We show how di￿erent chips from di￿erent DRAM types and technol- ogy nodes (abbreviated as “type-node” con￿gurations) have varying levels of vulnerability to RowHammer. We compare the chips’ vulnerabilities against each other and project how they will likely scale when reducing the technology node size even further (Section 5). Finally, we study how e￿ec- tive existing RowHammer mitigation mechanisms will be, based on our observed and projected experimental data on the RowHammer vulnerability (Section 6). 4. Experimental Methodology We describe our methodology for characterizing DRAM chips for RowHammer. 4.1. Testing Infrastructure In order to characterize the e￿ects of RowHammer across a broad range of modern DRAM chips, we experimentally study DDR3, DDR4, and LPDDR4 DRAM chips across a wide range of testing conditions. To achieve this, we use two di￿erent testing infrastructures: (1) the SoftMC frame- work [39, 104] capable of testing DDR3 and DDR4 DRAM modules in a temperature-controlled chamber and (2) an in- house temperature-controlled testing chamber capable of testing LPDDR4 DRAM chips. SoftMC. Figure 3 shows our SoftMC setup for testing DDR4 chips. In this setup, we use an FPGA board with a Xilinx Virtex UltraScale 95 FPGA [130], two DDR4 SODIMM slots, and a PCIe interface. To open up space around the DDR4 chips for temperature control, we use a vertical DDR4 SODIMM riser board to plug a DDR4 module into the FPGA board. We heat the DDR4 chips to a target temperature using silicone rubber heaters pressed to both sides of the DDR4 module. We control the temperature using a thermocouple, which we place between the rubber heaters and the DDR4 chips, and a temperature controller. To enable fast data trans- fer between the FPGA and a host machine, we connect the FPGA to the host machine using PCIe via a 30 cm PCIe ex- tender. We use the host machine to program the SoftMC hardware and collect the test results. Our SoftMC setup for testing DDR3 chips is similar but uses a Xilinx ML605 FPGA board [129]. Both infrastructures provide ￿ne-grained con- trol over the types and timings of DRAM commands sent to the chips under test and provide precise temperature control at typical operating conditions. Figure 3: Our SoftMC infrastructure [39, 104] for testing DDR4 DRAM chips. LPDDR4 Infrastructure. Our LPDDR4 DRAM testing infrastructure uses industry-developed in-house testing hard- ware for package-on-package LPDDR4 chips. The LPDDR4 testing infrastructure is further equipped with cooling and heating capabilities that also provide us with precise temper- ature control at typical operating conditions. 4.2. Characterized DRAM Chips Table 1 summarizes the DRAM chips that we test using both infrastructures. We have chips from all of the three major DRAM manufacturers spanning DDR3, DDR4, and two known technology nodes of LPDDR4. We refer to the DRAM type (e.g., LPDDR4) and technology node of a DRAM chip as a DRAM type-node con￿guration (e.g., LPDDR4-1x). For DRAM chips whose technology node we do not exactly know, we identify their node as old or new. Table 1: Summary of DRAM chips tested. DRAM Number of Chips (Modules) Tested type-node Mfr. A Mfr. B Mfr. C Total DDR3-old 56 (10) 88 (11) 28 (7) 172 (28) DDR3-new 80 (10) 52 (9) 104 (13) 236 (32) DDR4-old 112 (16) 24 (3) 128 (18) 264 (37) DDR4-new 264 (43) 16 (2) 108 (28) 388 (73) LPDDR4-1x 12 (3) 180 (45) N/A 192 (48) LPDDR4-1y 184 (46) N/A 144 (36) 328 (82) DDR3 and DDR4. Among our tested DDR3 modules, we identify two distinct batches of chips based on their manu- facturer date, datasheet publication date, their purchase date, and their RowHammer characteristics. We categorize DDR3 devices with a manufacturing date earlier than 2014 as DDR3- old chips, and devices with a manufacturing date including and after 2014 as DDR3-new chips. Using the same set of properties, we identify two distinct batches of devices among the DDR4 devices. We categorize DDR4 devices with a man- ufacturing date before 2018 or a datasheet publication date of 2015 as DDR4-old chips and devices with a manufacturing date including and after 2018 or a datasheet publication date of 2016 or 2017 as DDR4-new chips. Based on our observa- tions on RowHammer characteristics from these chips, we expect that DDR3-old/DDR4-old chips are manufactured at an older date with an older process technology compared to DDR3-new/DDR4-new chips, respectively. This enables us to directly study the e￿ects of shrinking process technology node sizes in DDR3 and DDR4 DRAM chips. LPDDR4. For our LPDDR4 chips, we have two known distinct generations manufactured with di￿erent technology node sizes, 1x-nm and 1y-nm, where 1y-nm is smaller than 1x-nm. Unfortunately, we are missing data from some genera- tions of DRAM from speci￿c manufacturers (i.e., LPDDR4-1x from manufacturer C and LPDDR4-1y from manufacturer B) since we did not have access to chips of these manufacturer- technology node combinations due to con￿dentiality issues. Note that while we know the external technology node val- ues for the chips we characterize (e.g., 1x-nm, 1y-nm), these values are not standardized across di￿erent DRAM manufac- turers and the actual values are con￿dential. This means that a 1x chip from one manufacturer is not necessarily manufac- tured with the same process technology node as a 1x chip from another manufacturer. However, since we do know rela- tive process node sizes of chips from the same manufacturer, we can directly observe how technology node size a￿ects RowHammer on LPDDR4 DRAM chips. 4.3. E￿ectively Characterizing RowHammer In order to characterize RowHammer e￿ects on our DRAM chips at the circuit-level, we want to test our chips at the worst-case RowHammer conditions. We identify two condi- tions that our tests must satisfy to e￿ectively characterize RowHammer at the circuit level: our testing routines must both: 1) run without interference (e.g., without DRAM refresh or RowHammer mitigation mechanisms) and 2) systemati- cally test each DRAM row’s vulnerability to RowHammer 4 All\ttested\tDRAM\ttypes\tare\tsusceptible\tto\tRowHammer\tbitflips What\tabout\tHigh\tBandwidth\tMemory\t(HBM)? Kim\tet\tal.,\t”Revisiting\tRowHammer:\tAn\tExperimental\tAnalysis\tof\t Modern\tDRAM\tDevices\tand\tMitigation\tTechniques,\"\tin\tISCA,\t2020. 315 Executive\tSummary Motivation:\tHBM\tchips\thave\tnew\tarchitectural\tcharacteristics\t(e.g.,\t3D-stacked\tdies) that\tmight\taffect\tthe\tRowHammer\tvulnerability\tin\tvarious\tways Understanding\tRowHammer\tenables\tdesigning\teffective\tand\tefYicient\tsolutions Problem:\tNo\tprior\tstudy\tdemonstrates\tthe\tRowHammer\tvulnerability\tin\tHBM Goal:\tExperimentally\tanalyze\thow\tvulnerable\tHBM\tDRAM\tchips\tare\tto\tRowHammer Experimental\tStudy:\tDetailed\texperimental\tcharacterization\tof\tRowHammer in\ta\tmodern\tHBM2\tDRAM\tchip.\tOur\tstudy\tprovides\ttwo\tmain\tYindings: 1.\tSpatial\tvariation\tof\tRowHammer\tvulnerability • Different\tchannels\tin\ta\t3D-stacked\tHBM\tchip\texhibit\tdifferent\tRowHammer\tvulnerability • DRAM\trows\tnear\tthe\tend\tof\ta\tDRAM\tbank\tare\tmore\tRowHammer\tresilient 2.\tOn-DRAM-die\tRowHammer\tmitigations • A\tmodern\tHBM\tchip\timplements\tundisclosed\ton-DRAM-die\tRowHammer\tmitigation\t • The\tmitigation\trefreshes\ta\tvictim\trow\tafter\tevery\t17\tperiodic\trefresh\toperations\t (e.g.,\tsimilar\tto\tDDR4\tchips) 316 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 317 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 318 System\twith\tHigh\tBandwidth\tMemory Compute\tChip\t(e.g.,\tFPGA) Memory\tChip (e.g.,\tHBM\tDRAM) Inside\tone\tpackage https://www.hpcwire.com/off-the-wire/xilinx-adds-high-bandwidth-memory-capabilities-to-its-virtex-ultrascale-portfolio/ 319 HBM\tDRAM\tOrganization\t(I) Memory\tController FPGA Silicon\tInterposer HBM\tDRAM\tChip HBM\tInterface Buffer\tDie\t(Logic\tDie) Through-Silicon\tVias\t(TSVs) Channel ChannelTSVs DRAM\tDies Channel ChannelTSVs Channel ChannelTSVs 320 Memory\tController FPGA Silicon\tInterposer HBM2\tDRAM\tChip HBM2\tInterface Buffer\tDie\t(Logic\tDie) Through-Silicon\tVias\t(TSVs) Channel ChannelTSVs DRAM\tDies Channel ChannelTSVs Channel ChannelTSVs HBM\tDRAM\tOrganization\t(I) 321 HBM\tDRAM\tOrganization\t(II) DRAM\tChannel Pseudo-ChannelTSVs DRAM\tBank Subarray. . . DRAM\tSubarray Row\tof\tDRAM\tcells Row\t1 Row\t2 Row\t3 Row\t4Bank 322 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 323 DRAM\tCell\tLeakage Each\tcell\tencodes\tinformation\tin\tleaky\tcapacitors wordlinecapacitor access transistorbitline Stored\tdata\tis\tcorrupted\tif\ttoo\tmuch\tcharge\tleaks\t (i.e.,\tthe\tcapacitor\tvoltage\tdegrades\ttoo\tmuch) charge leakage paths [Patel+, ISCA’17] 324 DRAM\tRefresh Periodic\trefresh\toperations\tpreserve\tstored\tdataCapacitor\tvoltage\t(Vdd)100% 0% Vmin Refresh\tWindow Refresh\tOperations time REF REFREF 325 RowHammer\tBitLlipsCapacitor\tvoltage\t(Vdd)100% 0% Vmin time REF REFREF RowHammer\tAttack: Accesses\tto\tnearby\trow RowHammer\t Bitflip 326 Problem\t&\tGoal No\tprior\tstudy\tdemonstrates\t the\tRowHammer\tvulnerability\tin\thigh\tbandwidth\tmemory Experimentally\tanalyze\thow\tvulnerable\t real\thigh\tbandwidth\tmemory\tchips\tare\tto\tRowHammer Our\tGoal Problem 327 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 328 DRAM\tTesting\tInfrastructure DRAM\tBender\tDDR3/4\tTesting\tInfrastructure Olgun\tet\tal.,\t\"DRAM\tBender:\tAn\tExtensible\tand\tVersatile\tFPGA-based\tInfrastructure\t to\tEasily\tTest\tState-of-the-art\tDRAM\tChips,\"\tin\tTCAD,\t2023. Adapt\tto\twork with\tHBM2\tchips https://github.com/CMU-SAFARI/DRAM-Bender 329 DRAM\tTesting\tInfrastructure FPGA-based\tHBM2\tTesting\tSetup\t(Bittware\tXUPVVH)\t Fine-grained\tcontrol\tover\tDRAM\tcommands,\t timing\tparameters\t(±1.66ns) Olgun\tet\tal.,\t\"DRAM\tBender:\tAn\tExtensible\tand\tVersatile\tFPGA-based\tInfrastructure\t to\tEasily\tTest\tState-of-the-art\tDRAM\tChips,\"\tin\tTCAD,\t2023. 330 RowHammer\tTesting\tMethodology\t(I) To\tcharacterize\tour\tDRAM\tchips\tat\tworst-case\tconditions: 1. Prevent\tsources\tof\tinterference\tduring\tcore\ttest\tloop\t - No\tDRAM\trefresh:\tto\tavoid\trefreshing\tvictim\trow - No\tRowHammer\tmitigation\tmechanisms:\tto\tobserve\tcircuit-level\teffects\t - Test\tfor\tless\tthan\ta\trefresh\twindow\t(32ms)\tto\tavoid\tretention\tfailures - Repeat\ttests\tfor\tfive\ttimes 2. Worst-case\tRowHammer\taccess\tsequence - We\tuse\tworst-case\tRowHammer\taccess\tsequence\t based\ton\tprior\tworks’\tobservations - Double-sided\tRowHammer:\trepeatedly\taccess\t the\ttwo\tphysically-adjacent\trows\tas\tfast\tas\tpossible Record\tbitUlips\t in\tvictim Victim\tRow Aggressor\tRow\t1 Aggressor\tRow\t2 331 RowHammer\tTesting\tMethodology\t(II) • Tested\tHBM2\tchip’s\torganization: - 8\tchannels - 2\tpseudo-channels - 16\tbanks - 16384\trows\t(1\tKiB\teach) • Test\tall\tchannels,\tpseudo-channels,\tbanks • Test\t\\irst,\tmiddle,\tand\tlast\t3K\trows\tin\ta\tbank - 9K\tout\tof\t16K\t(more\tthan\thalf) • Keep\tHBM2\tchip\ttemperature\tat\t85°C Xilinx\tFPGA with\tHBM2\tDRAM\tchips 332 Metrics 1. Bit\terror\trate\t(BER):\t The\tfraction\tof\tDRAM\tcells\tin\ta\trow\t that\texperience\ta\tbit\\lip\tafter\t512K\tactivations 2. Hammer\tCount\tfor\tthe\tFirst\tBitSlip\t(HC!irst):\t Aggressor\trow\tactivation\tcount\t to\tcause\tthe\t\\irst\tbit\\lip\tin\tthe\tvictim\trow Higher\tis\tworse Lower\tis\tworse 333 Tested\tData\tPatterns 00000000000000000000000 11111111111111111111111 11111111111111111111111 00000000000000000000000 00000000000000000000000 00000000000000000000000 00000000000000000000000……………… 334 Tested\tData\tPatterns 10101010101010101010101 01010101010101010101010 01010101010101010101010 10101010101010101010101 10101010101010101010101 10101010101010101010101 10101010101010101010101……………… 335 Tested\tData\tPatterns 10101010101010101010101 01010101010101010101010 01010101010101010101010 10101010101010101010101 10101010101010101010101 10101010101010101010101 10101010101010101010101……………… Worst-case\tdata\tpattern\t(WCDP)\tof\ta\trow:\tCauses\tsmallest\tHC!irst\tfor\ta\trow 336 Two\tMain\tAnalyses 1.\tSpatial\tvariation\tof\tRowHammer\tvulnerability How\tdoes\tthe\tRowHammer\tvulnerability\tchange\tacross\t channels,\tpseudo-channels,\tbanks,\trows\tin\tHBM? 2.\tOn-DRAM-die\tRowHammer\tmitigations Do\treal\tHBM\tchips\timplement\t undisclosed\tRowHammer\tmitigations\t resembling\tthose\tthat\texist\tin\tDDR4? DRAM\tChannel Pseudo-ChannelTSVs DRAM\tBank Subarray. . . DRAM\tSubarray Row\tof\tDRAM\tcells Row\t1 Row\t2 Row\t3 Row\t4Bank 337 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 338 Different\t3D-stacked\tHBM2\tchannels\texhibit\tdifferent\tRowHammer\tvulnerability Takeaway\t1 Key\tTakeaways\tfrom\tSpatial\tVariation\tAnalysis DRAM\trows\tnear\tthe\tend\tof\ta\tDRAM\tbank\t experience\tsmaller\tbit\terror\trate\t(BER)\tthan\tothers Takeaway\t2 Activation\tcount\tneeded\tto\tinduce\tthe\tDirst\tRowHammer\tbitDlip\t(HC!irst)\t changes\twith\tthe\tdata\tpattern\tand\tthe\tphysical\tlocation\tof\tthe\tDRAM\trow Takeaway\t3 339 Spatial\tDistribution\tof\tBER\t(I) There\tare\tbitflips\tin\tevery\ttested\tDRAM\trow across\tall\ttested\tHBM2\tchannels BER\tvaries\tacross\tchannels: groups\tof\ttwo\tchannels\thave\tdifferent\tBERs 340 Spatial\tDistribution\tof\tBER\t(I) The\tdata\tpattern\taffects\tthe\tBER\tdistribution Up\tto\t~262\tbitElips\tin\ta\trow\tof\t8K\tbits with\t512K\taggressor\trow\tactivations ~262\tbitYlips\t(out\tof\t8192\tin\ta\trow)\t 341 Spatial\tDistribution\tof\tBER\t(II) BER\tperiodically\tincreases\tand\tdecreases\tacross\trows: BER\tis\thigher\tin\tthe\tmiddle\tof\ta\tsubarray BER\tis\tsubstantially\tsmaller\tin\tthe\tlast\tsubarray\t(i.e.,\tlast\t832\trows) SA\tstart SA\tend Last\tsubarray\t(SA) 342 Spatial\tDistribution\tof\tBER\t(II) BER\tperiodically\tincreases\tand\tdecreases\tacross\trows: BER\tis\thigher\tin\tthe\tmiddle\tof\ta\tsubarray BER\tis\tsubstantially\tsmaller\tin\tthe\tlast\tsubarray\t(i.e.,\tlast\t832\trows) 343 Spatial\tDistribution\tof\tHCfirst HCdirst\tis\tas\tlow\tas\t14531\tacross\tall\ttested\trows/channels: Only\t~1.3\tms\tto\tinduce\ta\tRowHammer\tbitElip HCfirst\tdistribution\theavily\tdepends\ton\tthe\tdata\tpattern 344 Variation\tin\tBit\tError\tRate Banks\tin\tthe\tsame\tchannel\thave\tsimilar\tvariation\tin\tBER Small\tdistance\ton\tx\tand\ty\taxes Large\tdistance\ton\tx\tand\ty\taxes Two\tdifferent\tbanks\tin\tthe\tsame\tchannel 345 Hypotheses\tfrom\tCharacterization 1. Similar\tBER\t&\tHCfirst\t within\tgroups\tof\ttwo\tchannels suggests\tthese\tchannels\t share\tDRAM\tdies 2. RowHammer\tBER\t changes\twith\tthe\trow’s\tproximity to\tsense\tamplifiers\tand\tbank\tI/O 346 Implications\ton\tAttacks\tand\tMitigations Two\timplications\tfor\tRowHammer\tattacks\tand\tmitigations Key\tObservation:\tRowHammer\tBER\tand\tHCfirst\tvary\tacross\tchannels A\tRowHammer\tattack\tcan\tuse\tthe\tmost-RH-vulnerable\t HBM2\tchannel\tto\tprepare\tfor\tand\tperform\tthe\tattack\tfaster A\tRowHammer\tmitigation\tcan\t allocate\tfewer\tresources\tfor\tRowHammer-resilient\tchannels\tand more\tefficiently\tprevent\tRowHammer\tbitflips 347 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 348 Key\tTakeaways\tfrom\ton-die\tMitigation\tAnalysis A\tmodern\tHBM2\tchip\timplements\tan\tundisclosed\t on-DRAM-die\tRowHammer\tmitigation Takeaway\t1 This\tmitigation\tresembles\tthe\tone\tin\tDDR4\tchips\tfrom\tone\tmajor\tmanufacturer as\tshown\tin\tprior\twork Takeaway\t2 Hassan\tet\tal.,\t\"Uncovering\tIn-DRAM\tRowHammer\tProtection\tMechanisms:\t A\tNew\tMethodology,\tCustom\tRowHammer\tPatterns,\tand\tImplications,”\tin\tMICRO,\t2021. 349 On-Die\tRowHammer\tMitigation\tAnalysis\t(I) HBM2\tstandard\tde9ines\ta\t“Target\tRow\tRefresh\t(TRR)-mode” • Memory\tcontroller\tand\tDRAM\tcooperate\tto\tprevent\tRH\tbitElips Real\tDDR4\tchips\timplement\ton-die\tmitigation\tmechanisms • Memory-controller-transparent,\thidden\tbehind\tperiodic\tREF Does\ta\tsimilar\thidden\tmitigation\tmechanism\texist\tin\tHBM2? 350 On-Die\tRowHammer\tMitigation\tAnalysis\t(II) Key\tidea:\tUse\tdata\tretention\tfailures\tas\ta\tside\tchannel\t to\tdetect\twhen\ta\trow\tis\trefreshed\tby\ton-die\tmitigation [Hassan+, MICRO’21, source code available at https://github.com/CMU-SAFARI/U-TRR] Hassan\tet\tal.,\t\"Uncovering\tIn-DRAM\tRowHammer\tProtection\tMechanisms:\t A\tNew\tMethodology,\tCustom\tRowHammer\tPatterns,\tand\tImplications,”\tin\tMICRO,\t2021. 351 Experimental\tMethodology [Hassan+,\tMICRO’21] Victim\tRow\tR 1.\tIdentify\ta\trow\t(R)\twith\tT\tretention\ttime 2.\tWait\tfor\tT/2 Aggressor\tRow\tR\t+\t1 3.\tHammer\tR+1\tonce 4.\tIssue\ta\tperiodic\tREF\tcommand\t(trigger\tmitigation) 5.\tWait\tfor\tT/2,\tread\tout\trow\tR\tand\tcheck\tfor\tbitflips On-DRAM-die Mitigation Sample\tas\taggressor\trow Timeline Refresh\tR time\t=\t0 time\t=\tT/2 time\t=\tT Read\tR Refresh\tvictim\trow Mitigation\trefreshes\tR 352 Experimental\tMethodology [Hassan+,\tMICRO’21] Victim\tRow\tR 1.\tIdentify\ta\trow\t(R)\twith\tT\tretention\ttime 2.\tWait\tfor\tT/2 Aggressor\tRow\tR\t+\t1 3.\tHammer\tR+1\tonce 4.\tIssue\ta\tperiodic\tREF\tcommand\t(trigger\tmitigation) 5.\tWait\tfor\tT/2,\tread\tout\trow\tR\tand\tcheck\tfor\tbitUlips On-DRAM-die Mitigation Sample\tas\taggressor\trow Refresh\tvictim\trow Timeline Refresh\tR time\t=\t0 time\t=\tT/2 time\t=\tT Row\tR\texperiences\tno\tbitTlips only\tif\ton-DRAM-die\tmitigation\texists Mitigation\trefreshes\tR Read\tR 353 Experimental\tMethodology [Hassan+,\tMICRO’21] Victim\tRow\tR 1.\tIdentify\ta\trow\t(R)\twith\tT\tretention\ttime 2.\tWait\tfor\tT/2 Aggressor\tRow\tR\t+\t1 3.\tHammer\tR+1\tonce 4.\tIssue\ta\tperiodic\tREF\tcommand\t(trigger\tmitigation) 5.\tWait\tfor\tT/2,\tread\tout\trow\tR\tand\tcheck\tfor\tbitflips On-DRAM-die Mitigation Sample\tas\taggressor\trow Refresh\tvictim\trow Timeline Refresh\tR time\t=\t0 time\t=\tT Row\tR\texperiences\tno\tbitflips only\tif\ton-DRAM-die\tmitigation\texists Read\tR Row\tR\texperiences\tretention\tbitflips if\tnot\trefreshed\tat\tT/2 retention\tbitLlips time\t=\tT/2 Row\tR\tnot\trefreshed 354 HBM2\tDRAM\tChips\tImplement\tUndisclosed\tTRR The\tHBM2\tchip\timplements\tan\tundisclosed\t on-die\tRowHammer\tmitigation\tmechanism This\tmechanism\tperforms\ta\tvictim\trow\trefresh\toperation every\t17\tperiodic\trefresh\t(REF)\toperations This\tmitigation\tresembles\tthe\tone\tin\tDDR4\tchips\t from\tone\tmajor\tmanufacturer 355 Outline 1.\tHBM\tDRAM\tOrganization\t&\tOperation 2.\tDRAM\tCell\tLeakage\t&\tRowHammer 4. RowHammer\tSpatial\tVariation\tAnalysis 5.\tOn-die\tRowHammer\tMitigation\tAnalysis 3. HBM\tDRAM\tTesting\tMethodology 6.\tConclusion 356 Conclusion We\tprovide\tthe\tYirst\tdetailed\texperimental\tcharacterization\t of\tRowHammer\tin\ta\tmodern\tHBM2\tDRAM\tchip Different\tchannels\tin\t3D-stacked\tHBM\tchips\texhibit\tdifferent\tRowHammer\tvulnerability DRAM\trows\tnear\tthe\tend\tof\ta\tDRAM\tbank\tare\tmore\tRowHammer\tresilient Two\timplications\tfor\tRowHammer\tattacks\tand\tmitigations: 1. Faster\tand\tmore\teffective\tattacks 2. More\tefdicient\tmitigations A\tmodern\tHBM\tchip\timplements\tundisclosed\ton-DRAM-die\tRowHammer\tmitigation\t (e.g.,\tsimilar\tto\tDDR4\tchips) Future\tDirections:\tTo\tpresent\tmore\tinsights\tinto\thow\tRowHammer\tbehaves\tin\tHBM 1. Test\tmore\tHBM\tDRAM\tchips,\tdata\tpatterns,\tat\tdifferent\ttemperature\tand\tvoltage\tlevels 2. Investigate\tread-disturb-based\tinterference\tacross\tdifferent\t3D-stacked\tHBM\tDRAM\tchannels 3. Study\tthe\teffects\tof\tthe\tnew\tread-disturb\tphenomenon,\tRowPress\t[Luo+,\tISCA’23] Luo\tet\tal.,\t”RowPress:\tAmplifying\tRead\tDisturbance\tin\tModern\tDRAM\tChips,\"\tin\tISCA,\t2023. 357 Available\ton\tArXiv https://arxiv.org/abs/2305.17918 Ataberk\tOlgun\t\t\tMajd\tOsseiran A.\tGiray\tYağlıkçı Yahya\tCan\tTuğrul Steve\tRhynerHaocong\tLuo Juan\tGomez\tLuna Onur\tMutluBehzad\tSalami Link/QR\tcode\tto\tfull\tpaper https://arxiv.org/pdf/2305.17918 An\tExperimental\tAnalysis\tof \tRowHammer\tin\tHBM2\tDRAM\tChips Data Retention Data Retention in Memory [Liu et al., ISCA 2013] n Retention Time Profile of DRAM looks like this: 360 Location dependent Stored value pattern dependent Time dependent Liu+, “RAIDR: Retention-Aware Intelligent DRAM Refresh,” ISCA 2012. RAIDR: Heterogeneous Refresh [ISCA’12] n Jamie Liu, Ben Jaiyen, Richard Veras, and Onur Mutlu, \"RAIDR: Retention-Aware Intelligent DRAM Refresh\" Proceedings of the 39th International Symposium on Computer Architecture (ISCA), Portland, OR, June 2012. Slides (pdf) n Jamie Liu, Ben Jaiyen, Yoongu Kim, Chris Wilkerson, and Onur Mutlu, \"An Experimental Study of Data Retention Behavior in Modern DRAM Devices: Implications for Retention Time Profiling Mechanisms\" Proceedings of the 40th International Symposium on Computer Architecture (ISCA), Tel-Aviv, Israel, June 2013. Slides (ppt) Slides (pdf) 362 Analysis of Data Retention Failures [ISCA’13] n Samira Khan, Donghyuk Lee, Yoongu Kim, Alaa Alameldeen, Chris Wilkerson, and Onur Mutlu, \"The Efficacy of Error Mitigation Techniques for DRAM Retention Failures: A Comparative Experimental Study\" Proceedings of the ACM International Conference on Measurement and Modeling of Computer Systems (SIGMETRICS), Austin, TX, June 2014. [Slides (pptx) (pdf)] [Poster (pptx) (pdf)] [Full data sets] 363 Mitigation of Retention Issues [SIGMETRICS’14]Mitigation of Retention Issues [DSN’15] n Moinuddin Qureshi, Dae Hyun Kim, Samira Khan, Prashant Nair, and Onur Mutlu, \"AVATAR: A Variable-Retention-Time (VRT) Aware Refresh for DRAM Systems\" Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Rio de Janeiro, Brazil, June 2015. [Slides (pptx) (pdf)] 364 n Samira Khan, Donghyuk Lee, and Onur Mutlu, \"PARBOR: An Efficient System-Level Technique to Detect Data- Dependent Failures in DRAM\" Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Toulouse, France, June 2016. [Slides (pptx) (pdf)] Mitigation of Retention Issues [DSN’16] n Samira Khan, Chris Wilkerson, Zhe Wang, Alaa R. Alameldeen, Donghyuk Lee, and Onur Mutlu, \"Detecting and Mitigating Data-Dependent DRAM Failures by Exploiting Current Memory Content\" Proceedings of the 50th International Symposium on Microarchitecture (MICRO), Boston, MA, USA, October 2017. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] [Poster (pptx) (pdf)] Mitigation of Retention Issues [MICRO’17] Mitigation of Retention Issues [ISCA’17] n Minesh Patel, Jeremie S. Kim, and Onur Mutlu, \"The Reach Profiler (REAPER): Enabling the Mitigation of DRAM Retention Failures via Profiling at Aggressive Conditions\" Proceedings of the 44th International Symposium on Computer Architecture (ISCA), Toronto, Canada, June 2017. [Slides (pptx) (pdf)] [Lightning Session Slides (pptx) (pdf)] n First experimental analysis of (mobile) LPDDR4 chips n Analyzes the complex tradeoff space of retention time profiling n Idea: enable fast and robust profiling at higher refresh intervals & temperatures Mitigation of Retention Issues [DSN’19] n Minesh Patel, Jeremie S. Kim, Hasan Hassan, and Onur Mutlu, \"Understanding and Modeling On-Die Error Correction in Modern DRAM: An Experimental Study Using Real Devices\" Proceedings of the 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Portland, OR, USA, June 2019. [Source Code for EINSim, the Error Inference Simulator] Best paper award. Mitigation of Retention Issues [MICRO’20] n Minesh Patel, Jeremie S. Kim, Taha Shahroodi, Hasan Hassan, and Onur Mutlu, \"Bit-Exact ECC Recovery (BEER): Determining DRAM On-Die ECC Functions by Exploiting DRAM Data Retention Characteristics\" Proceedings of the 53rd International Symposium on Microarchitecture (MICRO), Virtual, October 2020. [Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (15 minutes)] [Lightning Talk Video (1.5 minutes)] Best paper award. Mitigation of Retention Issues [MICRO’21] n Minesh Patel, Geraldo F. de Oliveira Jr., and Onur Mutlu, \"HARP: Practically and Effectively Identifying Uncorrectable Errors in Memory Chips That Use On-Die Error-Correcting Codes\" Proceedings of the 54th International Symposium on Microarchitecture (MICRO), Virtual, October 2021. [Slides (pptx) (pdf)] [Short Talk Slides (pptx) (pdf)] [Lightning Talk Slides (pptx) (pdf)] [Talk Video (20 minutes)] [Lightning Talk Video (1.5 minutes)] [HARP Source Code (Officially Artifact Evaluated with All Badges)] 370 More on DRAM Refresh & Data Retention 371https://www.youtube.com/watch?v=v702wUnaWGE&list=PL5Q2soXY2Zi9xidyIgBxUz7xRPS-wisBN&index=3 SoftMC: Enabling DRAM Infrastructure n Hasan Hassan et al., “SoftMC: A Flexible and Practical Open- Source Infrastructure for Enabling Experimental DRAM Studies,” HPCA 2017. n Flexible n Easy to Use (C++ API) n Open-source github.com/CMU-SAFARI/SoftMC 372","libVersion":"0.3.2","langs":""}