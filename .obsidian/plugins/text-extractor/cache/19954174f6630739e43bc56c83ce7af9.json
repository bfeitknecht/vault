{"path":"sem3/DMath/UE/s/DMath-s-u11.pdf","text":"ETH Z ¨urich, D-INFK HS 2024, 6. December 2024 Prof. Ueli Maurer Giovanni Deligios, Dr. Karen Klein Diskrete Mathematik Solution 11 11.1 Error-Correcting Codes a) Let c1, c2 ∈ C with c1 ̸= c2 be arbitrary. Since C forms a group, we know that c = c1 + (−c2) ∈ C. We have d(c1, c2) = hw(c1 + (−c2)) = hw(c) ≥ 2t + 1. In the first step, we have used that two codewords differ at a position if and only if the difference of their values at this position is non-zero. In the last step, we have used the assumption from above, together with the fact that c1 ̸= c2 implies c ̸= 0n. Thus, we have dmin(C) ≥ 2t + 1, which implies by Theorem 5.41 that C is t-error correcting. b) Let c ∈ C be arbitrary. Moreover, let cmin ∈ C \\ {0n} be such that hw(cmin) = 2t + 1. Since C forms a group, we have c + cmin ∈ C. Observe that d(c, c + cmin) = hw(cmin) = 2t + 1. Thus, c and c + cmin differ on exactly 2t + 1 = (t + 1) + t positions. We can therefore change the first t + 1 of these positions of c to the ones of c + cmin to obtain a word w with d(c, w) = t + 1 and d(c + cmin, w) = t. This word w cannot be error-corrected. Since c ∈ C was arbitrary, there exists no codeword such that up to t + 1 arbitrary errors can be corrected. 11.2 Proof Systems (⋆ ⋆) a) We prove the claim constructively. Let S and P be non-empty sets and let ϕ : S ×P → {0, 1} be an arbitrary function. Consider the function τ : S → {0, 1} defined by τ (s) = 1 def ⇐⇒ there exists p ∈ P such that ϕ(s, p) = 1. The proof system Π = (S, P, τ, ϕ) is sound: For any s ∈ S and any p ∈ P with ϕ(s, p) = 1, the definition of τ implies that τ (s) = 1. Moreover, Π is complete: For any s ∈ S with τ (s) = 1, the definition of τ implies that there exists p ∈ P such that ϕ(s, p) = 1. It is left to show that τ is unique. Consider any function τ ′ : S → {0, 1} such that τ ̸= τ ′. This is implies that τ (s) ̸= τ ′(s) for some s ∈ S. Case distinction: • τ (s) = 0 and τ ′(s) = 1. By definition of τ , τ (s) = 0 implies there exists no p ∈ P such that ϕ(s, p) = 1. But since τ ′(s) = 1, the proof system (S, P, τ ′, ϕ) cannot be complete. • τ (s) = 1 and τ ′(s) = 0. By definition of τ , τ (s) = 1 implies there exists p ∈ P such that ϕ(s, p) = 1. But since τ ′(s) = 0, the proof system (S, P, τ ′, ϕ) cannot be sound. b) (i) We prove the claim indirectly. Assume that neither Π1 nor Π2 is sound. Then there exist s1 ∈ S1 and p1 ∈ P1 such that τ1(s1) = 0 and ϕ1(s1, p1) = 1, and there exist s2 ∈ S2 and p2 ∈ P2 such that τ2(s2) = 0 and ϕ2(s2, p2) = 1. Thus, we have τ3(s1, s2) = 0 but ϕ3((s1, s2), (p1, p2)) = 1. Hence, Π3 is not sound. (ii) We disprove the claim by giving a counterexample. Let S1 = S2 = {0} and P1 = P2 = {0}. We define τ1(0) = 0, ϕ1(0, 0) = 0, τ2(0) = 1, and ϕ2(0, 0) = 0. Clearly Π1 = (S1, P1, τ1, ϕ1) is complete. However, τ3(0, 0) = 1 since τ2(0) = 1, but ϕ3((0, 0), (p1, p2)) = 0 for all (p1, p2) ∈ P1 × P2 = {(0, 0)}. Thus, Π3 is not complete. 11.3 Diffie-Hellman Proof System A proof of a statement (yA, yB, kAB) will be the discrete logarithm xA of yA. Formally, P = Zn and ϕ((yA, yB, kAB), xA) = 1 if and only if gxA = yA and yxA B = kAB. Completeness: Assume τ ((yA, yB, kAB)) = 1. There exist unique xA, xB ∈ Zn (the secret keys chosen by Alice and Bob) such that gxA = yA and gxB = yB. Since the statement is true, we also have kAB = gxAxB = yxA B . Hence, for this xA we have ϕ((yA, yB, kAB), xA) = 1. Soundness: Assume ϕ((yA, yB, kAB), x′ A) = 1. Let xB ∈ Zn be (unique) such that gxB = yB. The verification ϕ guarantees that kAB = yx′ A B = gx′ AxB and gx′ A = yA and x′ A ∈ Zn. Hence, kAB is the secret key resulting from the Diffie-Hellman protocol where Alice chooses x′ A and Bob chooses xB. 11.4 Combining Proof Systems a) Let P ′ = {1, 2, 3} × {1, 2, 3} × P × P and let ϕ′((s1, s2, s3), (i, j, p, p ′) ) = 1 ⇐⇒ i ̸= j and ϕ(si, p) = 1 and ϕ(sj, p ′) = 1. To prove completeness, suppose that τ ′ (s1, s2, s3) = 1. This means that at least two si, sj out of s1, s2, s3 are true. By completeness of Σ there exist p and p′ in P such that ϕ(si, p) = ϕ(sj, p′) = 1. This means that, with the given definition of ϕ′, the 4-tuple (i, j, p, p′) is a valid proof for (s1, s2, s3) in Σ′. To prove soundness, suppose that for some (s1, s2, s3) ∈ S 3 and some (i, j, p, p′) ∈ P ′ we have ϕ′((s1, s2, s3), (i, j, p, p ′) ) = 1. Then, by soundness of Σ, since ϕ(si, p) = 1 and ϕ(sj, p′) = 1 we get that si and sj are true in Σ, which means that, since i ̸= j, at least two out of s1, s2, s3 are true in Σ, and by definition of τ ′ the statement (s1, s2, s3) is true in Σ′. b) If there are no true statements in Σ, then the solution is trivial: simply define a proof set P ∗ with a single element, and the verification function ϕ∗ evaluates to true for each statement in S and the only proof in P ∗. Therefore, we can assume that S contains at least one true statement. Let P ∗ = S × P × P and let ϕ∗(s, (s ′, p ′, p) ) = 1 ⇐⇒ ϕ(s′, p ′) = 1 and and ϕ((s′, s), p) = 1. To prove completeness of Σ∗, suppose that τ ∗(s) = 1 which means τ (s) = 0. By assumption, there exists an element s′ ∈ S with τ (s) = 1. By completeness of Σ we can find a proof p′ ∈ P such that ϕ(s′, p′) = 1. Furthermore, since τ (s) = 0, this means that τ (s′, s) = 1, because only s′ is true in Σ. By completeness of Σ we find a proof p with ϕ((s′, s), p) = 1. Therefore (s′, p′, p) is a valid proof of s in Σ∗ with the above definition of ϕ∗. To prove soundness of Σ∗, suppose that ϕ∗(s, (s′, p′, p) ) = 1. This means 1) ϕ((s′, s), p) = 1, which by soundness of Σ this means that exactly one among s′, s is true in Σ and 2) ϕ(s′, p′) = 1, which by soundness of Σ implies that τ (s′) = 1. These two facts together imply that s is false in Σ. Therefore τ ∗(s) = 1. 11.5 Homer’s Birthday a) Let A be the proposition “Abe comes to the party”, etc. The conditions given in the exercise correspond to the following implications: A → B (1) B → C (2) C → D (3) (B ∧ D) → ¬C (4) D → (A ∨ B) (5) We show that no one would arrive at the party and, hence, Homer eventually ends up at Moe’s whether he organizes it or not. For each person, consider what happens when he comes to the party: i. A is true. In this case, B is true by formula (1), C is true by formula (2), D is true by formula (3) and ¬C is true by formula (4), which is a contradiction with C. Hence, A is false. ii. B is true. In this case, again, C is true by formula (2), D is true by formula (3) and ¬C is true by formula (4), which is a contradiction with C. Hence, B is false. iii. C is true. In this case, D is true by formula (3) and A ∨ B is true by formula (5). But both the assumption that A is true and the assumption that B is true lead to a contradiction, as shown in cases i. and ii. Hence, A ∨ B also leads to a contradiction and C is false. iv. D is true. In this case, A ∨ B is true by formula (5). By the same argument as above, D is false. Overall, we can conclude that no one can come to the party. That is, all the formulas are true only if A, B, C and D are all false. b) We now formally derive ¬A, ¬B, ¬C and ¬D, using given derivation rules: {(5) , (1)} ⊢R3 D → B (6) {(6) , (2)} ⊢R1 D → C (7) {(6)} ⊢R4 D → (B ∧ D) (8) {(8) , (4)} ⊢R1 D → ¬C (9) {(7) , (9)} ⊢R2 ¬D (10) {(3) , (10)} ⊢R5 ¬C (11) {(2) , (11)} ⊢R5 ¬B (12) {(1) , (12)} ⊢R5 ¬A (13) 11.6 Models and Satisfiability a) Consider the function table of F : A B C ¬A ∨ B ¬C ∧ ¬A B → (¬C ∧ ¬A) A ∨ C F 0 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 0 1 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 1 0 0 1 0 The set of models for F contains all truth assignments A, such that A(A) = A(B) = 0 and A(C) = 1. Consider now the function table of G: A B C ¬(A → B) C → A G 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 The set of models for G contains all truth assignments A, such that A(A) = 1 and all truth assignments A, such that A(C) = 0. The formulas are not equivalent, since the sets are not the same. G is not the conse- quence of F , because the set of models for F is not a subset of the set of models for G. Similarly F is not a consequence of G. b) The statement is false. A counterexample is F = A ∨ ¬A and G = B ∨ ¬B. Of course, F and G have no common atomic formulas. However, by Lemma 6.1 11), A ∨ ¬A ≡ ⊤ ≡ B ∨ ¬B. c) The statement is false. A counterexample in propositional logic is F1 = A and F2 = A ∧ ¬A. F1 and F1 → F2 are both satisfiable (F1 → F2 is true for all interpretations A that assign A(F1) = 0). However, F2 is clearly not satisfiable. 11.7 Satisfiability a) The set M is not satisfiable. To show this, assume that A is a model for M . Since ¬A ∈ M , we have A(¬A) = 1 and thus A(A) = 0. Moreover, we have B ∧ C ∈ M , and therefore A(B ∧ C) = 1, which implies that A(C) = 1. Since ¬A → ¬C ∈ M , we also have A(¬A → ¬C) = 1, so A(¬¬A ∨ ¬C) = A(A ∨ ¬C) = 1, which implies A(A) = 1 or A(C) = 0. This is a contradiction to A(A) = 0 and A(C) = 1. b) A model for N is, for example, the truth assignment A : {A1, A2, . . .} → {0, 1} that assigns A(A1) = 1 and A(Ai) = 0 for i > 1. (One could interpret the statement Ai as “i is less or equal to 1”, for i ∈ N.)","libVersion":"0.3.2","langs":""}