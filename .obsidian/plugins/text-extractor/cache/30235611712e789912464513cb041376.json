{"path":"var/export/A&D-bf-u06.pdf","text":"Antonia Tomova, 23-957-590, Basil Feitknecht, 23-922-099 6.1 (e) To begin we'll formulate the statement to prove as an invariant. Let's deﬁne the invariant that denotes for any non-leaf node in the tree Tk, the absolute diﬀerence between its left and right subtrees' heights is exactly equal to one, as follows. I(k) = ∀u ∈ Tk, degout(u) ≠ 0 : |hl(u) − hr(u)| = 1 We use the fact from (c) that ∀k ∈ N : height(Tk) = k and prove I(k) by induction on k. Base C ase k ≤ 3 For k = 1 we have only one node, namely the root, which is a leaf. Hence I(1) holds trivially. For k = 2, we have the root node which is not a leaf. It's left subtree consists of a single leaf, whereas its right subtree doesn't exist and thus has height zero. Then |1 − 0| = 1 and I(2) holds. For k = 3 there are two non-leaf nodes to consider. Per deﬁnition of ﬁbonacci trees, the invariant holds for the subtree rooted at the left child of the root in T3, since it's identical to T2, which we've just covered before. Then for the root, we consider the absolute diﬀerence of its left and right subtrees' heights, which is |2 − 1| = 1 so the invariant also holds. Thus I(3) holds. Induction H ypothesis k = h We assume that ∃h ∈ N such that I(h) holds for Th. Induction Step k = h + 1 We now show that I(h + 1) holds. Per deﬁnition, the root vr of the tree Th+1 has as left subtree Th and right subtree T ′ h−1, a modiﬁcation of Th−1 that adds Fib(h + 2) to every node. It's noted that this does not aﬀect the height of the tree. Then we have |hl(vr) − hr(vr)| = |h − (h − 1)| = 1, so the root node fulﬁlls the invariant. Then the induction hypothesis that we assume to be true, guarantees that the root's left and right subtrees fulﬁll the invariants I(k) and I(k − 1) respectively. Per deﬁnition of ﬁbonacci trees, I(h) ⟹ I(h − 1) which covers all other non- leaf nodes. Hence, the invariant I(h + 1) holds and the statement is proven. □ (f) We show this by induction on n ≥ 1 for all ﬁbonacci trees T2n+1 with 2n + 1 = k ≥ 3. Base C ase n = 1 For this, we consider T3, the ﬁbonacci tree with 2n + 1 = k ≡ 2 1. As we can see, there is a leaf at depth 3−1 2 = 1 = n, namely the node with key 3. Thus the base case holds. □ 0 1 2 3 Induction H ypothesis n = m For some m ≥ 1 we assume that T2m+1 has a leaf at depth m = m. Inductive Step n = m + 1 Now we consider the tree T2m+3. Per deﬁnition, its right subtree is exactly T2m+1, with some modiﬁcation to the keys that don't concern us. The induction hypothesis we assume to be true then guarantees that T2m+1 has a leaf at depth m. Evaluating the statement to prove yields the result presented below. Intuitively, the statement is true because the right subtree of every ﬁbonacci tree with 3 ≤ k ≡ 2 1 is exactly the previous odd subtree, which has a leaf at depth m. Since it's the subtree of the root, it has only one more predecessor, i.e. m + 1. Hence, the proof is complete and the statement correct. □ 2 +1−1 2 k − 1 2 = 2m + 3 − 1 2 = 2m + 2 2 = (m + 1) = m + 1 2 2 6.3 (a) Below is a top-down implementation of the sequence as a recursive function. (b) Let T (n) denote the number of function calls to f for computing An. Then the following holds. Since f = Θ (g) ⟺ f ≤ O(g) ∧ f ≥ Ω(g), we have shown that T (n) ≥ Ω(C n) namely for C = ϕ > 1. □ f\u0000n\u0000\u0000\u0000\u0000n f(n) i\u0000 n <= 2 t\u0000en retur\u0000 n end     \u0000\u0000 gu\u0000r\u0000 \u0000\u0000m   i\u0000 n % 2 \u0000\u0000 1 t\u0000en retur\u0000 (f(n-1) + f(n-2)) / 2 el\u0000e retur\u0000 2 \u0000 \u0000\u00001 / f(n-2)) + \u00001 / f(n-1))) end end T (1) = T (2) = 1 T (n) = T (n − 1) + T (n − 2), ∀n ≥ 3 = Fib(n − 1) + Fib(n − 2) = Fib(n) = Θ (ϕn) (c) The improved implementation is given below. Its runtime is now linear, T (n) = Θ (n). □ (d) f\u0000n\u0000\u0000\u0000\u0000n f(n) i\u0000 n <= 2 t\u0000en retur\u0000 n end     \u0000\u0000 gu\u0000r\u0000 \u0000\u0000m f1 \u0000 1 f2 \u0000 2 f3          \u0000\u0000 v\u0000\u0000\u0000\u0000\u0000l\u0000 de\u0000lara\u0000\u0000\u0000n for i = 3 \u0000\u0000 n do i\u0000 i % 2 \u0000\u0000 1 t\u0000en f3 = (f1 + f2\u0000 \u0000 2      \u0000\u0000 odd i\u0000dex el\u0000e f3 \u0000 2 \u0000 \u0000\u00001 / f2\u0000 \u0000 \u00001 / f1\u0000\u0000      \u0000\u0000 even i\u0000dex end (f1, f2\u0000 = (f2, f3\u0000         \u0000\u0000 \u0000w\u0000p v\u0000l\u0000es up end end 1. The dimensions of the DP table are 1 × n 2. The entry A[i] denotes the term Ai 3. The recurrence relation is given by A[i]= ⎧ ⎪ ⎨ ⎪ ⎩ i, if i ≤ 2 A[i−1]+A[i−2] 2 , if 2 < i ≡ 2 1 2 1 A[i−2]+ 1 A[i−1] , else 4. The calculation order is the canonical order of i ∈ N 5. The solution can be extracted from A[n] after the calculations 6. The runtime is linear, i.e. Θ (n) 6.4 (a) The array R[1.. n] is given below. R[1.. n]= [3, 5, 3, 4, 2, −1, 4, 5, 2, 6] □ (b) The array R′[1.. n] is given below. R′[1.. n]= [0, 0, 1, 6, 4, 3, 7, 8, 5, 9] To compute the solution to the maximum almost subarray problem, we take the maximum of R[1.. n] and R′[1.. n], so the solution is given by max{R[1.. n], R′[1.. n]}. □ (c) The array S[1.. n] is given as follows. S[1.. n]= [5, 2, 0, 2, 1, 3, 6, 2, 1, 4] The solution array T deﬁned by the formula T [k]= R[k − 1]+ S[k + 1] for the index 1 ≤ k < n is given below. Then, to ﬁnd the solution for the maximum almost subarray sum, we simply extract the maximum maxk{T [k]}. □ R = [ 0, 3, 5, 3, 4, 2, \u00001, 4, 5, 2, 6 ] R' = [ 0, 0, 0, 1, 6, 4, 3, 7, 8, 5, 9 ] T = [ 3, 5, 3, 6, 4, 3, 7, 8, 7, 9 ] R = [ 0, 3, 5, 3, 4, 2, \u00001, 4, 5, 2, 6 ] S = [ 5, 2, 0, 2, 1, 3, 6, 2, 1, 4, 0 ] T = [ 2, 3, 7, 4, 7, 8, 1, 5, 9, 2 ]","libVersion":"0.5.0","langs":""}