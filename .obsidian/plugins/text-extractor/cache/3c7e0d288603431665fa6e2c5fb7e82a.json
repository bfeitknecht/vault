{"path":"sem4/FMFP/PV/exams/FMFP-endterms/FMFP-FS22.pdf","text":"Computer Science Department C. Sprenger P. M¨uller Formal Methods and Functional Programming Part II Midterm Exam, SS22 May 17, 2022, 10:20 – 10:50 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. This booklet consists of 5 pages. After the exam begins, check that your exam papers are complete (3 assignments and 1 page of background material). 2. Only write on the exam paper. Write your ﬁrst and last name and your student number on every sheet of exam paper that you write on. 3. This is a closed book exam: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. Each correct answer gives you 1 point. A wrong answer in assignment 1 removes 0.5 point. A wrong answer for a true/false question (in assignments 2 and 3) removes 1 point. If an assignment has a negative number of points, it will be counted as 0 point. 5. You have 30 minutes to complete the exam. Assignment 1 2 3 P Max 7 6 7 20 Points 1 NATURAL SEMANTICS (7 POINTS) 2 1 Natural Semantics (7 Points) Consider the following IMP statement: while y = 0 do while x > 0 do x:= x- 2; y:= y+ 3 end end Execute the statement s starting from the state \u0000zero[x 7! 1] using the rules of natural semantics. Note:Recall from the lectures that \u0000zero(y)=0 for all y In your derivation tree, how many times each of the following elements appears? (a) Application of the rule WhFNS 2 (b) Application of the rule WhTNS 2 (c) Application of the rule SeqNS 1 (d) Application of the rule AssNS 2 (e) The state1 \u0000zero[x 7! 1] 4 (f) The state \u0000zero[x 7! \u00001] 2 (g) The state \u0000zero[x 7! \u00001][y 7! 3] 8 1If a state \u0000 appears on the left and the right of a transition, for example hskip, \u0000i! \u0000,then this counts for 2. 2 NATURAL SEMANTICS WITH RANDOM CHOICE (6 POINTS) 3 2 Natural Semantics with Random Choice (6 Points) In this assignment, we extend the IMP language with the program statement choice(x, e1,e2), where x is a variable name, e1 and e2 are expressions, and with the two following rules: (Ch1NS) hchoice(x, e1,e2), \u0000i! \u0000[x 7! A[[e1]]\u0000] (Ch2NS) hchoice(x, e1,e2), \u0000i! \u0000[x 7! A[[e2]]\u0000] Consider the following IMP statements s0, s1, s2,and s3: s0 while a = b do choice(a, 0, 1); choice(b, 0, 1) end s1 while a = b do choice(a, 0, 1); choice(b, 1, 2) end s2 a:= 1; while a # b do choice(a, 0, 1); choice(a, a, 2); choice(b, 1, 2) end s3 a:= 1; while a # b do choice(a, 1, 2); choice(b, 0, 1); choice(b, b, 2) end Recall that the operator # means “not equal to”. Determine whether the following statements are true (T) or false (F). TF (a) The execution of s0 in \u0000zero terminates successfully. ⇤X ⇤ (b) The execution of s1 in \u0000zero terminates successfully. ⇤X ⇤ (c) The execution of s2 in \u0000zero terminates successfully. ⇤X ⇤ (d) The statements s0 and s1 are semantically equivalent. ⇤ ⇤X (e) The statements s2 and s3 are semantically equivalent. ⇤X ⇤ (f) choice(x, e1,e2)issemantically equivalentto (x := e1 [] x := e2) ⇤X ⇤ 3 SEMANTICS OF EXPRESSIONS (7 POINTS) 4 3 Semantics of Expressions (7 Points) The states of the IMP language assign a value to each variable. In this exercise, we consider two generalizations of IMP states which allow to assign a range of possible values to each variable/expression from a range of possible values. Version 1. In this version, states map variables to sets of values: StateL : V ar ! P(V al) Intuitively, this state model can be used to model non-determinism: A state \u0000L of type StateL maps a variable x to the set of values the variable x can take, \u0000L(x). Given a new state \u0000L, we deﬁne a new semantic function D for expressions that computes the range of its possible values: D[[n]]\u0000L = {N [[n]]} D[[x]]\u0000L = \u0000L(x) D[[e1 op e2]]\u0000L = {v1 op v2 | v1 2 D[[e1]]\u0000L,v2 2 D[[e2]]\u0000L} As an example, D[[x + y]]\u0000Lzero [x7!{1,2}][y7!{3,4}] = {4, 5, 6},where \u0000Lzero corresponds to the state that assigns the singleton {0} to every variable. Version 2. In this version, we generalize states to be sets of normal IMP states: StateN : P(State) Given a state \u0000N of type StateN ,we deﬁneanew semantic function E as follows: E[[e]]\u0000N = {A[[e]]\u0000 | \u0000 2 \u0000N } As an example, E[[x + y]]{\u0000zero[x7!1],\u0000zero[y7!2]} = {1, 2},where \u0000zero corresponds to the normal IMP state that assigns 0 to every variable. Determine whether the following statements are true (T) or false (F). TF (a) The deﬁnition of D is inductive. ⇤X ⇤ (b) The deﬁnition of E is total. ⇤X ⇤ (c) 8\u0000L,e. D[[e \u0000 e]]\u0000L = D[[0]]\u0000L ⇤ ⇤X (d) 8\u0000N ,e. E[[e \u0000 e]]\u0000N = E[[0]]\u0000N ⇤X ⇤ (e) 8x, y, \u0000L.x 6⌘ y =) (9\u0000N . D[[x ⇤ y]]\u0000L = E[[x ⇤ y]]\u0000N ) ⇤X ⇤ (f) 8x, y, \u0000N .x 6⌘ y =) (9\u0000L. E[[x ⇤ y]]\u0000N = D[[x ⇤ y]]\u0000L) ⇤X ⇤ (g) 8e, \u0000L. (8x 2 FV (e). \u0000L(x) 6= ;)=) D[[e]]\u0000L 6= ; ⇤X ⇤ 3 SEMANTICS OF EXPRESSIONS (7 POINTS) 5 Syntax and Semantics of IMP Syntax The statements s (Stm) and arithmetic expressions e (Aexp) of the programming language IMP are given by the grammar s ::= skip \u0000 \u0000 x := e \u0000 \u0000 s;s \u0000 \u0000 if b then s else s end \u0000 \u0000 while b do s end e ::= n \u0000 \u0000 x \u0000 \u0000 eope where n ranges over numerals (Numeral), x ranges over variables (Var), b ranges over boolean expressions (Bexp), and op ranges over arithmetic operators (Op). Free Variables and Substitution FV(e)= 8 >< >: ; if e ⌘ n for some numeral n {x} if e ⌘ x for some variable x FV(e1) [ FV(e2)if e ⌘ e1 op e2 for some e1, e2,and op e[x 7! e0] ⌘ 8 >>>< >>>: n if e ⌘ n for some numeral n e0 if e ⌘ y for some variable y with y ⌘ x y if e ⌘ y for some variable y with y 6⌘ x e1[x 7! e0] op e2[x 7! e0]if e ⌘ e1 op e2 for some e1, e2,and op Natural Semantics (Big-Step Semantics) (SkipNS) hskip, \u0000i! \u0000 (AssNS) hx := e, \u0000i! \u0000[x 7! A[[e]]\u0000] hs1, \u0000i! \u00000 hs2, \u00000i! \u000000 (SeqNS) hs1;s2, \u0000i! \u000000 hs1, \u0000i! \u00000 (IfTNS) hif b then s1 else s2 end, \u0000i! \u00000 if B[[b]]\u0000 = tt hs2, \u0000i! \u00000 (IfFNS) hif b then s1 else s2 end, \u0000i! \u00000 if B[[b]]\u0000 = ↵ hs, \u0000i! \u00000 hwhile b do s end, \u00000i! \u000000 (WhTNS) hwhile b do s end, \u0000i! \u000000 if B[[b]]\u0000 = tt (WhFNS) hwhile b do s end, \u0000i! \u0000 if B[[b]]\u0000 = ↵","libVersion":"0.5.0","langs":""}