{"path":"sem4/FMFP/PV/exams/20-midterms/FMFP-FS20-B.pdf","text":"Department of Computer Science P. M¨uller, D. Traytel Formal Methods and Functional Programming Quiz 1 March 10, 2020, 10:15–10:45 Student: Last Name: First Name: SOLUTION B Student Number: General Comments: 1. This booklet consists of 4 pages; the back page of this booklet is page 4. After the quiz begins, check that your quiz papers are complete. There are 2 assignments. 2. Only write on the quiz paper and extra paper sheets which are given by the assistants. Do not take any of this paper out of the quiz: submit it all. Write your ﬁrst and last name and your student number on every sheet of paper that you write on. 3. This is a closed book quiz: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. You may use any functions from the Haskell Prelude in your solutions (without giving their deﬁnitions). 5. Write clearly in the sense of logic, language, and readability. Label all rule applications in your derivation trees. The clarity of your arguments and explanations aﬀects your grade. 6. You have 30 minutes to complete the quiz. Assignment 1 2 ∑ Max. points 10 10 20 Your points Formal Methods and Functional Programming, Quiz 1, SS20 2 Assignment 1: Natural Deduction (10 points) Recall the following rules for natural deduction in ﬁrst-order intuitionistic logic: Γ, A Ø A axiom Γ, A Ø B Γ Ø A → B →I Γ Ø A → B Γ Ø A Γ Ø B →E Γ Ø Œ Γ Ø A ŒE Γ, A Ø Œ Γ Ø ¬A ¬I Γ Ø ¬A Γ Ø A Γ Ø B ¬E Γ Ø A Γ Ø B Γ Ø A ∧ B ∧I Γ Ø A ∧ B Γ Ø A ∧EL Γ Ø A ∧ B Γ Ø B ∧ER Γ Ø A Γ Ø A ∨ B ∨IL Γ Ø B Γ Ø A ∨ B ∨IR Γ Ø A ∨ B Γ, A Ø C Γ, B Ø C Γ Ø C ∨E Γ Ø A Γ Ø ∀x. A ∀I ∗ Γ Ø ∀x. A Γ Ø A[x~t] ∀E Γ Ø A[x~t] Γ Ø ∃x. A ∃I Γ Ø ∃x. A Γ, A Ø B Γ Ø B ∃E ∗∗ Side conditions: (∗) x is not free in any formula in Γ, (∗∗) x is neither free in B nor in any formula in Γ. Prove using the above rules that ›(∃y. q(y)) → ∀x. ¬p(x)” → (∀y. q(y)) → ¬∃x. p(x) is a tautology. Give a complete derivation tree and label each inference step with the name of the corresponding rule. Formal Methods and Functional Programming, Quiz 1, SS20 3 Solution: Let • Γ1 ∶= (∃y. q(y)) → ∀x. ¬p(x) • Γ2 ∶= Γ1, ∀y. q(y) • Γ3 ∶= Γ2, ∃x. p(x) • Γ4 ∶= Γ3, p(x) Γ3 Ø ∃x. p(x) axiom Γ4 Ø (∃y. q(y)) → ∀x. ¬p(x) axiom Γ4 Ø ∀y. q(y) axiom Γ4 Ø q(y) ∀E Γ4 Ø ∃y. q(y) ∃I Γ4 Ø ∀x. ¬p(x) →E Γ4 Ø ¬p(x) ∀E Γ4 Ø p(x) axiom Γ4 Ø Œ ¬E Γ3 Ø Œ ∃E ∗∗ Γ2 Ø ¬∃x. p(x) ¬I Γ1 Ø (∀y. q(y)) → ¬∃x. p(x) →I Ø ›(∃y. q(y)) → ∀x. ¬p(x)” → (∀y. q(y)) → ¬∃x. p(x) →I (∗∗): x is neither free in Œ nor in Γ3 (as every occurence of x is bound by a quantiﬁer) Formal Methods and Functional Programming, Quiz 1, SS20 4 Assignment 2: Digits in Base Seven (10 points) Every integer n ≥ 1 has a unique representation in base 7. That is, there exists a unique sequence n = d0, d1, d2, . . . , dm of integers in {0, 1, . . . , 6} such that n = ∑0≤i≤m di ⋅ 7i and dm ≠ 0. We call di the ith digit of n in base 7. For example: 19 = 5, 2 19 = 5 ⋅ 70 + 2 ⋅ 71 256 = 4, 1, 5 256 = 4 ⋅ 70 + 1 ⋅ 71 + 5 ⋅ 72 2020 = 4, 1, 6, 5 2020 = 4 ⋅ 70 + 1 ⋅ 71 + 6 ⋅ 72 + 5 ⋅ 73 12345 = 4, 6, 6, 0, 5 12345 = 4 ⋅ 70 + 6 ⋅ 71 + 6 ⋅ 72 + 0 ⋅ 73 + 5 ⋅ 74 Write a Haskell function digitProd :: Int -> Int -> Int such that digitProd k n computes the product of the ﬁrst k ≥ 0 digits of n in base 7, that is, it computes ∏0≤i≤k−1 di. You may assume that n has at least k digits in base 7. Note: This task can be solved without using lists. Examples: digitProd 0 19 = 1 digitProd 3 2020 = 24 digitProd 3 12345 = 144 digitProd 5 12345 = 0 Solution: digitProd :: Int -> Int -> Int digitProd 0 n = 1 digitProd k n = (n `mod` 7) * digitProd (k - 1) (n `div` 7)","libVersion":"0.5.0","langs":""}