{"path":"sem3/DMath/UE/s/DMath-s-u01.pdf","text":"ETH Z ¨urich, D-INFK HS 2024, 29. September 2024 Prof. Ueli Maurer Giovanni Deligios, Dr. Karen Klein Diskrete Mathematik Solution 1 1.1 The Punctured Chessboard a) One only needs to consider 10 cases (since all other cases are symmetric). The cases are marked below. 1 2 3 4 5 6 7 8 9 10 b) The proof that P (7) = 1, including all cases, can be found on the following website: http://www.cut-the-knot.org/Curriculum/Games/TrominoPuzzleN.shtml. 1.2 A False Proof More precisely, the claim consists of two parts: “There exists the largest natural number n” and “n = 1”. Denote the first statement by S and the second by T . The statement to prove is S and T , but the proof only shows S =⇒ T , which is true, because S is false. The proof is correct, but proves the wrong statement. Note that if a statement S is false, then the statement S =⇒ T is true for any T . In other words, it is possible to prove any statement T by starting with a false assumption. 1.3 Interpreting Propositional Formulas in Natural Language a) The formulas can be stated in the English language in the following way: i) F1: “If Mario is not getting evicted, he did not forget to pay his rent.” ii) F2: “Mario forgot to pay rent and is getting evicted, or Mario did not forget to pay his rent and is not getting evicted.” Equivalently, we could say “Mario is getting evicted if and only if he forgot to pay his rent.” b) The sentences can be written formally in the following way: i) F3 = ¬A ∧ ¬B ii) F4 = (¬A ∧ B) ∨ (A ∧ ¬B) c) i) ¬F3: Mario forgot to pay his rent or he is getting evicted. ¬F3 ≡ ¬(¬A ∧ ¬B) ≡ A ∨ B ii) ¬F4: Mario is getting evicted if and only if he forgot to pay his rent. ¬F4 ≡ (A ∧ B) ∨ (¬A ∧ ¬B) ≡ F2 1.4 Logical Equivalence via Function Tables a) A B C B → C ¬(A → C) ∧ ¬(A ∨ B) (B → C) → (¬(A → C) ∧ ¬(A ∨ B) ) 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 0 b) With the above function table, it becomes clear that the formula in a) is true if and only if B ∧ ¬C is true. Therefore, the simple equivalent formula is B ∧ ¬C. 1.5 One More Logical Operator a) The function tables of B ♡ A and B ♢ A, respectively, are given by A B B ♡ A 0 0 1 0 1 1 1 0 0 1 1 1 A B B ♢ A 0 0 1 0 1 0 1 0 0 1 1 1 The function table of B ♡ A is different from the function table of A ♡ B, hence the formulas are not equivalent (Definition 2.6), i.e. ♡ is not commutative. On the other hand, the function tables for B ♢ A and A ♢ B are equal, hence the two formulas are equivalent (Definition 2.6) and ♢ is a commutative operator. b) The function table of the left-hand-side formula F = (¬A ♡ B) ♢ (B ♡ C) is A B C ¬A ♡ B B ♡ C F 0 0 0 1 1 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 1 0 1 0 and the function table of the right-hand-side formula G = ¬(A ♢ B) ♡ ¬(A ♢C) is A B C ¬(A ♢ B) ¬(A ♢C) G 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 1 0 0 1 Since the sixth row of the function tables is different, the formulas are not equivalent (Definition 2.6). c) One such formula is G = (A ♢ C) ♡ B. 1.6 Simplifying a Formula We choose the formula G = ¬A ∧ (¬B ∨ C). In the following, we prove that F ≡ G: ((¬A ∨ ¬B) ∧ ¬A ) ∧ ((¬B ∧ ¬A ) ∨ C) ≡ ((¬A ∨ ¬B) ∧ (¬A ∨ ¬A)) ∧ ((¬B ∧ ¬A) ∨ C) (idempotence (1)) ≡ (¬A ∨ (¬B ∧ ¬A )) ∧ ((¬B ∧ ¬A ) ∨ C) (distributive law (6)) ≡ ((¬B ∧ ¬A) ∨ ¬A) ∧ ((¬B ∧ ¬A ) ∨ C) (commutativity of ∨ ) ≡ (¬B ∧ ¬A) ∨ (¬A ∧ C) (distributive law (6)) ≡ (¬A ∧ ¬B) ∨ (¬A ∧ C) (commutativity of ∧ ) ≡ ¬A ∧ (¬B ∨ C) (distributive law (5))","libVersion":"0.5.0","langs":""}