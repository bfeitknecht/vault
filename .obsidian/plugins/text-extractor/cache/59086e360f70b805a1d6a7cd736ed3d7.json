{"path":"sem3/LinAlg/VRL/extra/matrices-precise-definition.pdf","text":"Extra material Linear Algebra (401-0131-00L, HS24), ETH Z ¨urich Numbering of Sections, Definitions, Figures, etc. as in the Lecture Notes Matrices, precise definition Definition 2.1 defines a matrix as a “rectangular array” of real numbers with m rows and n columns, but this is not precise enough to say what happens when m = 0 or n = 0. Here, we have a situation where checking these edge cases actually reveals that the definition is incomplete. In precise terms, an m × n matrix should have been defined as an element of (Rm)n. This means, it it is a sequence of length n with elements from R m. Each element is in turn a sequence of m real numbers. The fact that we write this as a rectangular array is simply a convention, similar to the convention that we write an element of R m as a column vector when we do linear algebra. Under this definition, our first 3 × 2 matrix   1 2 3 4 5 6   is “officially” a sequence of 2 vectors in R3, and each of them is officially a sequence of 3 real numbers:  1 2 3 4 5 6   := ((1, 3, 5), (2, 4, 6)). (1) This is consistent with how we motivated matrices (as a notation for a sequence of column vectors). Furthermore, R m×n should have been defined as a shortcut for (R m)n. This clearly shows that a matrix is not a sequence of row vectors (but a sequence of row vectors can be extracted from it). Definition 2.1 suggests that rows and columns have equal rights, but this is actually not the case. As an element of (R m)n, a matrix is inher- ently column-based. We could also define an m × n matrix as an element of (R n)m, and then it would have m rows, each of which is a (row vector) in R n. This would lead to the “official definition”   1 2 3 4 5 6   := ((1, 2), (3, 4), (5, 6)). (2) In that sense, Definition 2.1 is indeed incomplete, since it does not specify whether the “rectangular array” is to be interpreted as (1), or (2). In most situations, the difference does not matter. It is in fact a strength of the “rectangular array” notation that we can read a matrix row- or columnwise, depending on what we 1 need. But when it comes to edge cases, the rectangular array notation fails to work; this is similar to the situation with column vectors: an element of R 0 cannot really be written as a column vector; to write it, we had to go back to the official definition: R 0 contains all empty sequences of real numbers, so it only has one element, namely (). With matrices, the problem is that Definition 2.1 does not provide an official definition. Only now we said that we should use the column-wise format (1) under which an m × n matrix is an element of (R m) n. Once we agree on that, we can quite easily say what an m × 0 and a 0 × n matrix are:         ︸︷︷︸ m×0 := (), an sequence of 0 vectors from Rm. And [ ] ︸ ︷︷ ︸ 0×n := ((), (), . . . , ()), a sequence of n vectors from R 0. Under the row-wise definition as demonstrated in (2), we would get something different (think about it!). 2","libVersion":"0.3.2","langs":""}