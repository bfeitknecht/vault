{"path":"sem2/PProg/VRL/extra/benji/PProw-01-benji.pdf","text":"Parallele Programmierung Übungsstunde 1 Frühling 2024 Plan für heute 2 Allgemeine Vorstellung Recap der Vorlesung Installieren der Arbeitsumgebung Früher fertig! Allgemeine Vorstellung 3 Wer bin ich? Raphaël Larisch 24.04.2004 (19 Jahre alt) Aus Dietlikon - Zürich 45678 9 10 Was mache ich und wie bin ich TA geworden? Gymnasium in Oerlikon besucht (Kantonsschule Zürich Nord) mit Schwerpunkt Mathe- Naturwissenschaft Bachelorstudent wie ihr! Im 4. Semester EProg-TA letztes Semester 11 Wie erreicht ihr mich? rlarisch@ethz.ch Bei Nachfrage können wir einen WhatsApp-Chat erstellen 12 Material Vorlesungswebsite: Infos, Links zu zusätlicher Literatur spcl.inf.ethz.ch/Teaching/2024-pp/ Moodle: PP-Folien, Übungen, Forum https://moodle-app2.let.ethz.ch/course/view.php?id=22281 Gitlab: Euer Repository und Abgaben Terminologie: https://cgl.ethz.ch/teaching/parallelprog24/pages/terminology.html 13 Über die Übungsstunde Die Übungsstunde ist für euch da! Fragt nach wenn etwas unklar ist oder nicht funktioniert. Sagt mir Bescheid wenn ich in der nächsten Stunde auf ein Thema genauer eingehen soll. Feedback für eure Lösungen auf Anfrage (anders als z.B. EProg). Sonst: In die Lösungen schauen und mich fragen, falls unklar. Moodle für generelle Fragen Schickt mir (und nicht den Profs) E-Mail 14 Abgabe der Aufgaben Via GIT – ähnlich wie EProg Befolgt die Schritte auf den Aufgabenblätter - Was Abgeben - Titel der Abgabe - Wo abgeben Veröffentlichung der Aufgaben: Mittwoch auf Moodle (Moodle) Exercise deadline: Steht auf dem Aufgabenblatt 15 Abgabe der Aufgaben Gebt eure eigenen Lösungen ab, nicht die eurer Kollegen! Kopiert nicht die Lösungen von anderen Quellen! 16 Prüfung 2h schriftliche Prüfung (Stift und Papier) Keine Programmierung am PC 100% der Endnote Übungsaufgaben helfen tatsächlich 17 Recap der Vorlesung Warum lernen wir parallel zu programmieren? • Einzelne Prozessoren werden nicht mehr viel schneller • Dafür haben wir jetzt mehrere Prozessoren auf einer Maschine! • Und die wollen wir nutzen! • Wir schreiben Programme mit mehreren Kontrollflüssen (Threads), die parallel ausgeführt werden können 18 Recap der Vorlesung Idee von Mutual exclusion (gegenseitiger Ausschluss) • Kritische Sektion vom Code soll nur von einem Thread aufs Mal ausgeführt werden. • Nützlich für geteilte Ressourcen, wie Datenstrukturen oder der Garten von Alice und Bob! 19 Recap der Vorlesung Producer-Consumer-Queue ist eine solche Datenstruktur Ein Thread produziert etwas für einen anderen Thread Kann mit einem einfachen «Protokoll» funktionieren Konzept von Lesern und Schreibern (readers and writers) Threads Z.B. Wikipedia: Viele Leser und wenige Schreiber. 20 Recap der Vorlesung • Wie funktioniert Java? • Idee: «Write once run everywhere» • Source code wird in Bytecode verwandelt und nicht in Maschinencode wie in anderen Sprachen! • JVM interpretiert Bytecode für den Computer, auf dem das Programm am Ende läuft • Nicht prüfungsrelevant, aber interessant! Mehr Infos in zusätzlicher Literatur 21 Installieren der Arbeitsumgebung 22 Wir brauchen mehrere Tools Java: Java Development Kit mit Java compiler - https://adoptopenjdk.net/ Eclipse: Arbeitumgebung - https://www.eclipse.org/downloads/packages/release/2022-12/r/ec lipse-ide-java-developers GIT: Ein version control system Jeder von euch hat ein Repository z.B. https://gitlab.inf.ethz.ch/COURSE-PPROG24/pprog-pwitzig 23 Installiert alle Tools Befolgt Aufgabenblatt 1 Meldet euch bei Fragen! 24 Vielen Dank für die Aufmerksamkeit Bis nächste Woche! 25","libVersion":"0.3.1","langs":""}