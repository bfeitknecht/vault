{"path":"sem4/FMFP/PV/exams/01-endterms/FMFP-FS17.pdf","text":"Computer Science Department D. Basin P. M¨uller Formal Methods and Functional Programming Part II Midterm Exam, SS17 May 9th, 2017, 10:15 – 10:45 Student: Last Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . First Name: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Stud.-Nr.: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . General Comments: 1. This booklet consists of 9 pages. After the exam begins, check that your exam papers are complete (2 assignments and 1 page of background material). 2. Only write on the exam paper and extra paper sheets which are given by the assis- tants. Do not take any of this paper out of the exam: submit it all. Write your ﬁrst and last name and your student number on every sheet of paper that you write on. 3. This is a closed book exam: the only resources allowed are pen and paper. No laptops, no cell phones, no smart watches, no prepared notes. Do not use pencil and do not use red. 4. Write clearly in the sense of logic, language, and readability. Label all rule applica- tions in your derivation trees. The clarity of your arguments and explanations a↵ects your grade. 5. You have 30 minutes to complete the exam. Assignment 1 2 ∑ Max. points 2 8 10 Your points Formal Methods and Functional Programming, Part II Midterm Exam, SS17 2 Assignment 1 (2 points) Consider the following IMP statement s: while x > 0 do x:= 9- 2* x end Using the natural (big-step) semantics, prove that: ∀\u0000. (\u0000(x) = 1 ⇒ ∃\u0000′.( \u0000′(x) ≤ 0 and ￿ ￿s, \u0000￿ → \u0000′ )) Solution: Let \u0000 be arbitrary. We assume \u0000(x) = 1. We construct the derivation tree shown on the following page. Thus, choosing \u0000′ to be \u0000[x ￿ 7][x ￿ −5],we have \u0000′(x) ≤ 0 and ￿ ￿s, \u0000￿ → \u0000′,as required.3g@-EgBeeEfsogage- Formal Methods and Functional Programming, Part II Midterm Exam, SS17 4Formal Methods and Functional Programming, Part II Midterm Exam, SS17 5Formal Methods and Functional Programming, Part II Midterm Exam, SS17 6 Assignment 2 (8 points) In this assignment, we consider a restricted subset of IMP: programs that consist of a sequence of k variable increments only. That is, each program p of the restricted IMP language has the following shape: x1 := x1 + n1; x2 := x2 + n2; ... xk := xk + nk; In each assignment, a variable xi is incremented by a (non-negative) numeral ni. Using the natural (big-step) semantics, prove the following property of such restricted programs p: ∀p, \u0000, \u0000′,y. ( ￿ ￿p, \u0000￿ → \u0000′ ⇒ \u0000′(y) ≥ \u0000(y)) Solution: Deﬁne P (T ) ≡ ∀p, \u0000, \u0000′,y. ( root(T ) ≡ ￿p, \u0000￿ → \u0000′ ⇒ \u0000′(y) ≥ \u0000(y)) We prove ∀T.P (T ) by induction on the shape of the derivation tree T .Our induction hypothesis therefore is ∀T ′ ￿ T.P (T ′). Let p,\u0000,\u0000′,y be arbitrary. We assume root(T ) ≡ ￿p, \u0000￿ → \u0000′ and need to show that \u0000′(y) ≥ \u0000(y).We consider all possible cases for the last rule applied in T : assignments and sequential compositions. Case (AssNS): Then T must be of the form: (AssNS) ￿x := x + n, \u0000￿ → \u0000[x ￿ A[[x + n]]\u0000] for some x and n,andwhere p ≡ (x := x + n) and \u0000′ = \u0000[x ￿ A[[x + n]]\u0000].We show that \u0000′(y) ≥ \u0000(y) by a case analysis on whether or not x ≡ y: Case x ≡ y: \u0000′(y) = \u0000[x ￿ A[[x + n]]\u0000](y) = A[[x + n]]\u0000 = A[[x]]\u0000 + A[[n]]\u0000 = \u0000(x) + N [[n]] ≥ \u0000(x) = \u0000(y) Case x ￿≡ y: \u0000′(y) = \u0000[x ￿ A[[x + n]]\u0000](y) = \u0000(y) ≥ \u0000(y) Formal Methods and Functional Programming, Part II Midterm Exam, SS17 8Formal Methods and Functional Programming, Part II Midterm Exam, SS17 9 Syntax and Semantics of IMP Syntax The statements (Stm) of the programming language IMP are given by the grammar s ∶∶= skip ￿ x := e ￿ s; s ￿ if b then s else s end ￿ while b do s end where x ranges over variables (Var), e ranges over arithmetic expressions (Aexp), and b ranges over boolean expressions (Bexp). Natural Semantics (Big-Step Semantics) (SkipNS) ￿skip, \u0000￿ → \u0000 (AssNS) ￿x := e, \u0000￿ → \u0000[x ￿ A[[e]]\u0000] ￿s1, \u0000￿ → \u0000′ ￿s2, \u0000′￿ → \u0000′′ (SeqNS) ￿s1;s2, \u0000￿ → \u0000′′ ￿s1, \u0000￿ → \u0000′ (IfTNS) ￿if b then s1 else s2 end, \u0000￿ → \u0000′ if B[[b]]\u0000 = tt ￿s2, \u0000￿ → \u0000′ (IfFNS) ￿if b then s1 else s2 end, \u0000￿ → \u0000′ if B[[b]]\u0000 = ↵ ￿s, \u0000￿ → \u0000′ ￿while b do s end, \u0000′￿ → \u0000′′ (WhTNS) ￿while b do s end, \u0000￿ → \u0000′′ if B[[b]]\u0000 = tt (WhFNS) ￿while b do s end, \u0000￿ → \u0000 if B[[b]]\u0000 = ↵","libVersion":"0.5.0","langs":""}