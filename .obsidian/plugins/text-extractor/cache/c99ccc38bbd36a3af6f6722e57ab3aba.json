{"path":"sem3/A&D/UE/s/A&D-s-u02.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 30 September 2024 Johannes Lengler, David Steurer Kasper Lindberg, Lucas Slot, Hongjie Chen, Manuel Wiedmer Algorithms & Data Structures Exercise sheet 2 HS 24 The solutions for this sheet are submitted on Moodle until 6 October 2024, 23:59. Exercises that are marked by ∗ are challenge exercises. They do not count towards bonus points. You can use results from previous parts without solving those parts. The solutions are intended to help you understand how to solve the exercises and are thus more detailed than what would be expected at the exam. All parts that contain explanation that you would not need to include in an exam are in grey. Exercise 2.1 Induction. (a) Prove via mathematical induction that for all integers n ≥ 5, 2n > n 2 . In your solution, you should address the base case, the induction hypothesis and the induction step. Solution: • Base Case. Let n = 5. Then, 2 5 = 32 > 25 = 5 2 . so the property holds for n = 5. • Induction Hypothesis. Assume that the property holds for some positive integer k ≥ 5, that is, 2k > k2 . • Inductive Step. We must show that the property holds for k + 1. 2 k+1 = 2 · 2k I.H. > 2 · k2 = k2 + k2 ≥ k2 + 5k = k2 + 2k + 3k ≥ k2 + 2k + 15 > k2 + 2k + 1 = (k + 1)2 . The idea of the above is as follows. We know that the right-hand side of the inequality must be (k + 1)2 which is equivalent to k2 + 2k + 1. From our Induction Hypothesis we know 2k > k2. Then we show that 2k + 1 is indeed less then k2 with multiple lower bounds. By the principle of mathematical induction, 2n > n2 is true for every positive integer n ≥ 5. (b) Let x be any real number. Prove via mathematical induction that for every positive integer n, we have (1 + x) n = n∑ i=0 ( n i ) xi , where (n i ) = n! i!(n − i)! . We use a standard convention 0! = 1, so (n 0) = (n n ) = 1 for every positive integer n. In your solution, you should address the base case, the induction hypothesis and the induction step. Hint: Y ou can use the following fact without proof: for every 1 ≤ i ≤ n, (n i ) + ( n i − 1 ) = (n + 1 i ) . Solution: We will use the identity from the hint to show (via mathematical induction) that (1 + x) n = n∑ i=0 ( n i ) xi . • Base Case. Let n = 1. Then (1 + x)1 = ( 1 0 )x0 + ( 1 1 ) x1 = n∑ i=0 ( n i ) xi so the property holds for n = 1.. • Induction Hypothesis. Assume that the property holds for some positive integer k, that is, (1 + x) k = k∑ i=0 ( k i )x i. • Inductive Step. 2 We must show that the property holds for k + 1. (1 + x) k+1 = (1 + x)(1 + x) k I.H. = (1 + x) k∑ i=0 ( k i ) xi = ( k∑ i=0 ( k i ) xi) + ( k∑ i=0 ( k i ) xi+1) = ( k∑ i=0 ( k i ) xi) + ( k+1∑ i=1 ( k i − 1 )xi) = ( k 0 ) x0 + k∑ i=1 (( k i ) xi + ( k i − 1 ) xi) + ( k k ) xk+1 = ( k + 1 0 ) x0 + k∑ i=1 (k + 1 i ) xi + ( k + 1 k + 1 ) xk+1 = k+1∑ i=0 (k + 1 i )x i. Our goal starting from step 3 is to combine the two sums. To achieve this, we equalize the x-term and shift the sum limits. Using the distributive law to extract xi enables us to use the provided hint. By adjusting the limits again we arrive at the expected result. The sum operations can look confusing at first glance. We recommend writing them out and toying with different operations to get a better understanding. Note for any x ∈ N: (x 0) = (x x ) = 1. By the principle of mathematical induction, the property is true for every positive integer n. Asymptotic Notation When we estimate the number of elementary operations executed by algorithms, it is often useful to ignore constant factors and instead use the following kind of asymptotic notation, also called O- Notation. We denote by R+ the set of all (strictly) positive real numbers and by N the set of all (strictly) positive integers. Let N be a set of possible inputs to our algorithm such that f : N → R+ represents its runtime given an input. Definition 1 (O-Notation). For f : N → R+, O(f ) := {g : N → R+ | ∃C > 0 ∀n ∈ N g(n) ≤ C · f (n)}. We write f ≤ O(g) to denote f ∈ O(g). Some textbooks use here the notation f = O(g). We believe the notation f ≤ O(g) helps to avoid some common pitfalls in the context of asymptotic notation. Instead of working with this definition directly, it is often easier to use limits in the way provided by the following theorem. Theorem 1. Let N be an infinite subset of N and f : N → R+ and g : N → R+. • If lim n→∞ f (n) g(n) = 0, then f ≤ O(g) and g ̸≤ O(f ). • If lim n→∞ f (n) g(n) = C ∈ R+, then f ≤ O(g) and g ≤ O(f ). 3 • If lim n→∞ f (n) g(n) = ∞, then f ̸≤ O(g) and g ≤ O(f ). The following theorem can also be helpful when working with O-notation. Theorem 2. Let f, g, h : N → R+. If f ≤ O(h) and g ≤ O(h), then 1. For every constant c > 0, c · f ≤ O(h). 2. f + g ≤ O(h). Notice that for all real numbers a, b > 1, loga n = loga b · logb n (where loga b is a positive constant). Hence loga n ≤ O(logb n). So you don’t have to write bases of logarithms in asymptotic notation, that is, you can just write O(log n). Exercise 2.2 O-notation quiz (1 point). For all the following functions the variable n ranges over N. Prove or disprove the following statements. Justify your answer by computing a limit as in Theorem 1. (a) n5 + 4n4 ≤ O( 1 5 n6) Solution: True by Theorem 1, since lim n→∞ n5 + 4n4 1 5 n6 = lim n→∞ 5 1 n + 20 1 n2 = 0. (b) n10 − 10n9 − 100n8 ≤ O(1000n7) Solution: False by Theorem 1, since lim n→∞ n10 − 10n9 − 100n8 1000n7 = lim n→∞ n3 ( 1 1000 − 10 1000 1 n − 100 1000 1 n2 ) = lim n→∞ n3 ( 1 1000 ) = ∞. (c) 22n ≤ O(en) Solution: False by Theorem 1, since lim n→∞ 22n en = lim n→∞ e2n ln 2 en = lim n→∞ e2n ln 2−n = lim n→∞ en(2 ln 2−1) = ∞ and 2 ln 2 − 1 > 0. In the first step, we used the fact x = eln x for any x > 0. (d) n 6n+10 3n+2 ≤ O(n3) Solution: 4 True by Theorem 1, since lim n→∞ n 6n+10 3n+2 n3 = lim n→∞ n 6n+10 3n+2 −3 = lim n→∞ n 6n+10−9n−6 3n+2 = lim n→∞ n −3n+4 3n+2 = lim n→∞ n−1+ 6 3n+2 (∗) = lim n→∞ e(−1+ 6 3n+2 ) ln n = lim n→∞ e− ln n+ 6 ln n 3n+2 (∗∗) = lim n→∞ e− ln n = 0. In the (∗) step, we used the fact x = eln x for any x > 0. In the (∗∗) step, we used the fact limn→∞ 6 ln n 3n+2 = 0. Guidelines for correction: Award 1 point if all subtasks are solved correctly. Award 1/2 point if at least two subtasks are solved correctly. Do not award points for solutions that do not (correctly) compute a limit (even if they get the right answer). Exercise 2.3 O-notation mistake. (1 point). Let f : N → R+ be a function, with f (n) ≤ O(n). A colleague tried to prove that ef (n) ≤ O(en). You found their notes, in which they start with the statement they want to show, and derive a series of equivalent statements. The notes read: ef (n) ≤ O(en) justifications for “ ⇐⇒ ” : ⇐⇒ ef (n) ≤ C · e n, for some C > 0 Use Definition 1 on the first page (1) ⇐⇒ ln (ef (n)) ≤ ln (C · e n) Take the ln on both sides (2) ⇐⇒ f (n) ≤ ln C + n ln(C · en) = ln C + n (3) ⇐⇒ f (n) ≤ O(n) n + ln C ≤ O(n) (4) So we have proved ef (n) ≤ O(en) ⇐⇒ f (n) ≤ O(n). As f (n) ≤ O(n) is true by assumption, we are done! (a) Show that your colleague’s proof must contain a flaw by giving an example of a function f (n) ≤ O(n), for which ef (n) ≤ O(en) does not hold. (You do not have to justify your example). Solution: For example, f (n) = 2n works. We have that limn→∞ e2n/en = limn→∞ e2n−n = limn→∞ en = ∞, so e2n ̸≤ O(en) by Theo- rem 1. (b) Explain where in the proof (which equivalence) your colleague made a mistake, and what mistake they made. Solution: The mistake is made going from (3) to (4). The statement f (n) ≤ O(n) does not imply that f (n) ≤ ln C + n (although the opposite is true), so the chain of equivalences is broken, and the argument fails. If you want to prove a statement from an assumption, it is okay to start with the statement and write a series of equivalent statements, ending with something that is clearly true. In fact, it is enough that, in each step, the new statement implies the old statement. However, it can be easy to 5 lose track, and accidentally write two statements where only the opposite is true: the old statement implies the new statement. Guidelines for correction: The exercise (parts (a) and (b) combined) consists of three items: • giving a counterexample for the statement (a); • identifying where the mistake was made (b); • explaining what the mistake was (b). Award 1 point if all items are correct. Award 1/2 point if at least one item is correct. Exercise 2.4 Mathematical induction? (1 point). A colleague wants to prove that n! ≤ 2n for all integers n ≥ 1 using mathematical induction. You find their notes, which read: • Base Case. Let n = 1. Then: 1! = 1 ≤ 2 1, so the base case holds. • Induction Hypothesis. Assume that the property holds for a positive integer k ≥ 1, that is, k! ≤ 2k. • Inductive Step. We use the induction hypothesis for k = n + 1 to compute: n! = (n + 1)!/(n + 1) ≤IH 2 n+1/(n + 1) ≤ 2 n+1/2 = 2 n, (5) which is exactly what we wanted to show. So by the principle of induction, we are done. (a) Show that the proof above must contain a flaw with a simple computation. Solution: For n = 4, we see that n! = 4! = 24, while 2n = 24 = 16, so the statement is actually false. In fact, for any n ≥ 4, we have n! > 2n. (b) Explain where in the proof your colleague made a mistake (which step), and what mistake they made. Solution: The mistake is made in the inductive step. Your colleague was supposed to show that the statement holds for n + 1, using the assumption (induction hypothesis) that it holds for n. Instead, they showed the statement holds for n, using the assumption (induction hypothesis) that it holds for n + 1. One way of thinking about this mistake is that, instead of proving the statement holds for all n larger than the base case, your colleague showed the statement holds for all n smaller than the base case! 6 Guidelines for correction: The exercise (parts (a) and (b) combined) consists of three items: • showing that the proof has a flaw with a simple computation (a); • identifying where the mistake was made (b); • explaining what the mistake was (b). Award 1 point if all items are correct. Award 1/2 point if at least one item is correct. Exercise 2.5 Asymptotic growth of ln(n!). Recall that the factorial of a positive integer n is defined as n! = 1 · 2 · · · · · (n − 1) · n. For the following functions n ranges over N≥2. (a) Show that ln(n!) ≤ O(n ln n). Hint: You can use the fact that n! ≤ nn for n ∈ N≥2 without proof. Solution: Using the hint, we have n! ≤ nn, and by using the monotonicity of the logarithm we arrive at ln(n!) ≤ ln(nn) = n ln n. This implies ln(n!) ≤ O(n ln n). (b) Show that n ln n ≤ O(ln(n!)). Hint: You can use the fact that ( n 2 ) n 2 ≤ n! for n ∈ N≥2 without proof. Solution: From the hint, we have n! ≥ ( n 2 )n/2. Again, we use the monotonicity of the logarithm, ln(n!) ≥ ln (( n 2 )n/2) = n 2 (ln n − ln 2) , which implies n ln n ≤ 2 ln(n!) + n ln 2. Now, note that n ln 2 ≤ ln 2 + n∑ i=2 ln(i) = ln 2 + ln(n!) ≤ 2 ln(n!) since n ≥ 2. Thus, n ln n ≤ 2 ln(n!) + n ln 2 ≤ 4 ln(n!) which shows n ln n ≤ O(ln(n!)). Note that ln 2 + ln(n!) = ln 2 + ∑n i=2 ln(i) because ln(n!) = ln(n · (n − 1) · (n − 2) . . .) = ln(n) + ln(n − 1) + ln(n − 2) . . ., i.e., because ln(a · b) = ln(a) + ln(b). 7","libVersion":"0.3.2","langs":""}