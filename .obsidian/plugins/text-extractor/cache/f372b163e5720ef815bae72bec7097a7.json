{"path":"sem4/FMFP/UE/e/FMFP-u10-e.pdf","text":"P. M¨uller, D. Basin and R. Jung Formal Methods and Functional Programming Exercise Sheet 10: Big-Step Semantics Submission deadline: May 6th/7th, 2025 Assignment 1 (Applying Big-Step Semantics) Consider the following IMP statement s: while n # 0 do (a := a + n; b := b * n); n := n - 1 end Task. Let σ be a state such that σ(a) = 0, σ(b) = 1, and σ(n) = 2. Prove using the natural semantics that there is some state σ′ with σ′(a) = 3, σ′(b) = 2, and σ′(n) = 0 such that ⟨s, σ⟩ → σ′. Provide the complete derivation tree. Do not forget to explicitly write the names of the rules you apply at each derivation step. Assignment 2 (Reversing Loop-Unrolling) Task. Prove the following statement: ∀σ, σ′, b, s · ( ⊢ ⟨if b then s; while b do s end else skip end, σ⟩ → σ′ =⇒ ⊢ ⟨while b do s end, σ⟩ → σ′) Note: In the lectures, you have seen the proof of this result in the other direction. 1 Assignment 3 (Execution only Affects Free Variables) Task. Prove that ∀s, σ, σ′, x · ( ⊢ ⟨s, σ⟩ → σ′ ∧ x ̸∈ FV(s) =⇒ σ′(x) = σ(x) ) . Hint: The statement to prove is equivalent to ∀T, s, σ, σ′, x · ( (root(T ) ≡ ⟨s, σ⟩ → σ′) ∧ x ̸∈ FV(s) =⇒ σ′(x) = σ(x) ), where T ranges over derivation trees. 2","libVersion":"0.5.0","langs":""}