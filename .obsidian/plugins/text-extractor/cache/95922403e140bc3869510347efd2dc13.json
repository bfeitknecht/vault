{"path":"sem4/FMFP/PV/exams/30-finals/FMFP-FS08.pdf","text":"F. Klaedtke and C. Sprenger Formal Methods and Functional Programming Final Exam, SS 2008 June 9, 2008, 10:15 - 12:00 LAST NAME: FIRST NAME: STUDENT-ID: Questions 1, 2, 3: 1.1 1.2 1.3 Σ 2.1 2.2 2.3 Σ 3.1 3.2 Σ Max. Credits: 4 5 5 14 4 5 5 14 6 8 14 Your Credits: Question 4: 4.1.1 4.1.2 4.1.3 4.2.1 4.2.2 4.2.3 4.2.4 Σ Max. Credits: 2 3 4 3 2 5 2 21 Your Credits: Question 5: 5.2.1 5.3.1 5.3.2 5.3.3 5.3.4 5.3.5 Σ Max. Credits: 3 4 3 2 3 6 21 Your Credits: Overall Σ Max. Credits 84 Your Credits Grade General Comments: 1. Check whether you got a complete exam sheet ( 20 pages ) and the \u0010Reference Card\u0011 ! 2. Some questions are marked as advanced . Answer the other questions ˝rst ! You do not need to answer advanced questions in order to pass, but answering them may improve your grade. 3. Write your answers in English or German. 4. The clarity of your arguments and explanations a˙ects your grade . 5. You may only use your writing utensils , this exam sheet, and the \u0010Reference Card\u0011. 6. Write your solutions in the answer boxes on the exam sheet. Do not write your answers directly into the questions. Do not write with pencil . 7. The assistants give you extra sheets if necessary. Put your name and student-id on each extra sheet you hand in. Number your sheets and always clearly specify which question you are answering. 1 1 Proving Consider the statement:1.1 ( /4 credits) Fishes do not have wings. Leo is a ˝sh. Therefore Leo has no wings. ∀x·(x ∈ F ⇒ ¬(x ∈ W )) ℓ ∈ F ⊢ ¬(ℓ ∈ W ) Fish Prove the sequent \u0010 Fish \u0011 using only the rules of the \u0010Reference Card\u0011. Indicate which rules you use. Answer: 2 Consider the statement: 1.2 ( /5 credits) Every citizen is a resident. Somebody is a citizen. Therefore somebody is a resident. ∀x·(x ∈ C ⇒ x ∈ R) ∃x·x ∈ C ⊢ ∃x·x ∈ R Resident Prove the sequent \u0010 Resident \u0011 using only the rules of the \u0010Reference Card\u0011. Indicate which rules you use. Answer: 3 Consider the statement:1.3 Advanced ( /5 credits) Every professor is older than every student. Brian is not older than Theresa, who is a student. Therefore Brian is not a professor. It can be formalized as follows: ∀x·∀y·(x ∈ P ∧ y ∈ S ⇒ x ↦→ y ∈ O) ¬(b ↦→ t ∈ O), t ∈ S ⊢ ¬(b ∈ P ) Brian Prove the sequent \u0010 Brian \u0011 using only the rules of the \u0010Reference Card\u0011. Indicate which rules you use. Answer: 4 2 Set Theory and Modeling Translate the following sequent into predicate logic. 2.1 ( /4 credits)More precisely, apply the rewriting rules starting at page 32 of the \u0010Reference Card\u0011 (from left to right) until none of them can be applied anymore. ⊢ r[dom(r)] ⊆ ran(r) Answer: 5 Consider the statement:2.2 ( /5 credits) Everyone who is older than Alex is older than Betsy. Only senior citizens are older than Betsy. Therefore only senior citizens are older than Alex. Formalize this statement, i.e., translate it into a sequent. Use the following carrier sets, constants, and axioms: • P : carrier set of persons • S: set of senior citizens, S ⊆ P • a: Alex, a ∈ P • b: Betsy, b ∈ P • O: O contains x ↦→ y if and only if x is older than y. Moreover O ∈ P ↔ P . Hint: You may or may not use the following structure for the sequent: ∀x· ( ??? ⇒ ??? ) ∀x· ( ??? ⇒ ??? ) ⊢ ∀x· ( ??? ⇒ ??? ) Answer: 6 Provide a solution to Question 2.2 of the following form: 2.3 Advanced ( /5 credits) (If your solution to Question 2.2 has already the required form, then leave the answerbox empty.) ??? ⊆ ??? ??? ⊆ ??? ⊢ ??? ⊆ ??? You must not use set comprehension, i.e., set expressions of the form {· | ·}. Answer: 7 3 Relations Consider the following sets and relations: A = {0, 1, 2, 3} B = {2, 5, 7} r = {1 ↦→ 2, 2 ↦→ 5, 2 ↦→ 7} s = {2 ↦→ 2, 3 ↦→ 7} Write the following sets in enumerated form.3.1 ( /6 credits) (We do not require a proof or an explanation.) 1. r[{1}] = { ??? } 2. r ▹− s = { ??? } 3. ran(s) ▹ r = { ??? } 4. advanced: r−1 ◃− {0, 1} = { ??? } 5. advanced: (s−1; r)[{2}] = { ??? } Answer: 8 Consider the following statements: 3.2 ( /8 credits) 1. r ∈ A ↦↣ B 2. s ∈ A ↣ B 3. s ∈ A ↦↠ B 4. s ∈ A ↦↣ B Which of the above statements hold and why? Give a short explanation for each statement. If the explanation is missing, you get no credits. Answer: 9 4 A Lock System on a River We consider a lock (German: Schleuse) on a river. The lock is one-way (from low to high water level). It has a lower and an upper gate and contains at most N ships at a time. The lock typically operates as follows: 1. The lower gate is open. 5. The upper gate opens. 2. Up to N ships enter the lock. 6. The ships leave the lock. 3. The lower gate closes. 7. The upper gate closes. 4. The lock is ˝lled. 8. The lock is drained. The context of the lock system is as follows: Carrier SetsGAT E_ ST AT ES Constants open, closed, N Properties prp0_1: GAT E_ ST AT ES = {open, closed} prp0_2: open ̸= closed prp0_3: N > 0 10 4.1 The Initial Model The initial model of the lock is as follows: Variables upper, lower, n Invariants inv0_1: n ∈ 0 .. N inv0_2: ??? The number of ships inside of the lock is n. The states of the upper and lower gates are upper and lower, respectively. INITIALISATION begin upper := closed lower := open n := 0 end enter any m where m > 0 n + m ≤ N lower = open then n := n + m end leave any m where m > 0 n − m ≥ 0 upper = open then n := n − m end open_upper when upper = closed lower = closed n > 0 then upper := open end close_upper when upper = open n = 0 then upper := closed end open_lower when upper = closed lower = closed n = 0 then lower := open end close_lower when lower = open n > 0 then lower := closed end There are six events: • enter and leave : ships enter or leave the lock. • open_lower , close_lower , open_upper , close_upper : the lower or upper gate opens or closes. 11 The initial model should satisfy the following safety requirement (SAF-1) :4.1.1 ( /2 credits) \u0010The two gates are never open at the same time.\u0011 Formulate the invariant inv0_2 capturing the requirement SAF-1. Answer: State the INV proof obligation for the invariant inv0_2 and the event open_upper.4.1.2 ( /3 credits) You do not need to write down the properties and invariants in the hypotheses of the proof obligation. (You do not need to prove the obligation.) Answer: 12 Another safety requirement is SAF-2 : \u0010A ship does not remain forever in the lock.\u0011 4.1.3 Advanced ( /4 credits) Suppose we drop the second guard ( n = 0) of close_upper . Explain why the resulting machine does not satisfy SAF-2. Hint: Describe an undesirable in˝nite sequence of events (starting with INITIALISATION ) that is now possible. Answer: 4.2 The First Re˝nement In the ˝rst re˝nement we add the water level water ∈ {0, 1} ( 0 means low, and 1 means high), and the events ˝ll and drain . The event ˝ll ˝lls the lock with water. The event drain drains water from the lock. Also note that enter has changed. Variables upper, lower, n, water Invariants inv1_1: water ∈ {0, 1} inv1_2: water = .... ⇒ upper = ... inv1_3: water = .... ⇒ lower = .... enter when n < N lower = open then n := n + 1 end leave · · · close_upper · · · open_upper when upper = closed ??? n > 0 then upper := open end open_lower · · · close_lower · · · ˝ll when water = 0 lower = closed n > 0 then water := 1 end drain when water = 1 upper = closed n = 0 then water := 0 end 13 The main safety requirement introduced in this re˝nement is SAF-3 :4.2.1 ( /3 credits) \u0010A gate is closed if the water level on both sides of the gate is di˙erent.\u0011 Fill out inv1_2 and inv1_3 (on the previous page) capturing SAF-3. Answer: Fill out the missing guard of open_upper.4.2.2 ( /2 credits) The model has to satisfy all the requirements mentioned so far. Answer: We want to show that enter re˝nes its abstract version. For this consider the following4.2.3 ( /5 credits) (simpli˝ed) variant of EQL_REF : (abstract) Event any x where G then v := E end (concrete) Event when H then v := F end Properties : P Concrete and Abstract Invariants : I, J Concrete Guards : H ⊢ ∃x·(G ∧ (E = F )) EQL_REF' Note that v is a variable that appears both in the initial model and the re˝nement. 14 State EQL_REF' for the event enter. You do not need to write down the properties and invariants in the hypotheses of the proof obligation. (You do not need to prove the obligation.) Answer: Make a suggestion of how to apply XST_R to the sequent of the previous question 4.2.4 ( /2 credits)as the ˝rst step of a successful proof. It su˚ces to write down the goal of the resulting sequent. Answer: 15 5 Sequential Program: An Array Filter We develop a program computing the set of natural numbers stored in an array of integers. 5.1 The Context The context de˝nes the integer array f of size n. Constants n, f Properties prp0_1: n ∈ N1 prp0_2: f ∈ 1 .. n → Z 5.2 The Initial Model The initial model is as follows: Variables S Invariants inv0_1: S ∈ P(N) INITIALISATION begin S := ∅ end ˝lter begin S := ??? end The event ˝lter stores the result of the algorithm in S. Formally specify the missing expression in the action of the event ˝lter.5.2.1 ( /3 credits) Hint: The expression stands for the set of natural numbers stored in the input array f . Answer: 5.3 The Re˝nement The gluing invariant inv1_3 indicates the relationship between the original variable S and the new variables: when the algorithm has ˝nished, then S = T . • m is the last index that we have looked at. • T is the set of natural numbers that we have found so far. • f inished indicates whether the algorithm has ˝nished. • The new events progress_1 and progress_2 handle the case when we have not looked at the last index n, yet. 16 Variables T, m, f inished Invariants inv1_1: m ∈ 0 .. n inv1_2: T = ??? inv1_3: f inished = TRUE ⇒ S = T inv1_4: f inished = TRUE ⇒ m = n INITIALISATION begin T := ∅ m := 0 f inished := FALSE end ˝lter when ¬(m < n) then f inished := TRUE end progress_1 when m < n f (m + 1) ∈ N then T := T ∪ {f (m + 1)} m := m + 1 end progress_2 when m < n ¬(f (m + 1) ∈ N) then m := m + 1 end State the proof obligation INV_REF for the event ˝lter and inv1_3. 5.3.1 ( /4 credits)Do not use abbreviations. You do not have to ˝ll out the box in inv1_2 . Answer: 17 Complete invariant inv1_2.5.3.2 Advanced ( /3 credits) Clearly, all the events have to preserve invariant inv1_2 . Answer: Propose a variant that allows to prove convergence of the two new events.5.3.3 ( /2 credits) Answer: Write down the proof obligation DLF_REF.5.3.4 ( /3 credits) You do not need to write down the properties and invariants in the hypotheses of the proof obligation. Hint: the guard of the abstract event ˝lter is ⊤. Answer: 18 Derive a sequential program by applying the merging rules step-by-step. 5.3.5 ( /6 credits)Indicate clearly which rules you apply to which events. Answer: 19 Answer continued: 20","libVersion":"0.5.0","langs":""}