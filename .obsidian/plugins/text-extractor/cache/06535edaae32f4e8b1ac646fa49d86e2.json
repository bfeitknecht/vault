{"path":"sem1/A&D/VRL/extra/kenji/A&D-kenji-w07.pdf","text":"Graph Cheatsheet f¨ur Algorithmen und Datenstrukturen Kenji Nakano, HS23, Stand 11.11.2023 Keine Garantie f¨ur Vollst¨andigkeit oder Korrektheit Deﬁnition Graph Ein Graph ist ein Tupel G =(V, E) wobei • V := Knotenmenge (vertices) • E := Kantenmenge (edges) jede Kante ist ein ungeordnetes Paar zweier Knoten u 6= v, e = {u, v} 2 E (Kurzform: uv) Weg, Pfad, Zyklus • Weg: Folge von benachbarten Knoten (engl. walk) • Pfad: Weg ohne wiederholte Knoten • Zyklus: Weg mit v0 = vl,l \u0000 2 (engl. closed walk) Die L¨ange einers Wegs bzw. Pfads ist die Anzahl an Kanten, nicht die Anzahl an Knoten Begri↵e • u, v adjazent/benachbart , e = {u, v} 2 E • e 2 E inzident/anliegend zu v ,9u 2 V , so dass e = {u, v} • deg(u) = Knotengrad von u (Anzahl Nachbarn) • u erreicht v ,9 Weg zwischen u und v (engl. reachable) ¨Aquivalenzrelation (symmetrisch, reﬂexiv, transitiv) • Zusammenhangskomponente (ZHK): ¨Aquivalenzklasse der ”erreichbar”-relation (engl. connected component) • Graph ist zusammenh¨angend , es gibt gibt genau eine ZHK Handschlag Lemma: X v2V deg(v)= 2 ·|E| Eulerweg, Hamiltonpfad, Eulerzyklus • Eulerweg: Weg welcher jede Kante genau einmal enth¨alt (engl. Eulerian walk) • Hamiltonpfad: Pfad der jeden Knoten genau einmal enth¨alt • Eulerzyklus: Zyklus welcher jede Kante genau einmal enth¨alt 9 Eulerzyklus , alle Knotengrade gerade und alle Kanten in einer ZHK 1 Algorithmus Eulertour / Eulerwalk Euler(G): • Input: Graph G =(V, E) • Output: Liste Z mit Eulerzyklus, falls existiert. • Laufzeit: O(m) EulerWalk(u): • Input: Knoten u 2 V • Output: Keiner • Laufzeit: O(m) Algorithm 1 Euler(G) Require: Alle Kanten unmarkiert 1: Z Leere Liste 2: EulerWalk(u0) . f¨ur u0 2 V beliebig 3: return Z Algorithm 2 EulerWalk(u) 1: for uv 2 E, nicht markiert do 2: markiere Kante uv 3: EulerWalk(v) 4: Z Z [ {u} 2","libVersion":"0.5.0","langs":""}