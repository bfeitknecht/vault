{"path":"sem1/EProg/VRL/extra/slides/EProg_s03_ebnf-recursion.pdf","text":"252-0027 Einführung in die Programmierung 1.0 EBNF Thomas R. Gross Department Informatik ETH Zürich § EBNF Regel besteht aus: § Linke-Seite (Left-Hand Side, LHS) § Rechte-Seite (Right-Hand Side, RHS) § ⟸ (trennt LHS von RHS, ausgesprochen «ist definiert als») § LHS § Ein Wort (kursiv, kleingeschrieben) – der Name der EBNF Regel § RHS § Die genaue Beschreibung für den Namen (d.h., der LHS) durch § Zeichen (stellen das Zeichen da, d.h. wir erwarten dieses Zeichen und kein anderes) – nicht kursiv § Namen (von EBNF Regeln) – kursiv und kleingeschrieben § Kombinationen der vier Kontrolelemente («control forms») (auf folgenden Seiten) 2 LHS ⟸ RHS Control forms (zum Kombinieren) § Aufreihung § Auswahl, Option (Entscheidung) § Wiederholung (kann auch Option «0 Wiederholungen» sein) § Rekursion 3 1.5 Rekursion 4 Positive (ganze) Zahlen § EBNF Regel pos_integer soll ganze Zahlen ohne Vorzeichen beschreiben § Wir haben eine Regel für Ziffern: digit ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Erster Versuch pos_integer ⟸ digit ....... 5 Mehr davon Positive (ganze) Zahlen § EBNF Regel pos_integer soll ganze Zahlen ohne Vorzeichen beschreiben § Wir haben eine Regel für Ziffern: digit ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Erster Versuch pos_integer ⟸ digit ....... § Einfache Wiederholung nicht was wir wollen 6 pos_integer ⟸ { digit } 𝛆 ist legale positive Zahl Positive (ganze) Zahlen § EBNF Regel pos_integer soll positive Zahlen ohne Vorzeichen beschreiben § Wir haben eine Regel für Ziffern: digit ⟸ 0| 1| 2| 3| 4| 5| 6| 7| 8| 9 § Erster Versuch pos_integer ⟸ digit ....... § Einfache Wiederholung nicht was wir wollen § Aber vielleicht ein Anfang 7 pos_integer ⟸ { digit } 𝛆 ist legale positive Zahl Option – kann, muss aber nicht dabei sein § Was wenn wir den Namen einer Regel auf der rechten Seite dieser Regel verwenden? § Mit Option – können alle ganzen Zahlen ohne Vorzeichen beschreiben § pos_integer ⟸ digit [ pos_integer ] 8 pos_integer ⟸ digit [ pos_integer ] § Beispiele für legale Symbole 9 pos_integer digit pos_integer digit digit pos_integer digit pos_integer digit pos_integer digit digit pos_integer digit digit digit Option nicht genommen Option nicht genommen Option nicht genommen Name der LHS auch auf der RHS § Es muss (mindestens) einen Weg geben, Namen der LHS durch eine RHS ohne diesen Namen zu ersetzen § pos_integer ⟸ digit [ pos_integer ] § Nicht-Wahl der Option: Nur digit auf der RHS § Andere Möglichkeit pos_integer ⟸ ( digit pos_integer ) | 𝛆 11 pos_integer digit pos_integer digit digit pos_integer digit digit 𝛆 digit digit pos_integer digit pos_integer digit 𝛆 digit Ohne Klammern: Aufreihung bindet stärker als Auswahl Name der LHS auch auf der RHS § Es muss (mindestens) einen Weg geben, Namen der LHS durch eine RHS ohne diesen Namen zu ersetzen § pos_integer ⟸ digit [ pos_integer ] § Nicht-Wahl der Option: Nur digit auf der RHS § Andere Möglichkeit pos_integer ⟸ digit pos_integer | 𝛆 12 pos_integer digit pos_integer digit digit pos_integer digit digit 𝛆 digit digit pos_integer digit pos_integer digit 𝛆 digit Lässt 𝛆 als «Zahl» zu … Rekursive Regel § Regel ist rekursiv: ihr Name wird in der Definition verwendet pos_integer ⟸ digit [ pos_integer ] § Beschreibung ist rekursiv: mindestens eine rekursive Regel 13 Rekursion § Rekursive Beschreibung enthält rekursive Regeln § Eine Regel ist direkt rekursiv wenn ihr Name in der Definition verwendet wird § Also die LHS erscheint auch auf der RHS § r ⟸ | A r § r ⟸ | ( A r ) falls Sie Unklarheit vermeiden wollen § r ⟸ 𝛆 | ( A r ) falls Sie alle Unklarheiten vermeiden wollen § EBNF Description r beschreibt Folge von null oder mehr A Zeichen 1416 Aus dem Archiv … Rekursive Regel § Regel ist rekursiv: ihr Name wird in der Definition verwendet pos_integer ⟸ digit [ pos_integer ] § Hätten wir auch anders machen können § pos_integer ⟸ digit { digit } 17 Diskussion § Warum der Aufwand? § Wären nicht (in den Beispielen) § r ⟸ { A } § pos_number ⟸ digit { digit } gut genug? § Kann jede Rekursion durch Wiederholung(en) ausgedrückt werden? § Kann jede Wiederholung durch Rekursion ausgedrückt werden? 1822 Diskussion § Kann jede Rekursion durch Wiederholung(en) ausgedrückt werden? § Nein § Finden Sie Beschreibung für An Bn (n Zahl ≥ 0: also gleiche Anzahl A, B) EBNF Description balance balance ⟸ 𝛆 | A balance B balance ⟸ 𝛆 | ( A balance B ) 23 Diskussion § Kann jede Wiederholung durch Rekursion ausgedrückt werden? § Ja § Werden später noch mehr über Rekursion vs. Wiederholung(en) erfahren 28 § Direkte Rekursion § r ⟸ A | A r § Indirekte Rekursion § Folge von Regeln N1 … Nk so dass N2 auf der RHS von N1, N3 auf der RHS von N2, … und N1 auf der RHS von Nk erscheint name2 ⟸ ( name1 B ) | ( X B ) name1 ⟸ A name2 30 § Direkte Rekursion § r ⟸ A | A r § Indirekte Rekursion § Folge von Regeln N1 … Nk so dass N2 auf der RHS von N1, N3 auf der RHS von N2, … und N1 auf der RHS von Nk erscheint name2 ⟸ name1 B | X B name1 ⟸ A name2 § Beschreibung von name1: AXB, AAXBB, .... 32 Ohne Klammern: Aufreihung bindet stärker als Auswahl Zusammenfassung: Ableitungsbaum, Tabellen, Graphen § Ein Ableitungsbaum oder eine Tabelle demonstrieren, dass ein Symbol legal gemäss einer EBNF Beschreibung ist. § In beiden Fällen kürzen wir die Schritte manchmal ab wenn keine Verwechslungsgefahr besteht. § Ein (EBNF) Graph ist eine andere Darstellung einer EBNF Beschreibung § Ein Pfad durch den Graphen entspricht einem Symbol das legal ist § Umgekehrt: um zu zeigen, dass ein Symbol legal ist, finden wir einen Pfad § Graph für rekursive Beschreibung: nicht elegant (muss endlich sein!) 34 r ⟸ B | A r § Ist AAB legal? -- Tabelle 35 Regel r Anfang jeder Tabelle B | A r Ersetzen von r durch RHS (1) A r 2. Auswahlmöglichkeit gewählt (2) A ( B | A r ) Ersetzen von r durch RHS (1), () zur Vermeidung von Missverständnissen A A r 2. Auswahlmöglichkeit gewählt (2) A A ( B | A r ) Ersetzen von r durch RHS (1) A A B 1. Auswahlmöglichkeit gewählt (2) r ⟸ B | A r § Ist AAB legal? -- Ableitungsbaum (Version 1) § In jeder Zeile wird eine EBNF Beschreibung durch eine rechte Seite ersetzt (hier immer A r, bis auf den letzten Schritt) 36 r B A r B A r B A r Auswahl getroffen § Ist AAB legal? -- Ableitungsbaum (Version 2) § Wir fassen Schritt 1 (Ersetzen der RHS) mit Schritt 2 (Auswahl treffen) zusammen § Unwichtiges lassen wir weg 37 r B A r B A r B A r § Ist AA legal? -- Ableitungsbaum (Version 2) § Wir fassen Schritt 1 (Ersetzen der RHS) mit Schritt 2 (Auswahl treffen) zusammen § Unwichtiges lassen wir weg 38 r A r A r r ⟸ 𝛆 | A r oder r ⟸ | A r EBNF Beispiel (i1) nochmal 40 Beispiel 41 0 1 2 3 4 5 6 7 8 9 digit + − integer digit digit Substitution § Können einen Syntax Graphen in einen anderen einsetzen § «interne» Namen verschwinden § EBNF Beschreibung § Alle Graphen für Regeln der Beschreibung zusammen 46 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 + − integer Was für Symbole sind legal? 1. 2. 49 3. Eine EBNF Regel zur Beschreibung der Menge der legalen Symbole. g ⇐ ??? C A B 51 Was für Symbole sind legal? 2. 52 Eine EBNF Regel zur Beschreibung der Menge der legalen Symbole. g ⇐ ??? C A B Was für Symbole sind legal? 56 3. Eine EBNF Regel zur Beschreibung der Menge der legalen Symbole. g ⇐ ??? PollWas für Symbole sind legal? 1. 2. 57 3. Eine EBNF Regel zur Beschreibung der Menge der legalen Symbole. g ⇐ ??? C A B g ⇐ { A | B } g ⇐ A B | C g ⇐ ( A B ) | C g ⇐ { A } | { B } Poll EBNF Geschichte § BNF enthielt erst nur Rekursion und Auswahl § Diese sind essential § Option und Wiederholung von Niklaus Wirth hinzugefügt § Daher «E» – extended § Machen Beschreibung einfacher zu lesen § Motivation: Beschreibung von Pascal 62 Nochmal integer 63 EBNF § Das war’s. 64","libVersion":"0.3.2","langs":""}