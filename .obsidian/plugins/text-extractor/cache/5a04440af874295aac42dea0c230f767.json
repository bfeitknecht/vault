{"path":"sem2/DDCA/VRL/slides/DDCA-L07-sequential-logic-design.pdf","text":"Carnegie Mellon 1 Digital Design and Computer Architecture Mohammad Sadrosadati Frank K. G√ºrkaynak Adapted from Digital Design and Computer Architecture, David Money Harris & Sarah L. Harris ¬©2007 Elsevier http://safari.ethz.ch/ddca Sequential Logic Design Carnegie Mellon 2 What will we learn? ÔÇ¢ Combinational and Sequential Circuits ÔÇ¢ How can a circuit remember a value ÔÇ¢ Different types of memorizing elements ÔÇ¢ Finite State Machines Carnegie Mellon 3 Introduction ÔÇ¢ Outputs of combinational circuit depend ONLY on current input values. ÔÇ¢ Outputs of sequential logic depend on current and prior input values ‚Äì it has memory. ÔÇ¢ Some definitions: ÔÇß State: all the information about a circuit necessary to explain its future behavior ÔÇß Latches and flip-flops: state elements that store one bit of state ÔÇß Synchronous sequential circuits: combinational logic followed by a bank of flip-flops Carnegie Mellon 4 Sequential == Combinational + State ÔÇ¢ Largest part of a sequential circuit is combinational ÔÇß The only additional thing we need to learn is to store the state ÔÇß Defining flip-flops (latches), registers should do the trick ÔÇ¢ Sequential circuits divide the operation into time slots ÔÇß At every time slot inputs (if there are any) are taken ÔÇß Present state and inputs are used to calculate the next state ÔÇß The next state is saved in the flip-flops (registers) ÔÇ¢ How fast we can finish the operation? ÔÇß The clock signal is used to move from one state to the next state ÔÇß I.e. a 2 GHz clock has time steps of 500ps. ÔÇß The work within a time slot is done by a combinational circuit. Carnegie Mellon 5 Datapath vs Finite State Machine Carnegie Mellon 6 RTL design ÔÇ¢ RTL is a generic way of defining digital circuits ÔÇß State is stored in registers ÔÇß Every time slot, inputs and present state calculates the next state ÔÇß Next state is stored in a register. ÔÇß The clock moves the circuit from the present state to next state ÔÇ¢ RTL defines datapath circuits ‚Ä¶ ÔÇß They process data and do the main work ÔÇ¢ ‚Ä¶ and Finite State machines ÔÇß Generate control signals for the datapath ÔÇ¢ The distinction makes life easier Carnegie Mellon 7 State Elements ÔÇ¢ The state of a circuit influences its future behavior ÔÇ¢ State elements store state ÔÇ¢ Bistable circuits ÔÇß SR Latch ÔÇß D Latch ÔÇß D Flip-flop Carnegie Mellon 8 How can a circuit remember? ÔÇ¢ Bistable circuits can have two distinct states ÔÇß Once they are in one state, they will remain there. ÔÇ¢ The Loop keeps the state stable 0 1 0 = State 0 Carnegie Mellon 9 How can a circuit remember? ÔÇ¢ Bistable circuits can have two distinct states ÔÇß Once they are in one state, they will remain there. ÔÇ¢ The Loop keeps the state stable 1 0 1 = State 1 Carnegie Mellon 10 How can a circuit remember? ÔÇ¢ Bistable circuits can have two distinct states ÔÇß Once they are in one state, they will remain there. ÔÇ¢ But how can we move from one state to another? Carnegie Mellon 11 How can a circuit remember? ÔÇ¢ Bistable circuits can have two distinct states ÔÇß Once they are in one state, they will remain there. ÔÇ¢ But how can we move from one state to another? ÔÇß We add one switch to break the loop and at the same time add another switch that connects an input to the circuit Carnegie Mellon 12 The D Latch ÔÇ¢ D Latch is the basic bi-stable circuit used in modern CMOS. ÔÇß The clock controls the switches. Only one is active at a time. ÔÇß Traditionally the input is called D (Data) and the output Q ùë´ ùë™ùíçùíå ùë∏ Carnegie Mellon 13 The D Latch has two modes ÔÇ¢ Latch mode, loop is active, input disconnected, keeps state ùë´ ùë∏ ùë∏ùë∏ Carnegie Mellon 14 The D Latch has two modes ÔÇ¢ Latch mode, loop is active, input disconnected, keeps state ÔÇ¢ Transparent mode, loop is inactive, input is connected and propagates to output ùë´ ùë∏ ùë∏ ùë´ ùë´ ùë´ùë´ ùë∏ Carnegie Mellon 15 Summary D Latch ÔÇ¢ Simple bi-stable circuit ÔÇß Can be used to store a 0 or a 1. ÔÇ¢ Has two modes ÔÇß Transparent mode: input propagates to output ÔÇß Latch mode: the output is stored (also called opaque mode) ÔÇ¢ The clock controls the modes of operation. ÔÇß Depending on the type, it might be latch is transparent when Clk=1 or latch is transparent when Clk=0 Carnegie Mellon 16 Rising edge trigerred D Flip-Flop ÔÇ¢ Two inputs: CLK, D ÔÇ¢ Function ÔÇß The flip-flop ‚Äúsamples‚Äù D on the rising edge of CLK ÔÇß When CLK rises from 0 to 1, D passes through to Q ÔÇß Otherwise, Q holds its previous value ÔÇß Q changes only on the rising edge of CLK ÔÇ¢ A flip-flop is called an edge-triggered device because it is activated on the clock edge D Flip-Flop Symbols D Q Q Carnegie Mellon 17 D Flip-Flop Internal Circuit ÔÇ¢ Two back-to-back latches (L1 and L2) controlled by complementary clocks ÔÇß When CLK = 0 ÔÇß L1 is transparent ÔÇß L2 is opaque ÔÇß D passes through to N1 ÔÇß When CLK = 1 ÔÇß L2 is transparent ÔÇß L1 is opaque ÔÇß N1 passes through to Q ÔÇ¢ Thus, on the edge of the clock (when CLK rises from 0 1) ÔÇ¢ D passes through to Q CLK D Q Q CLK D Q Q Q Q D N1 CLK L1 L2 Carnegie Mellon 18 D Flip-Flop vs. D Latch CLK D Q Q D Q Q Carnegie Mellon 19 D Flip-Flop vs. D Latch CLK D Q Q D Q Q CLK D Q (latch) Q (flop) Carnegie Mellon 20 Registers ÔÇ¢ Multiple parallel flip-flops that store more than 1 bit CLK D Q D Q D Q D Q D 0 D 1 D 2 D 3 Q0 Q1 Q2 Q3 D3:0 4 4 CLK Q3:0 Carnegie Mellon 21 Enabled Flip-Flops ÔÇ¢ Inputs: CLK, D, EN ÔÇß The enable input (EN) controls when new data (D) is stored ÔÇ¢ Function ÔÇß EN = 1: D passes through to Q on the clock edge ÔÇß EN = 0: the flip-flop retains its previous state Internal Circuit D Q CLKEN D Q 0 1 D Q EN Symbol Carnegie Mellon 22 Resettable Flip-Flops ÔÇ¢ Inputs: CLK, D, Reset ÔÇß The Reset is used to set the output to 0. ÔÇ¢ Function: ÔÇß Reset = 1: Q is forced to 0 ÔÇß Reset = 0: the flip-flop behaves like an ordinary D flip-flop Symbols D Q Reset r Carnegie Mellon 23 Resettable Flip-Flops ÔÇ¢ Two types: ÔÇß Synchronous: resets at the clock edge only ÔÇß Asynchronous: resets immediately when Reset = 1 ÔÇ¢ Asynchronously resettable flip-flop requires changing the internal circuitry of the flip-flop (see Exercise 3.10) ÔÇ¢ Synchronously resettable flip-flop? Carnegie Mellon 24 Resettable Flip-Flops ÔÇ¢ Two types: ÔÇß Synchronous: resets at the clock edge only ÔÇß Asynchronous: resets immediately when Reset = 1 ÔÇ¢ Asynchronously resettable flip-flop requires changing the internal circuitry of the flip-flop (see Exercise 3.10) ÔÇ¢ Synchronously resettable flip-flop? Internal Circuit D Q CLK D Q Reset Carnegie Mellon 25 Settable Flip-Flops ÔÇ¢ Inputs: CLK, D, Set ÔÇ¢ Function: ÔÇß Set = 1: Q is set to 1 ÔÇß Set = 0: the flip-flop behaves like an ordinary D flip-flop Symbols D Q Set s Carnegie Mellon 26 Finite State Machine (FSM) consists of: ÔÇ¢ State register: ÔÇß Store the current state and ÔÇß Load the next state at the clock edge ÔÇß Sequential circuit ÔÇ¢ Next state logic ÔÇß Determines what the next state will be ÔÇß Combinational circuit ÔÇ¢ Output logic ÔÇß Generates the outputs ÔÇß Combinational Circuit Next State Current State S‚Äô S CLK CL Next State Logic Next StateCL Output Logic Outputs Carnegie Mellon 27 Finite State Machine (FSM) ÔÇ¢ FSMs get their name because a circuit with k registers can be in one of a finite number (2k) of unique states. Carnegie Mellon 28 Finite State Machines (FSMs) ÔÇ¢ Next state is determined by the current state and the inputs ÔÇ¢ Two types of finite state machines differ in the output logic: ÔÇß Moore FSM: outputs depend only on the current state ÔÇß Mealy FSM: outputs depend on the current state and the inputs CLK M Nk knext state logic output logic Moore FSM CLK M Nk knext state logic output logic inputs inputs outputs outputs state state next state next state Mealy FSM Carnegie Mellon 29 Finite State Machine Example ÔÇ¢ Traffic light controller ÔÇß 2 inputs: Traffic sensors: TA, TB (TRUE when there‚Äôs traffic) ÔÇß 2 outputs: Lights: LA, LB TA LA TA LB TB TB LA L B Academic Ave.BravadoBlvd. Dorms Fields Dining Hall Labs Carnegie Mellon 30 FSM Black Box ÔÇ¢ Inputs: CLK, Reset, TA, TB ÔÇ¢ Outputs: LA, LB TA TB L A L B CLK Reset Traffic Light Controller Carnegie Mellon 31 FSM State Transition Diagram ÔÇ¢ Moore FSM: outputs labeled in each state ÔÇß States: Circles ÔÇß Transitions: Arcs S0 L A: green L B: red Reset Carnegie Mellon 32 FSM State Transition Diagram ÔÇ¢ Moore FSM: outputs labeled in each state ÔÇß States: Circles ÔÇß Transitions: Arcs TA LA TA LB TB TB LA L B Academic Ave.BravadoBlvd. Dorms Fields Dining Hall Labs S0 L A: green L B: red S1 L A: yellow L B: red S3 L A: red L B: yellow S2 L A: red L B: green TATA TB TB Reset Carnegie Mellon 33 FSM State Transition Table Current State Inputs Next State S TA TB S' S0 0 X S0 1 X S1 X X S2 X 0 S2 X 1 S3 X X Carnegie Mellon 34 FSM State Transition Table Current State Inputs Next State S TA TB S' S0 0 X S1 S0 1 X S0 S1 X X S2 S2 X 0 S3 S2 X 1 S2 S3 X X S0 Carnegie Mellon 35 FSM Encoded State Transition Table Current State Inputs Next State S1 S0 TA TB S'1 S'0 0 0 0 X 0 0 1 X 0 1 X X 1 0 X 0 1 0 X 1 1 1 X X State Encoding S0 00 S1 01 S2 10 S3 11 Carnegie Mellon 36 FSM Encoded State Transition Table Current State Inputs Next State S1 S0 TA TB S'1 S'0 0 0 0 X 0 1 0 0 1 X 0 0 0 1 X X 1 0 1 0 X 0 1 1 1 0 X 1 1 0 1 1 X X 0 0 State Encoding S0 00 S1 01 S2 10 S3 11 Carnegie Mellon 37 FSM Encoded State Transition Table Current State Inputs Next State S1 S0 TA TB S'1 S'0 0 0 0 X 0 1 0 0 1 X 0 0 0 1 X X 1 0 1 0 X 0 1 1 1 0 X 1 1 0 1 1 X X 0 0 State Encoding S0 00 S1 01 S2 10 S3 11 S1‚Äô = (S1 ‚àô S0) + (S1 ‚àô S0 ‚àô TB) + (S1 ‚àô S0 ‚àô TB) S0‚Äô = (S1 ‚àô S0 ‚àô TA) + (S1 ‚àô S0 ‚àô TB) Carnegie Mellon 38 FSM Encoded State Transition Table Current State Inputs Next State S1 S0 TA TB S'1 S'0 0 0 0 X 0 1 0 0 1 X 0 0 0 1 X X 1 0 1 0 X 0 1 1 1 0 X 1 1 0 1 1 X X 0 0 State Encoding S0 00 S1 01 S2 10 S3 11 S1‚Äô = S1 xor S0 Simplification (Inspection or K-Maps) S0‚Äô = (S1 ‚àô S0 ‚àô TA) + (S1 ‚àô S0 ‚àô TB) Carnegie Mellon 39 FSM Output Table Current State Outputs S1 S0 LA LB 0 0 0 1 1 0 1 1 Carnegie Mellon 40 FSM Output Table Current State Outputs S1 S0 LA LB 0 0 green red 0 1 yellow red 1 0 red green 1 1 red yellow Output Encoding green 00 yellow 01 red 10 Carnegie Mellon 41 FSM Output Table Current State Outputs S1 S0 LA1 LA0 LB1 LB0 0 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 0 1 1 1 0 0 1 Output Encoding green 00 yellow 01 red 10 Carnegie Mellon 42 FSM Output Table Current State Outputs S1 S0 LA1 LA0 LB1 LB0 0 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 0 1 1 1 0 0 1 Output Encoding green 00 yellow 01 red 10 LA1 = S1 LA0 = S1 ‚àô S0 LB1 = S1 LB0 = S1 ‚àô S0 Carnegie Mellon 43 FSM Schematic: State Register S1 S0 S'1 S'0 CLK state register Reset r Carnegie Mellon 44 FSM Schematic: Next State Logic S1 S0 S'1 S'0 CLK next state logic state register Reset TA TB inputs S1 S0 r Carnegie Mellon 45 FSM Schematic: Output Logic S1 S0 S'1 S'0 CLK next state logic output logicstate register Reset L A1 L B1 L B0 L A0 TA TB inputs outputs S1 S0 r Carnegie Mellon 46 FSM Timing Diagram S0 L A: green L B: red S1 L A: yellow L B: red S3 L A: red L B: yellow S2 L A: red L B: green TATA TB TB Reset CLK Reset TA TB S'1:0 S1:0 L A1:0 L B1:0 Cycle 1 Cycle 2 Cycle 3 Cycle 4 Cycle 5 Cycle 6 Cycle 7 Cycle 8 Cycle 9 Cycle 10 S1 (01) S2 (10) S3 (11) S0 (00) t (sec) ?? ?? S0 (00) S0 (00) S1 (01) S2 (10) S3 (11) S1 (01) ?? ?? 0 5 10 15 20 25 30 35 40 45 Green (00) Red (10) S0 (00) Yellow (01) Red (10) Green (00) Green (00) Red (10)Yellow (01) Carnegie Mellon 47 FSM State Encoding ÔÇ¢ Binary encoding: i.e., for four states, 00, 01, 10, 11 ÔÇ¢ One-hot encoding ÔÇß One state bit per state ÔÇß Only one state bit is HIGH at once ÔÇß I.e., for four states, 0001, 0010, 0100, 1000 ÔÇß Requires more flip-flops ÔÇß Often next state and output logic is simpler Carnegie Mellon 48 CLK M Nk knext state logic output logic Moore FSM CLK M Nk knext state logic output logic inputs inputs outputs outputs state state next state next state Mealy FSM Moore vs. Mealy FSM ÔÇ¢ Alyssa P. Hacker has a snail that crawls down a paper tape with 1‚Äôs and 0‚Äôs on it. The snail smiles whenever the last four digits it has crawled over are 1101. Design Moore and Mealy FSMs of the snail‚Äôs brain. Carnegie Mellon 49 reset Moore FSM S0 0 S1 0 S2 0 S3 0 S4 1 0 1 1 0 1 1 01 0 0 State Transition Diagrams (snail - 1101) ÔÇ¢ Mealy FSM: arcs indicate input/output reset S0 S1 S2 S3 0/0 1/0 1/0 0/0 1/1 0/01/0 0/0 Mealy FSM Carnegie Mellon 50 Moore FSM State Transition Table Current State Inputs Next State S2 S1 S0 A S'2 S'1 S'0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 0 0 1 0 0 1 State Encoding S0 000 S1 001 S2 010 S3 011 S4 100 Carnegie Mellon 51 Moore FSM State Transition Table Current State Inputs Next State S2 S1 S0 A S'2 S'1 S'0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 State Encoding S0 000 S1 001 S2 010 S3 011 S4 100 Carnegie Mellon 52 Moore FSM Output Table Current State Output S2 S1 S0 Y 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 Carnegie Mellon 53 Moore FSM Output Table Current State Output S2 S1 S0 Y 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 Y = S2 Carnegie Mellon 54 Mealy FSM State Transition and Output Current State Input Next State Output S1 S0 A S'1 S'0 Y 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 State Encoding S0 00 S1 01 S2 10 S3 11 Carnegie Mellon 55 Mealy FSM State Transition and Output Current State Input Next State Output S1 S0 A S'1 S'0 Y 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 1 1 0 0 1 0 0 1 1 0 1 0 1 1 0 0 1 1 0 0 0 0 1 1 1 0 1 1 State Encoding S0 00 S1 01 S2 10 S3 11 Carnegie Mellon 56 Moore FSM Schematic S2 S1 S0 S'2 S'1 S'0 Y CLK Reset A S2S1S0 Carnegie Mellon 57 Mealy FSM Schematic S'1 S'0 CLK Reset S1 S0 A Y S0 S1 Carnegie Mellon 58 Moore and Mealy Timing Diagram Mealy Machine Moore Machine CLK Reset A S Y S Y Cycle 1 Cycle 2 Cycle 3 Cycle 4 Cycle 5 Cycle 6 Cycle 7 Cycle 8 Cycle 9 Cycle 10 S0 S3?? S1 S2 S4 S4S2 S3 S0 1 1 0 1 1 0 1 01 S2 S0 S3?? S1 S2 S1 S1S2 S3 S0S2 Carnegie Mellon 59 Why do we care if FSM is Moore/Mealy? ÔÇ¢ Is it to ask questions in an exam? ÔÇß Traditionally, Frank always asks a Mealy/Moore question ÔÇ¢ Remember combinational circuits ÔÇß You are not supposed to have loops ÔÇ¢ If two FSMs are connected, there will be NO loop if ÔÇß At least one of them is MOORE ÔÇ¢ There CAN BE a combinational loop if ÔÇß Both FSMs are MEALY type. data_ready data_received FSM1 ready_out completed_in FSM2new_data data_received Carnegie Mellon 60 Factoring State Machines ÔÇ¢ Break complex FSMs into smaller interacting FSMs ÔÇ¢ Example: Modify the traffic light controller to have a Parade Mode. ÔÇß The FSM receives two more inputs: P, R ÔÇß When P = 1, it enters Parade Mode and the Bravado Blvd. light stays green. ÔÇß When R = 1, it leaves Parade Mode ÔÇ¢ Designing complex FSMs is often easier if they can be broken down into multiple interacting simpler state machines such that the output of some machines is the input of others. This application of hierarchy and modularity is called factoring of state machines. Carnegie Mellon 61 Parade FSM Unfactored FSM Factored FSM Controller FSMT A T B L A L B P R Mode FSM Lights FSM P M Controller FSM TA TB L A L B R Carnegie Mellon 62 Unfactored FSM State Transition Diagram S0 LA: green L B: red S1 LA: yellow L B: red S3 L A: red L B: yellow S2 L A: red L B: green TA TA TB TB Reset S4 L A: green LB: red S5 L A: yellow LB: red S7 L A: red L B: yellow S6 L A: red L B: green TA TA P P P P P P R R R R R P R P TAP TAP P TAR TAR R TBR TBR Carnegie Mellon 63 Factored FSM State Transition Diagram S0 L A: green L B: red S1 L A: yellow L B: red S3 L A: red L B: yellow S2 L A: red L B: green TATA M + TB MTB Reset Lights FSM S0 M: 0 S1 M: 1 P Reset P Mode FSM R R Carnegie Mellon 64 FSM Design Procedure ÔÇß Prepare ÔÇß Identify the inputs and outputs ÔÇß Sketch a state transition diagram ÔÇß Write a state transition table ÔÇß Select state encodings ÔÇß For a Moore machine: ÔÇß Rewrite the state transition table with the selected state encodings ÔÇß Write the output table ÔÇß For a Mealy machine: ÔÇß Rewrite the combined state transition and output table with the selected state encodings ÔÇß Write Boolean equations for the next state and output logic ÔÇß Sketch the circuit schematic Carnegie Mellon 65 What Did We Learn? ÔÇ¢ D Latch is the basic memorizing element ÔÇß Transparent mode, copies input to output ÔÇß Latch mode, keeps content ÔÇ¢ (Rising) Edge Triggered Flip-Flops are more practical ÔÇß Input is copied to output when the clock rises from 0 to 1 ÔÇ¢ Finite State Machines ÔÇß Moore, output depends on only the current state ÔÇß Mealy, output depends on current state and the inputs. ÔÇ¢ Three Aspects of an FSM ÔÇß Holds the present state ÔÇß Calculate the next state ÔÇß Determine the outputs","libVersion":"0.3.1","langs":""}