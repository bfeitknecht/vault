{"path":"sem2/DDCA/VRL/slides/DDCA-L11_verilog-verification.pdf","text":"C a r ne gi e M e l l on 1 D i g i t a l D e s i g n a nd C o m put e r A r c hi t e c t ur e M o ha m m a d S a dr o s a da t i F r a nk K . G ür k a y na k A d a p t e d f r o m D i g i t a l D e s i g n a n d C o m p u t e r A r c h i t e c t u r e , D a v i d M o n e y H a r r i s & S a r a h L . H a r r i s © 2 0 0 7 E l s e v i e r http:// safari.ethz.ch / ddca U s i n g V e r i l o g fo r Te s t be nc he s C a r ne gi e M e l l on 2 Wh a t Will We Lea r n ? ¢ H o w t o s i m u l a t e yo u r c i r c u i t ¢ A p p l yi n g i n p u t s ¢ S e e i n g i f t h e c i r c u i t d o e s t h e c o r r e c t t h i n g C a r ne gi e M e l l on 3 Ho w D o Yo u K no w T ha t A C ir c uit W o r k s ? ¢ Y o u h a v e w r i t t e n t h e V e r i l o g c o d e o f a c i r c u i t § Do e s i t wo r k c o r r e c t l y ? § E v e n i f t he s y nt a x i s c o r r e c t , i t m i g ht do w ha t y o u w a nt ? § W ha t e x a c t l y i t i s t ha t y o u w a nt a ny w a y ? ¢ Tr i a l a nd e r r o r c a n be c o s t l y § Y o u ne e d t o ‘t e s t ’ y o ur c i r c ui t i n a dv a nc e ¢ I n m o d e r n d i gi t a l d e s i gn s , f u n c t i o n a l v e r i f i c a t i o n i s t h e m o s t t i m e c o n s u m i n g d e s i gn s t a ge . C a r ne gi e M e l l on 4 The I de a B e hi nd A Te s t be nc h ¢ U s i n g a c o m p u t e r s i m u l a t o r t o t e s t yo u r c i r c u i t § Y o u i ns t a nt i a t e y o ur de s i g n § S uppl y t he c i r c ui t w i t h s o m e i nput s § S e e w ha t i t do e s § D o e s i t r e t ur n t he “ c o r r e c t ” o ut put s ? C a r ne gi e M e l l on 5 Te s t be nc he s ¢ HD L c o de w rit t e n t o t e s t a no t he r HD L mo dule , t he de v i c e und er t es t (d u t ), al s o c al l e d t h e unit und er t es t (u u t ) ¢ N o t s yn t h e s i z e a b l e ¢ T yp e s o f t e s t b e n c h e s : § S i m pl e t e s t be nc h § Se l f - c he c k i ng t e s t be nc h § Se l f - c he c k i ng t e s t be nc h w i t h t e s t v e c t o r s C a r ne gi e M e l l on 6 Ex a m p l e ¢ W r i t e V e r i l o g c o d e t o i m p l e m e n t t h e f o l l o w i n g f u n c t i o n i n h a r d w a r e : y = ( b · c ) + ( a · b ) ¢ Na m e t h e m o d u l e s i l l yf u n c t i o n C a r ne gi e M e l l on 7 Ex a m p l e module sillyfunction ( input a, b, c, output y); assign y = ~b & ~c | a & ~b; endmodule ¢ W r i t e V e r i l o g c o d e t o i m p l e m e n t t h e f o l l o w i n g f u n c t i o n i n h a r d w a r e : y = ( b · c ) + ( a · b ) ¢ Na m e t h e m o d u l e s i l l yf u n c t i o n C a r ne gi e M e l l on 8 Si mp l e T e s t b e n c h module testbench1(); // Testbench has no inputs, outputs reg a, b , c ; // Will be assigned in initial block wire y ; // instantiate device under test sillyfunction dut (.a(a), .b(b), .c(c), .y(y) );d // apply inputs one at a time initial begin // sequential block a = 0; b = 0; c = 0; #10 ; // apply inputs, wait 10ns c = 1; #10 ; // apply inputs, wait 10ns b = 1; c = 0; #10 ; // etc .. etc.. c = 1; #10 ; a = 1; b = 0; c = 0; #10 ; end endmodule C a r ne gi e M e l l on 9 Si mp l e T e s t b e n c h ¢ Si m p l e testb en c h i n s t a n t i a t e s t h e d e s i gn u n d e r t e s t ¢ It a p p lie s a s e r ie s of in p u t s ¢ T h e o u t p u t s h a v e t o b e o b s e r v e d a n d c o m p a r e d u s i n g a s i m u l a t o r p r o gr a m . § T hi s t y pe o f t e s t be nc h do e s no t he l p w i t h t he o ut put s ¢ initial sta tem en t i s si m i l a r to always , i t j u st sta r ts o n c e a t t h e b e gi n n i n g, a n d d o e s n o t r e p e a t . ¢ T h e s t a t e m e n t s h a v e t o b e b l o c k i n g. C a r ne gi e M e l l on 10 Se l f - ch e ck i n g T e s t b e n ch module testbench2(); reg a, b, c; wire y; // instantiate device under test sillyfunction dut (.a(a), .b(b), .c(c), .y(y)); // apply inputs one at a time initial begin a = 0; b = 0; c = 0; #10 ; // apply input, wait if (y !== 1) $display (\"000 failed.\"); // check c = 1; #10 ; // apply input, wait if (y !== 0) $display (\"001 failed.\"); // check b = 1; c = 0; #10 ; // etc.. etc.. if (y !== 0) $display (\"010 failed.\"); // check end endmodule C a r ne gi e M e l l on 11 Se l f - ch e ck i n g T e s t b e n ch ¢ Be t t e r t h a n s i m p l e testb en c h ¢ Thi s testb en c h al s o i n c l u d e s a s t at e m e n t t o c h e c k t h e cu r r e n t s t a t e ¢ $display w i l l w r i t e a m e s s a ge i n t h e s i m u l a t o r ¢ Thi s i s a l o t o f wo r k § I m a g i ne a 3 2 - bi t pr o c e s s o r e x e c ut i ng a pr o g r a m ( t ho us a nds o f clo ck cy cles ) ¢ Y o u m a k e t h e s a m e a m o u n t o f m i s t a k e s w h e n w r i t i n g testb en c h es a s yo u d o w r i t i n g a c t u a l c o d e C a r ne gi e M e l l on 12 Te s t be nc h wi t h Te s t v e c t o r s ¢ The mo r e e l a bo r a t e t e s t be nc h ¢ W r i t e t e s t v e c t o r f i l e : i n p u t s a n d e x p e c t e d o u t p u t s § U s ua l l y c a n us e a hi g h - l e v e l m o de l ( g o l de n m o de l ) t o pr o duc e t he ‘c o r r e c t ’ i nput o ut put v e c t o r s ¢ Te s t be nc h: § G e ne r a t e c l o c k f o r a s s i g ni ng i nput s , r e a di ng o ut put s § R e a d t e s t v e c t o r s f i l e i nt o a r r a y § A s s i g n i nput s , g e t e x pe c t e d o ut put s f r o m D U T § C o m pa r e o ut put s t o e x pe c t e d o ut put s a nd r e po r t e r r o r s C a r ne gi e M e l l on 13 Te s t be nc h wi t h Te s t v e c t o r s ¢ A testb en c h c l o c k i s u s e d t o s yn c h r o n i z e I / O § T he s a m e c l o c k c a n be us e d f o r t he D U T c l o c k ¢ I n p u t s a r e a p p l i e d f o l l o w i n g a h o l d m a r gi n ¢ O u t p u t s a r e s a m p l e d b e f o r e t h e n e x t c l o c k e d ge § T he e x a m pl e i n bo o k us e s t he f a l l i ng c l o c k e dg e t o s a m pl e Appl y i nput s af t e r so m e del a y f r o m t he cl o ck Ch e c k o u t p u t s be f o r e th e n e x t cl o ck e d g e Clo c k p e r io d HOL D M A R G I N SE T U P MAR G IN C a r ne gi e M e l l on 14 Te s t v e c t o r s F i l e ¢ W e n e e d t o ge n e r a t e a testv ec to r fi l e ( so m e h o w ) ¢ F i l e : e x a m p l e . t v – con t a in s v e ct or s of a b c _ ye x p e c t e d 000_1 001_0 010_0 011_0 100_1 101_1 110_0 111_0 C a r ne gi e M e l l on 15 Te s t be nc h: 1 . Ge ne r a t e C l o c k module testbench3(); reg clk , reset; // clock and reset are internal reg a, b, c, yexpected ; // values from testvectors wire y; // output of circuit reg [31:0] vectornum , errors; // bookkeeping variables reg [3:0] testvectors [10000:0]; // array of testvectors // instantiate device under test sillyfunction dut (.a(a), .b(b), .c(c), .y(y) ); // generate clock always // no sensitivity list, so it always executes begin clk = 1; #5; clk = 0; #5; // 10ns period end C a r ne gi e M e l l on 16 2. Re a d T e stv e c tor s i n to A r r a y // at start of test, load vectors // and pulse reset initial // Will execute at the beginning once begin $ readmemb (\"example.tv\", testvectors ); // Read vectors vectornum = 0; errors = 0; // Initialize reset = 1; #27 ; reset = 0; // Apply reset wait end // Note: $ readmemh reads testvector files written in // hexadecimal C a r ne gi e M e l l on 17 3. A ssi g n I n p u ts a n d E x p e c te d O u tp u ts // apply test vectors on rising edge of clk always @( posedge clk ) begin #1 ; {a, b, c, yexpected } = testvectors [ vectornum ]; end ¢ A p p l y i n p u t s w i t h s o m e d e l a y ( 1 n s ) A F T E R c l o c k ¢ Thi s i s i mpo r t a nt § I nput s s ho ul d no t c ha ng e a t t he s a m e t i m e w i t h c l o c k ¢ Id e a l cir cu it s ( H D L cod e ) a r e im m u n e , b u t r e a l cir cu it s ( ne t l i s t s ) m a y s u f f e r f r o m h o l d v i o l a t i o n s . C a r ne gi e M e l l on 18 4. C omp a r e O u tp u ts w i th E x p e c te d O u tp u ts // check results on falling edge of clk always @( negedge clk ) if (~reset) // skip during reset begin if (y !== yexpected ) begin $display (\"Error: inputs = %b\", {a, b, c}); $display (\" outputs = %b (%b exp )\", y,yexpected ); errors = errors + 1; end // Note: to print in hexadecimal, use %h. For example, // $display(“Error: inputs = %h”, {a, b, c}); C a r ne gi e M e l l on 19 4. C omp a r e O u tp u ts w i th E x p e c te d O u tp u ts // increment array index and read next testvector vectornum = vectornum + 1; if ( testvectors [ vectornum ] === 4'bx) begin $display (\"%d tests completed with %d errors\", vectornum , errors); $finish ; // End simulation end end endmodule // Note: === and !== can compare values that are // x or z. C a r ne gi e M e l l on 20 Go l d e n M o d e l s ¢ A go l d e n m o d e l r e p r e s e n t s t h e i d e a l b e h a v i o r o f yo u r cir cu it . § S t i l l i t ha s t o be de v e l o pe d § I t i s di f f i c ul t t o g e t i t r i g ht ( bug s i n t he g o l de n m o de l ! ) § C a n be do ne i n C , P e r l , P y t ho n, Ma t l a b o r e v e n i n V e r i l o g ¢ T h e b e h a v i o r o f t h e c i r c u i t i s c o m p a r e d a ga i n s t t h i s go l d e n m o d e l . § A l l o w s a ut o m a t e d s y s t e m s ( v e r y i m po r t a nt ) C a r ne gi e M e l l on 21 W h y i s V e r i fi c a t i o n d i ffi c u l t ? ¢ H o w l o n g w o u l d i t t a k e t o t e s t a 3 2 - bi t a dde r? § I n s uc h a n a dde r t he r e a r e 6 4 i nput s = 2 64 po s s i bl e i nput s § T ha t m a k e s a r o und 1 . 8 5 1 0 19 po s s i bi l i t i e s § I f y o u t e s t o ne i nput i n 1 ns , y o u c a n t e s t 1 0 9 i nput s pe r s e c o nd § or 8 .6 4 x 1 0 14 i nput s pe r da y § or 3 .1 5 x 1 0 17 i nput s pe r y e a r § w e w o ul d s t i l l ne e d 58. 5 y e ar s t o t e s t a l l po s s i bi l i t i e s ¢ B r u t e f o r c e t e s t i n g i s n o t f e a s i b l e f o r a l l c i r c u i t s , we ne e d a l t e r na t i v e s § F o r m a l v e r i f i c a t i o n m e t ho ds § C ho o s i ng ‘c r i t i c a l c a s e s ’ § N o t a n e a s y t a s k C a r ne gi e M e l l on 22 Wh a t d id w e lea r n ? ¢ V e r i l o g h a s o t h e r u s e s t h a n m o d e l i n g h a r d w a r e § I t c a n be us e d f o r c r e a t i ng t e s t be nc he s ¢ Thr e e ma i n c l a s s e s o f testb en c h es § A ppl y i ng o nl y i nput s , m a nua l o bs e r v a t i o n ( no t a g o o d i de a ) § A ppl y i ng a nd c he c k i ng r e s ul t s w i t h i nl i ne c o de ( cum be r so m e ) § U s i ng te stv e c to r fi l e s ( go o d f o r au t omat i z at i on )","libVersion":"0.3.1","langs":""}