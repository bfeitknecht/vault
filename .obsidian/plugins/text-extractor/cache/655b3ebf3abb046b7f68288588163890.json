{"path":"sem3/EProg/PV/exams/theory/FS22.pdf","text":"Frühling 2022 252-0027 – Einführung in die Programmierung Departement Informatik ETH Zürich 30. August 2022 – Schriftliche Prüfung Nachname: Vorname: Legi-Nummer: – – Sie dürfen diese Prüfung oder die Aufgaben für die Programmierprüfung erst öﬀnen nachdem die Aufsicht die Prüfung gestartet hat. Wenn Sie diese Dokumente vorher öﬀnen gilt dies als Täuschungsversuch. Mit Ihrer Unterschrift bestätigen Sie, dass Sie die hier aufgeführte Person sind, Sie die Hinweise zur Kenntnis genommen haben, Sie die Aufgaben selbständig gelöst haben, Sie Ihre eigene Lösung abgeben, Sie keine Kopie der Prüfung mitnehmen, und dass Sie alle technischen Probleme, gesund- heitlichen Probleme (die Ihre Leistungen in dieser Prüfung beeinträchtigten) und etwaige störende äussere Einﬂüsse gemeldet haben bzw. wissen, dass Sie diese melden sollen. Unterschrift: Aufgabe Wert Punkte Aufgabe Wert Punkte 1 3 5 9 2 6 6 7 3 4 7 4 4 7 - - \u0006 Übertrag −− Total 40 Hinweise 1. Öﬀnen Sie diese Prüfung und die Aufgabenstellung für die Programmierprüfung erst, wenn die Aufsicht den Beginn der Prüfung bekannt gibt. 2. Schreiben Sie zuerst Ihren Namen und Ihre Legi-Nummer auf die Vorderseite dieser Prüfung. 3. Im Prüfungsraum bitten wir Sie auf Gespräche zu verzichten. 4. Dieser Teil der Prüfung dauert 40 Minuten. Falls Sie sich durch irgendjemanden oder irgend- etwas gestört fühlen, melden Sie dies sofort einer Aufsichtsperson. 5. Die Prüfung hat 12 Seiten. Vergewissern Sie sich dass Ihr Exemplar vollständig ist. 6. In dieser Prüfung gibt es 40 Punkte. Benutzen Sie die Anzahl der Punkte als Hinweis, wie Sie Ihre Zeit einteilen können. Fehler bei der Bearbeitung einer Aufgabe haben keinen Einﬂuss auf die Punkte, die Sie für andere Aufgaben erhalten. Sie könnnen die Aufgaben in beliebiger Reihenfolge lösen. 7. Lesen Sie die Aufgabenstellungen genau durch. 8. Tragen Sie Ihre Antwort(en) direkt in die Prüfungsbögen ein. Falls Sie mehr Platz brauchen, ist Ihre Antwort wahrscheinlich zu lang. 9. Benutzen Sie einen Stift (blau oder schwarz), der nicht ausradiert werden kann. Bitte schreiben Sie deutlich und leserlich! Wenn Sie etwas durchstreichen wollen, so machen Sie dies bitte klar und eindeutig. 10. Trennen Sie nicht die zusammengeheftete Prüfung. Mit losen Blättern riskieren Sie, ein Blatt zu verlieren. 11. Es ist wichtig, dass Ihre Antworten die Aufgaben klar und unzweideutig behandeln. Die Klarheit der Antworten beeinﬂusst Ihre Note. Wenn Sie Annahmen (über die in den Aufgaben aufgeführten hinaus) treﬀen, so geben Sie diese bitte an. 12. Wenn Sie zur Toilette müssen, melden Sie dies einer Aufsichtsperson durch Handzeichen. Es darf zur gleichen Zeit immer nur eine Person zur Toilette. 13. Wir beantworten keine inhaltlichen Fragen während der Prüfung. Kommentare zur Aufgabe schreiben Sie bitte auf das Aufgabenblatt. 14. Wenn die Aufsicht die Prüfung beendet, schliessen Sie bitte die Prüfung und schreiben nicht mehr in die Prüfung. Weiterarbeiten über die erlaubte Zeit gilt als Täuschungsversuch. Bitte unterschreiben Sie die Prüfung auf der Vorderseite und legen Sie die Prüfung mit Ihrer Legitimationskarte (“Legi”) gut sichtbar auf Ihren Arbeitstisch. 15. Wir sammeln die Prüfung ein. Wichtig: stellen Sie unbedingt selbst sicher, dass Ihre Prüfung von einer Aufsichtsperson eingezogen wird. Stecken Sie keine Prüfung (auch keine leere) ein. Page 2 of 12 Aufgabe 1 (3) Gegeben sei eine Methode main in einer Java Klasse. public static void main(String[] args) { /* body */ } Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ einge- fügt werden. Geben Sie für jede Anweisung an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile-Fehler”). Achten Sie auf die korrekte Formatierung der verschiedenen Typen, also z.B. 7.0 statt 7 für eine reelle Zahl (double). 1. System.out.println(11 + 16 / 4 * 2 + (4 + \">\") + 4 * 2); ________________________ 2. System.out.println(20 / 10 % 6 + 3 / 2 + (double) 5 / 4 + 3 / 4); ________________________ 3. System.out.println( ( 11 % 4 ) > 2 && 9 > (16 / (2 / 4)) && 1 % 8 < 0); ________________________ Page 3 of 12 Aufgabe 2 (6) Gegeben sei eine Java Klasse mit einer Methode foo(...), die mit verschiedenen Argumenten auf- gerufen wird. import java.util.Arrays; class J02_s22 { public static void main(String[] args) { int [][] a = {{1, 2, 3}, {3, 2, 1}, {4, 5, 6}}; System.out.println(Arrays.toString(a[0])); // [ 1, 2, 3 ] int i = 0; foo(a, i); System.out.println(Arrays.toString(a[0])); // System.out.println(Arrays.toString(a[1])); // i = i + 1; foo(a, i); System.out.println(Arrays.toString(a[0])); // System.out.println(Arrays.toString(a[1])); // int [][] b = new int[3][0]; int [] c = {4, 5, 6}; b[0] = c; i = 0; foo(b, i); System.out.println(Arrays.toString(b[0])); // System.out.println(Arrays.toString(b[1])); // } static void foo(int[][] x, int y) { x[y][y+1] = x[y][y]; y = y + 1; } } Bitte geben Sie rechts neben den println() Statements an, was diese ausgeben. Bitte geben Sie auch ggf. ausgegebene Klammern an. Um das Format in Erinnerung zu rufen haben wir die Ausgabe des ersten println() Statements bereits angegeben. Sollten Anweisungen nicht ausgeführt werden können, so markieren Sie bitte diese Anweisungen deutlich und schreiben rechts “Laufzeitfehler” (oder “Exception”); Sie brauchen den genauen Fehler bzw. die genaue Exception nicht angeben. Page 4 of 12 > Aufgabe 3 (4) Gegeben sind die Precondition und Postcondition für das folgende Programm public int compute(int v, int n) { // Precondition: n >= 0 int x; int tmp; x = 1; tmp = 1; // Loop Invariante: while (x <= n) { tmp = tmp * v; x = x + 1; } // Postcondition: tmp == 2 n return tmp; } Bitte geben Sie die Loop Invariante an. Loop Invariante: _______________________________ Page 5 of 12 Aufgabe 4 (7) Vervollständigen Sie die Lücken im untenstehenden Programmcode, sodass die main Methode in der InheritanceTest Klasse ohne Fehler kompiliert und ausgeführt werden kann, ohne eine Exception zu werfen. Der zu erwartende Konsolen-Output von main ist unten angegeben. Sie dürfen keine weiteren Klassen, Methoden, oder Interfaces hinzufügen. Tipp: Nicht in allen Lücken muss etwas stehen aber in allen Lücken kann etwas stehen. class InheritanceTest { public static void main(String[] args) { Z ref1 = new B(); ref1.bar(); System.out.println(\"++\"); Z ref2 = new A(); ((A) ref2).bar(); System.out.println(\"++\"); C c1 = new C(); System.out.println(\"C.foo():\"); c1.foo(); System.out.println(\"--\"); D d1 = new D(); if (d1 instanceof C) { ((C)d1).test(); } else { d1.foo(); } } } Jedesmal wenn die Methode main in der Klasse InheritanceTest ausgeführt wird (alle Klassen sind in dem selben Package), sollte folgender Output auf die Konsole geschrieben werden: Hello Bingo ++ Hello ++ C.foo(): Here -- Found Page 6 of 12 class C ______________________________________________________ { public void foo() { System.out.println(\"Here\"); } public void test(){ System.out.println(\"Test\"); } } class D ______________________________________________________ { public void foo() { super.foo(); } } class Z ______________________________________________________ { public void bar() { System.out.println(\"Hello\"); } } class A ______________________________________________________ { int a1 = 0; A() {} A(int v) { a1 = v; } public void foo() { System.out.println(\"Found\"); } } class B ______________________________________________________ { B() { } B(int w) { super(w); } public void bar() { super.bar(); System.out.println(\"Bingo\"); } } Page 7 of 12 Aufgabe 5 (9) Gegeben seien diese Klassen und Interfaces in separaten Dateien (im default Package): class Caniformia { String name = \"Hundeartige\"; String shortName = \"HA\"; public String toString() { return shortName; } } class Canidae extends Caniformia { String name = \"Hunde\"; String shortName = \"H\"; public void jagdbar() { System.out.println(\"J2␣\" + shortName); } public void geschuetzt() { System.out.println(\"G2␣\" + shortName); } } class Arctoidea extends Caniformia { String name = \"NichtHunde\"; public void jagdbar() { System.out.println(\"J3␣\" + shortName); praesent(); } public void praesent() { System.out.println(\"P3␣\" + shortName); } } class Ursidae extends Arctoidea { String name = \"Baeren\"; String shortName = \"B\"; public void geschuetzt() { System.out.println(\"G4␣\" + shortName); } } class Pinnipedia extends Arctoidea { String name = \"Robben\"; String shortName = \"R\"; public void geschuetzt() { System.out.println(\"G5␣\" + shortName); } public void praesent() { System.out.println(\"P5␣\" + shortName); } public String toString() { return shortName; } } class Otariidae extends Pinnipedia { String name = \"Ohrenrobben\"; String shortName = \"O\"; public void geschuetzt() { super.geschuetzt(); System.out.println(\"G6␣\" + shortName); } } class Odobenidae extends Pinnipedia { String name = \"Walrosse\"; String shortName = \"W\"; public void geschuetzt() { System.out.println(\"G7␣\" + shortName); } } In einer Klasse Explore in dem selben Package beﬁndet sich die Methode main. public static void main (String[] args) { /* Body */ } Page 8 of 12 Die folgenden Anweisungen sollen als “Body” (Rumpf) anstelle des Kommentars /* body */ eingefügt werden. Geben Sie für jede Anweisungsfolge an, was für eine Ausgabe erzeugt wird – entweder was gedruckt wird, oder ob ein Laufzeitfehler auftritt (schreiben Sie “Exception”), oder ob der Compiler einen Fehler feststellt (schreiben Sie “Compile- Fehler”). Falls ein gedruckter String Leerzeichen enthält, dann ist die genaue Anzahl/Weite der Leerzeichen unwichtig. 1. Object tier = new Odobenidae(); ((Pinnipedia) tier).praesent(); ________________________ 2. Caniformia cx = new Canidae(); cx.jagdbar(); ________________________ 3. Caniformia cw = new Ursidae(); System.out.println(cw); ________________________ 4. Arctoidea cy = new Ursidae(); System.out.println((Arctoidea) cy); if (cy instanceof Pinnipedia) { cy.praesent(); } ________________________ 5. Ursidae uz = new Ursidae(); uz.geschuetzt(); ________________________ 6. Pinnipedia pb = new Otariidae(); ((Odobenidae) pb).geschuetzt(); ________________________ 7. Pinnipedia pc = new Otariidae(); pc.praesent(); ________________________ 8. Arctoidea av = new Odobenidae(); av.praesent(); ________________________ 9. Arctoidea at = new Odobenidae(); Pinnipedia pu = (Pinnipedia)at; pu.praesent(); ________________________ Page 9 of 12 Aufgabe 6 (7) Gegeben sei in Abbildung 1 die EBNF-Beschreibung von expression. Für identiﬁer gelten die Regeln für Bezeichner (identiﬁers) und Werte (literal values) in Java. Die EBNF Beschreibung von expression unterscheidet sich aber sonst von den in Java zulässigen Ausdrücken. unary_expression ⇐ unary_operator primary_expression postﬁx_expression ⇐ primary_expression | postﬁx_expression + + | postﬁx_expression - - primary_expression ⇐ ( special_expression ) | identiﬁer unary_operator ⇐ * | ! assignment_expression ⇐ expression assignment_operator special_expression assignment_operator ⇐ = | + = special_expression ⇐ primary_expression | special_expression binary_operator expression binary_operator ⇐ * | / | + | % expression ⇐ assignment_expression | postﬁx_expression | unary_expression Abbildung 1: EBNF-Beschreibung von expression Geben Sie für jeden folgenden Ausdruck an, ob er nach der EBNF-Beschreibung von expression in Abbildung 1 gültig ist. (Tipp: alle Bezeichner und Werte in diesen Ausdrücken (d.h., identiﬁer in Abbildung 1) sind korrekt.) Ausdruck Gültig Ungültig Ausdruck Gültig Ungültig *(a + b) (b++) += ((a + c)) z = *(a + b) a = (*b * *c) y += (z / 7) y++ * 7 x = (a = b) k = m = n Page 10 of 12 Aufgabe 7 (4) Bitte geben Sie für die folgenden Java Programmsegmente die schwächste Vorbedingung (weakest precondition) WP an. Bitte geben Sie die Precondition als Java Expression an. Alle Variablen sind vom Typ int und es gibt keinen Over/Underﬂow. 1. WP: { } w = a; x = w + b; y = x * 2; Q: { y > 0 && b > 10} 2. WP: { } p = 3 * q; p = p + 1; Q: {p > 15 } 3. WP: { } if (a == b) { z = a + b;; } else { z = 2 * a; } Q: { z > 0 } Wir wünschen Ihnen alles Gute für den Rest der Prüfungssession und das nächste Semester. Ihr “Einführung in die Programmierung”-Team. Page 11 of 12 Aufgabe Wert Punkte Aufgabe Wert Punkte 1 3 5 9 2 6 6 7 3 4 7 4 4 7 - - \u0006 Übertrag −− Total 40 Page 12 of 12","libVersion":"0.5.0","langs":""}