{"path":"sem2/PProg/UE/quiz/PProg-u06-quiz.pdf","text":"Session 6 | Quizizz 1/2 Arbeitsbl√§tter Session 6 Gesamtzahl der Fragen: 8 Arbeitsblattzeit: 4 Min Name Klasse Datum 1. What is the equivalent to .start() in the ForkJoin framework? a) .run() b) .spoon() c) .fork() d) .start() 2. The costs of a task graph are on the edges. a) False b) True 3. What is \"Span\" in the context of runtime? a) The maximum lifespan of all threads b) The longest dependence-chain c) The width of the task-graph d) The runtime with only one thread 4. Perfect linear speed-up means... a) Doubling processors halves running time b) Doubling processors doubles running time c) Doubling processors does nothing d) Doubling processors reduces running time exponentially 5. What is the difference between a RecursiveTask and a RecursiveAction? a) RecursiveAction doesn't exist b) RecursiveAction returns a value, RecursiveTask doesn't c) RecursiveTask returns a value, RecursiveAction doesn't d) RecursiveAction is an interface, RecursiveTask a class Session 6 | Quizizz 2/2 6. What is the equivalent to starting the first thread/first run call in the ForkJoin framework? a) Create ForkJoinPool(first Task) and call .start() b) .fork() the first Task c) Create a ForkJoinPool and call invoke d) Create a ExecutorService and call .invoke on the first task 7. What is the difference between .fork() and invoke()? a) invoke waits for the result, fork doesn't b) fork waits for the result, invoke doesn't c) invoke can only be called from within fork/join computations 8. What is a Future in Java? a) The parent class of ForkJoinTask b) The interface implemented by ForkJoinTask c) A class that keeps count of currently running threads d) A representation of an asynchronus computation","libVersion":"0.3.2","langs":""}