{"path":"sem1/AuD/VRL/other/lbehric/AuD-w04-lbehric.pdf","text":"Exercise Sheet 04 Exercise 4.3 Base case j = 1 A : an as ... an as a ... an an]- Tu r n 1 . H . luv. gilt für ein je k Kin A: an as ... Kunden An Aus an]- V 1. 50 j = k + 1 - - A(t, ...,n - 4)- => INV(k + 1) INV(n) gilt = Nach den ersten n Iterationen, sind die n grössten Elemente alle an der Korrekter Position . Exercise 4. 4 f(i) <f(j) irj kleinstes TEN , sodass f(T)>-N a) f(Tun) > N Tub > 2t k = 1, 7,3 , ... Tu = 24 Tx 1 Tuy = IT Th while (f(T) <N) do To T .2 Tk -N returnt Tr = 2 - T4-y =2N = Trogat = 2 Mogn* > T b) kleinstes Te A f(+) <N Tun Algoall inign Tub ic on -1 / oder (Tub/2) while (iconx inign) imia Tiroutinign)R if flimid)IN then ↓ T E imid I i t - (imid -7) IN then 1 Tim id Return imid else Inigh F imid - 1 & Ise icow - \"mid Return \"low icon = T E inigh Exercise 4 . 5 a) we n n is logz (n) While j loge(n) - 3 4 = (log2) - i + j = j 11 (llogans - i + ) = Logz) : (1092 + 1)/2 = ⑦(log(n)) b) T(n) = 8T(E) + 23: T(1) = 2 T(n) = 2n3 + 8T(LE)) = G(nlogn) 3 Falls K>O : 8 . T(LE)) Falls k = 0 : 0(1) k = > n = 1: 0(1)- (c) FurEl nen T(n+1) 2 T() B . C. +(2) = 16 + 16T(1) = 3222 - TH) = E n = 1 n = 1 1 .1 . T(k'+1) T(k) Ke K 1 . s. (k+z)2T(4+1) mit ! .H . => T(+) <T() VK ' ( k Nach 1 .H : Is t +(k + 2) = 2(k + 2) + 8 T(()) =2(k+1) + 8T ( ( E )- neu n' en : (n+1) T(n) = T(u + 1) T (n) True/ fa ls e ? =Ora ) X log(n)) y - 2(n2) X log(n!) = D (nlogu) log (n .(n-1) -(n - 2) . . . . . 1) = log(n) + 10g(n - 1) + 10g(n - 2) + ... + n ( - (kY) ,if 1xkx0(1) X log(n) = logi! = log(n) + log (n) + . . . = n log(n) 10gz(nY) = (1097(n%) V I logi e 10ge(n\") = n -E log( log n ! f0(m) * ) !im ( 1 n ! =2TN O log= (n8) - (logy (n) X 3n4 + n + -( n ) V (4) n ! = 0 (n 2) X n - (n - 1) - (n -2) . . . . . 1yn - (n - 1) : (nz) . .... (110) (Erd) (are). ... = (in- n - (n/10) - Terme lim, nren lim 4 0 .5 n-0 . 94 . 1 0. In =lim -04 · 189n = lin (gron = 0 u >0 Vorlesung-Recap Vergleiche Bewegungen Bubble Sort 0(n) O(n) Selection O(uY) O(n) Insertion O(u ·logn) O(n2) # Merge O(n-logn) 0(nlogn) K I E - Quicksort X- * E-# 4 gut +(n) = 2 . T(z) + i =Onlogn) Sieht T(n) = + (n - 1) + cu = 0 (n) Heaps value (Knoten) Value (Kinder) - ↑1 - I T-Lux a d->an d2 as ... ->- an s as äz -Laufzeit von Codeschnipseln I =Summenformel - Invarianten (II ↓ Präzise Formulierung - Algorithmus-erstellen-Aufgaben / Aus Ih r Algo Kreieren I - (Induktions) bew. vo n Ungleichungen I - Abschätzungen mit n ! I","libVersion":"0.3.2","langs":""}