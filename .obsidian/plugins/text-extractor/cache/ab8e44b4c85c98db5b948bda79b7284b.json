{"path":"sem1/AuD/UE/e/AuD-u09-e.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 20 November 2023 Johannes Lengler, David Steurer Lucas Slot, Manuel Wiedmer, Hongjie Chen, Ding Jingqiu Algorithms & Data Structures Exercise sheet 9 HS 23 The solutions for this sheet are submitted at the beginning of the exercise class on 27 November 2023. Exercises that are marked by ∗ are challenge exercises. They do not count towards bonus points. You can use results from previous parts without solving those parts. Exercise 9.1 Transitive graphs. Let G = (V, E) be an undirected graph. We say that G is • transitive when, for any two edges {u, v} and {v, w} in E, the edge {u, w} is also in E; • complete when its set of edges is {{u, v} | u, v ∈ V, u ̸= v}; • the disjoint union of G1 = (V1, E1), . . . , Gk = (Vk, Ek) iff V = V1∪· · ·∪Vk, E = E1∪· · ·∪Ek, and the (Vi)1≤i≤k are pairwise disjoint. Show that a undirected graph G is transitive if, and only if, it is a disjoint union of complete graphs. Exercise 9.2 Short statements about graphs (cont’d) (1 point). In the following, let G = (V, E) be a directed graph. For each of the following statements, decide whether the statement is true or false. If the statement is true, provide a proof; if it is false, provide a counterexample. (a) If for every vertex v ∈ V its in-degree degin(v) is even, then |E| is even. (b) For a longest directed path P : v0, . . . , vℓ in G, the endpoint has to be a sink. (c) The following graph has a topological sorting. If so, give a topological sorting; if not, prove why no topological sorting can exist. A B C D E F G H I Exercise 9.3 Data structures for graphs. Consider three types of data structures for storing an undirected graph G with n vertices and m edges: 1) Adjacency matrix. 2) Adjacency lists: 11111222233444455566 3) Adjacency lists, and additionally we store the degree of each node, and there are pointers between the two occurences of each edge. (An edge appears in the adjacency list of each endpoint). 11111222233455544466deg: 4deg: 3deg: 1deg: 3deg: 2deg: 1 For each of the above data structures, what is the required memory (in Θ-Notation)? Which runtime (worst case, in Θ-Notation) do we have for the following queries? Give your answer depending on n, m, and/or deg(u) and deg(v) (if applicable). (a) Input: A vertex v ∈ V . Find deg(v). (b) Input: A vertex v ∈ V . Find a neighbor of v (if a neighbor exists). (c) Input: Two vertices u, v ∈ V . Decide whether u and v are adjacent. (d) Input: Two adjacent vertices u, v ∈ V . Delete the edge e = {u, v} from the graph. (e) Input: A vertex u ∈ V . Find a neighbor v ∈ V of u and delete the edge {u, v} from the graph. (f) Input: Two vertices u, v ∈ V with u ̸= v. Insert an edge {u, v} into the graph if it does not exist yet. Otherwise do nothing. (g) Input: A vertex v ∈ V . Delete v and all incident edges from the graph. For the last two queries, describe your algorithm. Exercise 9.4 Number of paths in DAGs (1 point). Let G = (V, E) be a directed graph without directed cycles1 (i.e., a directed acyclic graph or short DAG). Assume that V = {v1, . . . , vn} (for n = |V | ∈ N). Further assume that v1 is a source and vn is 1A directed cycle is a closed directed walk of length at least 2 for which all vertices are pairwise distinct except the endpoints. 2 a sink. The goal of this exercise is to find the number of paths from v1 to vn. (a) Prove that there exists a topological sorting of G that has v1 as first and vn as last vertex. Using part (a), we assume from now on that the sorting v1, v2, . . . , vn of the vertices is a topological sorting. We can achieve this by renaming the vertices. Part (a) tells us then that we do not need to rename v1 and vn. (b) Prove that for any directed v1-vn-path P : v1 = vi0, vi1, . . . , viℓ = vn we have i0 < i1 < · · · < iℓ. (c) Describe a bottom-up dynamic programming algorithm that, given a graph G with the property that v1, . . . , vn is a topological sorting, returns the number of v1-vn paths in G in O(|V | + |E|) time. You can assume that the graph is provided to you as a pair (n, Adj) of the integer n = |V | and the adjacency lists Adj. Your algorithm can access Adj[u], which is a list of vertices to which u has a direct edge, in constant time. Formally, Adj[u] := {v ∈ V | (u, v) ∈ E}. In your solution, address the following aspects: 1. Dimensions of the DP table: What are the dimensions of the DP table? 2. Subproblems: What is the meaning of each entry? 3. Recursion: How can an entry of the table be computed from previous entries? Justify why your recurrence relation is correct. Specify the base cases of the recursion, i.e., the cases that do not depend on others. 4. Calculation order: In which order can entries be computed so that values needed for each entry have been determined in previous steps? 5. Extracting the solution: How can the solution be extracted once the table has been filled? 6. Running time: What is the running time of your solution? Hint: Define the entry of the DP table as DP [i] = number of paths in G from vi to vn. (d)* What happens if the vertices v1 and vn are not a source respectively a sink? Can we still find the number of v1-vn paths using a similar approach as above? Exercise 9.5 Strongly connected vertices (1 point). Let G = (V, E) be a directed graph with n vertices and m edges. We say two distinct vertices v, w ∈ V are strongly connected if there exists both a directed path from v to w, and from w to v. Describe an algorithm which finds a pair v, w ∈ V of strongly connected vertices in G, or decides that no such pair exists. The runtime of your algorithm should be at most O(n + m). You are provided with the number of vertices n, and the adjacency list Adj of G. Hint: Use DFS as a subroutine. 3","libVersion":"0.3.1","langs":""}