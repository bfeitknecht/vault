{"path":"sem3/A&D/UE/s/A&D-s-u00.pdf","text":"Eidgen¨ossische Technische Hochschule Z¨urich Ecole polytechnique f´ed´erale de Zurich Politecnico federale di Zurigo Federal Institute of Technology at Zurich Departement of Computer Science 23 September 2024 Johannes Lengler, David Steurer Kasper Lindberg, Lucas Slot, Hongjie Chen, Manuel Wiedmer Algorithms & Data Structures Exercise sheet 0 HS 24 The solutions for this sheet do not have to be submitted. The sheet will be solved in the first exercise session on 23 September 2024. Exercises that are marked by ∗ are challenge exercises. You can use results from previous parts without solving those parts. The solutions are intended to help you understand how to solve the exercises and are thus more detailed than what would be expected at the exam. All parts that contain explanation that you would not need to include in an exam are in grey. Exercise 0.1 Induction. (a) Prove by mathematical induction that for any positive integer n, 1 + 2 + · · · + n = n(n + 1) 2 . In your solution, you should address the base case, the induction hypothesis and the induction step. Solution: Base Case. Let n = 1. Then we have 1 = 1 · 2 2 . Induction Hypothesis. Assume that the property holds for some positive integer k, that is we have 1 + 2 + · · · + k = k(k + 1) 2 . Induction Step. We must show that the property holds for k + 1 summands. We have 1 + 2 + · · · + k + (k + 1) I.H. = k(k + 1) 2 + k + 1 = k(k + 1) + 2(k + 1) 2 = (k + 1)(k + 2) 2 . We want to use the induction hypothesis, so in the first step above we separate the last term of the sum and then use the induction hypothesis. By the principle of mathematical induction, the statement is true for any positive integer n. (b) (This subtask is from August 2019 exam). Let T : N → R be a function that satisfies the following two conditions: T (n) ≥ 4 · T ( n 2 ) + 3n whenever n is divisible by 2; T (1) = 4. Prove by mathematical induction that T (n) ≥ 6n2 − 2n holds whenever n is a power of 2, i.e., n = 2k with k ∈ N0. In your solution, you should address the base case, the induction hypothesis and the induction step. Solution: We solve this exercise by mathematical induction over k. Base Case. Let k = 0. Then we have n = 20 = 1 and T (1) = 4 ≥ 6 · 1 2 − 2 · 1. Since we do the induction over k, we need to go from k = ℓ to ℓ + 1 here. Hence, the induction hypothesis is T (2ℓ) ≥ 6(2ℓ)2 − 2(2ℓ) for some ℓ and we want to show that T (2ℓ+1) ≥ 6(2ℓ+1)2 − 2(2ℓ+1). In order to make the argument simpler, we introduce a new variable m = 2ℓ. Then, we have that 2ℓ+1 = 2m. Hence, we the induction hypothesis is T (m) ≥ 6m2 − 2m and we need to show that T (2m) ≥ 6(2m)2 − 2(2m). Thus, we get the following: Induction Hypothesis. Assume that the property holds for some positive integer m = 2ℓ. That is, we assume T (m) ≥ 6m 2 − 2m. Induction Step. Thus, we must show that the property holds for 2m = 2ℓ+1. We have T (2m) ≥ 4 · T (m) + 3 · (2m) I.H. ≥ 24m 2 − 8m + 6m = 24m2 − 2m ≥ 24m2 − 4m = 6 · (2m) 2 − 2 · (2m). The following derivation is to illustrate how to come up with the above chain of inequalities. It does (and should) not be part of the final solution. In a first step, we want to use the induction hypothesis. In order to do that, we need to replace the T (2m) term by T (m). The way we do this is by using the recurrence relation. Thus, we get that T (2m) ≥ 4 · T (m) + 3 · (2m) I.H. ≥ 24m2 − 8m + 6m. Now, we want to show that this is at least 6 · (2m)2 − 2 · (2m) = 24m2 − 4m. Comparing this, the first terms are equal, so what remains is to show that −8m + 6m ≥ −4m. But this is true since 2 the left hand side is −2m and −2 ≥ −4. Putting all this together, we get the chain of inequalities from above. By the principle of mathematical induction, the statement is true for any integer n that is a power of 2. Asymptotic Growth When we estimate the number of elementary operations executed by algorithms, it is often useful to ignore smaller order terms, and instead focus on the asymptotic growth defined below. We denote by R+ the set of all (strictly) positive real numbers and by R+ 0 the set of nonnegative real numbers. Definition 1. Let f, g : N → R+ be two functions. We say that f grows asymptotically faster than g if limn→∞ g(n) f (n) = 0. This definition is also valid for functions defined on R+ instead of N. In general, lim n→∞ g(n) f (n) is the same as lim x→∞ g(x) f (x) if the second limit exists. For all the following exercises, you can assume that n ∈ N≥10. We make this assumption so that all functions are well-defined and take values in R+. Exercise 0.2 Comparison of functions part 1. Show that (a) f (n) := n log n grows asymptotically faster than g(n) := n. Solution: We have lim n→∞ n n log n = lim n→∞ 1 log n = 0 and hence, by Definition 1, f (n) := n log n grows asymptotically faster than g(n) := n. (b) f (n) := n3 grows asymptotically faster than g(n) := 10n2 + 100n + 1000. Solution: We have lim n→∞ 10n2 + 100n + 1000 n3 = lim n→∞ ( 10 n + 100 n2 + 1000 n3 ) = 0. Hence, by Definition 1, f (n) := n3 grows asymptotically faster than g(n) := 10n2 + 100n + 1000. (c) f (n) := 3n grows asymptotically faster than g(n) := 2n. Solution: We have lim n→∞ 2n 3n = lim n→∞ ( 2 3 )n = 0, and thus by Definition 1, f (n) := 3n grows asymptotically faster than g(n) := 2n. 3 Here, it is important that the term 2 3 < 1, otherwise the limit would not be 0. The following theorem can be useful to compute some limits. Theorem 1 (L’Hˆopital’s rule). Assume that functions f : R+ → R+ and g : R+ → R+ are differentiable, limx→∞ f (x) = limx→∞ g(x) = ∞ and for all x ∈ R+, g′(x) ̸= 0. If limx→∞ f ′(x) g′(x) = C ∈ R+ 0 or limx→∞ f ′(x) g′(x) = ∞, then lim x→∞ f (x) g(x) = lim x→∞ f ′(x) g′(x) . Exercise 0.3 Comparison of functions part 2. Show that (a) f (n) := n1.01 grows asymptotically faster than g(n) := n ln n. Solution: Our goal is to apply Theorem 1. For this, we view the functions f and g as functions from R+ → R+ and use the the fact that if the limit limx→∞ f (x) g(x) exists, then we have lim x→∞ g(x) f (x) = lim n→∞ g(n) f (n) , where x ∈ R+ and n ∈ N. Thus, it is sufficient to show that limx→∞ f (x) g(x) = 0. We use this in several parts of this exercise. We apply Theorem 1 to compute lim x→∞ x ln x x1.01 = lim x→∞ ln x x0.01 Thm.1 = lim x→∞ (ln x)′ (x0.01)′ = lim x→∞ 1/x 0.01x−0.99 = lim x→∞ 1 0.01x0.01 = 0. Hence, by Definition 1, f (n) := n1.01 grows asymptotically faster than g(n) := n ln n. (b) f (n) := en grows asymptotically faster than g(n) := n. Solution: We apply Theorem 1 to compute lim x→∞ x ex Thm.1 = lim x→∞ x′ (ex)′ = lim x→∞ 1 ex = 0. Hence by Definition 1, f (n) := en grows asymptotically faster than g(n) := n. (c) f (n) := en grows asymptotically faster than g(n) := n2. Solution: We apply Theorem 1 to compute lim x→∞ x2 ex Thm.1 = lim x→∞ (x2)′ (ex)′ = lim x→∞ 2x ex Thm.1 = 2 lim x→∞ x′ (ex)′ = 2 lim x→∞ 1 ex = 0. Hence, by Definition 1, f (n) := en grows asymptotically faster than g(n) := n2. 4 (d)∗ f (n) := 1.01n grows asymptotically faster than g(n) := n100. Solution: Note that we can rewrite g(x) f (x) as x100 (1.01)x = e100 ln x ex ln(1.01) = e 100 ln x−ln(1.01)x. The goal now is to show that limx→∞ 100 ln x − ln(1.01)x = −∞. This will allow us to conclude that limx→∞ x100 (1.01)x = limx→∞ e100 ln x−ln(1.01)x = 0. We have lim x→∞(100 ln x − ln(1.01)x) = lim x→∞ x ( 100 ln x x − ln(1.01)) = ( lim x→∞ x) · ( lim x→∞ 100 ln x x − ln(1.01) ) = −∞, What we are using here is that for two function h1, h2 : R+ → R+ we have that lim x→∞ h1(x) · h2(x) = ( lim x→∞ h1(x)) · ( lim x→∞ h2(x)) as long as the two limits limx→∞ h1(x) and limx→∞ h2(x) exist. Therefore, limx→∞ x100 (1.01)x = limx→∞ e100 ln x−ln(1.01)x = 0. Hence, by Definition 1, we get that f (n) := 1.01n grows asymptotically faster than g(n) := n100. (e) f (n) := log2 n grows asymptotically faster than g(n) := log2 log2 n. Solution: To remove one of the log-factors, we want to substitute y = log2 x. This works since x → ∞ if and only if y → ∞. Define y := log2 x. Then y → ∞ as x → ∞, and therefore lim x→∞ g(x) f (x) lim x→∞ log2 log2 x log2 x = lim y→∞ log2 y y . Remembering that log2 y = ln y/ ln 2, we can apply Theorem 1 to compute lim y→∞ log2 y y = 1 ln 2 lim y→∞ ln y y Thm.1 = 1 ln 2 lim y→∞ (ln y)′ y′ = 1 ln 2 lim y→∞ 1/y 1 = 0. Hence, by Definition 1, f (n) := log2 n grows asymptotically faster than g(n) := log2 log2 n. (f) f (n) := 2√log2 n grows asymptotically faster than g(n) := log100 2 n. Solution: Using rules about the logarithm, we can compute lim n→∞ log100 2 n 2√ log2 n = lim n→∞ 2log2(log100 2 n) 2√log2 n = lim n→∞ 2100 log2 log2 n 2 √log2 n = lim n→∞ 2100 log2 log2 n−√log2 n. 5 Notice that lim n→∞ (100 log2 log2 n − √log2 n) = lim n→∞ ( − √ log2 n ( 1 − 100 log2 log2 n √ log2 n )) = − ( lim n→∞ √ log2 n) · ( lim n→∞ ( 1 − 100 log2 log2 n √ log2 n )) = −∞. Here, we used again that limn→∞ h1(n) · h2(n) = (limn→∞ h1(n)) · (limn→∞ h2(n)) as long the latter two limits exist. Furthermore, we need that lim n→∞ 100 log2 log2 n √ log2 n = 0. As before, it is sufficient to show that limx→∞ 100 log2 log2 x√log2 x for x ∈ R+. This can be shown as follows. We substitute y = log2(x) and, similarly to part (e), we get that lim x→∞ 100 log2 log2 x √ log2 x = 100 · lim y→∞ log2 y √y Thm.1 = 100 · lim y→∞ 1/y 1/(2 √y) = 200 · lim y→∞ 1 √y = 0. Thus, we have that limn→∞ 100 log2 log2 n√log2 n = 0 and limn→∞ ( 1 − 100 log2 log2 n√log2 n ) = 1. This allows us to conclude that indeed lim n→∞ (100 log2 log2 n − √ log2 n) = −∞. Hence, lim n→∞ log100 2 n 2√log2 n = lim n→∞ 2 100 log2 log2 n−√ log2 n = 0. Therefore, by Definition 1, f (n) := 2√log2 n grows asymptotically faster than g(n) := log100 2 n. (g) f (n) := n0.01 grows asymptotically faster than g(n) := 2 √log2 n. Solution: We can compute lim n→∞ 2√log2 n n0.01 = lim n→∞ 2√ log2 n 2log(n0.01) = lim n→∞ 2√log2 n 20.01 log2 n = lim n→∞ 2 √log2 n−0.01 log2 n We get that lim n→∞ (√log2 n − 0.01 log2 n) = lim n→∞ ( −0.01 log2 n ( 1 − √log2 n 0.01 log2 n )) = −∞. As for the previous exercise, to get this it is sufficient to show that limn→∞ √log2 n 0.01 log2 n = 0. This is true since √log2 n 0.01 log2 n = 1 0.01 √log2 n . Hence, lim n→∞ 2 √log2 n n0.01 = lim n→∞ 2√log2 n−0.01 log2 n = 0. Therefore, by Definition 1, f (n) := n0.01 grows asymptotically faster than g(n) := 2√log2 n. 6 Exercise 0.4 Simplifying expressions. Simplify the following expressions as much as possible without changing their asymptotic growth rates. Concretely, for each expression f (n) in the following list, find an expression g(n) that is as simple as possible and that satisfies limn→∞ f (n) g(n) ∈ R+. (a) f (n) := 5n3 + 40n2 + 100 Solution: The dominating term for n → ∞ in the above expression is 5n3 (this grows the fastest). Thus, a first guess would be 5n3. However, we can simplify this even more by dropping the constant 5. Thus, we want to prove that n3 has the same asymptotic growth rate as f (n). Let g(n) := n3. Then we indeed have that lim n→∞ f (n) g(n) = lim n→∞ (5 + 40 n + 100 n3 ) = 5 ∈ R+. (b) f (n) := 5n + ln n + 2n3 + 1 n Solution: Let g(n) := n3. Then we indeed have that lim n→∞ f (n) g(n) = lim n→∞ ( 5 n2 + ln n n3 + 2 + 1 n4 ) = 2 ∈ R+. For the part ln n n3 , we can use Theorem 1 to show lim n→∞ ln n n3 Thm.1 = lim n→∞ 1/n 3n2 = 0. (c) f (n) := n ln n − 2n + 3n2 Solution: Let g(n) := n2. Then we indeed have that lim n→∞ f (n) g(n) = lim n→∞ ( ln n n − 2 n + 3) = 3 ∈ R+. For the part ln n n3 , we can again use Theorem 1 to show lim n→∞ ln n n Thm.1 = lim n→∞ 1/n 1 = 0. (d) f (n) := 23n + 4n log5 n6 + 78√n − 9 Solution: By the properties of logarithms, we have that 4n log5 n6 = 24n log5 n = 24n ln n ln 5 . After removing the constant, we let g(n) := n ln n. Then we have lim n→∞ f (n) g(n) = lim n→∞ ( 23 ln n + 24 ln 5 + 78 √n ln n − 9 n ln n ) = 24 ln 5 ∈ R+. 7 (e) f (n) := log2 √n5 + √ log2 n5 Solution: By the properties of logarithms, we have that log2 √n5 = 5 2 ln 2 ln n, and √ log2 n5 = √ 5 ln 2 · √ln n. Let g(n) := ln n. Then we indeed have that lim n→∞ f (n) g(n) = lim n→∞ ( 5 2 ln 2 + √ 5 ln 2 · 1 √ln n ) = 5 2 ln 2 ∈ R +. (f)∗ f (n) := 2n3 + ( 4√n) log5 log6 n + ( 7√n) log8 log9 n Solution: The terms ( 4√n)log5 log6 n and ( 7√n) log8 log9 n are exponential in n, whereas 2n3 is not. So, one of these terms is the dominating one. To figure out which one, we compute limn→∞ ( 7√n)log8 log9 n ( 4√n)log5 log6 n . We have that lim n→∞ ( 7√n)log8 log9 n ( 4√n)log5 log6 n = lim n→∞ n 1 7 log8 log9 n n 1 4 log5 log6 n = lim n→∞ n 1 7 log8 log9 n− 1 4 log5 log6 n. Notice that lim n→∞ ( 1 7 log8 log9 n − 1 4 log5 log6 n) = −∞, since loga x ≤ logb y if x ≤ y and a ≥ b. Hence, lim n→∞ ( 7√n) log8 log9 n ( 4√n) log5 log6 n = lim n→∞ n 1 7 log8 log9 n− 1 4 log5 log6 n = 0. This shows that the term ( 4√n) log5 log6 n dominates the term ( 7√n) log8 log9 n. We now formally show that n 1 4 log5 log6 n also dominates the term 2n3. Moreover, we also have lim n→∞ 2n3 ( 4√n) log5 log6 n = 2 lim n→∞ n3− 1 4 log5 log6 n = 0. Let g(n) := n 1 4 log5 log6 n. Then we indeed have that lim n→∞ f (n) g(n) = 1 ∈ R +. Notice that we cannot remove the constant in the exponent since this would change the asympotic behaviour. 8 Exercise 0.5 ∗ Finding the range of your bow. To celebrate your start at ETH, your parents gifted you a bow and (an infinite number of) arrows. You would like to determine the range of your bow, in other words how far you can shoot arrows with it. For simplicity we assume that all your arrow shots will cover exactly the same distance r, and we define r as the range of your bow. You also know that this range is at least r ≥ 1 (meter). You have at your disposition a ruler and a wall. You cannot directly measure the distance covered by an arrow shot (because the arrow slides some more distance on the ground after reaching distance r), so the only way you can get information about the range r is as follows. You can stand at a distance ℓ (of your choice) from the wall and shoot an arrow: if the arrow reaches the wall, you know that ℓ ≤ r, and otherwise you deduce that ℓ > r. By performing such an experiment with various choices of the distance ℓ, you will be able to determine r with more and more accuracy. Your goal is to do so with as few arrow shots as possible. (a) What is a fast strategy to find an upper bound on the range r? In other words, how can you find a distance D ≥ 1 such that r < D, using few arrow shots? The required number of shots might depend on the actual range r, so we will denote it by f (r). Good solutions should have f (r) ≤ 10 log2 r for large values of r. Solution: One possible fast strategy is to first shoot an arrow at distance 2 from the wall, and as long as the arrow reaches the wall, you double your distance to the wall for the next shot. More formally, let ℓi denote your distance to the wall for the i-th shot. Then this startegy uses distances given by ℓi = 2i, and does this until you find a distance ℓt for which your arrow does not reach the wall. D is then given by D = ℓt = 2t, and the required number of shots is f (r) = t, the smallest integer t such that r < 2t. This strategy therefore needs f (r) = ⌈log2 r⌉ shots, and indeed f (r) = ⌈log2 r⌉ ≤ 1 + log2 r ≤ 10 log2 r for all r ≥ 21/9. (b) You are now interested in determining r up to some additive error. More precisely, you should find an estimate ˜r such that the range is contained in the interval [˜r − 1, ˜r + 1], i.e. ˜r − 1 ≤ r ≤ ˜r + 1. Denoting by g(r) the number of shots required by your strategy, your goal is to find a strategy with g(r) ≤ 10 log2 r for all r sufficiently large. Solution: You start by performing the strategy described in part (a). Note that this allows you to find a distance D such that r ∈ [ 1 2 D, D] using f (r) = ⌈log2 r⌉ shots. You will then iteratively find smaller and smaller intervals [a, b] ⊆ [ 1 2 D, D] with r ∈ [a, b], until you get an interval whose length is at most 2 (and then you can take ˜r to be the center of this interval). You start by shooting an arrow from distance ( 1 2 D + D)/2 = 3 4 D. If the arrow reaches the wall, then you know that r ∈ [ 3 4 D, D], and otherwise you deduce that r ∈ [ 1 2 D, 3 4 D]. Note that in both cases, the length of the interval of possible ranges r was divided by 2. In the next step, if you know that r ∈ [ 3 4 D, D] then you shoot an arrow from distance ( 3 4 D + D)/2, and if you know that r ∈ [ 1 2 D, 3 4 D] then you shoot an arrow from distance ( 1 2 D + 3 4 D)/2, which allows you to again divide the length of the interval of possible ranges by 2. You carry on this procedure until you find an interval [a, b] of length b − a ≤ 2 satisfying r ∈ [a, b], and you define ˜r = (a + b)/2. 9 By construction, this strategy finds an estimate ˜r such that ˜r − 1 ≤ r ≤ ˜r + 1. Let’s compute the number of required shots g(r). You start with f (r) = ⌈log2 r⌉ shots in order to perform the strategy described in (a), and then you need t′ additional shots to find the interval [a, b]. Note that you start with the interval of possible ranges [ 1 2 D, D] which has length D/2, and with each additional shot you divide this length by 2, until you reach a length smaller than 2. Therefore, t′ is the smallest integer such that D/2t′+1 ≤ 2, i.e. D ≤ 2t′+2. This means that t′ = max{⌈log2 D⌉ − 2, 0} (the maximum with 0 is taken because you cannot have a negative number of shots). This is at most ⌈log2 2r⌉ = 1 + ⌈log2 r⌉ because D ≤ 2r, so the total number of required shots is g(r) = f (r) + t ′ ≤ f (r) + ⌈log2 r⌉ + 1 = 2⌈log2 r⌉ + 1 ≤ 2 log2 r + 3, which is smaller than 10 log2 r for all r ≥ 23/8. (c) Coming back to part (a), is it possible to have a significantly faster strategy (for example with f (r) ≤ 10 log2 log2 r for large values of r)? Solution: Let h : R+ → R+ be any strictly increasing function with limr→∞ h(r) = ∞. We will show that there exists a strategy that finds some D > r using f (r) := ⌈h(r)⌉ shots. Thus, this will show in particular that it is is possible to get f (r) ≤ 10 log2 log2 r for large values of r. Since h : R+ → R+ is strictly increasing, it is bijective and therefore has an inverse h−1 : R+ → R+ which is also strictly increasing. Moreover, we have limr→∞ h−1(r) = ∞ because limr→∞ h(r) = ∞. The strategy is then to shoot the arrow at the i-th step with a distance of h−1(i) from the wall, until we get to a step t′′ where the arrow doesn’t reach the wall (i.e. h−1(t′′) > r). The number of required shots is then t′′, which is the smallest integer satisfying h−1(t′′) > r, or equivalently t′′ > h(r). Therefore, t′′ = ⌈h(r)⌉ as claimed. For the particular example of f (r) ≤ 10 log2 log2 r, take the function h(r) = log2 log2 r. This corresponds to shooting an arrow from distance h−1(i) = 22i in the i-th step. Then the number of required shots is f (r) = ⌈log2 log2 r⌉ ≤ 1 + log2 log2 r, which is smaller than 10 log2 log2 r for all r ≥ 221/9. 10","libVersion":"0.5.0","langs":""}