{"path":"sem4/FMFP/UE/s/FMFP-u13-s.pdf","text":"P. M¨uller, D. Basin and R. Jung Formal Methods and Functional Programming Exercise Sheet 13: Modeling Submission deadline: May 27th/28th, 2025 Installing and Running Spin To run the Promela models, you will need to install the Spin model-checker as well as a C compiler. There are multiple ways to install Spin on your machine: • Ubuntu: Run sudo apt-get install spin in a terminal to install the spin package. • Mac: Use Homebrew (https://brew.sh) to install Spin by running brew install spin. • Windows: Follow the instructions here to set up the executables: https://spinroot.com/spin/Man/README.html • Executables: Download pre-compiled executables from Spin’s GitHub page: https://github.com/nimble-code/Spin/tree/master/Bin. • Compiling: You can compile Spin from source from: https://github.com/nimble-code/Spin. Short re-cap for running Spin: • spin filename.pml will carry out a simulation of the model, yielding one random trace. This does not perform an exhaustive check the model. • spin -a filename.pml will create a file pan.c, that must be compiled and run to exhaus- tively check a model. In case of failure, a corresponding trail file (filename.pml.trail) is typically generated, containing the information about the failing trace. • spin -t filename.pml will replay the trace from the corresponding trail file. 1 Assignment 1 (Dining Philosophers) The problem of the dining philosophers illustrates common issues for concurrent programs: We consider n philosophers sitting around a circular table. Each philosopher spends their life thinking and eating. In the center of the table is a large platter of spaghetti. Because the spaghetti are long and tangled a philosopher must use two forks to eat them. Since the philosophers can only afford n forks, a single fork is placed between each pair of philosophers, which they have to share. Each philosopher can only reach the forks to their immediate left and right with their left or right hand, respectively. Note: For this exercise, you may not submit handwritten models. Only Promela files will be accepted. Task 1.1. You find a skeleton of a Promela model in philosopher skeleton.pml. Complete the model such that each philosopher chooses non-deterministically to pick up their left or right fork first. Use Spin to find a deadlock and explain its source. How does the falsification time change when increasing the number n of philosophers? Solution. See philosophers 1.pml Task 1.2. The deadlock can be avoided when each philosopher behaves more deterministically to pick up the forks. Note that not all philosophers have to behave the same. Model your solution in Promela and use Spin to check that it is indeed deadlock free. Solution. See philosophers 2.pml. We implement the following order: Philosopher 0 picks up the left fork first, all other philosophers pick up the right fork first. Assignment B (Mole Game) Consider the following game between a mole (Maulwurf ) and a hunter. The mole has five holes as in the above figure. At the beginning of the game, the mole hides in one of these holes. Now the game proceeds in rounds of the following form: the hunter checks one hole to see whether the mole is inside. If it is, the hunter wins the game. If not, the mole must move one hole to the left or right (if it is in the leftmost hole already, it must move to the right and conversely for the rightmost hole). After the mole has moved, the next round starts. It turns out that the hunter has a strategy to win the game, no matter how the mole moves. One sure winning strategy for the hunter is to check holes in the sequence 2-3-4-2-3-4. 2 Your task is to model this game in Promela. Your model has to contain the data structure for the holes, the set-up of the initial state (the hiding of the mole), the behaviour of the mole, the implementation of the hunter’s winning strategy, and an assertion that ensures that after executing the strategy, the hunter has definitely caught the mole. Note: For this exercise, you may not submit handwritten models. Only Promela files will be accepted. Solution. See mole.pml. 3","libVersion":"0.5.0","langs":""}