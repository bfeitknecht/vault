{"path":"sem3/TI/UE/s/TI-s-u04.pdf","text":"Departement Informatik Theoretische Informatik Prof. Dr. Dennis Komm Prof. Dr. Juraj Hromkoviˇc Dr. Hans-Joachim B¨ockenhauer Exemplary Solutions – Sheet 4 Z¨urich, October 18, 2024 Solution to Task 10 The following finite automaton accepts the language L = {xw ∈ Σ ∗ bool | x ∈ Σbool and Number(w) ≡ x (mod 4)}. q0 q00 0q00 1 q01 0 q10 0 q11 0 q01 1 q10 1q11 1 0 0 1 0 10 1 0 1 1 0 1 0 1 0 1 0 1 The automaton reads the value x ∈ Σbool and accordingly moves to one of two subautomata – to the right if x = 0 and to the left if x = 1. Since the value Number(w) (mod 4) for w ∈ Σ ∗ bool only depends on the final two symbols of w, the two subautomata each memorize the final two symbols of the prefix read thus far and accept accordingly. Formulated more precisely, the automaton’s states induce the following classes: Kl[q0] = {λ} , ∀x ∈ Σbool : Kl[q00 x ] = {xv00 | v ∈ Σ ∗ bool} ∪ {x, x0} , ∀x ∈ Σbool : Kl[q01 x ] = {xv01 | v ∈ Σ ∗ bool} ∪ {x1} , ∀x ∈ Σbool ∀s ∈ {10, 11} : Kl[qs x] = {xvs ∈ Σ∗ bool | v ∈ Σ ∗ bool} . Alternative solution: We notice that we can contract the two states q01 0 and q11 0 in the subautomaton on the right into a single state q∗1 0 . This can be seen as follows: • When reading a 0, the automaton moves to q10 0 both from q01 0 and from q11 0 . • When reading a 1, the automaton, if it is in either one of the states q01 0 or q11 0 , stays in one of these two states. • The states q01 0 and q11 0 do not contradict each other with respect to accepting. That only three states are necessary in the subautomaton on the right also makes sense intuitively: If the word read thus far ends with the symbol 1, the automaton does not need to know the second-to-last symbol read thus far in order to decide whether the entire input ends in 00. Analogously, we notice that we can contract the states q00 1 and q10 1 into q∗0 1 in the subauto- maton on the left. Hence, this yields the automaton: q0 q00 0q∗0 1 q∗1 0 q10 0 q01 1 q11 1 0 0 1 0 1 0 1 1 0 1 0 1 0 1 where we have Kl[q∗1 0 ] = Kl[q01 0 ] ∪ Kl[q11 0 ] and Kl[q∗0 1 ] = Kl[q00 1 ] ∪ Kl[q10 1 ]. 2 Solution to Task 11 The language L given in the statement of the exercise can be written as L = L1 ∪ L2, where L1 = {w ∈ {a, b}∗ | |w|a ≡ 1 (mod 3)} , L2 = {w ∈ {a, b}∗ | |w| = 2} . The language L1 is accepted by the following automaton A1: q0 q1 q2 a b a b a b We have ∀i ∈ {0, 1, 2} : Kl[qi] = {w ∈ {a, b}∗ | |w|a ≡ i (mod 3)}. The language L2 is accepted by the following automaton A2: p0 p1 p2 p3 a, b a, b a, b a, b We have ∀i ∈ {0, 1, 2} : Kl[pi] = {a, b}i , Kl[p3] = {a, b}∗ − (Kl[p0] ∪ Kl[p1] ∪ Kl[p2]) . Using the paradigm of modular design, one can construct the following product automaton from the languages A1 and A2 that accepts the language L = L1 ∪ L2. For the sake of readability, we use the notation rx,y = ⟨px, qy⟩. Since this product automaton accepts the union of two languages, its accepting states are all states containing an accepting state from one of the two subautomata. 3 q0 q1 q2 a b a b a b r00 r01 r02 r10 r11 r12 r20 r21 r22 r30 r31 r32 a a a a a a a a a a a a b b b b b b b b b b b b p0 p1 p2 p3 a, b a, b a, b a, b The states r01, r02 and r12 cannot be reached from the initial state and hence can be omitted from the automaton. Solution to Task 12 (a) We use Lemma 3.12 from the textbook to show that the language L1 = {w ∈ {a, b, c}∗ | w contains the subword ab equally as often as the subword ba} is not regular. Suppose that L1 is regular. Then there exists an automaton A = (Q, {a, b, c}, δ, q0, F ) with L(A) = L1. Let m = |Q|. We consider the words λ, abc, (abc) 2, . . . , (abc) m . Because these are m + 1 words, i.e., more words than the number of A’s states, there exist i, j ∈ {0, . . . , m} with i ̸= j such that ˆδ(q0, (abc) i) = ˆδ(q0, (abc) j) . Lemma 3.12 implies that, for all z ∈ {a, b, c}∗, (abc)iz ∈ L1 ⇐⇒ (abc) jz ∈ L1. 4 However, choosing z = (bac) i leads to a contradiction because (abc)iz = (abc) i(bac) i ∈ L1 and (abc)jz = (abc) j(bac) i /∈ L1. Hence, the assumption is false and L1 is not regular. (b) We use the pumping lemma to prove that the language L2 = {wabwR | w ∈ {a, b}∗} is not regular. Assume that L2 were regular. Then, following the pumping lemma (Lemma 3.14), there exists a constant n0 ∈ N such that every word w ∈ {a, b} ∗ with |w| ≥ n0 can be partitioned into three parts y, x, and z such that 1. |yx| ≤ n0, 2. |x| ≥ 1, and 3. either {yx kz | k ∈ N} ⊆ L2 or {yx kz | k ∈ N} ∩ L2 = ∅. We choose the word w = an0aban0. Obviously, |w| ≥ n0. Hence, there exists a partition w = yxz of w satisfying the conditions (i), (ii), and (iii). Following (i), we have |yx| ≤ n0, thus y = al and x = a m, for l, m ∈ N with l + m ≤ n0, and in particular m ≤ n0. Following (ii) we further know that m > 0. Since w ∈ L2, following (iii), we have that also {yx kz | k ∈ N} = {an0+(k−1)maban0 | k ∈ N} ⊆ L2 . But this leads to a contradiction since yx 2z = an0+maban0 /∈ L2. Hence, the assump- tion is false and L2 is not regular. 5","libVersion":"0.3.2","langs":""}