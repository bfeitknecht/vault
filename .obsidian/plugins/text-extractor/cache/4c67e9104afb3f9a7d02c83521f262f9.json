{"path":"sem2/AuW/VRL/slides/AuW-L24a-flow-matchings.pdf","text":"Vorlesung Algorithmen und Wahrscheinlichkeit, D-INFK, ETH Zürich Angelika Steger & Emo Welzl Flüsse in Netzwerken: Anwendungen (Teil 1) uvabcuvabcQuelleSenkeuvabcQuelleSenke10uvabcQuelleSenke 0 / 12 I Matchings – Problemstellung Maximum Bipartite Matching Problem. Gegeben ein bipartiter Graph, ﬁnde ein maximum (d.h. kardinalitätsmaximales) Matching. Graph, ungerichtet, ungewichtet. 1 / 12 Matching – Deﬁnition Eine Kantenmenge M ⊆ E heisst Matching in einem Graphen G = (V , E ), falls kein Knoten des Graphen zu mehr als einer Kante aus M inzident ist, d.h., wenn e ∩ f = ∅ für alle e,f ∈ M mit e ̸= f . 2 / 12 Bipartiter Graph – Deﬁnition Die Knotenmenge eines bipartiten Graphen G = (U ⊎ W , E ) besteht aus zwei disjunkten Mengen U und W und die Kanten von G verlaufen nur zwischen den beiden Mengen, d.h. ∀e ∈ E : |e ∩ U| = |e ∩ W | = 1 . U W 3 / 12 Graph zu Netzwerk (für Matchings) Wir bilden jeden bipartiten Graphen (mit vorgegebener Knotenpartition U ⊎ W ) auf ein Netzwerk ab. bipartiter Graph z }| { G = (U ⊎ W , E ) 7→ Netzwerk z }| { NG = (U ⊎ W ⊎ {s, t} | {z } Knotenmenge , A, c, s, t) ▶ s ̸= t zusätzliche Knoten. ▶ A := {s}×U ∪ {(u, w ) ∈ U ×W | {u, w } ∈ E } ∪ W ×{t}. ▶ c ≡ 1. 4 / 12 Graph zu Netzwerk (für Matchings) G NG U W s t c ≡ 1 5 / 12 Maximale Flüsse in NG ts c ≡ 1 ⇐ Satz (Ford-Fulkerson, ganzzahlig) Sei Nein Netzwerk mit ganzz. Kapazitäten ≤ U. Dann gibt es einen ganzz. maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. Hier: U = 1. 6 / 12 Maximale Flüsse in NG ts1111 1 2 1 2 1 2 1 2 c ≡ 1 ⇐ Satz (Ford-Fulkerson, ganzzahlig) Sei Nein Netzwerk mit ganzz. Kapazitäten ≤ U. Dann gibt es einen ganzz. maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. Hier: U = 1. 6 / 12 Maximale Flüsse in NG ts11111010 c ≡ 1 ⇐ Satz (Ford-Fulkerson, ganzzahlig) Sei Nein Netzwerk mit ganzz. Kapazitäten ≤ U. Dann gibt es einen ganzz. maximalen Fluss. Er kann in Zeit O(mnU) berechnet werden. Hier: U = 1. 6 / 12 Matching zu Fluss – und vice versa U W s t c ≡ 1 Matching M in G 7→ Fluss fM in NG mit val(fM ) = |M|. Ganzz. Fluss f in NG 7→ Matching M in G mit |M| = val(f ). Maximum Matching in G „≃“ ganzz. Maxﬂow in NG . max M Matching in G |M| = max f Fluss in NG val(f ) 7 / 12 Matching zu Fluss – und vice versa U W s t c ≡ 1 Matching M in G 7→ Fluss fM in NG mit val(fM ) = |M|. Ganzz. Fluss f in NG 7→ Matching M in G mit |M| = val(f ). Maximum Matching in G „≃“ ganzz. Maxﬂow in NG . max M Matching in G |M| = max f Fluss in NG val(f ) 7 / 12 Matching zu Fluss – und vice versa U W s t c ≡ 1 Matching M in G 7→ Fluss fM in NG mit val(fM ) = |M|. Ganzz. Fluss f in NG 7→ Matching M in G mit |M| = val(f ). Maximum Matching in G „≃“ ganzz. Maxﬂow in NG . max M Matching in G |M| = max f Fluss in NG val(f ) 7 / 12 Matching zu Fluss – und vice versa U W s t c ≡ 1 Matching M in G 7→ Fluss fM in NG mit val(fM ) = |M|. Ganzz. Fluss f in NG 7→ Matching M in G mit |M| = val(f ). Maximum Matching in G „≃“ ganzz. Maxﬂow in NG . max M Matching in G |M| = max f Fluss in NG val(f ) 7 / 12 Matching zu Fluss – und vice versa U W s t c ≡ 1 Matching M in G 7→ Fluss fM in NG mit val(fM ) = |M|. Ganzz. Fluss f in NG 7→ Matching M in G mit |M| = val(f ). Maximum Matching in G „≃“ ganzz. Maxﬂow in NG . max M Matching in G |M| = max f Fluss in NG val(f ) 7 / 12 II Kantendisjunkte Pfade Kantendisjunkte Pfade Problem. Gegeben ein Graph G mit zwei ausgezeichneten Knoten u und v , v ̸= u, bestimme eine möglichst grosse Menge kantendisjunkter u-v -Pfade. Zur Erinnerung: Satz (Menger) Sei G = (V , E ) ein Graph. G ist genau dann k-kantenzusammenhängend, wenn es für alle Paare von Knoten u, v ∈ V , u ̸= v , mindestens k kantendisjunkte u-v -Pfade gibt. 8 / 12 Graph zu Netzwerk (für kantendisjunkte Pfade) Graph mit 2 Knoten z }| { G = (V , E ), u, v ∈ V 7→ Netzwerk z }| { N ∗ G = (V , A, c, u, v ) ▶ A := {(x, y ), (y , x) | {x, y } ∈ E } . ▶ c ≡ 1 . uvabcuvabcQuelleSenke Nun haben wir entgegen gerichtete Kanten im Netzwerk! 9 / 12 Fluss zu kantendisjunkten Pfaden ▶ Berechne ganzz. max. Fluss f in N ∗ G ⇒ Flusswerte ∈ {0, 1}. ▶ Für alle Knoten w ̸∈ {u, v } gilt: indegf (w ) = outdegf (w ). ▶ val(f ) = outdegf (u) − indegf (u) = indegf (v ) − outdegf (v ). Ein-/Ausgrade bzgl. Fluss 1 Kanten. uvabcQuelleSenke10 ▶ Beginnend bei u laufe entlang gerichteten ungebrauchten Kanten mit Fluss 1 bis man bei v ankommt. Unterwegs durchlaufene Kanten werden als gebraucht markiert. ▶ Wiederhole val(f ) Mal. Das gibt val(f ) kantendisjunkte Pfade (nach Entfernen von Kreisen). 10 / 12 Fluss zu kantendisjunkten Pfaden ▶ Berechne ganzz. max. Fluss f in N ∗ G ⇒ Flusswerte ∈ {0, 1}. ▶ Für alle Knoten w ̸∈ {u, v } gilt: indegf (w ) = outdegf (w ). ▶ val(f ) = outdegf (u) − indegf (u) = indegf (v ) − outdegf (v ). Ein-/Ausgrade bzgl. Fluss 1 Kanten. uvabcQuelleSenke ▶ Beginnend bei u laufe entlang gerichteten ungebrauchten Kanten mit Fluss 1 bis man bei v ankommt. Unterwegs durchlaufene Kanten werden als gebraucht markiert. ▶ Wiederhole val(f ) Mal. Das gibt val(f ) kantendisjunkte Pfade (nach Entfernen von Kreisen). 10 / 12 Fluss zu kantendisjunkten Pfaden ▶ Berechne ganzz. max. Fluss f in N ∗ G ⇒ Flusswerte ∈ {0, 1}. ▶ Für alle Knoten w ̸∈ {u, v } gilt: indegf (w ) = outdegf (w ). ▶ val(f ) = outdegf (u) − indegf (u) = indegf (v ) − outdegf (v ). Ein-/Ausgrade bzgl. Fluss 1 Kanten. uvabcQuelleSenke ▶ Beginnend bei u laufe entlang gerichteten ungebrauchten Kanten mit Fluss 1 bis man bei v ankommt. Unterwegs durchlaufene Kanten werden als gebraucht markiert. ▶ Wiederhole val(f ) Mal. Das gibt val(f ) kantendisjunkte Pfade (nach Entfernen von Kreisen). 10 / 12 Fluss zu kantendisjunkten Pfaden ▶ Berechne ganzz. max. Fluss f in N ∗ G ⇒ Flusswerte ∈ {0, 1}. ▶ Für alle Knoten w ̸∈ {u, v } gilt: indegf (w ) = outdegf (w ). ▶ val(f ) = outdegf (u) − indegf (u) = indegf (v ) − outdegf (v ). Ein-/Ausgrade bzgl. Fluss 1 Kanten. uvabcQuelleSenke ▶ Beginnend bei u laufe entlang gerichteten ungebrauchten Kanten mit Fluss 1 bis man bei v ankommt. Unterwegs durchlaufene Kanten werden als gebraucht markiert. ▶ Wiederhole val(f ) Mal. Das gibt val(f ) kantendisjunkte Pfade (nach Entfernen von Kreisen). 10 / 12 Fluss zu kantendisjunkten Pfaden ▶ Berechne ganzz. max. Fluss f in N ∗ G ⇒ Flusswerte ∈ {0, 1}. ▶ Für alle Knoten w ̸∈ {u, v } gilt: indegf (w ) = outdegf (w ). ▶ val(f ) = outdegf (u) − indegf (u) = indegf (v ) − outdegf (v ). Ein-/Ausgrade bzgl. Fluss 1 Kanten. uvabcQuelleSenke ▶ Beginnend bei u laufe entlang gerichteten ungebrauchten Kanten mit Fluss 1 bis man bei v ankommt. Unterwegs durchlaufene Kanten werden als gebraucht markiert. ▶ Wiederhole val(f ) Mal. Das gibt val(f ) kantendisjunkte Pfade (nach Entfernen von Kreisen). 10 / 12 Maxﬂow-Mincut Theorem vs. Satz von Menger Satz (Maxﬂow-Mincut) Jedes Netzwerk erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Und ganzzahlige Netzwerke haben ganzzahlige maximale Flüsse. ⇓ uvabcuvabcQuelleSenke Satz (Menger, Variante) Sei G ein Graph mit Knoten u und v , u ̸= v . max # kantendisjunkter u-v -Pfade in G = min # Kanten, die u und v trennen („trennen“ heisst, nach Entfernen der Kanten sind u und v in verschiedenen Zusammenhangskomponenten des Graphen). 11 / 12 Maxﬂow-Mincut Theorem vs. Satz von Menger Satz (Maxﬂow-Mincut) Jedes Netzwerk erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Und ganzzahlige Netzwerke haben ganzzahlige maximale Flüsse. ⇓ uvabcuvabcQuelleSenke Satz (Menger, Variante) Sei G ein Graph mit Knoten u und v , u ̸= v . max # kantendisjunkter u-v -Pfade in G = min # Kanten, die u und v trennen („trennen“ heisst, nach Entfernen der Kanten sind u und v in verschiedenen Zusammenhangskomponenten des Graphen). 11 / 12 Maxﬂow-Mincut Theorem vs. Satz von Menger Satz (Maxﬂow-Mincut) Jedes Netzwerk erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) . Und ganzzahlige Netzwerke haben ganzzahlige maximale Flüsse. ⇓ uvabcuvabcQuelleSenke Satz (Menger, Variante) Sei G ein Graph mit Knoten u und v , u ̸= v . max # kantendisjunkter u-v -Pfade in G = min # Kanten, die u und v trennen („trennen“ heisst, nach Entfernen der Kanten sind u und v in verschiedenen Zusammenhangskomponenten des Graphen). 11 / 12 Flüsse helfen bei . . . ▶ Matchings, hier: bipartites maximum Matching in O(mn) (geht besser in O((m + n)√n) [Hopcroft&Karp‘73]). ▶ Schnitten zwischen Knoten u und v (Knoten-/Kantenzusammenhang). ▶ Kantendisjunkten Pfaden (auch knotendisjunkten Pfaden). ▶ Beweis Satz von Menger (aus Maxﬂow-Mincut). 12 / 12","libVersion":"0.3.1","langs":""}