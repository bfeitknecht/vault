{"path":"sem2a/DDCA/UE/e/slides/DDCA-LAB06-testbench.pdf","text":"Frank K. Gürkaynak Seyyedmohammad Sadrosadati ETH Zurich Spring 2024 [23. April 2024] Digital Design & Computer Arch. Lab 6 Supplement: Testing the ALU What Will We Learn? n In Lab 6, you learn how to: q Verify the functionality of your designs using testbenches. q Find and resolve bugs in your design. n You will: q Write a testbench that verifies the correctness of your ALU from Lab 5. q Use the same testbench to find and fix bugs in a buggy ALU that we provide. 2 Preparation n You are expected to finish Lab 5 before continuing, because we will be testing the ALU from Lab 5. n Download the material for Lab 6, which includes: q A template testbench file; q A template for the test-vectors; q A Verilog description of an ALU, which contains some bugs. 3 Part 1: Expected Results n Before writing our testbench, we need to prepare a set of inputs for which the expected results are known. n You will be given a set of inputs for the ALU you designed in Lab 5. n Determine the correct result for each set. Then, specify them in the file testvectors_hex.txt that we provide. n For output ‘zero’: directly set its expected value within the testbench 4 Part 2: Preparing the Testbench n Create a project with your ALU from Lab 5 and the testbench template we provided you with. n Make the necessary modifications to the testbench. n After this, you will have a testbench that will q Apply the vectors in the testvectors_hex.txt file; q Check the actual outputs of our ALU against what we expect. 5 Part 2: Why use a Testbench? n In Lab 5 we have seen that exhaustive search is not a feasible option anymore. n Instead we test our ALU on a set of representative values using the testbench. q If the ALU can add 1 and 2 it can probably also add 1 and 3. q For each operation test if it works for some examples. 6 Part 3: Simulating the ALU n Run behavioral simulation using Vivado’s built-in simulator. 7 Part 3: Simulating the ALU: Caching n It can happen that Vivado fails to recognise file changes q It then uses cached (and outdated) information for the behavioral simulation. n This can be fixed by deleting all cached files and then doing the behavioral simulation again. 8 do not delete can be deleted can be deleted Part 4: Debugging the Problem n Using a simulator can help you locate the problems in your circuits. n You can not only observe the outputs but the state of all internal variables as well. 9 Part 4: Wave Diagrams Introduction n At first the wave diagrams are not very useful. o They are unformatted o Data is displayed in hexadecimal 10 Fit wave diagram to screen width Part 4: Wave Diagrams Introduction n At first the wave diagrams are not very useful. o They are unformatted o Data is displayed in hexadecimal 11 Select decimal option Part 4: Wave Diagrams Introduction n Selecting an Object in the wave diagram allows you to navigate the wave diagram using the < and > keys. o Allows you to jump between wave fronts. 12 Part 4: Wave Diagrams Introduction n You can add other signals to the wave diagram. n This is useful for debugging the Unit-Under-Test (UUT). 13 Last Words n In Lab 6, you learn how to q write testbenches in Verilog to verify the functionality of the design. q Find and resolve bugs in your design n Write a testbench that verifies the correctness of your ALU from Lab 5. n Use the same testbench to find and solve bugs in a buggy ALU that we provide. n In the report, you will design a testbench for your FSM from Lab 4. 14 Report Deadline 15 [10. Mai 2024 23:59] Frank K. Gürkaynak Seyyedmohammad Sadrosadati ETH Zurich Spring 2024 [23. April 2024] Digital Design & Computer Arch. Lab 6 Supplement: Testing the ALU","libVersion":"0.3.2","langs":""}