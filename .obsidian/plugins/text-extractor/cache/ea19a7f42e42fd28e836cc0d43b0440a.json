{"path":"sem2/AuW/VRL/slides/AuW-L21-network-flow.pdf","text":"Vorlesung Algorithmen und Wahrscheinlichkeit, D-INFK, ETH Zürich Angelika Steger & Emo Welzl Flüsse in Netzwerken: Einführung & Modellierung Ursprung: Interesse am russischen Schienennetz, [A.N. Tolsto˘ı ‘30] und [Harris&Ross ‘55] (diese Abb.). 0 / 14 Problemstellung MaxFlow Problem. Gegeben ein Netzwerk, ﬁnde einen Fluss grössten Werts. (Netzwerk?, Fluss?, Wert?) Verkehrsﬂüsse Geldﬂüsse Transportprobleme elektrische Leitungen mit Widerständen Bildsegmentierung in der Bildverarbeitung Matchings in Graphen Schnitte (Cuts) in Graphen Disjunkte Wege in Graphen Grenzbereich polynomiell vs. nicht polynomiell 1 / 14 Problemstellung MaxFlow Problem. Gegeben ein Netzwerk, ﬁnde einen Fluss grössten Werts. (Netzwerk?, Fluss?, Wert?) Verkehrsﬂüsse Geldﬂüsse Transportprobleme elektrische Leitungen mit Widerständen Bildsegmentierung in der Bildverarbeitung Matchings in Graphen Schnitte (Cuts) in Graphen Disjunkte Wege in Graphen Grenzbereich polynomiell vs. nicht polynomiell 1 / 14 Problemstellung MaxFlow Problem. Gegeben ein Netzwerk, ﬁnde einen Fluss grössten Werts. (Netzwerk?, Fluss?, Wert?) Verkehrsﬂüsse Geldﬂüsse Transportprobleme elektrische Leitungen mit Widerständen Bildsegmentierung in der Bildverarbeitung Matchings in Graphen Schnitte (Cuts) in Graphen Disjunkte Wege in Graphen Grenzbereich polynomiell vs. nicht polynomiell 1 / 14 Netzwerk – Deﬁnition Ein Netzwerk ist ein Tupel N = (V , A, c, s, t), wobei gilt: ▶ (V , A) ist ein gerichteter Graph (ohne Schleifen), ▶ s ∈ V , die Quelle, ▶ t ∈ V \\ {s}, die Senke, und ▶ c : A → R + 0 , die Kapazitätsfunktion. st s t a b c 5 6 1 7 2 2 6 1 2 / 14 Netzwerk – Deﬁnition Ein Netzwerk ist ein Tupel N = (V , A, c, s, t), wobei gilt: ▶ (V , A) ist ein gerichteter Graph (ohne Schleifen), ▶ s ∈ V , die Quelle, ▶ t ∈ V \\ {s}, die Senke, und ▶ c : A → R + 0 , die Kapazitätsfunktion. st s t a b c 5 6 1 7 2 2 6 1 2 / 14 Fluss – Deﬁnition Sei N = (V , A, c, s, t) ein Netzwerk. Ein Fluss in N ist eine Funktion f : A → R mit den Bedingungen ▶ Zulässigkeit: 0 ≤ f (e) ≤ c(e) für alle e ∈ A. ▶ Flusserhaltung: Für alle v ∈ V \\ {s, t} gilt ∑ u∈V : (u,v )∈A f (u, v ) = ∑ u∈V : (v ,u)∈A f (v , u) . Der Wert eines Flusses f ist deﬁniert als val(f ) := netoutﬂow(s) := ∑ u∈V : (s,u)∈A f (s, u) − ∑ u∈V : (u,s)∈A f (u, s) . 3 / 14 Netzwerk und Fluss s t a b c 5 6 1 7 2 2 6 1 s t a b c 3 5 1 7 1 2 6 1 Fluss mit Wert 3 − 1 + 5 = 7 4 / 14 Nettozuﬂuss der Senke Intuition: Soviel, wie bei der Quelle herausﬂiesst, muss bei der Senke hineinﬂiessen. Lemma Der Nettozuﬂuss der Senke t gleicht dem Wert des Flusses, d.h. netinﬂow(t) := ∑ u∈V : (u,t)∈A f (u, t) − ∑ u∈V : (t,u)∈A f (t, u) = val(f ) . 5 / 14 Nettozuﬂuss der Senke Intuition: Soviel, wie bei der Quelle herausﬂiesst, muss bei der Senke hineinﬂiessen. Lemma Der Nettozuﬂuss der Senke t gleicht dem Wert des Flusses, d.h. netinﬂow(t) := ∑ u∈V : (u,t)∈A f (u, t) − ∑ u∈V : (t,u)∈A f (t, u) = val(f ) . 5 / 14 Nettozuﬂuss der Senke – Beweis 0 = ∑ (v ,u)∈A f (v , u) − ∑ (u,v )∈A f (u, v ) = ∑ v ∈V   ∑ u∈V : (v ,u)∈A f (v , u) − ∑ u∈V : (u,v )∈A f (u, v )   | {z } =0 für v ̸∈{s,t} =   ∑ u∈V : (s,u)∈A f (s, u) − ∑ u∈V : (u,s)∈A f (u, s)   | {z } =val(f ) +   ∑ u∈V : (t,u)∈A f (t, u) − ∑ u∈V : (u,t)∈A f (u, t)   | {z } = −netinﬂow(t) 6 / 14 Problemstellung MaxFlow Problem. Gegeben ein Netzwerk N = (V , A, c, s, t), ﬁnde einen Fluss f grössten Werts (einen maximalen Fluss). ▶ Gibt es immer einen solchen maximalen Fluss? Es könnte ein ähnliches Phänomen auftreten wie beim oﬀenen Intervall (0, 1): Es gibt keine grösste Zahl, kein Maximum. ▶ Wie erkennt man, dass ein Fluss maximal ist? Was ist ein „einfacher“ Beweis für die Maximalität eines Flusses? Wir betrachten dazu vorerst Schnitte in Graphen. 7 / 14 Schnitt - Deﬁnition Ein s-t-Schnitt für ein Netzwerk (V , A, c, s, t) ist eine Partition (S, T ) von V mit s ∈ S und t ∈ T . Die Kapazität eines s-t-Schnitts (S, T ) ist durch cap(S, T ) := ∑ (u,w )∈(S×T )∩A c(u, w ) deﬁniert. (Partition (S, T ): S ∪ T = V und S ∩ T = ∅) Wichtig: Die Kapazität eines Schnitts (S, T ) ignoriert die Kanten von T nach S! 8 / 14 Schnitt - Deﬁnition Ein s-t-Schnitt für ein Netzwerk (V , A, c, s, t) ist eine Partition (S, T ) von V mit s ∈ S und t ∈ T . Die Kapazität eines s-t-Schnitts (S, T ) ist durch cap(S, T ) := ∑ (u,w )∈(S×T )∩A c(u, w ) deﬁniert. (Partition (S, T ): S ∪ T = V und S ∩ T = ∅) Wichtig: Die Kapazität eines Schnitts (S, T ) ignoriert die Kanten von T nach S! 8 / 14 Schnitt s t a b c 5 6 1 7 2 2 6 1 S T Schnitt mit Kapazität 6 + 2 + 2 = 10. 9 / 14 Schnitt s t a b c 5 6 1 7 2 2 6 1 S T Schnitt mit Kapazität 6 + 2 + 2 = 10. 9 / 14 Schnitt vs. Fluss Lemma Ist f ein Fluss und (S, T ) ein s-t-Schnitt in einem Netzwerk (V , A, c, s, t), so gilt val(f ) ≤ cap(S, T ) . Ein Fluss kann nie grösser sein als die Kapazität eines s-t-Schnitts. Finden wir zu einem Fluss f einen s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ), so ist f ein maximaler Fluss. Der Schnitt (S, T ) is ein einfacher Beweis (ein einfaches Zertiﬁkat) für die Maximalität von f . 10 / 14 Schnitt vs. Fluss Lemma Ist f ein Fluss und (S, T ) ein s-t-Schnitt in einem Netzwerk (V , A, c, s, t), so gilt val(f ) ≤ cap(S, T ) . Ein Fluss kann nie grösser sein als die Kapazität eines s-t-Schnitts. Finden wir zu einem Fluss f einen s-t-Schnitt (S, T ) mit cap(S, T ) = val(f ), so ist f ein maximaler Fluss. Der Schnitt (S, T ) is ein einfacher Beweis (ein einfaches Zertiﬁkat) für die Maximalität von f . 10 / 14 Schnitt vs. Fluss s t a b c 5 6 1 7 2 2 6 1 S T Schnitt mit Kapazität 6 + 2 + 2 = 10. 11 / 14 Lemma „val(f ) ≤ cap(S, T )“ - Beweis Für eine Partition (U, W ) von V sei f (U, W ) := ∑ (u,w )∈(U×W )∩A f (u, w ) . Wir behaupten val(f ) (i) = f (S, T ) − f (T , S) (ii) ≤ f (S, T ) (iii) ≤ cap(S, T ), (ii) Folgt aus Nichtnegativität des Flusses auf jeder Kante. (iii) Folgt aus der Kapazitätsbeschränkung „f (u, w ) ≤ c(u, w )“. (i) gilt für S = {s} bei Deﬁnition, und für T = {t} wg. netinﬂow(t) = val(f ). Allgemein . . . 12 / 14 Lemma „val(f ) ≤ cap(S, T )“ - Beweis val(f ) = ∑ u∈V : (s,u)∈A f (s, u) − ∑ u∈V : (u,s)∈A f (u, s) = ∑ v ∈S   ∑ u∈V : (v ,u)∈A f (v , u) − ∑ u∈V : (u,v )∈A f (u, v )   | {z } =0 für v ̸=s = ∑ (u,w )∈(S×T )∩A f (u, w ) − ∑ (u,w )∈(T ×S)∩A f (u, w ) = f (S, T ) − f (T , S) 13 / 14 Maxﬂow-Mincut Ein einfaches Maximalitätszertiﬁkat existiert immer. Satz („Maxﬂow-Mincut Theorem“) Jedes Netzwerk N = (V , A, c, s, t) erfüllt maxf Fluss val(f ) = min(S,T ) s-t-Schnitt cap(S, T ) Beachte: Da es nur endlich viele s-t-Schnitte gibt, d.h. ▶ s-t-MinCut ist ein endliches algorithmisches Problem, und ▶ ein minimaler Schnitt existiert immer. Am Ende werden wir doch s-t-MinCut mit MaxFlow lösen. 14 / 14","libVersion":"0.3.1","langs":""}