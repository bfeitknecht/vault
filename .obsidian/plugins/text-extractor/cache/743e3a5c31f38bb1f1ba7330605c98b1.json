{"path":"sem2/PProg/VRL/slides/PProg-L03-L05-JAVATHREADS.pdf","text":"Pa r a l l e l P r o g r a m m i n g In tr o d u c ti o n t o T h r e a d s a n d S y n c h r o n i z a ti o n St ru c t u r e o f N e x t Le c t u r e s M o t i v a t i o n: P a r a l l e l i s m i s T r i c k y but U s e f ul M ul t i pr o c e s s i ng v s . M ul t i t hr e a di ng J a v a T hr e a ds : C r e a t i o n, S t a t us , J o i n S ha r e d R e s o ur c e s , T hr e a d I n t e r l e a v i ng s S y nc hr o ni z a t i o n w i t h synchronize Bl oc k s C o o r di na t i o n/ C o m m uni c a t i o n: P r o duc e r - C o ns um e r w i t h wait & notify 2 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up 3 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up Ge t o ut o f be d 4 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up Ge t o ut o f be d Bru s h t e e t h 5 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up Ge t o ut o f be d Bru s h t e e t h Ge t dr e s s e d 6 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up Ge t o ut o f be d Bru s h t e e t h Ge t dr e s s e d Ma k e c of f e e Ma k e t oa s t 7 Pa r a l l e l i s m : a n a n a l o g y Wa ke - up Ge t o ut o f be d Bru s h t e e t h Ge t dr e s s e d Ma k e c of f e e Ma k e t oa s t 8SequentialParallel Pa r a l l e l i s m : a n a n a l o g y ( c o n t i n u e d ) 9 Th e b a d n e w s: P a r a l l e l i s m i s t r i ck y ! 10 Ma g i c T ri c k ( 1) 11 P i c k o n e c a r d f r o m t h e s i x c a r d s b e l o w : Fo c u s o n j u s t t h a t c a r d ! Ma g i c T ri c k ( 2) I’ v e s h u f f l e d t h e c a r d s a n d r e m o v e d t h e o n e w h i c h I t h i n k w a s y o u r c a r d . Ca n y o u s t i l l r e m e m b e r y o u r c a r d ? 12 Ma g i c T ri c k ( 3) H e r e a r e t h e r e m a i n i n g f i v e c a r d s , i s y o u r c a r d t h e r e ? D i d I g ue s s r i g h t ? O r i s i t a n i l l us i o n? 13 Ma g i c T ri c k – Th e E x p l a n a t i o n • Yo u ju s t ex p e r i e n c e d In a t t e n t i o n a l Bl i nd ne s s • No n e of th e orig in al si x ca r d s wa s di s pl a y e d! 14 Ta k e H o m e M e s s a g e : Y o u c a n ’ t d o t w o t h i n g s a t a t i m e At t e n t i o n i n v o l v e s s e l e c t i v e p r o c e s s i n g o f v i s u a l i n f o r m a t i o n O u r b r a i n i s n o t “m a d e f o r ” d o i n g t h i n g s i n p a r a l l e l ( o r t h i n k i n g o f pa r a l l e l i s m) . I f a t t e n t i o n i s e l s e w h e r e ( e v e n t e m p o r a r i l y ) , c h a n g e s c a n b e m i s s e d à imp lic a t io n ? • Dr i v i n g ! • La p t op i n C l a s s ! 15 Th e g o o d n e w s: Pa r a l l e l i s m i s u s e f u l ! 162/ 25/ 24 17 M u l t i t a s k i n g / M u l t i p r o ce s s i n g 18 Mu l t i t a s k i n g C o nc ur r e n t e x e c ut i o n o f m ul t i pl e t a s k s / pr o c e s s e s T i m e m ul t i pl e x i ng o f C P U C r e a t e s i m pr e s s i o n o f pa r a l l e l i s m E v e n o n s i ng l e c o r e / C P U s y s t e m A l l o w s f o r a s y nc hr o no us I / O I / O de v i c e s a nd C P U a r e t r ul y pa r a l l e l 1 0 m s w a i t i ng f o r H D D a l l o w s o t he r pr o c e s s e s t o e x e c ut e > 1 0 10 i ns t r uc t i o ns 19 Pr o c e s s c o n te x t A pr o c e s s i s ( e s s e n t i a l l y ) a pr o g r a m e x e c ut i ng i ns i de a n O S E a c h r unni ng i ns t a nc e s o f a pr o g r a m ( e . g . , m ul t i pl e br o w s e r w i ndo w s ) i s a s e pa r a t e pr o c e s s M ul t i pl e a ppl i c a t i o ns ( = pr o c e s s e s ) i n pa r a l l e l E a c h pr o c e s s ha s a co n t e x t : • I n s t r u c t i o n c o u n t e r • V a l u e s i n r e g i s t e r s , s t a c k a n d h e a p • R e s o u r c e h a n d l e s ( d e v i c e a c c e s s , o p e n f i l e s ) • … 20 Pr o c e s s l i f e c y c l e s t ate s Ma i n Me mo r y 21 Wa i t i n g Bl o c k e d Ru n n i n g Pa g e F i l e / S w a p s p a c e Sw a p p e d o u t W a i t i n g Sw a p p e d o u t B l o c k e d Cr ea t ed Te r m i n a t e d Pr o c e s s m a n a g e m e n t P r o c e s s e s ne e d r e s o ur c e s • C P U t i m e , M e m o r y , e t c . O S m a na g e s pr o c e s s e s : • S t a r t s pr o c e s s e s • T e r m i na t e s pr o c e s s e s ( f r e e s r e s o ur c e s ) • C o n t r o l s r e s o ur c e us a g e ( pr e v e n t s m o no po l i z i ng C P U t i m e ) • S c he dul e s C P U t i m e • S y nc hr o ni z e s pr o c e s s e s i f ne c e s s a r y • A l l o w s f o r i n t e r pr o c e s s c o m m uni c a t i o n 22 Pr o c e s s c o n t r o l b l o c k s ( P C B ) 2324 Ca p t u r e P CB 1 st a t e Lo a d P C B 2 st a t e Ca p t u r e P CB 2 st a t e Lo a d P C B 1 st a t e id le ex e c u t i n g In t e rru pt In t e rru pt Pr o c e s s P 1 Ope r a t i ng S y s t e m Pr o c e s s P 2 Pr oce s s l e v e l p a r a l l e l i s m c a n be c o m pl e x a nd e x pe ns i v e ex e c u t i n g ex e c u t i n g id le id le 25 Mul t i t hr e a di ng 26 Th r e a d s T hr e a ds (o f c o n t r o l ) a r e • i n d e p e n d e n t s e q u e n c e s o f e x e c u t i o n • r u n n i n g i n t h e s a m e O S p r o c e s s M ul t i pl e t hr e a ds s ha r e t he s a m e a ddr e s s s pa c e . • T h r e a d s a r e n o t s h i e l d e d f r o m e a c h o t h e r • T h r e a d s s h a r e r e s o u r c e s a n d c a n c o m m u n i c a t e m o r e e a s i l y C o n t e x t s w i t c hi ng be t w e e n t hr e a ds i s e f f i c i e n t • N o c h a n g e o f a d d r e s s s p a c e • N o a u t o m a t i c s c h e d u l i n g • N o s a v i n g / ( r e - ) l o a d i n g o f P C B ( O S p r o c e s s ) s t a t e 27 Mo r e vu l n e r a b l e f o r pr o g r a m m i ng m i s t a k e s Us ag e o f M u ltith r ead in g Re a c t i v e s y s t e m s – c o ns t a n t l y m o ni t o r i ng M o r e r e s po ns i v e t o us e r i nput – GU I a ppl i c a t i o n c a n i n t e r r up t a t i m e - c o ns um i ng ta s k S e r v e r c a n ha ndl e m ul t i pl e c l i e n t s s i m ul t a ne o us l y T a k e a dv a n t a g e o f m ul t i pl e C P U s / c o r e s 28 Mu l t i t h r e a d i n g : 1 v s . ma n y CP U s 29 Mu l t i p l e th r e a d s s h a ri n g a si n g l e C P U T hr e a d 1 T hr e a d 2 T hr e a d 3 Mu l t i t h r e a d i n g : 1 v s . ma n y CP U s 30 Mu l t i p l e th r e a d s o n mu l ti p l e CPUs Mu l t i p l e th r e a d s s h a ri n g a si n g l e C P U T hr e a d 1 T hr e a d 2 T hr e a d 3 T hr e a d 1 T hr e a d 2 T hr e a d 3 Bi g P i c t u r e (P a rt I ) 32 CPU OS JV M (P r o c e s s A ) Co r e Co r e Co r e Co r e OS t h r ea d OS t h r ea d OS t h r ea d OS t h r ea d OS s c h ed u l er JV M s c h e d u l e r JV M th r e a d Pr o ce s s B Me m o r y S pa c e A Me m o r y S pa c e B Ph y s i c a l M em o r y JV M th r e a d JV M th r e a d JV M th r e a d L0 3 - 05 L0 6 L0 7 L0 8 - 09 L1 0 - L1 1 L1 3 … … St a c k Re g i s t e r s PC St a c k Re g i s t e r s PC St a c k Re g i s t e r s PC St a c k Re g i s t e r s PC Pa r a l l e l per f o r m a nc e & alg o r it h m s L1 2 Vi r tu a l th r e a d s Ja v a T h r ead s 3334 Th r e ad • A s e t o f i n s t r u c t i o n s t o b e e x e c u t e d o n e a t a t i m e , i n a s p e c i f i e d o r d e r • A s pe ci a l T hr e a d cl a s s i s pa r t o f t he c o r e l a ng ua g e (So me ) me t h o d s o f c las s ja v a . l a n g . T h r e a d • st a r t ( ) : me th od c a l l e d t o s p a w n a n e w th r e a d • C a u s e s J V M t o c a l l ru n ( ) m e t h o d o n o b j e c t • in t e r r u p t ( ) : f r e e z e a n d th r o w e x c e p ti on t o th r e a d Ja v a T h r ead s C r e a t e J a v a Th r e a d s : O p t i o n 1 ( o l d e s t ) Ins t an t ia t e a s ubc las s o f java.lang.Thread cl a s s • O v e rri d e ru n m e t h o d ( m u s t b e o v e rri d d e n ) • ru n ( ) i s c a l l e d w h e n e x e c u t i o n o f t h a t t h r e a d b e g i n s • A t h r e a d t e rm i n a t e s w h e n ru n ( ) r e t u rn s • s t a rt ( ) m e t h o d i n v o k e s ru n ( ) • C a l l i n g ru n ( ) d o e s n o t c r e a t e a n e w t h r e a d 35 class ConcurrWriter extends Thread { … public void run() { // code here executes concurrently with caller } } ConcurrWriter writerThread = new ConcurrWriter () ; writerThread. start () ; // calls ConcurrWriter.run () Cre a t i n g th e Th r e a d ob j e c t do e s no t st a r t th e th r e a d ! Ne e d to ac t u all y ca l l st a r t ( ) to st a r t it . C r e a t e J a v a Th r e a d s : O p t i o n 2 ( b e t t e r ) Imple me n t java.lang.Runnable • S i n g l e m e t h o d : p u b l i c v o i d ru n ( ) • C las s im p le m e n t s Runnable 36 public class ConcurrWriter implements Runnable { … public void run() { … // code here executes concurrently with caller } } ConcurrWriter writerThread = new ConcurrWriter () ; Thread t = new Thread( writerThread ) ; t .start () ; // calls ConcurrWriter.run () Th r e a d s t a t e m o d e l i n J a v a 37 ht t p : / / p e r v a s i v e 2 . m o r s e l l i . u n i m o . i t / ~ n i c o l a / c o u r s e s / I n g e g n e r i a D e l S o f t w a r e / j a v a / J 5 e _ m u l t i t h r e a d i n g . ht m l // Thread.java from OpenJDK : // https://hg.openjdk.java.net/jdk/jdk/file/tip/src/java.base/share/classes/java/lang/Thread.java public class Thread implements Runnable { static { registerNatives (); } private volatile String name ; private int priority ; private boolean daemon = false ; ... public static native void yield (); public static native void sleep ( long millis ) throws InterruptedException ; private Thread ( ... ) { ... } public synchronized void start () { ... } private native void start0 (); ... Cre a t e s e x e c u t i o n e n v i ro n m e n t f o r t h e t h re a d (s e ts u p a s e p a r a te r u n - ti m e s ta c k , e tc . ) j a v a . l a n g . Th r e a d (u n d e r t h e h o o d ) 38 A T hr e a d i s R unna b l e // Thread.java from OpenJDK : // https://hg.openjdk.java.net/jdk/jdk/file/tip/src/java.base/share/classes/java/lang/Thread.java public class Thread implements Runnable { static { registerNatives (); } private volatile String name ; private int priority ; private boolean daemon = false ; ... public static native void yield (); public static native void sleep ( long millis ) throws InterruptedException ; private Thread ( ... ) { ... } public synchronized void start () { ... } private native void start0 (); ... j a v a . l a n g . Th r e a d (u n d e r t h e h o o d ) 39 // Thread.c from OpenJDK : // https://hg.openjdk.java.net/jdk/jdk/file/tip/src/java.base/share/nati ve/libjava/Thread.c # include \" jni.h \" # include \" jvm.h \" # include \" java_lang_Thread.h \" # define THD \" Ljava / lang /Thread; \" # define OBJ \" Ljava / lang /Object; \" # define STE \" Ljava / lang / StackTraceElement ; \" # define STR \" Ljava / lang /String; \" # define ARRAY_LENGTH ( a ) ( sizeof ( a ) / sizeof ( a [ 0 ])) static JNINativeMethod methods [] = { {\" start0 \", \" ()V \", ( void * ) & JVM_StartThread }, ... {\" yield \", \" ()V \", ( void * ) & JVM_Yield }, {\" sleep \", \" (J)V \", ( void * ) & JVM_Sleep }, ... Na ti v e C i m p l e m e n ta ti o n of J a v a ’ s native th r e a d me t h o d s E x a m p l e : Th e p a r a l l e l c a l c u l a t o r C r e a t e 1 0 thr e a ds : e a c h c a l c ul a t e s a nd pr i n ts m ul ti pl i c a ti o n t a bl e s be tw e e n 1 - 10 40 public class Calculator implements Runnable { private int number; public Calculator( int number) { this.number = number; } public void run () { // Override run() for (int i = 1; i <= 10; i++){ System. out.printf (\"%s: %d * %d = %d \\ n\", Thread.currentThread (). getName (), number,i,i *number); }}} E x a m p l e : Th e p a r a l l e l c a l c u l a t o r C r e a t e 1 0 thr e a ds : e a c h c a l c ul a t e s a nd pr i n ts m ul ti pl i c a ti o n t a bl e s be tw e e n 1 - 10 41 public class Calculator implements Runnable { private int number; public Calculator( int number) { this.number = number; } public void run () { // Override run() for (int i = 1; i <= 10; i++){ System. out.printf (\"%s: %d * %d = %d \\ n\", Thread.currentThread (). getName (), number,i,i *number); }}} public static void main(String[] args ) { //Launch 10 threads that make the operation with a different number for (int i=1; i <= 10; i++){ Calculator calculator = new Calculator( i ); Thread thread = new Thread(calculator); thread. start (); }} E x a m p l e : Th e p a r a l l e l c a l c u l a t o r C r e a t e 1 0 thr e a ds : e a c h c a l c ul a t e s a nd pr i n ts m ul ti pl i c a ti o n t a bl e s be tw e e n 1 - 10 42 public class Calculator implements Runnable { private int number; public Calculator( int number) { this.number = number; } public void run () { // Override run() for (int i = 1; i <= 10; i++){ System. out.printf (\"%s: %d * %d = %d \\ n\", Thread.currentThread (). getName (), number,i,i *number); }}} public static void main(String[] args ) { //Launch 10 threads that make the operation with a different number for (int i=1; i <= 10; i++){ Calculator calculator = new Calculator( i ); Thread thread = new Thread(calculator); thread. start (); }} Sa mp l e o u t p u t : …. …. E x a m p l e : Th e p a r a l l e l c a l c u l a t o r C r e a t e 1 0 thr e a ds : e a c h c a l c ul a t e s a nd pr i n ts m ul ti pl i c a ti o n t a bl e s be tw e e n 1 - 10 43 public class Calculator implements Runnable { private int number; public Calculator( int number) { this.number = number; } public void run () { // Override run() for (int i = 1; i <= 10; i++){ System. out.printf (\"%s: %d * %d = %d \\ n\", Thread.currentThread (). getName (), number,i,i *number); }}} public static void main(String[] args ) { //Launch 10 threads that make the operation with a different number for (int i=1; i <= 10; i++){ Calculator calculator = new Calculator( i ); Thread thread = new Thread(calculator); thread. start (); }} Sa mp l e o u t p u t : …. No te th a t th r e a d s d o n o t a p p e a r in t h e o r d e r t h e y we r e c r e a t e d … …. J a v a Th r e a d s : s o m e k e y p o i n t s E v e r y J a v a pr o g r a m ha s a t l e a s t o ne e x e c uti o n thr e a d • Fi r s t e x e c u t i on t h r e a d c a l l s main() E a c h c a l l t o start () m e tho d o f a Thread o bj e c t c r e a t e s a n a c tua l e x e c uti o n thr e a d P r o g r a m e nds whe n a l l thr e a ds ( no n - da e m o n thr e a ds ) fi ni s h. T hr e a ds c a n c o n ti nue t o r un e v e n i f main() r e tur ns C r e a ti ng a Thread o bj e c t do e s no t s t a r t a thr e a d C a l l i ng run() do e s n’t s t a r t thr e a d e i the r ( ne e d t o c a l l s t a r t( ) ! ) 47 ( S o m e ) U s e f u l Th r e a d a t t r i b u t e s a n d m e t h o d s ID : t h i s a t t r i b u t e d e n o t e s t h e u n i q u e i d e n t i f i e r f o r e a c h T h r e a d . Thread t = Thread.currentThread (); // get the current thread System.out.println (“Thread ID” + t.getId ()); // prints the current ID . Nam e : t h i s a t t r i b u t e d e n o t e s t h e n a m e o f T h r e a d . t.setName ( “PP“ + 2022); // can be modified like this Pr i or i t y : d e n o t e s t h e p r i o r i t y o f t h e t h r e a d . T h r e a d s c a n h a v e a p r i o r i t y b e t w e e n 1 a n d 10: J V M u s e s t h e p r i o r i t y o f t h r e a d s t o s e l e c t t h e o n e t h a t u s e s t h e C PU a t e a c h m o m e n t t.setPriority ( Thread. MAX_PRIORITY ); // updates the thread’s priority St a t u s : d e n o t e s t h e s t a t u s t h e t h r e a d i s i n : o n e o f n e w , r u n n a b l e , b l o c k e d , w a i t i n g , t i m e w a i t i n g , o r t e r m i n a t e d (w e w i l l di s c us s t he di f f e r e n t s t a t us e s i n m o r e de t a i l l a t e r ): if ( t.getState () == State. TERMINATED ) //check if thread’s status is terminated 48 U s i n g Th r e a d s t a t e s a n d p r i o r i t i e s 49 public static void main(String[] args ) { // Launch 10 threads to do the operation, 5 with the max // priority, 5 with the min Thread threads[] = new Thread[10]; Thread.State status[] = new Thread.State [10]; for ( int i=0; i<10; i++){ threads[ i ]= new Thread( new Calculator( i )); if ((i%2)==0){ threads[ i ]. setPriority ( Thread. MAX_PRIORITY ); } else { threads[ i ]. setPriority ( Thread. MIN_PRIORITY ); } threads[ i ]. setName ( \"Thread \" + i ); } ... Co n t ’ d o n n e x t s l i d e 50 try ( FileWriter file = new FileWriter ( \". \\ \\ data \\ \\ log.txt\" ); PrintWriter pw = new PrintWriter (file);){ for ( int i=0; i<10; i++){ pw.println ( \"Main : Status of Thread \" + i + \" : \" +threads[ i ]. getState ()); status[ i ]=threads[ i ]. getState (); threads[ i ].start(); } boolean finish= false ; while (!finish) { for ( int i=0; i<10; i++){ if (threads[ i ]. getState ()!=status[ i ]) { writeThreadInfo (pw, threads[ i ],status[ i ]); status[ i ]=threads[ i ]. getState (); } } ... Co n t ’ d o n n e x t s l i d e 51 ... finish= true ; for ( int i=0; i<10; i++){ finish=finish &&(threads[ i ]. getState ()== State. TERMINATED ); } }//end while } catch ( IOException e) { e.printStackTrace (); } U s i n g Th r e a d s t a t e s a n d p r i o r i t i e s Th r e a d p r i o r i t i e s : O u t p u t 52 Th r e a d p r i o r i t i e s : O b s e r v a t i o n s 53 Pa r a l l e l c a l c u l a t o r s p e r f o r m I / O ( pr i n t l n ) à mo s t t hr e ads t y pic ally blo c k e d Hi gh - pr i o r i t y t hr e a ds t y pi c a l l y f i ni s h be f o r e l o w - pr i o r i t y t hr e a d Join in g T h r ead s 5455 Co mmo n s c e na r i o : • Ma i n t hr e a d s t a r t s ( f o r k s , s p a w n s ) s e v e r a l wo r k er thr eads ... • ... t h e n n e e d s t o w a i t f o r t h e w o r k e r ’ s r e s u l t s t o b e a v a i l a b l e Pr e v i o u s l y : • Bu s y w a i t i n g by spi nni ng (l o o p i n g ) u n t i l e a c h w o r k e r ’ s st a t e i s TERMINATED • Bo i l e r p l a t e c o d e • In e f f i c i e n t ! M a i n t h r e a d s p i n n i n g u s e s u p CP U t i m e ... finish = false ; While (!finish) { ... finish = true ; for ( int i=0; i<10; i++){ finish = finish && (threads[ i ]. getState () == State. TERMINATED ); } } Re s u l t s , p l e a s e ! 56 Fr o m main t hr e ad’ s pe r s pe c t iv e : • In s t e a d o f b u s i l y w a i t i n g f o r t h e r e s u l t s ( r e a d y? n o w r e a d y? n o w ? ) . . . • ... g o t o s l e e p a n d b e w o k e n u p o n c e t h e r e s u l t s a r e r e a d y Pe r fo r m a n c e t ra d e - of f : • J o i n ( s l e e p , w a k e u p ) t y p i c a l l y i n c u r s c o n t e x t s w i t c h o v e r h e a d • If w o r k e r t h r e a d s a r e s h o r t - l i v e d , b u s y w a i t i n g m a y p e r f o r m b e t t e r • La t e r i n th e c ou r s e : SpinLock Q ue s t i o n: I s j o i ni ng threads[0] , . . . , threads[9] op t i m a l ? ... for ( int i=0; i<10; i++) { threads[i] .join() ; // May throw InterruptedException } Wa ke m e u p w h e n w o r k i s d o n e 60 Ex c e p t i on s i n a s i n g l e - th r e a d e d ( i . e . s e q u e n ti a l ) p r o g r a m t e r m i n a t e t h e p r o g r a m , i f n o t c a u g h t Wh a t i f a w or k e r th r e a d th r o w s a n ex c e p t i o n ? • Ex c e p t io n is ( u s u ally ) s h o w n o n c o n s o le • Be h a v i o u r o f t h r e a d . j o i n () i s u n a f f e c t e d • à Ma i n t hr e a d m a y no t be a w a r e o f a n ex c e p t i o n i n s i d e a w o r k e r t h r e a d public class Worker extends Thread { Data result ; ... @ Override public void run () { ... // someObject could be null à NPE result = calculate ( someObject . getData ()); } } public class Main { public static void main ( String [] args ) { Worker worker = new Worker (...); worker . start (); worker . join (); // Unaffected println ( worker . result ); // Another NPE } } Ex c e p t i o nsSe t t i n g Un c au g h tE x c ep tio n Han d ler s Imple me n t ing UncaughtExceptionHandler in t e r f ac e allo w s u s t o ha ndl e unc he c k e d e x c e p t i o ns Th r e e o p tio n s : • Re g i s t e r e x c e p t i o n h a n d l e r w i t h Thread ob j e c t • Re g i s t e r e x c e p t i o n h a n d l e r w i t h ThreadGroup ob j e c t • Us e setDefaultUncaughtExceptionHandler () to r e g i s t e r h a n d l e r f o r all t h r e ad s H a n d l e r c a n t h e n r e c o r d w h i c h t h r e a d s t e r m i n a t e d e x c e p t i o n a l l y , o r r e s t a r t t h e m , o r . . . 61 Un c au g h tE x c ep tio n Han d ler s : E x am p le 62 public class ExceptionHandler implements UncaughtExceptionHandler { public Set < Thread > threads = new HashSet <>(); @ Override public void uncaughtException ( Thread thread , Throwable throwable ) { println (\" An exception has been captured \"); println ( thread . getName ()); println ( throwable . getMessage ()); ... threads . add ( thread ); } } public class Main { public static void main ( String [] args ) { ... ExceptionHandler handler = new ExceptionHandler (); thread . setUncaughtExceptionHandler ( handler ); ... thread . join (); if ( handler . threads . contains ( thread )) { // bad } else { // good } } } S h a r e d R e s o u r ce s 64 B a t t l e o f t h e Th r e a d s T w o t h r e a d s “f i g h t i n g ” o v e r c o n s o l e One w r i t e s s t a r s ; t he o t he r de l e t e s s t a r s (i n pa r a l l e l ) Wh o w i l l w i n ? 6566 public class BackAndForth { public static void main(String args []){ System. out.print (\"********************\"); System. out.flush (); new Forth(). start() ; new Back(). start() ; }} public class Forth extends Thread { public void run(){ while(true){ try { sleep (( int )( Math.random ()*1000)); } catch ( InterruptedException e) { return; } printStars (); System. out.flush (); } } public void printStars (){ System. out.print (\"*****\"); } } class Back extends Forth{ @Override public void printStars (){ System. out.print (\" \\ b \\ b \\ b \\ b \\ b \\ b \\ b \\ b \\ b \\ b\"); } } Tw o t h r e a d “ f i g h t i n g ” o v e r t h e c o n s o l e 67 Sy n c h r o n i z e d i n c r e m e n t i n g a n d d e c r e m e n t i n g public class Counter implements Runnable { public int ticks = - 1 ; private Cell cell ; private int delta ; private int maxTicks ; Counter ( Cell cell , int delta , int maxTicks ) { this . cell = cell ; this . delta = delta ; this . maxTicks = maxTicks ; } @ Override public void run () { ticks = 0 ; while ( ticks < maxTicks ) { cell . inc ( delta ); ++ ticks ; } } } public class Main { public static void main ( String [] args ) { ... Counter up = new Counter ( cell , 1 , MAX_TICKS ); Counter down = new Counter ( cell , - 1 , MAX_TICKS ); Thread upWorker = new Thread ( up ); Thread downWorker = new Thread ( down ); upWorker . start (); downWorker . start (); upWorker . join (); downWorker . join (); System . out . printf (“ Cell value: %d \\ n \", cell.get () ); } } public class Cell { private long value ; ... public void inc ( long delta ) { this . value += delta ; } } Cell value: - 799 Cell value: 667088 Cell value: - 281765 Cell value: 147854 ... Up d a tin g s h ar ed s t a t e in p ar allel Single s t a t e me n t in Lo ngCe ll.inc this.value += delta; is e x e c u t e d in s e v e r al s mall s t e p s Ma n y d i f f e r e n t in t e r le a vin gs po s s i bl e Inc luding ba d in t e r le a vin gs in w h ic h s t a t e d a t a is u s e d 68 // relevant bytecode ALOAD 0 DUP GETFIELD LongCell.value LLOAD 1 LADD PUTFIELD LongCell.value P r e v i e w : Th r e a d s S a f e t y H a z a r d Th r e ad s a f e ty • im p lie s p r o g r am s a f e t y • ty p i c a l l y r e f e r s t o “ no t hi ng ba d e v e r ha ppe ns ” , i n a n y p o s s i b l e in t e r le a vin g ( a sa f e t y pr o pe r t y ) Th is is o f t e n h ar d t o ac h ie v e an d r e q u ir e s c ar e f u l d e s ign w ith p ar alle l ex e c u t i o n i n m i n d f ro m t h e b e g i n n i n g 70 P r e v i e w : Th r e a d s Li v e n e s s Haz ar d T h r e a d s a f e t y m e a n s : “n o t h i n g b a d h a p p e n s ” Liv e ne s s me ans : “ ev e nt u a l l y s o m et h i n g g o o d h a p p e n s ” En d l e s s l oop s a r e a n e x a m p l e of l i v e n e s s h a z a r d s i n s e q u e n t i a l pr o g r a ms Th r e ad s m ak e s liv e n e s s h az ar d s m o r e f r e q u e n t: • If ThreadA ho l ds a r e so ur c e ( e . g . a f i l e ha ndl e ) e x c l usi v e l y … • ... t h e n ThreadB mi g h t b e w a i ti n g f or th a t r e s ou r c e f or e v e r 71 (W ha t do e s “ ho l ds e x c l us i v e l y ” m e a n i n J a v a ? à so o n ) P r e v i e w : Th r e a d s P e r f o r m a n c e H a z a r d Liv e ne s s me ans t ha t pr o gr e s s wi l l be ma de ( a t s o me po i n t ) B u t i n ( p a r a l l e l ) p r o g r a m m i n g , w e ’ r e i n t e r e s t e d i n fa s t pr o g r e s s Mu l ti th r e a d e d a p p l i c a ti on s i n tr od u c e p ot e n ti a l p e r f or m a n c e bo t t l e ne c k s : • Fr e q u e n t c o n t e x t s w i t ch e s : C PU t i m e s p e n d s ch e d u l i n g v e r s u s r u n n i n g th r e a d s • Los s of l oc a l i ty ( à ne x t w e e k ) • Wit h s y n c h r o n iz a t io n ( e n f o r c in g m u t u al e x c lu s io n ) t h e r e is an ad d it io n al ov e r h e a d 72 (W ha t do e s “ s y nc hr o ni z a t i o n” m e a n i n J a v a ? à so o n ) Co rr e c t n e ss o f P a r a l l e l P r o g r a ms Ex a m p l es of sa f e t y p r o p e rt i e s we wi l l en c o u n t er in th i s co u r s e in c lu d e : • ab s e n c e of da t a ra c e s • mu tu a l ex c l u s i o n • l i n e a ri z a b i l i t y • at o m i c i t y • sc h e d u l e - d e t e rm i n i s t i c • ab s e n c e of de a dl o c k • cu s t om i n v a ri a n t s (e . g . , ag e > 15 ) To en s u r e th e pa r a l l e l pr o g r a m sa t i s f i e s su c h p r o p e rt i e s , we ne e d to c o rr e c t l y sy n c h r o n i z e th e in t e r ac t io n of pa r a l l e l th r e a d s so to ma k e su r e th e y do no t st e p on ea c h ot h e r to e s . 73 synchronized 74 Sh a r e d me mo r y i n t e r a c t i o n b e t w e e n t h r e a d s T w o o r m o r e t h r e a d s m a y r e a d / w r i t e t h e s a m e d a t a ( s h a r e d o b j e c t s , g l o b a l d a t a ) . P r o g r a m m e r r e s p o n s i b l e f o r a v o i d i n g b a d i n t e r l e a v i n g by e x p l i c i t s y n c h r o n i z a t i o n ! H o w d o w e s y n c h r o n i z e ? V i a s y n c h r o n i z a t i o n p r i m i t i v e s . I n J a v a , all o b j e c t s h a v e a n i n t e r n a l l o c k , c a l l e d i n t r i n s i c l o c k or m o n i t o r l o c k S y n c h r o n i z e d o p e r a t i o n s ( s e e n e x t ) l o c k t h e o b j e c t : w h i l e l o c k e d , n o o t h e r t h r e a d c a n s u c c e s s f u l l y l o c k t h e o b j e c t G e n e r a l l y , i f y o u a c c e s s s h a r e d m e m o r y , m a k e s u r e i t i s d o n e u n d e r a l o c k (J a v a m e m o r y m o d e l i s c o m p l i c a t e d ! ) . ( c a n a l s o u s e volatile k e y w o r d , m o r e f o r e x p e r t s w r i t i n g c o n c u r r e n t c o l l e c t i o n s ) 75 Sy n c h r o n i z e d M e t h o d s // synchronized method: locks on \"this\" object public synchronized type name(parameters) { ... } // synchronized static method: locks on the given class public static synchronized type name(parameters) { ... } A s y n c h r o n i z e d m e t h o d g r a b s t h e o b j e c t o r c l a s s ' s l o c k a t t h e s t a r t , r u n s t o c o m p l e t i o n , t h e n r e l e a s e s t h e l o c k Us e f u l f o r m e t h o d s w h o s e en ti r e bo di e s a r e cr i t i c a l s e ct i o n s (r e c a l l A l i c e a n d B o b ’ s f a r m ) , a n d t h u s s h o u l d n o t b e e n t e r e d b y m u l t i p l e th r e a d s a t th e s a me ti me . I. e . a s yn c h r o n i z e d m e t h o d i s a c r i t i c a l s e c t i o n w i t h gu a r a n t e e d mu tu a l e x c l u s i on . 7677 Sy n c h r o n i z e d i n c r e m e n t i n g a n d d e c r e m e n t i n g public class Counter implements Runnable { public int ticks = - 1 ; private Cell cell ; private int delta ; private int maxTicks ; Counter ( Cell cell , int delta , int maxTicks ) { this . cell = cell ; this . delta = delta ; this . maxTicks = maxTicks ; } @ Override public void run () { ticks = 0 ; while ( ticks < maxTicks ) { cell . inc ( delta ); ++ ticks ; } } } public class Main { public static void main ( String [] args ) { ... Counter up = new Counter ( cell , 1 , MAX_TICKS ); Counter down = new Counter ( cell , - 1 , MAX_TICKS ); Thread upWorker = new Thread ( up ); Thread downWorker = new Thread ( down ); upWorker . start (); downWorker . start (); upWorker . join (); downWorker . join (); System . out . printf (“ Cell value: %d \\ n \", cell.get () ); } } public class Cell { private long value ; ... public synchronized void inc ( long delta ) { this . value += delta ; } } Cell value: 0 Cell value: 0 Cell value: 0 Cell value: 0 ... Sy n c h r o n i z e d B l o c k s // synchronized block: uses the given object as a lock synchronized ( ob j e ct ) { st a te m e n t ( s ) ; // critical sections } A s y n c h r o n i z e d m e t h o d , e . g . is s y n t ac t ic s u g ar f o r 79 public synchronized void inc ( long delta ) { this . value += delta ; } public void inc ( long delta ) { synchronized (this) { this . value += delta ; } } Sy n c h r o n i z e d B l o c k s // synchronized block: uses the given object as a lock synchronized ( ob j e ct ) { st a te m e n t ( s ) ; // critical sections } En f or c e s mut ual e x c lus io n w .r . t t o s o me o bj e c t Ev e r y J a v a o b j e c t c a n act as a lo c k f o r c o n c u r r e n c y : A t hr e a d T 1 c a n a s k t o r u n a b l o c k o f c o d e , s y n c h r o n i z e d o n a gi v en o b j ec t O . • I f n o o t h e r t h r e a d h a s l o c k e d O , t h e n T 1 lo c k s t h e o b je c t an d p r o c e e d s . • I f a n o t h e r t h r e a d T 2 ha s a l r e a dy l o c k e d O , t h e n T 1 be c o m e s bl o c k e d an d m u s t w ait u n t il T 1 is f in is h e d w it h O ( t h a t i s , u n l o c k s O ) . T h e n , T 1 is w o k e n u p , a n d c a n p r o c e e d . 80 Pr e v i e w : L o c k s I n J a v a , all ob j e c t s h a v e a n in t e r nal l o c k , c a l l e d i n t r i n s i c l o c k o r m o n i t o r l o c k , w h i c h a r e u s e d t o i m p l e m e n t synchronized Ja v a als o o f f e r s e x t e r n al lo c k s (e . g. in p ac k ag e java.util.concurrent.locks ) • Le s s e a s y t o u s e • B u t s u p p o r t m o r e s o p h i s t i c a t e d l o c k i n g i d i o m s , e . g . f o r r e a d e r - wri t e r sc e na r i o s 81 Lo c k s A r e R e c u r s i v e ( R e e n t r a n t ) public class Foo { public void synchronized f() { … } public void synchronized g() { … f(); … } } Foo foo = new Foo(); synchronized(foo) { … synchronized (foo) { … } … } 82 A t hr e a d c a n r e que s t t o l o ck a n o bj e ct i t ha s a l r e a dy l o ck e d 83 public class SynchronizedCounter { private int c = 0; public synchronized void increment() { c++ ; } public synchronized void decrement() { c -- ; } public synchronized int value() { return c; } } Ex a m pl e s: S ync hr o ni z a t i o n gr a nul a r i t y public void addName (String name) { synchronized (this) { lastName = name; nameCount ++; } nameList.add (name); // add synchronizes on nameList } Th e ad v an t ag e of no t sy n c h r o n i z i n g th e en t i r e me t h o d is ef f i c i e n c y but ne e d to be ca r e f u l wit h co r r e c t n e s s 84 public class TwoCounters { private long c1 = 0, c2 = 0; private Object lock1 = new Object(); private Object lock2 = new Object(); public void inc1() { synchronized (lock1) { c1++; } } public void inc2() { synchronized (lock2) { c2++; } } } Ex a m pl e s: S ync hr o ni z a t i o n wi t h di f f e r e n t l o c k s Th e l oc k s a r e d i s j oi n t – allo w s fo r m o r e c o n c u r r e n c y . 85 public class Screen { private static Screen theScreen ; private Screen(){…} public static synchronized getScreen () { if ( theScreen == null) { theScreen = new Screen(); } return theScreen ; } } Ex a m pl e s: S ync hr o ni z a t i o n wi t h s t a t i c m e t ho ds Whi c h o bj e c t do e s s y nc hr o ni z e d l o c k he r e ? Wha t i f Screen i ns t a nc e s c a l l getScreen () ? In t er lea ving s : E x a mp l e s 86 c = 0 T1: synchronized (this) { 1: t1 = c; 2: t1++ 3: c = t1; } T2: synchronized (this) { 4: t2 = c; 5: t2++ 6: c = t2; } S u p p o s e w e h a v e 2 t h r e a d s , T 1 a n d T 2 , b o t h i n c r e m e n t i n g a s h a r e d c o u n t e r . I f w e u s e sy n c h r o n i z e d ( s a y o n ‘t h i s ’ o b j e c t ) , w e will g e t t h e d e s ir e d r e s u lt o f 2 b y t h e t im e b o t h t h r e ad s h a v e fin is h e d e x e cu t in g t h e ir c o d e b e lo w . F o r c o n v e n i e n c e , w e u s e l a b e l s 1 - 6 t o r e f e r t o t h e in s t r u c t io n s . T h e p o s s ib le in t e r le a v in g s / e x e c ut i o ns o f t hi s pr o g r a m a r e th a t e i th e r T 1 ru n s b e f o r e T 2 o r v i c e v e r sa . S o w e w i l l h a v e : In t e rl e a v i n g 1 : 1 2 3 4 5 6 In t e rl e a v i n g 2 : 4 5 6 1 2 3 In t er lea ving s : A n o t h e r e x a mp l e 87 c = 0 T1: synchronized (this) { 1: t1 = c; 2: t1++ 3: c = t1; } T2: 4: t2 = c; 5: t2++ 6: c = t2; Su p p o s e t h e p r o g r a mme r fo r g o t t o u s e sy n c h r o n i z e d in t h r e ad T 2. W h a t is an e x am p le o f an u n d e s ir ab le in t e r le a v in g t h a t w e ca n s e e ? A p o s s i b l y ba d i n t e r l e a v i ng is : 4 1 2 3 5 6 T h i s i n t e r l e a v i n g w i l l r e s u l t i n t h e c o u n t e r ‘ c ’ b e i n g s e t t o 1 a t t h e e n d o f t h e i n t e r l e a v i n g . In t er lea ving s : A n o t h e r e x a mp l e 89 c = 0 T1: synchronized (this) { 1: t1 = c; 2: t1++ 3: c = t1; } T2: synchronized (p) { 4: t2 = c; 5: t2++ 6: c = t2; } S u p p o s e t h e p r o g r a m m e r n o w u s e s s y n c h r o n i z e d i n t h r e a d T 2 b u t n o t o n ‘t h i s ’ , b u t s a y a n o t h e r o b j e c t ‘p ’ . D o e s t h i s p r e v e n t th e b a d i n t e rl e a v i n g w e j u s t sa w ? N o , t h e b a d i n t e r l e a v i n g : 4 1 2 3 5 6 c a n s t i l l h a p p e n b e c a u s e ‘p ’ a n d ‘t h i s ’ a r e d i f f e r e n t o b j e c t s . Sy n c h r o n i z e d a n d E x c e p t i o n s 90 public void foo() { synchronized (this) { longComputation (); // say this takes a while… divisionbyZero (); // this throws an exception.. someOtherCode (); // something else } } W h a t h a p p e n s i f i n t h e m i d d l e o f a s y n c h r o n i z e d b l o c k , a n e x c e p t i o n t r i g g e r s ? In th i s ca s e , af t e r longComputation () co m p l e t e s , an ex c e p t i o n is th r o w n . Wh a t ha ppe ns th e n is as fo l l o w s . Fi r s t , th e sy n c h r o n i z e d on th e ‘t h i s ’ ob j e ct will be re l e a s e d -- as if th e sy n c h r o n i z e d sc o p e en d s ri g h t at th e po i n t wh e r e th e ex c e p t i o n is th r o w n . Se c o n d , th e ex c e p t i o n is ca u g h t , th e n th e ex c e p t i o n ha ndl e r is ex e c u t e d . If th e r e is no ex c e p t i o n ha ndl e r , as in ou r ex a m p l e , th e n th e ex c e p t i o n is pr o pa g a t e d ba c k do w n to th e ca l l e r of foo() as us ua l . No t e th a t th e co d e someOtherCode () will NO T be ex e c u t e d in th i s ca s e . Al s o no t e th a t an y si d e ef f e c t s of longComputation () ar e NO T re v e r te d , th e y do ta k e ef f e c t , ev e n if ex c e p t i o n s ar e th r o w n . Sy n c h r o n i z e d a n d E x c e p t i o n s ( o p t i o n a l ) 91 class test { public void foo() { int pp; synchronized (this) { pp = 1; } } } I f y o u w a n t t o k n o w m o r e o n e x a c t l y h o w s y n c h r o n i z e d / e x c e p t i o n s i n t e r a c t i n t h e b y t e c o d e , y o u c a n co m p i l e t h e f o l l o w i n g co d e : Th e n y ou c a n c a l l t h e c om m a n d : ja v a p – c t e s t ( o u r o l d f r i e n d ) Th i s wi l l sh o w yo u th e 14 by t e c o d e s fo r th i s met h o d fo o ( ) . Yo u ca n th e n se e ex a c t l y ho w sy n c h r o n i z e d is handle d (e . g . , vi a mo n i t o r e n t e r / mo n i t o r e x i t ) and se e th e 2 ex c e p t i o n ta b l e s ge n e r a t e d in th e ca s e of ex c e p t i o n s ins ide sy n c h r o n i z e d . Th i s is no t so me t h i n g th a t wi l l be ex a m i n e d , it is fo r yo u r ow n in f o r m a t io n wh en yo u ne e d to de bug th e co d e so me t i me s . Yo u s h o u l d k n o w w h a t h a p p e n s w i t h s y n c h r o n i z e d / e x c e p t i o n s t h o u g h a s o u t l i n e d o n t h e p r e v i o u s s l i d e . (n o t e x a m r e l e v e n t) 92 Ho w is sy n c h r o n i z e d ac tu ally im p lem en t ed ? Re c a l l the na ti v e la y e r we br i e fl y di s c us s e d in Le c tur e 2 . I n t e r na l l y , the JV M i m pl e m e n ts s y nc hr o ni z e d by us i ng na ti v e , o pe r a ti ng sy s t e m pr i m i ti v e s ( a nd lo w le v e l a r c hi t e c tur e i ns tr uc ti o ns , sa y In t e l ’ s x 86 e . g . c o m pa r e - a nd - s w a p, or IB M Po w e r ’ s LL/ S C ) . T hi s m e a ns the i m pl e m e n t a ti o n of s y nc hr o ni z e d wi l l lo o k di f f e r e n t on di f f e r e n t O S / a r c hi t e c tur e c o m bi na ti o ns . If yo u r e m e m be r o ur in f o rmal m utua l e x c l us i o n, we e s s e n ti a l l y pr o v i de d an i m pl e m e n t a ti o n of sy n c h r o n i z e d tha t wo r ks fo r 2 thr e a ds (A l i ce a nd B o b) tha t re l i e s o nl y s ha r e d r e a ds a nd wr i t e s to 3 v a r i a bl e s ( fl a g 1 , fl a g 2 , a nd tur n) In la t e r l e c tur e s we wi l l se e the i ns tr uc ti o ns tha t ar e us e d to i m pl e m e n t s y nc hr o ni z e d . (p r e v i e w ) Fe w H i s t o r i c N o t e s : O b j e c t s / M o n i t o r s 93 1960 ’s - Si m ul a 67 in t r o d u c e s th e co n c e p t of ob j ec t s - by Ol e - Jo ha n Da h l an d Kr i s t e n Ny g a a r d 1971 – Id e a s ar o u n d mon i t or co n c e p t di s c us s e d by Pe r Br i n c h Ha n s en / T on y Hoa r e/ Ed s g e r Di j k s t r a 1972 - Pr o p o s e s fi r s t mon i t or no t a t i o n, in f lu e n c e d by Si m ul a 67 ’s cl a s s e s – by Pe r Br i n c h Ha n s en , la t e r re f i n e d by To n y Hoa r e 1970 ’s - Sm a l l t a l k in t r o d u c e s ob j ec t or i en t ed pr o g r a m m i ng (O O P ) – by Al a n Ka y an d Xe r o x PA R C 1985 – Ei f f e l : OOP + De s i g n - by - co n t r a c t – by Be r t r a n d Me y e r 1985 – C+ + : by Bj a r n e St r o us t rup 1995 – Ja v a : by Ja m e s Go s l i n g an d Sun Mi c r o s y s t e m s … also bo r r o w e d th e co n c e p t of mon i t or s . Ma n y mor e fo l l o w : Ja v a Sc r i p t , Sc a l a , Ko t l i n , et c … (n o t e x a m r e l e v e n t) Fe w H i s t o r i c N o t e s : M e m o r y M o d e l s 94 Ja v a se m a n ti c s = + st a t e m e n t se m a n ti c s (unde r si n g l e - th r e a d e d ex e c u t i o n ) + me mo r y mo d e l (ho w th r e a d s in t e r act th r o u g h me mo r y ) Ja v a’ s 1995 me mo r y mo d e l is se e n as • fir s t se ri o u s at t e m p t fo r a po pul a r lan g u ag e (C /C + + si m p l y ha d no ne ) • to o va g u e • unc l e a r if co d e wa s ev e r co r r e c t • re d u c e d po t e n t i a l fo r co m p i l e / r u n t i m e op t i m i z a t i on s • une x pe c t e d be ha v i o r in pr a c t i c e , e . g . fin al fie ld s ch an g in g th e i r va l u e s 2004 : Ne w , im p r o v e d Ja v a me mo r y mo d e l ta k e s ef f e c t 2011 : C 11 /C + + 11 me mo r y mo d e l ta k e s ef f e c t • mo r e co m p l e x (a nd po w e r f ul ) th a n Ja v a’ s • di f f e r e n t le v e ls of ho w “w e a k ” me mo r y ma y be : fe w e r gu a r a n t e e s fo r de v e l o pe r s me a n s mo r e op t i m i z a t i on po t e n t i a l fo r co m p i l e r s an d ha r dw a r e C/ C+ +’ s me mo r y mo d e l is cu r r e n t ly unde r re v i s i o n : so u n d n e ss an d pe r f o r m a nc e is s u e s in sp e c i f i c si tu a ti o n s (n o t e x a m r e l e v e n t) Wait , Notify , NotifyAll 9596 Pr o d u ce r a n d c o n s u m e r ru n i n d e f i n i t e l y Pr o d u ce r p u t s i t e m s i n t o a sh a r e d b u f f e r , c o n s u m e r t a k e s t h e m o u t F o r s i m p l i c i t y , b u f f e r i s u n b o u n d e d ( h a s n o c a p a c i t y l i m i t ) ; p r o d u c i n g is alw a y s p o s s ib le B u t c o n s u m p t i o n o n l y p o s s i b l e i f b u f f e r i s n ’t e m p t y Pr o d u c e r - Co n su me r shared bufferproducer consumer pr o duc e r a dds i t e m s c o ns um e r ta k e s i t e m s ... 97 public class UnboundedBuffer { // Internal implementation could be a standard collection, // or a manually - maintained array or linked - list public boolean isEmpty () { ... } public void add(long value) { ... } public long remove() { ... } } public class Consumer extends Thread { private final UnboundedBuffer buffer; ... public void run() { while (true) { while ( buffer.isEmpty ()); // Spin until item available performLongRunningComputation ( buffer.remove ()); } } } Pr o d u c e r - Co n su me r: v 1 public class Producer extends Thread { private final UnboundedBuffer buffer; ... public void run() { ... while (true) { prime = computeNextPrime (prime); buffer.add (prime); } } } public static void main(String[] args ) { UnboundedBuffer buffer = new UnboundedBuffer (); Producer producer = new Producer(buffer); producer.start (); Consumer[] consumers = new Consumer[3]; for ( int i = 0; i < consumers.length ; ++ i ) { consumers[ i ] = new Consumer( i , buffer); consumers[ i ].start(); } } Ca n y o u s e e a n y pr o bl e ms ? 98 Pr o d u c e r - Co n su me r: v 1 – Ba d In t er lea ving s Pr o b l e m : buf f e r c o ul d be em pt i ed b e t w een isEmpty () an d remove() public class Producer extends Thread { private final UnboundedBuffer buffer; ... public void run() { ... while (true) { prime = computeNextPrime (prime); buffer.add (prime); } } } public class Consumer extends Thread { private final UnboundedBuffer buffer; ... public void run() { while (true) { while ( buffer.isEmpty ()); // Spin until item available performLongRunningComputation ( buffer.remove ()); } } } Pr o b l e m : buf f e r o pe r a t i o ns ( add() , remove() ) m i g h t b e i n t e r l e a v e d o n by t e c o d e l e v e l à buf f e r ’ s i n t e r na l st a t e m i g h t g e t c o r r u p t e d 99 Pr o d u c e r - Co n su me r: v 2 public class Consumer extends Thread { ... public void run() { long prime; while (true) { synchronize (buffer) { while ( buffer.isEmpty ()); prime = buffer.remove (); } performLongRunningComputation (prime); } } } public class Producer extends Thread { ... public void run() { ... while (true) { prime = computeNextPrime (prime); synchronize (buffer) { buffer.add (prime); } } } } Ad d e d synchronize(buffer) bl o c k s a r o und o pe r a t i o ns o n buf f e r t o en f o r c e mut ual e x cl usi o n in t h e cr i t i c al se ct i o ns Ca n y o u s e e a n y ne w pr o bl e ms ? 100 Pr o d u c e r - Co n su me r: v 2 – De ad lo ck public class Consumer extends Thread { ... public void run() { long prime; while (true) { synchronize (buffer) { while ( buffer.isEmpty ()); prime = buffer.remove (); } performLongRunningComputation (prime); } } } public class Producer extends Thread { ... public void run() { ... while (true) { prime = computeNextPrime (prime); synchronize (buffer) { buffer.add (prime); } } } } Pr o b l e m : 1. Co n s u m e r l o c k s b u f f e r ( synchronize (buffer) ) 2. Co n s u m e r s p i n s o n isEmpty () , i . e . w a i t s f o r p r o d u c e r t o a d d i t e m 3. Pr o d u ce r w a i t s f o r l o ck t o b e c o m e a v a i l a b l e ( synchronize (buffer) ) 4. à De a d l o ck ! Co n s u m e r a n d p r o d u c e r wa i t f o r e a c h o t h e r ; n o p r og r e s s 101 Pr o d u c e r - Co n su me r: v 3 public class Consumer extends Thread { ... public void run() { long prime; while (true) { synchronize (buffer) { while ( buffer.isEmpty ()) buffer.wait (); prime = buffer.remove (); } performLongRunningComputation (prime); } } } public class Producer extends Thread { ... public void run() { ... while (true) { prime = computeNextPrime (prime); synchronize (buffer) { buffer.add (prime); buffer.notifyAll (); } } } } buffer.wait (): 1. Co n s u m e r t h r e a d g o e s t o s l e e p (s t a t u s N O T R UN N A BL E ) … 2. … an d g iv e s u p b u f f e r ’ s lo c k buffer.notifyAll (): 1. Al l t hr e a ds w a i t i ng f o r buf f e r ’ s l o c k a r e w o k e n up (s t a t u s R UN N A BL E ) Be y o n d s yn c h r o n i z a t i o n : W a i t , N o t i f y , No t i f y A l l wa i t ( ) r e l e a s e s o b j e c t l o c k , t h r e a d w a i t s o n i n t e rn a l q u e u e no t i f y ( ) wa k e s t h e h i g h e s t - p ri o ri t y t h r e a d c l o s e s t t o f r o n t o f o b j e c t ’ s i n t e rn a l q u e u e no t i f y A l l () wa k e s u p a l l wa i t i n g t h r e a d s • T hr e a ds no n - de t e r m i ni s t i c a l l y c o m pe t e f o r a c c e s s t o o bj e c t • M a y no t be f a i r ( l o w - pr i o r i t y t hr e a ds m a y ne v e r g e t a c c e s s ) Ma y on l y b e c a l l e d w h e n ob j e ct i s l ock e d (e . g . i n s i d e synchronize ) 102103 Wh y do w e ne e d l o o p a nd s ync hr o ni z e d whe n w e us e w a i t / no t i f y ? public void consume() { if (!consumable()) { wait(); } // release lock and wait for resource … // have exclusive access to resource, can consume } public void produce() { … // do something to make consumable() return true notifyAll (); // tell waiting threads to try consuming // can also call notify() to notify one thread at a time } C A S E I : L e t s c o ns i de r t he c a s e w he r e w e do N O T ha v e a l o o p ( w e us e a n ‘i f ’ i ns t e a d) a nd do N O T ha v e s y nc hr o ni z e d : s e e c o de be l o w . Fo r a mo me n t , le t ’ s a s s um e t ha t ba d i n t e r l e a v i ng s on th e by t e c o d e le v e l a r e n’t a l r e a dy a pr o bl e m . A r e m a i ni ng pr o bl e m is t ha t we ca n ha v e a s i t ua t i o n w he r e t he c o ns um e r c he c k s if it ca n pr o c e e d a nd c o ns um a bl e ( ) r e t ur ns fa l s e . Ri g h t be f o r e c a l l i ng wa i t ( ) , pr o duc e ( ) no w c o m pl e t e s s uc c e s s f ul l y , a nd c o ns um e r e s um e s a nd go e s to wa i t ( ) . If pr o duc e ne v e r r uns ag ain , c o ns um e wi l l be bl o c k e d fo r e v e r ev e n t ho ug h t he r e is s o m e t hi ng to c o ns um e (i . e . c o ns um a bl e ( ) w o ul d r e t ur n t r ue ) . Not e t ha t in Ja v a , if wa i t ( ) is ca l l e d w i t ho ut s y nc hr o ni z e d on t ha t o bj e c t , an ex c e p t i o n wi l l be t hr o w n . Ho w e v er , ev e n if it wa s no t t hr o w n s o m e ho w , t he a bo v e ba d s c e na r i o ca n ha ppe n . 105 Wh y do w e ne e d l o o p a nd s ync hr o ni z e d whe n w e us e w a i t / no t i f y ? public synchronized void consume() { if (!consumable()) { wait(); } // release lock and wait for resource … // have exclusive access to resource, can consume } public synchronized void produce() { … // do something to make consumable() return true notifyAll (); // tell waiting threads to try consuming // can also call notify() to notify one thread at a time } C A S E I I : L e t us no w c o ns i de r t he c a s e w he r e w e ha v e s y nc hr o ni z e d but s t i l l no l o o p , w e ha v e a n if . T he pr o bl e m he r e is t ha t t he c o ns um e r ca n r e t ur n fr o m a wa i t ( ) ca l l fo r r e a s o ns o t he r t ha n be i ng no t i f i e d (e . g . due to a t hr e a d i n t e r r up t ) , or be c a us e di f f e r e n t c o ns um e r ’ s ha v e di f f e r e n t c o ndi t i o ns . If we do no t r e c he c k t he c o ns um a bl e ( ) c o ndi t i o n upo n r e t ur n fr o m wa i t , we do no t k no w wh y t he t hr e a d r e t ur ne d fr o m wa i t ( ) . T hi s is t he re a s o n wh y it is st r o n g l y re c o m m e n d e d to us e a w hi l e lo o p a r o und t he c o ndi t i o n, i ns t e a d of j us t an if st a te m e n t . class Stack { LinkedList list = new LinkedList (); public synchronized void push(Object x) { synchronized(list) { list.addLast ( x ); notify() ; } } public synchronized Object pop() { synchronized(list) { if( list.size () <= 0 ) wait() ; return list.removeLast (); } } } Re l e a s e s l o c k o n this ob j e ct b u t no t l o c k o n list ; a p u s h f r o m a n o t h e r t h r e a d w i l l de a dl o c k Po t e n t i a l l y bl o c k i ng c o de w i t hi n a s y nc hr o ni z e d m e t ho d ca n lead to de a dl o c k Ne s t e d L o ck o u t P r o b l e m P r e v e n t i n g t h e p r o b l e m : N o b l o c k i n g c o d e / c a l l s i n s y n c h r o n i z e d m e t h o d s , o r p r o v i d e so m e n o n - sy n c h r o n i z e d m e t h o d o f t h e b l o c k i n g o b j e c t . N o s i m p l e s o l u t i o n t h a t w o rk s f o r a l l p r o g r a m m i n g s i t u a t i o n s . 106 Th r e a d s t a t e m o d e l i n J a v a ( r e p e t i t i o n ) 108 ht t p : / / p e r v a s i v e 2 . m o r s e l l i . u n i m o . i t / ~ n i c o l a / c o u r s e s / I n g e g n e r i a D e l S o f t w a r e / j a v a / J 5 e _ m u l t i t h r e a d i n g . ht m l Th r e a d S t a t e s : S u m m a r y T hr e a d is cr ea t ed w he n an o bj e c t de r i v e d fr o m t he T hr e a d clas s is cr ea t ed . At t hi s po i n t , t he t hr e a d is no t e x e c ut a bl e , it is in a ne w st a te . O nc e t he start m e t ho d is c a l l e d, t he t hr e a d be c o m e s e l i g i bl e fo r e x e c ut i o n by t he s c he dul e r . If t he t hr e a d ca l l s t he wait m e t ho d in an O bj e c t , or ca l l s t he join m e t ho d in a no t he r t hr e a d o bj e c t , t he t hr e a d be c o m e s no t r unna bl e a nd no l o ng e r e l i g i bl e fo r e x e c ut i o n . It be c o m e s e x e c ut a bl e as a r e s ul t of an as s o cia t ed notify m e t ho d be i ng ca l l e d by a no t he r t hr e a d, or if t he t hr e a d wi t h w hi c h it ha s r e que s t e d a j o i n, be c o m e s t e r m i na t e d . A t hr e a d en t er s t he t e r m i na t e d st a te , e i t he r as a r e s ul t of t he r un m e t ho d e x i t i ng ( no r m a l l y , or as a r e s ul t of an unha ndl e d e x c e p t i o n) or be c a us e its de s t r o y m e t ho d ha s be e n ca l l e d . In t he la t t er ca s e , t he t hr e a d is a br up t l y mo v e d to t he t e r m i na t e d st a te a nd do e s no t ha v e t he o ppo r t uni t y to e x e c ut e an y f i na l l y c l a us e s as s o cia t ed wi t h its e x e c ut i o n ; it ma y lea v e o t he r o bj e c t s lo ck ed . 109","libVersion":"0.3.1","langs":""}